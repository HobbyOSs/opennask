/* -*- c -*- This Bison file was machine-generated by BNFC */

/* Generate header file for lexer. */
%defines "Bison.H"

/* Reentrant parser */
%pure_parser
  /* From Bison 2.3b (2008): %define api.pure full */
%lex-param   { yyscan_t scanner }
%parse-param { yyscan_t scanner }

/* Turn on line/column tracking in the nask_lloc structure: */
%locations

/* Argument to the parser to be filled with the parsed tree. */
%parse-param { YYSTYPE *result }

%{
/* Begin C preamble code */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "Absyn.H"

#define YYMAXDEPTH 10000000

/* The type yyscan_t is defined by flex, but we need it in the parser already. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

typedef struct yy_buffer_state *YY_BUFFER_STATE;
extern YY_BUFFER_STATE nask__scan_string(const char *str, yyscan_t scanner);
extern void nask__delete_buffer(YY_BUFFER_STATE buf, yyscan_t scanner);

extern void nask_lex_destroy(yyscan_t scanner);
extern char* nask_get_text(yyscan_t scanner);

extern yyscan_t nask__initialize_lexer(FILE * inp);

/* End C preamble code */
%}

%union
{
  int    _int;
  char   _char;
  double _double;
  char*  _string;
  Program* program_;
  ListStatement* liststatement_;
  Statement* statement_;
  ListMnemonicArgs* listmnemonicargs_;
  MnemonicArgs* mnemonicargs_;
  Exp* exp_;
  Factor* factor_;
  ConfigType* configtype_;
  Opcode* opcode_;
}

%{
void yyerror(YYLTYPE *loc, yyscan_t scanner, YYSTYPE *result, const char *msg)
{
  fprintf(stderr, "error: %d,%d: %s at %s\n",
    loc->first_line, loc->first_column, msg, nask_get_text(scanner));
}

int yyparse(yyscan_t scanner, YYSTYPE *result);

extern int yylex(YYSTYPE *lvalp, YYLTYPE *llocp, yyscan_t scanner);
%}

%token          _ERROR_
%token          _BANGEQ       /* != */
%token          _PERCENT      /* % */
%token          _STAR         /* * */
%token          _PLUS         /* + */
%token          _COMMA        /* , */
%token          _MINUS        /* - */
%token          _SLASH        /* / */
%token          _COLON        /* : */
%token          _LT           /* < */
%token          _LDARROW      /* <= */
%token          _DEQ          /* == */
%token          _GT           /* > */
%token          _GTEQ         /* >= */
%token          _KW_AAA       /* AAA */
%token          _KW_AAD       /* AAD */
%token          _KW_AAM       /* AAM */
%token          _KW_AAS       /* AAS */
%token          _KW_ABSOLUTE  /* ABSOLUTE */
%token          _KW_ADC       /* ADC */
%token          _KW_ADD       /* ADD */
%token          _KW_ALIGN     /* ALIGN */
%token          _KW_ALIGNB    /* ALIGNB */
%token          _KW_AND       /* AND */
%token          _KW_ARPL      /* ARPL */
%token          _KW_BITS      /* BITS */
%token          _KW_BOUND     /* BOUND */
%token          _KW_BSF       /* BSF */
%token          _KW_BSR       /* BSR */
%token          _KW_BSWAP     /* BSWAP */
%token          _KW_BT        /* BT */
%token          _KW_BTC       /* BTC */
%token          _KW_BTR       /* BTR */
%token          _KW_BTS       /* BTS */
%token          _KW_CALL      /* CALL */
%token          _KW_CBW       /* CBW */
%token          _KW_CDQ       /* CDQ */
%token          _KW_CLC       /* CLC */
%token          _KW_CLD       /* CLD */
%token          _KW_CLI       /* CLI */
%token          _KW_CLTS      /* CLTS */
%token          _KW_CMC       /* CMC */
%token          _KW_CMP       /* CMP */
%token          _KW_CMPSB     /* CMPSB */
%token          _KW_CMPSD     /* CMPSD */
%token          _KW_CMPSW     /* CMPSW */
%token          _KW_CMPXCHG   /* CMPXCHG */
%token          _KW_CPUID     /* CPUID */
%token          _KW_CWD       /* CWD */
%token          _KW_CWDE      /* CWDE */
%token          _KW_DAA       /* DAA */
%token          _KW_DAS       /* DAS */
%token          _KW_DB        /* DB */
%token          _KW_DD        /* DD */
%token          _KW_DEC       /* DEC */
%token          _KW_DIV       /* DIV */
%token          _KW_DQ        /* DQ */
%token          _KW_DT        /* DT */
%token          _KW_DW        /* DW */
%token          _KW_END       /* END */
%token          _KW_ENTER     /* ENTER */
%token          _KW_EQU       /* EQU */
%token          _KW_EXTERN    /* EXTERN */
%token          _KW_F2XM1     /* F2XM1 */
%token          _KW_FABS      /* FABS */
%token          _KW_FADD      /* FADD */
%token          _KW_FADDP     /* FADDP */
%token          _KW_FBLD      /* FBLD */
%token          _KW_FBSTP     /* FBSTP */
%token          _KW_FCHS      /* FCHS */
%token          _KW_FCLEX     /* FCLEX */
%token          _KW_FCOM      /* FCOM */
%token          _KW_FCOMP     /* FCOMP */
%token          _KW_FCOMPP    /* FCOMPP */
%token          _KW_FCOS      /* FCOS */
%token          _KW_FDECSTP   /* FDECSTP */
%token          _KW_FDISI     /* FDISI */
%token          _KW_FDIV      /* FDIV */
%token          _KW_FDIVP     /* FDIVP */
%token          _KW_FDIVR     /* FDIVR */
%token          _KW_FDIVRP    /* FDIVRP */
%token          _KW_FENI      /* FENI */
%token          _KW_FFREE     /* FFREE */
%token          _KW_FIADD     /* FIADD */
%token          _KW_FICOM     /* FICOM */
%token          _KW_FICOMP    /* FICOMP */
%token          _KW_FIDIV     /* FIDIV */
%token          _KW_FIDIVR    /* FIDIVR */
%token          _KW_FILD      /* FILD */
%token          _KW_FILE      /* FILE */
%token          _KW_FIMUL     /* FIMUL */
%token          _KW_FINCSTP   /* FINCSTP */
%token          _KW_FINIT     /* FINIT */
%token          _KW_FIST      /* FIST */
%token          _KW_FISTP     /* FISTP */
%token          _KW_FISUB     /* FISUB */
%token          _KW_FISUBR    /* FISUBR */
%token          _KW_FLD       /* FLD */
%token          _KW_FLD1      /* FLD1 */
%token          _KW_FLDCW     /* FLDCW */
%token          _KW_FLDENV    /* FLDENV */
%token          _KW_FLDL2E    /* FLDL2E */
%token          _KW_FLDL2T    /* FLDL2T */
%token          _KW_FLDLG2    /* FLDLG2 */
%token          _KW_FLDLN2    /* FLDLN2 */
%token          _KW_FLDPI     /* FLDPI */
%token          _KW_FLDZ      /* FLDZ */
%token          _KW_FMUL      /* FMUL */
%token          _KW_FMULP     /* FMULP */
%token          _KW_FNCLEX    /* FNCLEX */
%token          _KW_FNDISI    /* FNDISI */
%token          _KW_FNENI     /* FNENI */
%token          _KW_FNINIT    /* FNINIT */
%token          _KW_FNOP      /* FNOP */
%token          _KW_FNSAVE    /* FNSAVE */
%token          _KW_FNSTCW    /* FNSTCW */
%token          _KW_FNSTENV   /* FNSTENV */
%token          _KW_FNSTSW    /* FNSTSW */
%token          _KW_FORMAT    /* FORMAT */
%token          _KW_FPATAN    /* FPATAN */
%token          _KW_FPREM     /* FPREM */
%token          _KW_FPREM1    /* FPREM1 */
%token          _KW_FPTAN     /* FPTAN */
%token          _KW_FRNDINT   /* FRNDINT */
%token          _KW_FRSTOR    /* FRSTOR */
%token          _KW_FSAVE     /* FSAVE */
%token          _KW_FSCALE    /* FSCALE */
%token          _KW_FSETPM    /* FSETPM */
%token          _KW_FSIN      /* FSIN */
%token          _KW_FSINCOS   /* FSINCOS */
%token          _KW_FSQRT     /* FSQRT */
%token          _KW_FST       /* FST */
%token          _KW_FSTCW     /* FSTCW */
%token          _KW_FSTENV    /* FSTENV */
%token          _KW_FSTP      /* FSTP */
%token          _KW_FSTSW     /* FSTSW */
%token          _KW_FSUB      /* FSUB */
%token          _KW_FSUBP     /* FSUBP */
%token          _KW_FSUBR     /* FSUBR */
%token          _KW_FSUBRP    /* FSUBRP */
%token          _KW_FTST      /* FTST */
%token          _KW_FUCOM     /* FUCOM */
%token          _KW_FUCOMP    /* FUCOMP */
%token          _KW_FUCOMPP   /* FUCOMPP */
%token          _KW_FXAM      /* FXAM */
%token          _KW_FXCH      /* FXCH */
%token          _KW_FXTRACT   /* FXTRACT */
%token          _KW_FYL2X     /* FYL2X */
%token          _KW_FYL2XP1   /* FYL2XP1 */
%token          _KW_HLT       /* HLT */
%token          _KW_IDIV      /* IDIV */
%token          _KW_IMUL      /* IMUL */
%token          _KW_IN        /* IN */
%token          _KW_INC       /* INC */
%token          _KW_INCO      /* INCO */
%token          _KW_INSB      /* INSB */
%token          _KW_INSD      /* INSD */
%token          _KW_INSTRSET  /* INSTRSET */
%token          _KW_INSW      /* INSW */
%token          _KW_INT       /* INT */
%token          _KW_INT3      /* INT3 */
%token          _KW_INTO      /* INTO */
%token          _KW_INVD      /* INVD */
%token          _KW_INVLPG    /* INVLPG */
%token          _KW_IRET      /* IRET */
%token          _KW_IRETD     /* IRETD */
%token          _KW_IRETW     /* IRETW */
%token          _KW_JA        /* JA */
%token          _KW_JAE       /* JAE */
%token          _KW_JB        /* JB */
%token          _KW_JBE       /* JBE */
%token          _KW_JC        /* JC */
%token          _KW_JCXZ      /* JCXZ */
%token          _KW_JE        /* JE */
%token          _KW_JECXZ     /* JECXZ */
%token          _KW_JG        /* JG */
%token          _KW_JGE       /* JGE */
%token          _KW_JL        /* JL */
%token          _KW_JLE       /* JLE */
%token          _KW_JMP       /* JMP */
%token          _KW_JNA       /* JNA */
%token          _KW_JNAE      /* JNAE */
%token          _KW_JNB       /* JNB */
%token          _KW_JNBE      /* JNBE */
%token          _KW_JNC       /* JNC */
%token          _KW_JNE       /* JNE */
%token          _KW_JNG       /* JNG */
%token          _KW_JNGE      /* JNGE */
%token          _KW_JNL       /* JNL */
%token          _KW_JNLE      /* JNLE */
%token          _KW_JNO       /* JNO */
%token          _KW_JNP       /* JNP */
%token          _KW_JNS       /* JNS */
%token          _KW_JNZ       /* JNZ */
%token          _KW_JO        /* JO */
%token          _KW_JP        /* JP */
%token          _KW_JPE       /* JPE */
%token          _KW_JPO       /* JPO */
%token          _KW_JS        /* JS */
%token          _KW_JZ        /* JZ */
%token          _KW_LAHF      /* LAHF */
%token          _KW_LAR       /* LAR */
%token          _KW_LDS       /* LDS */
%token          _KW_LEA       /* LEA */
%token          _KW_LEAVE     /* LEAVE */
%token          _KW_LES       /* LES */
%token          _KW_LFS       /* LFS */
%token          _KW_LGDT      /* LGDT */
%token          _KW_LGS       /* LGS */
%token          _KW_LIDT      /* LIDT */
%token          _KW_LLDT      /* LLDT */
%token          _KW_LMSW      /* LMSW */
%token          _KW_LOCK      /* LOCK */
%token          _KW_LODSB     /* LODSB */
%token          _KW_LODSD     /* LODSD */
%token          _KW_LODSW     /* LODSW */
%token          _KW_LOOP      /* LOOP */
%token          _KW_LOOPE     /* LOOPE */
%token          _KW_LOOPNE    /* LOOPNE */
%token          _KW_LOOPNZ    /* LOOPNZ */
%token          _KW_LOOPZ     /* LOOPZ */
%token          _KW_LSL       /* LSL */
%token          _KW_LSS       /* LSS */
%token          _KW_LTR       /* LTR */
%token          _KW_MOV       /* MOV */
%token          _KW_MOVSB     /* MOVSB */
%token          _KW_MOVSD     /* MOVSD */
%token          _KW_MOVSW     /* MOVSW */
%token          _KW_MOVSX     /* MOVSX */
%token          _KW_MOVZX     /* MOVZX */
%token          _KW_MUL       /* MUL */
%token          _KW_NEG       /* NEG */
%token          _KW_NOP       /* NOP */
%token          _KW_NOT       /* NOT */
%token          _KW_OPTIMIZE  /* OPTIMIZE */
%token          _KW_OR        /* OR */
%token          _KW_ORG       /* ORG */
%token          _KW_OUT       /* OUT */
%token          _KW_OUTSB     /* OUTSB */
%token          _KW_OUTSD     /* OUTSD */
%token          _KW_OUTSW     /* OUTSW */
%token          _KW_PADDING   /* PADDING */
%token          _KW_PADSET    /* PADSET */
%token          _KW_POP       /* POP */
%token          _KW_POPA      /* POPA */
%token          _KW_POPAD     /* POPAD */
%token          _KW_POPAW     /* POPAW */
%token          _KW_POPF      /* POPF */
%token          _KW_POPFD     /* POPFD */
%token          _KW_POPFW     /* POPFW */
%token          _KW_PUSH      /* PUSH */
%token          _KW_PUSHA     /* PUSHA */
%token          _KW_PUSHAD    /* PUSHAD */
%token          _KW_PUSHAW    /* PUSHAW */
%token          _KW_PUSHD     /* PUSHD */
%token          _KW_PUSHF     /* PUSHF */
%token          _KW_PUSHFD    /* PUSHFD */
%token          _KW_PUSHFW    /* PUSHFW */
%token          _KW_RCL       /* RCL */
%token          _KW_RCR       /* RCR */
%token          _KW_RDMSR     /* RDMSR */
%token          _KW_RDPMC     /* RDPMC */
%token          _KW_REP       /* REP */
%token          _KW_REPE      /* REPE */
%token          _KW_REPNE     /* REPNE */
%token          _KW_REPNZ     /* REPNZ */
%token          _KW_REPZ      /* REPZ */
%token          _KW_RESB      /* RESB */
%token          _KW_RESD      /* RESD */
%token          _KW_RESQ      /* RESQ */
%token          _KW_REST      /* REST */
%token          _KW_RESW      /* RESW */
%token          _KW_RET       /* RET */
%token          _KW_RETF      /* RETF */
%token          _KW_RETN      /* RETN */
%token          _KW_ROL       /* ROL */
%token          _KW_ROR       /* ROR */
%token          _KW_RSM       /* RSM */
%token          _KW_SAHF      /* SAHF */
%token          _KW_SAL       /* SAL */
%token          _KW_SAR       /* SAR */
%token          _KW_SBB       /* SBB */
%token          _KW_SCASB     /* SCASB */
%token          _KW_SCASD     /* SCASD */
%token          _KW_SCASW     /* SCASW */
%token          _KW_SECTION   /* SECTION */
%token          _KW_SETA      /* SETA */
%token          _KW_SETAE     /* SETAE */
%token          _KW_SETB      /* SETB */
%token          _KW_SETBE     /* SETBE */
%token          _KW_SETC      /* SETC */
%token          _KW_SETE      /* SETE */
%token          _KW_SETG      /* SETG */
%token          _KW_SETGE     /* SETGE */
%token          _KW_SETL      /* SETL */
%token          _KW_SETLE     /* SETLE */
%token          _KW_SETNA     /* SETNA */
%token          _KW_SETNAE    /* SETNAE */
%token          _KW_SETNB     /* SETNB */
%token          _KW_SETNBE    /* SETNBE */
%token          _KW_SETNC     /* SETNC */
%token          _KW_SETNE     /* SETNE */
%token          _KW_SETNG     /* SETNG */
%token          _KW_SETNGE    /* SETNGE */
%token          _KW_SETNL     /* SETNL */
%token          _KW_SETNLE    /* SETNLE */
%token          _KW_SETNO     /* SETNO */
%token          _KW_SETNP     /* SETNP */
%token          _KW_SETNS     /* SETNS */
%token          _KW_SETNZ     /* SETNZ */
%token          _KW_SETO      /* SETO */
%token          _KW_SETP      /* SETP */
%token          _KW_SETPE     /* SETPE */
%token          _KW_SETPO     /* SETPO */
%token          _KW_SETS      /* SETS */
%token          _KW_SETZ      /* SETZ */
%token          _KW_SGDT      /* SGDT */
%token          _KW_SHL       /* SHL */
%token          _KW_SHLD      /* SHLD */
%token          _KW_SHR       /* SHR */
%token          _KW_SHRD      /* SHRD */
%token          _KW_SIDT      /* SIDT */
%token          _KW_SLDT      /* SLDT */
%token          _KW_SMSW      /* SMSW */
%token          _KW_STC       /* STC */
%token          _KW_STD       /* STD */
%token          _KW_STI       /* STI */
%token          _KW_STOSB     /* STOSB */
%token          _KW_STOSD     /* STOSD */
%token          _KW_STOSW     /* STOSW */
%token          _KW_STR       /* STR */
%token          _KW_SUB       /* SUB */
%token          _KW_TEST      /* TEST */
%token          _KW_TIMES     /* TIMES */
%token          _KW_UD2       /* UD2 */
%token          _KW_VERR      /* VERR */
%token          _KW_VERW      /* VERW */
%token          _KW_WAIT      /* WAIT */
%token          _KW_WBINVD    /* WBINVD */
%token          _KW_WRMSR     /* WRMSR */
%token          _KW_XADD      /* XADD */
%token          _KW_XCHG      /* XCHG */
%token          _KW_XLATB     /* XLATB */
%token          _KW_XOR       /* XOR */
%token          _LBRACK       /* [ */
%token          _RBRACK       /* ] */
%token<_string> T_Hex         /* Hex */
%token<_string> _STRING_
%token<_int>    _INTEGER_
%token<_string> _IDENT_

%type <program_> Program
%type <liststatement_> ListStatement
%type <statement_> Statement
%type <listmnemonicargs_> ListMnemonicArgs
%type <mnemonicargs_> MnemonicArgs
%type <exp_> Exp
%type <factor_> Factor
%type <configtype_> ConfigType
%type <opcode_> Opcode

%start Program

%%

Program : ListStatement { std::reverse($1->begin(),$1->end()) ;$$ = new Prog($1); result->program_ = $$; }
;
ListStatement : Statement { $$ = new ListStatement(); $$->push_back($1); result->liststatement_ = $$; }
  | Statement ListStatement { $2->push_back($1); $$ = $2; result->liststatement_ = $$; }
;
Statement : _IDENT_ _COLON { $$ = new LabelStmt($1); result->statement_ = $$; }
  | _IDENT_ _KW_EQU Exp { $$ = new DeclareStmt($1, $3); result->statement_ = $$; }
  | _LBRACK ConfigType _STRING_ _RBRACK { $$ = new ConfigStmt($2, $3); result->statement_ = $$; }
  | Opcode ListMnemonicArgs { std::reverse($2->begin(),$2->end()) ;$$ = new MnemonicStmt($1, $2); result->statement_ = $$; }
;
ListMnemonicArgs : MnemonicArgs { $$ = new ListMnemonicArgs(); $$->push_back($1); result->listmnemonicargs_ = $$; }
  | MnemonicArgs _COMMA ListMnemonicArgs { $3->push_back($1); $$ = $3; result->listmnemonicargs_ = $$; }
;
MnemonicArgs : Exp { $$ = new MnemoArgs($1); result->mnemonicargs_ = $$; }
;
Exp : Factor _DEQ Factor { $$ = new EqExp($1, $3); result->exp_ = $$; }
  | Factor _BANGEQ Factor { $$ = new NeqExp($1, $3); result->exp_ = $$; }
  | Factor _LT Factor { $$ = new LtExp($1, $3); result->exp_ = $$; }
  | Factor _GT Factor { $$ = new GtExp($1, $3); result->exp_ = $$; }
  | Factor _LDARROW Factor { $$ = new LteExp($1, $3); result->exp_ = $$; }
  | Factor _GTEQ Factor { $$ = new GteExp($1, $3); result->exp_ = $$; }
  | Factor _PLUS Factor { $$ = new PlusExp($1, $3); result->exp_ = $$; }
  | Factor _MINUS Factor { $$ = new MinusExp($1, $3); result->exp_ = $$; }
  | Factor _STAR Factor { $$ = new MulExp($1, $3); result->exp_ = $$; }
  | Factor _SLASH Factor { $$ = new DivExp($1, $3); result->exp_ = $$; }
  | Factor _PERCENT Factor { $$ = new ModExp($1, $3); result->exp_ = $$; }
  | Factor { $$ = new ImmExp($1); result->exp_ = $$; }
;
Factor : _INTEGER_ { $$ = new NumberFactor($1); result->factor_ = $$; }
  | T_Hex { $$ = new HexFactor($1); result->factor_ = $$; }
  | _IDENT_ { $$ = new IdentFactor($1); result->factor_ = $$; }
  | _STRING_ { $$ = new StringFactor($1); result->factor_ = $$; }
;
ConfigType : _KW_BITS { $$ = new BitsConfig(); result->configtype_ = $$; }
  | _KW_INSTRSET { $$ = new InstConfig(); result->configtype_ = $$; }
  | _KW_OPTIMIZE { $$ = new OptiConfig(); result->configtype_ = $$; }
  | _KW_FORMAT { $$ = new FormConfig(); result->configtype_ = $$; }
  | _KW_PADDING { $$ = new PaddConfig(); result->configtype_ = $$; }
  | _KW_PADSET { $$ = new PadsConfig(); result->configtype_ = $$; }
  | _KW_SECTION { $$ = new SectConfig(); result->configtype_ = $$; }
  | _KW_ABSOLUTE { $$ = new AbsoConfig(); result->configtype_ = $$; }
  | _KW_FILE { $$ = new FileConfig(); result->configtype_ = $$; }
;
Opcode : _KW_AAA { $$ = new OpcodesAAA(); result->opcode_ = $$; }
  | _KW_AAD { $$ = new OpcodesAAD(); result->opcode_ = $$; }
  | _KW_AAS { $$ = new OpcodesAAS(); result->opcode_ = $$; }
  | _KW_AAM { $$ = new OpcodesAAM(); result->opcode_ = $$; }
  | _KW_ADC { $$ = new OpcodesADC(); result->opcode_ = $$; }
  | _KW_ADD { $$ = new OpcodesADD(); result->opcode_ = $$; }
  | _KW_AND { $$ = new OpcodesAND(); result->opcode_ = $$; }
  | _KW_ALIGN { $$ = new OpcodesALIGN(); result->opcode_ = $$; }
  | _KW_ALIGNB { $$ = new OpcodesALIGNB(); result->opcode_ = $$; }
  | _KW_ARPL { $$ = new OpcodesARPL(); result->opcode_ = $$; }
  | _KW_BOUND { $$ = new OpcodesBOUND(); result->opcode_ = $$; }
  | _KW_BSF { $$ = new OpcodesBSF(); result->opcode_ = $$; }
  | _KW_BSR { $$ = new OpcodesBSR(); result->opcode_ = $$; }
  | _KW_BSWAP { $$ = new OpcodesBSWAP(); result->opcode_ = $$; }
  | _KW_BT { $$ = new OpcodesBT(); result->opcode_ = $$; }
  | _KW_BTC { $$ = new OpcodesBTC(); result->opcode_ = $$; }
  | _KW_BTR { $$ = new OpcodesBTR(); result->opcode_ = $$; }
  | _KW_BTS { $$ = new OpcodesBTS(); result->opcode_ = $$; }
  | _KW_CALL { $$ = new OpcodesCALL(); result->opcode_ = $$; }
  | _KW_CBW { $$ = new OpcodesCBW(); result->opcode_ = $$; }
  | _KW_CDQ { $$ = new OpcodesCDQ(); result->opcode_ = $$; }
  | _KW_CLC { $$ = new OpcodesCLC(); result->opcode_ = $$; }
  | _KW_CLD { $$ = new OpcodesCLD(); result->opcode_ = $$; }
  | _KW_CLI { $$ = new OpcodesCLI(); result->opcode_ = $$; }
  | _KW_CLTS { $$ = new OpcodesCLTS(); result->opcode_ = $$; }
  | _KW_CMC { $$ = new OpcodesCMC(); result->opcode_ = $$; }
  | _KW_CMP { $$ = new OpcodesCMP(); result->opcode_ = $$; }
  | _KW_CMPSB { $$ = new OpcodesCMPSB(); result->opcode_ = $$; }
  | _KW_CMPSD { $$ = new OpcodesCMPSD(); result->opcode_ = $$; }
  | _KW_CMPSW { $$ = new OpcodesCMPSW(); result->opcode_ = $$; }
  | _KW_CMPXCHG { $$ = new OpcodesCMPXCHG(); result->opcode_ = $$; }
  | _KW_CPUID { $$ = new OpcodesCPUID(); result->opcode_ = $$; }
  | _KW_CWD { $$ = new OpcodesCWD(); result->opcode_ = $$; }
  | _KW_CWDE { $$ = new OpcodesCWDE(); result->opcode_ = $$; }
  | _KW_DAA { $$ = new OpcodesDAA(); result->opcode_ = $$; }
  | _KW_DAS { $$ = new OpcodesDAS(); result->opcode_ = $$; }
  | _KW_DB { $$ = new OpcodesDB(); result->opcode_ = $$; }
  | _KW_DD { $$ = new OpcodesDD(); result->opcode_ = $$; }
  | _KW_DEC { $$ = new OpcodesDEC(); result->opcode_ = $$; }
  | _KW_DIV { $$ = new OpcodesDIV(); result->opcode_ = $$; }
  | _KW_DQ { $$ = new OpcodesDQ(); result->opcode_ = $$; }
  | _KW_DT { $$ = new OpcodesDT(); result->opcode_ = $$; }
  | _KW_DW { $$ = new OpcodesDW(); result->opcode_ = $$; }
  | _KW_END { $$ = new OpcodesEND(); result->opcode_ = $$; }
  | _KW_ENTER { $$ = new OpcodesENTER(); result->opcode_ = $$; }
  | _KW_EXTERN { $$ = new OpcodesEXTERN(); result->opcode_ = $$; }
  | _KW_F2XM1 { $$ = new OpcodesF2XM1(); result->opcode_ = $$; }
  | _KW_FABS { $$ = new OpcodesFABS(); result->opcode_ = $$; }
  | _KW_FADD { $$ = new OpcodesFADD(); result->opcode_ = $$; }
  | _KW_FADDP { $$ = new OpcodesFADDP(); result->opcode_ = $$; }
  | _KW_FBLD { $$ = new OpcodesFBLD(); result->opcode_ = $$; }
  | _KW_FBSTP { $$ = new OpcodesFBSTP(); result->opcode_ = $$; }
  | _KW_FCHS { $$ = new OpcodesFCHS(); result->opcode_ = $$; }
  | _KW_FCLEX { $$ = new OpcodesFCLEX(); result->opcode_ = $$; }
  | _KW_FCOM { $$ = new OpcodesFCOM(); result->opcode_ = $$; }
  | _KW_FCOMP { $$ = new OpcodesFCOMP(); result->opcode_ = $$; }
  | _KW_FCOMPP { $$ = new OpcodesFCOMPP(); result->opcode_ = $$; }
  | _KW_FCOS { $$ = new OpcodesFCOS(); result->opcode_ = $$; }
  | _KW_FDECSTP { $$ = new OpcodesFDECSTP(); result->opcode_ = $$; }
  | _KW_FDISI { $$ = new OpcodesFDISI(); result->opcode_ = $$; }
  | _KW_FDIV { $$ = new OpcodesFDIV(); result->opcode_ = $$; }
  | _KW_FDIVP { $$ = new OpcodesFDIVP(); result->opcode_ = $$; }
  | _KW_FDIVR { $$ = new OpcodesFDIVR(); result->opcode_ = $$; }
  | _KW_FDIVRP { $$ = new OpcodesFDIVRP(); result->opcode_ = $$; }
  | _KW_FENI { $$ = new OpcodesFENI(); result->opcode_ = $$; }
  | _KW_FFREE { $$ = new OpcodesFFREE(); result->opcode_ = $$; }
  | _KW_FIADD { $$ = new OpcodesFIADD(); result->opcode_ = $$; }
  | _KW_FICOM { $$ = new OpcodesFICOM(); result->opcode_ = $$; }
  | _KW_FICOMP { $$ = new OpcodesFICOMP(); result->opcode_ = $$; }
  | _KW_FIDIV { $$ = new OpcodesFIDIV(); result->opcode_ = $$; }
  | _KW_FIDIVR { $$ = new OpcodesFIDIVR(); result->opcode_ = $$; }
  | _KW_FILD { $$ = new OpcodesFILD(); result->opcode_ = $$; }
  | _KW_FIMUL { $$ = new OpcodesFIMUL(); result->opcode_ = $$; }
  | _KW_FINCSTP { $$ = new OpcodesFINCSTP(); result->opcode_ = $$; }
  | _KW_FINIT { $$ = new OpcodesFINIT(); result->opcode_ = $$; }
  | _KW_FIST { $$ = new OpcodesFIST(); result->opcode_ = $$; }
  | _KW_FISTP { $$ = new OpcodesFISTP(); result->opcode_ = $$; }
  | _KW_FISUB { $$ = new OpcodesFISUB(); result->opcode_ = $$; }
  | _KW_FISUBR { $$ = new OpcodesFISUBR(); result->opcode_ = $$; }
  | _KW_FLD { $$ = new OpcodesFLD(); result->opcode_ = $$; }
  | _KW_FLD1 { $$ = new OpcodesFLD1(); result->opcode_ = $$; }
  | _KW_FLDCW { $$ = new OpcodesFLDCW(); result->opcode_ = $$; }
  | _KW_FLDENV { $$ = new OpcodesFLDENV(); result->opcode_ = $$; }
  | _KW_FLDL2E { $$ = new OpcodesFLDL2E(); result->opcode_ = $$; }
  | _KW_FLDL2T { $$ = new OpcodesFLDL2T(); result->opcode_ = $$; }
  | _KW_FLDLG2 { $$ = new OpcodesFLDLG2(); result->opcode_ = $$; }
  | _KW_FLDLN2 { $$ = new OpcodesFLDLN2(); result->opcode_ = $$; }
  | _KW_FLDPI { $$ = new OpcodesFLDPI(); result->opcode_ = $$; }
  | _KW_FLDZ { $$ = new OpcodesFLDZ(); result->opcode_ = $$; }
  | _KW_FMUL { $$ = new OpcodesFMUL(); result->opcode_ = $$; }
  | _KW_FMULP { $$ = new OpcodesFMULP(); result->opcode_ = $$; }
  | _KW_FNCLEX { $$ = new OpcodesFNCLEX(); result->opcode_ = $$; }
  | _KW_FNDISI { $$ = new OpcodesFNDISI(); result->opcode_ = $$; }
  | _KW_FNENI { $$ = new OpcodesFNENI(); result->opcode_ = $$; }
  | _KW_FNINIT { $$ = new OpcodesFNINIT(); result->opcode_ = $$; }
  | _KW_FNOP { $$ = new OpcodesFNOP(); result->opcode_ = $$; }
  | _KW_FNSAVE { $$ = new OpcodesFNSAVE(); result->opcode_ = $$; }
  | _KW_FNSTCW { $$ = new OpcodesFNSTCW(); result->opcode_ = $$; }
  | _KW_FNSTENV { $$ = new OpcodesFNSTENV(); result->opcode_ = $$; }
  | _KW_FNSTSW { $$ = new OpcodesFNSTSW(); result->opcode_ = $$; }
  | _KW_FPATAN { $$ = new OpcodesFPATAN(); result->opcode_ = $$; }
  | _KW_FPTAN { $$ = new OpcodesFPTAN(); result->opcode_ = $$; }
  | _KW_FPREM { $$ = new OpcodesFPREM(); result->opcode_ = $$; }
  | _KW_FPREM1 { $$ = new OpcodesFPREM1(); result->opcode_ = $$; }
  | _KW_FRNDINT { $$ = new OpcodesFRNDINT(); result->opcode_ = $$; }
  | _KW_FRSTOR { $$ = new OpcodesFRSTOR(); result->opcode_ = $$; }
  | _KW_FSAVE { $$ = new OpcodesFSAVE(); result->opcode_ = $$; }
  | _KW_FSCALE { $$ = new OpcodesFSCALE(); result->opcode_ = $$; }
  | _KW_FSETPM { $$ = new OpcodesFSETPM(); result->opcode_ = $$; }
  | _KW_FSIN { $$ = new OpcodesFSIN(); result->opcode_ = $$; }
  | _KW_FSINCOS { $$ = new OpcodesFSINCOS(); result->opcode_ = $$; }
  | _KW_FSQRT { $$ = new OpcodesFSQRT(); result->opcode_ = $$; }
  | _KW_FST { $$ = new OpcodesFST(); result->opcode_ = $$; }
  | _KW_FSTCW { $$ = new OpcodesFSTCW(); result->opcode_ = $$; }
  | _KW_FSTENV { $$ = new OpcodesFSTENV(); result->opcode_ = $$; }
  | _KW_FSTP { $$ = new OpcodesFSTP(); result->opcode_ = $$; }
  | _KW_FSTSW { $$ = new OpcodesFSTSW(); result->opcode_ = $$; }
  | _KW_FSUB { $$ = new OpcodesFSUB(); result->opcode_ = $$; }
  | _KW_FSUBP { $$ = new OpcodesFSUBP(); result->opcode_ = $$; }
  | _KW_FSUBR { $$ = new OpcodesFSUBR(); result->opcode_ = $$; }
  | _KW_FSUBRP { $$ = new OpcodesFSUBRP(); result->opcode_ = $$; }
  | _KW_FTST { $$ = new OpcodesFTST(); result->opcode_ = $$; }
  | _KW_FUCOM { $$ = new OpcodesFUCOM(); result->opcode_ = $$; }
  | _KW_FUCOMP { $$ = new OpcodesFUCOMP(); result->opcode_ = $$; }
  | _KW_FUCOMPP { $$ = new OpcodesFUCOMPP(); result->opcode_ = $$; }
  | _KW_FXAM { $$ = new OpcodesFXAM(); result->opcode_ = $$; }
  | _KW_FXCH { $$ = new OpcodesFXCH(); result->opcode_ = $$; }
  | _KW_FXTRACT { $$ = new OpcodesFXTRACT(); result->opcode_ = $$; }
  | _KW_FYL2X { $$ = new OpcodesFYL2X(); result->opcode_ = $$; }
  | _KW_FYL2XP1 { $$ = new OpcodesFYL2XP1(); result->opcode_ = $$; }
  | _KW_HLT { $$ = new OpcodesHLT(); result->opcode_ = $$; }
  | _KW_IDIV { $$ = new OpcodesIDIV(); result->opcode_ = $$; }
  | _KW_IMUL { $$ = new OpcodesIMUL(); result->opcode_ = $$; }
  | _KW_IN { $$ = new OpcodesIN(); result->opcode_ = $$; }
  | _KW_INC { $$ = new OpcodesINC(); result->opcode_ = $$; }
  | _KW_INCO { $$ = new OpcodesINCO(); result->opcode_ = $$; }
  | _KW_INSB { $$ = new OpcodesINSB(); result->opcode_ = $$; }
  | _KW_INSD { $$ = new OpcodesINSD(); result->opcode_ = $$; }
  | _KW_INSW { $$ = new OpcodesINSW(); result->opcode_ = $$; }
  | _KW_INT { $$ = new OpcodesINT(); result->opcode_ = $$; }
  | _KW_INT3 { $$ = new OpcodesINT3(); result->opcode_ = $$; }
  | _KW_INTO { $$ = new OpcodesINTO(); result->opcode_ = $$; }
  | _KW_INVD { $$ = new OpcodesINVD(); result->opcode_ = $$; }
  | _KW_INVLPG { $$ = new OpcodesINVLPG(); result->opcode_ = $$; }
  | _KW_IRET { $$ = new OpcodesIRET(); result->opcode_ = $$; }
  | _KW_IRETD { $$ = new OpcodesIRETD(); result->opcode_ = $$; }
  | _KW_IRETW { $$ = new OpcodesIRETW(); result->opcode_ = $$; }
  | _KW_JA { $$ = new OpcodesJA(); result->opcode_ = $$; }
  | _KW_JAE { $$ = new OpcodesJAE(); result->opcode_ = $$; }
  | _KW_JB { $$ = new OpcodesJB(); result->opcode_ = $$; }
  | _KW_JBE { $$ = new OpcodesJBE(); result->opcode_ = $$; }
  | _KW_JC { $$ = new OpcodesJC(); result->opcode_ = $$; }
  | _KW_JCXZ { $$ = new OpcodesJCXZ(); result->opcode_ = $$; }
  | _KW_JE { $$ = new OpcodesJE(); result->opcode_ = $$; }
  | _KW_JECXZ { $$ = new OpcodesJECXZ(); result->opcode_ = $$; }
  | _KW_JG { $$ = new OpcodesJG(); result->opcode_ = $$; }
  | _KW_JGE { $$ = new OpcodesJGE(); result->opcode_ = $$; }
  | _KW_JL { $$ = new OpcodesJL(); result->opcode_ = $$; }
  | _KW_JLE { $$ = new OpcodesJLE(); result->opcode_ = $$; }
  | _KW_JMP { $$ = new OpcodesJMP(); result->opcode_ = $$; }
  | _KW_JNA { $$ = new OpcodesJNA(); result->opcode_ = $$; }
  | _KW_JNAE { $$ = new OpcodesJNAE(); result->opcode_ = $$; }
  | _KW_JNB { $$ = new OpcodesJNB(); result->opcode_ = $$; }
  | _KW_JNBE { $$ = new OpcodesJNBE(); result->opcode_ = $$; }
  | _KW_JNC { $$ = new OpcodesJNC(); result->opcode_ = $$; }
  | _KW_JNE { $$ = new OpcodesJNE(); result->opcode_ = $$; }
  | _KW_JNG { $$ = new OpcodesJNG(); result->opcode_ = $$; }
  | _KW_JNGE { $$ = new OpcodesJNGE(); result->opcode_ = $$; }
  | _KW_JNL { $$ = new OpcodesJNL(); result->opcode_ = $$; }
  | _KW_JNLE { $$ = new OpcodesJNLE(); result->opcode_ = $$; }
  | _KW_JNO { $$ = new OpcodesJNO(); result->opcode_ = $$; }
  | _KW_JNP { $$ = new OpcodesJNP(); result->opcode_ = $$; }
  | _KW_JNS { $$ = new OpcodesJNS(); result->opcode_ = $$; }
  | _KW_JNZ { $$ = new OpcodesJNZ(); result->opcode_ = $$; }
  | _KW_JO { $$ = new OpcodesJO(); result->opcode_ = $$; }
  | _KW_JP { $$ = new OpcodesJP(); result->opcode_ = $$; }
  | _KW_JPE { $$ = new OpcodesJPE(); result->opcode_ = $$; }
  | _KW_JPO { $$ = new OpcodesJPO(); result->opcode_ = $$; }
  | _KW_JS { $$ = new OpcodesJS(); result->opcode_ = $$; }
  | _KW_JZ { $$ = new OpcodesJZ(); result->opcode_ = $$; }
  | _KW_LAHF { $$ = new OpcodesLAHF(); result->opcode_ = $$; }
  | _KW_LAR { $$ = new OpcodesLAR(); result->opcode_ = $$; }
  | _KW_LDS { $$ = new OpcodesLDS(); result->opcode_ = $$; }
  | _KW_LEA { $$ = new OpcodesLEA(); result->opcode_ = $$; }
  | _KW_LEAVE { $$ = new OpcodesLEAVE(); result->opcode_ = $$; }
  | _KW_LES { $$ = new OpcodesLES(); result->opcode_ = $$; }
  | _KW_LFS { $$ = new OpcodesLFS(); result->opcode_ = $$; }
  | _KW_LGDT { $$ = new OpcodesLGDT(); result->opcode_ = $$; }
  | _KW_LGS { $$ = new OpcodesLGS(); result->opcode_ = $$; }
  | _KW_LIDT { $$ = new OpcodesLIDT(); result->opcode_ = $$; }
  | _KW_LLDT { $$ = new OpcodesLLDT(); result->opcode_ = $$; }
  | _KW_LMSW { $$ = new OpcodesLMSW(); result->opcode_ = $$; }
  | _KW_LOCK { $$ = new OpcodesLOCK(); result->opcode_ = $$; }
  | _KW_LODSB { $$ = new OpcodesLODSB(); result->opcode_ = $$; }
  | _KW_LODSD { $$ = new OpcodesLODSD(); result->opcode_ = $$; }
  | _KW_LODSW { $$ = new OpcodesLODSW(); result->opcode_ = $$; }
  | _KW_LOOP { $$ = new OpcodesLOOP(); result->opcode_ = $$; }
  | _KW_LOOPE { $$ = new OpcodesLOOPE(); result->opcode_ = $$; }
  | _KW_LOOPNE { $$ = new OpcodesLOOPNE(); result->opcode_ = $$; }
  | _KW_LOOPNZ { $$ = new OpcodesLOOPNZ(); result->opcode_ = $$; }
  | _KW_LOOPZ { $$ = new OpcodesLOOPZ(); result->opcode_ = $$; }
  | _KW_LSL { $$ = new OpcodesLSL(); result->opcode_ = $$; }
  | _KW_LSS { $$ = new OpcodesLSS(); result->opcode_ = $$; }
  | _KW_LTR { $$ = new OpcodesLTR(); result->opcode_ = $$; }
  | _KW_MOV { $$ = new OpcodesMOV(); result->opcode_ = $$; }
  | _KW_MOVSB { $$ = new OpcodesMOVSB(); result->opcode_ = $$; }
  | _KW_MOVSD { $$ = new OpcodesMOVSD(); result->opcode_ = $$; }
  | _KW_MOVSW { $$ = new OpcodesMOVSW(); result->opcode_ = $$; }
  | _KW_MOVSX { $$ = new OpcodesMOVSX(); result->opcode_ = $$; }
  | _KW_MOVZX { $$ = new OpcodesMOVZX(); result->opcode_ = $$; }
  | _KW_MUL { $$ = new OpcodesMUL(); result->opcode_ = $$; }
  | _KW_NEG { $$ = new OpcodesNEG(); result->opcode_ = $$; }
  | _KW_NOP { $$ = new OpcodesNOP(); result->opcode_ = $$; }
  | _KW_NOT { $$ = new OpcodesNOT(); result->opcode_ = $$; }
  | _KW_OR { $$ = new OpcodesOR(); result->opcode_ = $$; }
  | _KW_ORG { $$ = new OpcodesORG(); result->opcode_ = $$; }
  | _KW_OUT { $$ = new OpcodesOUT(); result->opcode_ = $$; }
  | _KW_OUTSB { $$ = new OpcodesOUTSB(); result->opcode_ = $$; }
  | _KW_OUTSD { $$ = new OpcodesOUTSD(); result->opcode_ = $$; }
  | _KW_OUTSW { $$ = new OpcodesOUTSW(); result->opcode_ = $$; }
  | _KW_POP { $$ = new OpcodesPOP(); result->opcode_ = $$; }
  | _KW_POPA { $$ = new OpcodesPOPA(); result->opcode_ = $$; }
  | _KW_POPAD { $$ = new OpcodesPOPAD(); result->opcode_ = $$; }
  | _KW_POPAW { $$ = new OpcodesPOPAW(); result->opcode_ = $$; }
  | _KW_POPF { $$ = new OpcodesPOPF(); result->opcode_ = $$; }
  | _KW_POPFD { $$ = new OpcodesPOPFD(); result->opcode_ = $$; }
  | _KW_POPFW { $$ = new OpcodesPOPFW(); result->opcode_ = $$; }
  | _KW_PUSH { $$ = new OpcodesPUSH(); result->opcode_ = $$; }
  | _KW_PUSHA { $$ = new OpcodesPUSHA(); result->opcode_ = $$; }
  | _KW_PUSHD { $$ = new OpcodesPUSHD(); result->opcode_ = $$; }
  | _KW_PUSHAD { $$ = new OpcodesPUSHAD(); result->opcode_ = $$; }
  | _KW_PUSHAW { $$ = new OpcodesPUSHAW(); result->opcode_ = $$; }
  | _KW_PUSHF { $$ = new OpcodesPUSHF(); result->opcode_ = $$; }
  | _KW_PUSHFD { $$ = new OpcodesPUSHFD(); result->opcode_ = $$; }
  | _KW_PUSHFW { $$ = new OpcodesPUSHFW(); result->opcode_ = $$; }
  | _KW_RCL { $$ = new OpcodesRCL(); result->opcode_ = $$; }
  | _KW_RCR { $$ = new OpcodesRCR(); result->opcode_ = $$; }
  | _KW_RDMSR { $$ = new OpcodesRDMSR(); result->opcode_ = $$; }
  | _KW_RDPMC { $$ = new OpcodesRDPMC(); result->opcode_ = $$; }
  | _KW_REP { $$ = new OpcodesREP(); result->opcode_ = $$; }
  | _KW_REPE { $$ = new OpcodesREPE(); result->opcode_ = $$; }
  | _KW_REPNE { $$ = new OpcodesREPNE(); result->opcode_ = $$; }
  | _KW_REPNZ { $$ = new OpcodesREPNZ(); result->opcode_ = $$; }
  | _KW_REPZ { $$ = new OpcodesREPZ(); result->opcode_ = $$; }
  | _KW_RESB { $$ = new OpcodesRESB(); result->opcode_ = $$; }
  | _KW_RESD { $$ = new OpcodesRESD(); result->opcode_ = $$; }
  | _KW_RESQ { $$ = new OpcodesRESQ(); result->opcode_ = $$; }
  | _KW_REST { $$ = new OpcodesREST(); result->opcode_ = $$; }
  | _KW_RESW { $$ = new OpcodesRESW(); result->opcode_ = $$; }
  | _KW_RET { $$ = new OpcodesRET(); result->opcode_ = $$; }
  | _KW_RETF { $$ = new OpcodesRETF(); result->opcode_ = $$; }
  | _KW_RETN { $$ = new OpcodesRETN(); result->opcode_ = $$; }
  | _KW_ROL { $$ = new OpcodesROL(); result->opcode_ = $$; }
  | _KW_ROR { $$ = new OpcodesROR(); result->opcode_ = $$; }
  | _KW_RSM { $$ = new OpcodesRSM(); result->opcode_ = $$; }
  | _KW_SAHF { $$ = new OpcodesSAHF(); result->opcode_ = $$; }
  | _KW_SAL { $$ = new OpcodesSAL(); result->opcode_ = $$; }
  | _KW_SAR { $$ = new OpcodesSAR(); result->opcode_ = $$; }
  | _KW_SBB { $$ = new OpcodesSBB(); result->opcode_ = $$; }
  | _KW_SCASB { $$ = new OpcodesSCASB(); result->opcode_ = $$; }
  | _KW_SCASD { $$ = new OpcodesSCASD(); result->opcode_ = $$; }
  | _KW_SCASW { $$ = new OpcodesSCASW(); result->opcode_ = $$; }
  | _KW_SETA { $$ = new OpcodesSETA(); result->opcode_ = $$; }
  | _KW_SETAE { $$ = new OpcodesSETAE(); result->opcode_ = $$; }
  | _KW_SETB { $$ = new OpcodesSETB(); result->opcode_ = $$; }
  | _KW_SETBE { $$ = new OpcodesSETBE(); result->opcode_ = $$; }
  | _KW_SETC { $$ = new OpcodesSETC(); result->opcode_ = $$; }
  | _KW_SETE { $$ = new OpcodesSETE(); result->opcode_ = $$; }
  | _KW_SETG { $$ = new OpcodesSETG(); result->opcode_ = $$; }
  | _KW_SETGE { $$ = new OpcodesSETGE(); result->opcode_ = $$; }
  | _KW_SETL { $$ = new OpcodesSETL(); result->opcode_ = $$; }
  | _KW_SETLE { $$ = new OpcodesSETLE(); result->opcode_ = $$; }
  | _KW_SETNA { $$ = new OpcodesSETNA(); result->opcode_ = $$; }
  | _KW_SETNAE { $$ = new OpcodesSETNAE(); result->opcode_ = $$; }
  | _KW_SETNB { $$ = new OpcodesSETNB(); result->opcode_ = $$; }
  | _KW_SETNBE { $$ = new OpcodesSETNBE(); result->opcode_ = $$; }
  | _KW_SETNC { $$ = new OpcodesSETNC(); result->opcode_ = $$; }
  | _KW_SETNE { $$ = new OpcodesSETNE(); result->opcode_ = $$; }
  | _KW_SETNG { $$ = new OpcodesSETNG(); result->opcode_ = $$; }
  | _KW_SETNGE { $$ = new OpcodesSETNGE(); result->opcode_ = $$; }
  | _KW_SETNL { $$ = new OpcodesSETNL(); result->opcode_ = $$; }
  | _KW_SETNLE { $$ = new OpcodesSETNLE(); result->opcode_ = $$; }
  | _KW_SETNO { $$ = new OpcodesSETNO(); result->opcode_ = $$; }
  | _KW_SETNP { $$ = new OpcodesSETNP(); result->opcode_ = $$; }
  | _KW_SETNS { $$ = new OpcodesSETNS(); result->opcode_ = $$; }
  | _KW_SETNZ { $$ = new OpcodesSETNZ(); result->opcode_ = $$; }
  | _KW_SETO { $$ = new OpcodesSETO(); result->opcode_ = $$; }
  | _KW_SETP { $$ = new OpcodesSETP(); result->opcode_ = $$; }
  | _KW_SETPE { $$ = new OpcodesSETPE(); result->opcode_ = $$; }
  | _KW_SETPO { $$ = new OpcodesSETPO(); result->opcode_ = $$; }
  | _KW_SETS { $$ = new OpcodesSETS(); result->opcode_ = $$; }
  | _KW_SETZ { $$ = new OpcodesSETZ(); result->opcode_ = $$; }
  | _KW_SGDT { $$ = new OpcodesSGDT(); result->opcode_ = $$; }
  | _KW_SHL { $$ = new OpcodesSHL(); result->opcode_ = $$; }
  | _KW_SHLD { $$ = new OpcodesSHLD(); result->opcode_ = $$; }
  | _KW_SHR { $$ = new OpcodesSHR(); result->opcode_ = $$; }
  | _KW_SHRD { $$ = new OpcodesSHRD(); result->opcode_ = $$; }
  | _KW_SIDT { $$ = new OpcodesSIDT(); result->opcode_ = $$; }
  | _KW_SLDT { $$ = new OpcodesSLDT(); result->opcode_ = $$; }
  | _KW_SMSW { $$ = new OpcodesSMSW(); result->opcode_ = $$; }
  | _KW_STC { $$ = new OpcodesSTC(); result->opcode_ = $$; }
  | _KW_STD { $$ = new OpcodesSTD(); result->opcode_ = $$; }
  | _KW_STI { $$ = new OpcodesSTI(); result->opcode_ = $$; }
  | _KW_STOSB { $$ = new OpcodesSTOSB(); result->opcode_ = $$; }
  | _KW_STOSD { $$ = new OpcodesSTOSD(); result->opcode_ = $$; }
  | _KW_STOSW { $$ = new OpcodesSTOSW(); result->opcode_ = $$; }
  | _KW_STR { $$ = new OpcodesSTR(); result->opcode_ = $$; }
  | _KW_SUB { $$ = new OpcodesSUB(); result->opcode_ = $$; }
  | _KW_TEST { $$ = new OpcodesTEST(); result->opcode_ = $$; }
  | _KW_TIMES { $$ = new OpcodesTIMES(); result->opcode_ = $$; }
  | _KW_UD2 { $$ = new OpcodesUD2(); result->opcode_ = $$; }
  | _KW_VERR { $$ = new OpcodesVERR(); result->opcode_ = $$; }
  | _KW_VERW { $$ = new OpcodesVERW(); result->opcode_ = $$; }
  | _KW_WAIT { $$ = new OpcodesWAIT(); result->opcode_ = $$; }
  | _KW_WBINVD { $$ = new OpcodesWBINVD(); result->opcode_ = $$; }
  | _KW_WRMSR { $$ = new OpcodesWRMSR(); result->opcode_ = $$; }
  | _KW_XADD { $$ = new OpcodesXADD(); result->opcode_ = $$; }
  | _KW_XCHG { $$ = new OpcodesXCHG(); result->opcode_ = $$; }
  | _KW_XLATB { $$ = new OpcodesXLATB(); result->opcode_ = $$; }
  | _KW_XOR { $$ = new OpcodesXOR(); result->opcode_ = $$; }
;

%%


/* Entrypoint: parse Program* from file. */
Program* pProgram(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = nask__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  nask_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.program_;
  }
}

/* Entrypoint: parse Program* from string. */
Program* psProgram(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = nask__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = nask__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  nask__delete_buffer(buf, scanner);
  nask_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.program_;
  }
}

/* Entrypoint: parse ListStatement* from file. */
ListStatement* pListStatement(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = nask__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  nask_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.liststatement_->begin(), result.liststatement_->end());
    return result.liststatement_;
  }
}

/* Entrypoint: parse ListStatement* from string. */
ListStatement* psListStatement(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = nask__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = nask__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  nask__delete_buffer(buf, scanner);
  nask_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.liststatement_->begin(), result.liststatement_->end());
    return result.liststatement_;
  }
}

/* Entrypoint: parse Statement* from file. */
Statement* pStatement(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = nask__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  nask_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.statement_;
  }
}

/* Entrypoint: parse Statement* from string. */
Statement* psStatement(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = nask__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = nask__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  nask__delete_buffer(buf, scanner);
  nask_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.statement_;
  }
}

/* Entrypoint: parse ListMnemonicArgs* from file. */
ListMnemonicArgs* pListMnemonicArgs(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = nask__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  nask_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listmnemonicargs_->begin(), result.listmnemonicargs_->end());
    return result.listmnemonicargs_;
  }
}

/* Entrypoint: parse ListMnemonicArgs* from string. */
ListMnemonicArgs* psListMnemonicArgs(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = nask__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = nask__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  nask__delete_buffer(buf, scanner);
  nask_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listmnemonicargs_->begin(), result.listmnemonicargs_->end());
    return result.listmnemonicargs_;
  }
}

/* Entrypoint: parse MnemonicArgs* from file. */
MnemonicArgs* pMnemonicArgs(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = nask__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  nask_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.mnemonicargs_;
  }
}

/* Entrypoint: parse MnemonicArgs* from string. */
MnemonicArgs* psMnemonicArgs(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = nask__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = nask__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  nask__delete_buffer(buf, scanner);
  nask_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.mnemonicargs_;
  }
}

/* Entrypoint: parse Exp* from file. */
Exp* pExp(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = nask__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  nask_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.exp_;
  }
}

/* Entrypoint: parse Exp* from string. */
Exp* psExp(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = nask__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = nask__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  nask__delete_buffer(buf, scanner);
  nask_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.exp_;
  }
}

/* Entrypoint: parse Factor* from file. */
Factor* pFactor(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = nask__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  nask_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.factor_;
  }
}

/* Entrypoint: parse Factor* from string. */
Factor* psFactor(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = nask__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = nask__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  nask__delete_buffer(buf, scanner);
  nask_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.factor_;
  }
}

/* Entrypoint: parse ConfigType* from file. */
ConfigType* pConfigType(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = nask__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  nask_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.configtype_;
  }
}

/* Entrypoint: parse ConfigType* from string. */
ConfigType* psConfigType(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = nask__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = nask__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  nask__delete_buffer(buf, scanner);
  nask_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.configtype_;
  }
}

/* Entrypoint: parse Opcode* from file. */
Opcode* pOpcode(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = nask__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  nask_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.opcode_;
  }
}

/* Entrypoint: parse Opcode* from string. */
Opcode* psOpcode(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = nask__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = nask__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  nask__delete_buffer(buf, scanner);
  nask_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.opcode_;
  }
}



