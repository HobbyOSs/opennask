/* -*- c -*- This FLex file was machine-generated by the BNF converter */

%option noyywrap noinput nounput debug
%option reentrant bison-bridge bison-locations

/* Additional data for the lexer: a buffer for lexing string literals. */
%option extra-type="Buffer"

%{
#include "absyn.hh"
#include "bison.hh"

#define initialize_lexer nask__initialize_lexer

/* BEGIN extensible string buffer */

#include "buffer.hh"

/* The initial size of the buffer to lex string literals. */
#define LITERAL_BUFFER_INITIAL_SIZE 1024

/* The pointer to the literal buffer. */
#define literal_buffer yyextra

/* Initialize the literal buffer. */
#define LITERAL_BUFFER_CREATE() literal_buffer = newBuffer(LITERAL_BUFFER_INITIAL_SIZE)

/* Append characters at the end of the buffer. */
#define LITERAL_BUFFER_APPEND(s) bufferAppendString(literal_buffer, s)

/* Append a character at the end of the buffer. */
#define LITERAL_BUFFER_APPEND_CHAR(c) bufferAppendChar(literal_buffer, c)

/* Release the buffer, returning a pointer to its content. */
#define LITERAL_BUFFER_HARVEST() releaseBuffer(literal_buffer)

/* In exceptional cases, e.g. when reaching EOF, we have to free the buffer. */
#define LITERAL_BUFFER_FREE() freeBuffer(literal_buffer)

/* END extensible string buffer */

static void update_loc(YYLTYPE* loc, char* text)
{
  loc->first_line = loc->last_line;
  loc->first_column = loc->last_column;
  int i = 0;
  for (; text[i] != '\0'; ++i) {
      if (text[i] == '\n') {
          ++loc->last_line;
          loc->last_column = 0;
      } else {
          ++loc->last_column;
      }
  }
}
#define YY_USER_ACTION update_loc(yylloc, yytext);

%}

LETTER [a-zA-Z]
CAPITAL [A-Z]
SMALL [a-z]
DIGIT [0-9]
IDENT [a-zA-Z0-9'_]
%START CHAR CHARESC CHAREND STRING ESCAPED COMMENT COMMENT1

%%  /* Rules. */

<INITIAL>"["      	 return _LBRACK;
<INITIAL>"]"      	 return _RBRACK;
<INITIAL>","      	 return _COMMA;
<INITIAL>"=="      	 return _DEQ;
<INITIAL>"!="      	 return _BANGEQ;
<INITIAL>"<"      	 return _LT;
<INITIAL>">"      	 return _GT;
<INITIAL>"<="      	 return _LDARROW;
<INITIAL>">="      	 return _GTEQ;
<INITIAL>"+"      	 return _PLUS;
<INITIAL>"-"      	 return _MINUS;
<INITIAL>"*"      	 return _STAR;
<INITIAL>"/"      	 return _SLASH;
<INITIAL>"%"      	 return _PERCENT;
<INITIAL>":"      	 return _COLON;
<INITIAL>"AAA"      	 return _KW_AAA;
<INITIAL>"AAD"      	 return _KW_AAD;
<INITIAL>"AAM"      	 return _KW_AAM;
<INITIAL>"AAS"      	 return _KW_AAS;
<INITIAL>"ABSOLUTE"      	 return _KW_ABSOLUTE;
<INITIAL>"ADC"      	 return _KW_ADC;
<INITIAL>"ADD"      	 return _KW_ADD;
<INITIAL>"ALIGN"      	 return _KW_ALIGN;
<INITIAL>"ALIGNB"      	 return _KW_ALIGNB;
<INITIAL>"AND"      	 return _KW_AND;
<INITIAL>"ARPL"      	 return _KW_ARPL;
<INITIAL>"BITS"      	 return _KW_BITS;
<INITIAL>"BOUND"      	 return _KW_BOUND;
<INITIAL>"BSF"      	 return _KW_BSF;
<INITIAL>"BSR"      	 return _KW_BSR;
<INITIAL>"BSWAP"      	 return _KW_BSWAP;
<INITIAL>"BT"      	 return _KW_BT;
<INITIAL>"BTC"      	 return _KW_BTC;
<INITIAL>"BTR"      	 return _KW_BTR;
<INITIAL>"BTS"      	 return _KW_BTS;
<INITIAL>"BYTE"      	 return _KW_BYTE;
<INITIAL>"CALL"      	 return _KW_CALL;
<INITIAL>"CBW"      	 return _KW_CBW;
<INITIAL>"CDQ"      	 return _KW_CDQ;
<INITIAL>"CLC"      	 return _KW_CLC;
<INITIAL>"CLD"      	 return _KW_CLD;
<INITIAL>"CLI"      	 return _KW_CLI;
<INITIAL>"CLTS"      	 return _KW_CLTS;
<INITIAL>"CMC"      	 return _KW_CMC;
<INITIAL>"CMP"      	 return _KW_CMP;
<INITIAL>"CMPSB"      	 return _KW_CMPSB;
<INITIAL>"CMPSD"      	 return _KW_CMPSD;
<INITIAL>"CMPSW"      	 return _KW_CMPSW;
<INITIAL>"CMPXCHG"      	 return _KW_CMPXCHG;
<INITIAL>"CPUID"      	 return _KW_CPUID;
<INITIAL>"CWD"      	 return _KW_CWD;
<INITIAL>"CWDE"      	 return _KW_CWDE;
<INITIAL>"DAA"      	 return _KW_DAA;
<INITIAL>"DAS"      	 return _KW_DAS;
<INITIAL>"DB"      	 return _KW_DB;
<INITIAL>"DD"      	 return _KW_DD;
<INITIAL>"DEC"      	 return _KW_DEC;
<INITIAL>"DIV"      	 return _KW_DIV;
<INITIAL>"DQ"      	 return _KW_DQ;
<INITIAL>"DT"      	 return _KW_DT;
<INITIAL>"DW"      	 return _KW_DW;
<INITIAL>"DWORD"      	 return _KW_DWORD;
<INITIAL>"END"      	 return _KW_END;
<INITIAL>"ENTER"      	 return _KW_ENTER;
<INITIAL>"EQU"      	 return _KW_EQU;
<INITIAL>"EXTERN"      	 return _KW_EXTERN;
<INITIAL>"F2XM1"      	 return _KW_F2XM1;
<INITIAL>"FABS"      	 return _KW_FABS;
<INITIAL>"FADD"      	 return _KW_FADD;
<INITIAL>"FADDP"      	 return _KW_FADDP;
<INITIAL>"FBLD"      	 return _KW_FBLD;
<INITIAL>"FBSTP"      	 return _KW_FBSTP;
<INITIAL>"FCHS"      	 return _KW_FCHS;
<INITIAL>"FCLEX"      	 return _KW_FCLEX;
<INITIAL>"FCOM"      	 return _KW_FCOM;
<INITIAL>"FCOMP"      	 return _KW_FCOMP;
<INITIAL>"FCOMPP"      	 return _KW_FCOMPP;
<INITIAL>"FCOS"      	 return _KW_FCOS;
<INITIAL>"FDECSTP"      	 return _KW_FDECSTP;
<INITIAL>"FDISI"      	 return _KW_FDISI;
<INITIAL>"FDIV"      	 return _KW_FDIV;
<INITIAL>"FDIVP"      	 return _KW_FDIVP;
<INITIAL>"FDIVR"      	 return _KW_FDIVR;
<INITIAL>"FDIVRP"      	 return _KW_FDIVRP;
<INITIAL>"FENI"      	 return _KW_FENI;
<INITIAL>"FFREE"      	 return _KW_FFREE;
<INITIAL>"FIADD"      	 return _KW_FIADD;
<INITIAL>"FICOM"      	 return _KW_FICOM;
<INITIAL>"FICOMP"      	 return _KW_FICOMP;
<INITIAL>"FIDIV"      	 return _KW_FIDIV;
<INITIAL>"FIDIVR"      	 return _KW_FIDIVR;
<INITIAL>"FILD"      	 return _KW_FILD;
<INITIAL>"FILE"      	 return _KW_FILE;
<INITIAL>"FIMUL"      	 return _KW_FIMUL;
<INITIAL>"FINCSTP"      	 return _KW_FINCSTP;
<INITIAL>"FINIT"      	 return _KW_FINIT;
<INITIAL>"FIST"      	 return _KW_FIST;
<INITIAL>"FISTP"      	 return _KW_FISTP;
<INITIAL>"FISUB"      	 return _KW_FISUB;
<INITIAL>"FISUBR"      	 return _KW_FISUBR;
<INITIAL>"FLD"      	 return _KW_FLD;
<INITIAL>"FLD1"      	 return _KW_FLD1;
<INITIAL>"FLDCW"      	 return _KW_FLDCW;
<INITIAL>"FLDENV"      	 return _KW_FLDENV;
<INITIAL>"FLDL2E"      	 return _KW_FLDL2E;
<INITIAL>"FLDL2T"      	 return _KW_FLDL2T;
<INITIAL>"FLDLG2"      	 return _KW_FLDLG2;
<INITIAL>"FLDLN2"      	 return _KW_FLDLN2;
<INITIAL>"FLDPI"      	 return _KW_FLDPI;
<INITIAL>"FLDZ"      	 return _KW_FLDZ;
<INITIAL>"FMUL"      	 return _KW_FMUL;
<INITIAL>"FMULP"      	 return _KW_FMULP;
<INITIAL>"FNCLEX"      	 return _KW_FNCLEX;
<INITIAL>"FNDISI"      	 return _KW_FNDISI;
<INITIAL>"FNENI"      	 return _KW_FNENI;
<INITIAL>"FNINIT"      	 return _KW_FNINIT;
<INITIAL>"FNOP"      	 return _KW_FNOP;
<INITIAL>"FNSAVE"      	 return _KW_FNSAVE;
<INITIAL>"FNSTCW"      	 return _KW_FNSTCW;
<INITIAL>"FNSTENV"      	 return _KW_FNSTENV;
<INITIAL>"FNSTSW"      	 return _KW_FNSTSW;
<INITIAL>"FORMAT"      	 return _KW_FORMAT;
<INITIAL>"FPATAN"      	 return _KW_FPATAN;
<INITIAL>"FPREM"      	 return _KW_FPREM;
<INITIAL>"FPREM1"      	 return _KW_FPREM1;
<INITIAL>"FPTAN"      	 return _KW_FPTAN;
<INITIAL>"FRNDINT"      	 return _KW_FRNDINT;
<INITIAL>"FRSTOR"      	 return _KW_FRSTOR;
<INITIAL>"FSAVE"      	 return _KW_FSAVE;
<INITIAL>"FSCALE"      	 return _KW_FSCALE;
<INITIAL>"FSETPM"      	 return _KW_FSETPM;
<INITIAL>"FSIN"      	 return _KW_FSIN;
<INITIAL>"FSINCOS"      	 return _KW_FSINCOS;
<INITIAL>"FSQRT"      	 return _KW_FSQRT;
<INITIAL>"FST"      	 return _KW_FST;
<INITIAL>"FSTCW"      	 return _KW_FSTCW;
<INITIAL>"FSTENV"      	 return _KW_FSTENV;
<INITIAL>"FSTP"      	 return _KW_FSTP;
<INITIAL>"FSTSW"      	 return _KW_FSTSW;
<INITIAL>"FSUB"      	 return _KW_FSUB;
<INITIAL>"FSUBP"      	 return _KW_FSUBP;
<INITIAL>"FSUBR"      	 return _KW_FSUBR;
<INITIAL>"FSUBRP"      	 return _KW_FSUBRP;
<INITIAL>"FTST"      	 return _KW_FTST;
<INITIAL>"FUCOM"      	 return _KW_FUCOM;
<INITIAL>"FUCOMP"      	 return _KW_FUCOMP;
<INITIAL>"FUCOMPP"      	 return _KW_FUCOMPP;
<INITIAL>"FXAM"      	 return _KW_FXAM;
<INITIAL>"FXCH"      	 return _KW_FXCH;
<INITIAL>"FXTRACT"      	 return _KW_FXTRACT;
<INITIAL>"FYL2X"      	 return _KW_FYL2X;
<INITIAL>"FYL2XP1"      	 return _KW_FYL2XP1;
<INITIAL>"HLT"      	 return _KW_HLT;
<INITIAL>"IDIV"      	 return _KW_IDIV;
<INITIAL>"IMUL"      	 return _KW_IMUL;
<INITIAL>"IN"      	 return _KW_IN;
<INITIAL>"INC"      	 return _KW_INC;
<INITIAL>"INCO"      	 return _KW_INCO;
<INITIAL>"INSB"      	 return _KW_INSB;
<INITIAL>"INSD"      	 return _KW_INSD;
<INITIAL>"INSTRSET"      	 return _KW_INSTRSET;
<INITIAL>"INSW"      	 return _KW_INSW;
<INITIAL>"INT"      	 return _KW_INT;
<INITIAL>"INT3"      	 return _KW_INT3;
<INITIAL>"INTO"      	 return _KW_INTO;
<INITIAL>"INVD"      	 return _KW_INVD;
<INITIAL>"INVLPG"      	 return _KW_INVLPG;
<INITIAL>"IRET"      	 return _KW_IRET;
<INITIAL>"IRETD"      	 return _KW_IRETD;
<INITIAL>"IRETW"      	 return _KW_IRETW;
<INITIAL>"JA"      	 return _KW_JA;
<INITIAL>"JAE"      	 return _KW_JAE;
<INITIAL>"JB"      	 return _KW_JB;
<INITIAL>"JBE"      	 return _KW_JBE;
<INITIAL>"JC"      	 return _KW_JC;
<INITIAL>"JCXZ"      	 return _KW_JCXZ;
<INITIAL>"JE"      	 return _KW_JE;
<INITIAL>"JECXZ"      	 return _KW_JECXZ;
<INITIAL>"JG"      	 return _KW_JG;
<INITIAL>"JGE"      	 return _KW_JGE;
<INITIAL>"JL"      	 return _KW_JL;
<INITIAL>"JLE"      	 return _KW_JLE;
<INITIAL>"JMP"      	 return _KW_JMP;
<INITIAL>"JNA"      	 return _KW_JNA;
<INITIAL>"JNAE"      	 return _KW_JNAE;
<INITIAL>"JNB"      	 return _KW_JNB;
<INITIAL>"JNBE"      	 return _KW_JNBE;
<INITIAL>"JNC"      	 return _KW_JNC;
<INITIAL>"JNE"      	 return _KW_JNE;
<INITIAL>"JNG"      	 return _KW_JNG;
<INITIAL>"JNGE"      	 return _KW_JNGE;
<INITIAL>"JNL"      	 return _KW_JNL;
<INITIAL>"JNLE"      	 return _KW_JNLE;
<INITIAL>"JNO"      	 return _KW_JNO;
<INITIAL>"JNP"      	 return _KW_JNP;
<INITIAL>"JNS"      	 return _KW_JNS;
<INITIAL>"JNZ"      	 return _KW_JNZ;
<INITIAL>"JO"      	 return _KW_JO;
<INITIAL>"JP"      	 return _KW_JP;
<INITIAL>"JPE"      	 return _KW_JPE;
<INITIAL>"JPO"      	 return _KW_JPO;
<INITIAL>"JS"      	 return _KW_JS;
<INITIAL>"JZ"      	 return _KW_JZ;
<INITIAL>"LAHF"      	 return _KW_LAHF;
<INITIAL>"LAR"      	 return _KW_LAR;
<INITIAL>"LDS"      	 return _KW_LDS;
<INITIAL>"LEA"      	 return _KW_LEA;
<INITIAL>"LEAVE"      	 return _KW_LEAVE;
<INITIAL>"LES"      	 return _KW_LES;
<INITIAL>"LFS"      	 return _KW_LFS;
<INITIAL>"LGDT"      	 return _KW_LGDT;
<INITIAL>"LGS"      	 return _KW_LGS;
<INITIAL>"LIDT"      	 return _KW_LIDT;
<INITIAL>"LLDT"      	 return _KW_LLDT;
<INITIAL>"LMSW"      	 return _KW_LMSW;
<INITIAL>"LOCK"      	 return _KW_LOCK;
<INITIAL>"LODSB"      	 return _KW_LODSB;
<INITIAL>"LODSD"      	 return _KW_LODSD;
<INITIAL>"LODSW"      	 return _KW_LODSW;
<INITIAL>"LOOP"      	 return _KW_LOOP;
<INITIAL>"LOOPE"      	 return _KW_LOOPE;
<INITIAL>"LOOPNE"      	 return _KW_LOOPNE;
<INITIAL>"LOOPNZ"      	 return _KW_LOOPNZ;
<INITIAL>"LOOPZ"      	 return _KW_LOOPZ;
<INITIAL>"LSL"      	 return _KW_LSL;
<INITIAL>"LSS"      	 return _KW_LSS;
<INITIAL>"LTR"      	 return _KW_LTR;
<INITIAL>"MOV"      	 return _KW_MOV;
<INITIAL>"MOVSB"      	 return _KW_MOVSB;
<INITIAL>"MOVSD"      	 return _KW_MOVSD;
<INITIAL>"MOVSW"      	 return _KW_MOVSW;
<INITIAL>"MOVSX"      	 return _KW_MOVSX;
<INITIAL>"MOVZX"      	 return _KW_MOVZX;
<INITIAL>"MUL"      	 return _KW_MUL;
<INITIAL>"NEG"      	 return _KW_NEG;
<INITIAL>"NOP"      	 return _KW_NOP;
<INITIAL>"NOT"      	 return _KW_NOT;
<INITIAL>"OPTIMIZE"      	 return _KW_OPTIMIZE;
<INITIAL>"OR"      	 return _KW_OR;
<INITIAL>"ORG"      	 return _KW_ORG;
<INITIAL>"OUT"      	 return _KW_OUT;
<INITIAL>"OUTSB"      	 return _KW_OUTSB;
<INITIAL>"OUTSD"      	 return _KW_OUTSD;
<INITIAL>"OUTSW"      	 return _KW_OUTSW;
<INITIAL>"PADDING"      	 return _KW_PADDING;
<INITIAL>"PADSET"      	 return _KW_PADSET;
<INITIAL>"POP"      	 return _KW_POP;
<INITIAL>"POPA"      	 return _KW_POPA;
<INITIAL>"POPAD"      	 return _KW_POPAD;
<INITIAL>"POPAW"      	 return _KW_POPAW;
<INITIAL>"POPF"      	 return _KW_POPF;
<INITIAL>"POPFD"      	 return _KW_POPFD;
<INITIAL>"POPFW"      	 return _KW_POPFW;
<INITIAL>"PUSH"      	 return _KW_PUSH;
<INITIAL>"PUSHA"      	 return _KW_PUSHA;
<INITIAL>"PUSHAD"      	 return _KW_PUSHAD;
<INITIAL>"PUSHAW"      	 return _KW_PUSHAW;
<INITIAL>"PUSHD"      	 return _KW_PUSHD;
<INITIAL>"PUSHF"      	 return _KW_PUSHF;
<INITIAL>"PUSHFD"      	 return _KW_PUSHFD;
<INITIAL>"PUSHFW"      	 return _KW_PUSHFW;
<INITIAL>"RCL"      	 return _KW_RCL;
<INITIAL>"RCR"      	 return _KW_RCR;
<INITIAL>"RDMSR"      	 return _KW_RDMSR;
<INITIAL>"RDPMC"      	 return _KW_RDPMC;
<INITIAL>"REP"      	 return _KW_REP;
<INITIAL>"REPE"      	 return _KW_REPE;
<INITIAL>"REPNE"      	 return _KW_REPNE;
<INITIAL>"REPNZ"      	 return _KW_REPNZ;
<INITIAL>"REPZ"      	 return _KW_REPZ;
<INITIAL>"RESB"      	 return _KW_RESB;
<INITIAL>"RESD"      	 return _KW_RESD;
<INITIAL>"RESQ"      	 return _KW_RESQ;
<INITIAL>"REST"      	 return _KW_REST;
<INITIAL>"RESW"      	 return _KW_RESW;
<INITIAL>"RET"      	 return _KW_RET;
<INITIAL>"RETF"      	 return _KW_RETF;
<INITIAL>"RETN"      	 return _KW_RETN;
<INITIAL>"ROL"      	 return _KW_ROL;
<INITIAL>"ROR"      	 return _KW_ROR;
<INITIAL>"RSM"      	 return _KW_RSM;
<INITIAL>"SAHF"      	 return _KW_SAHF;
<INITIAL>"SAL"      	 return _KW_SAL;
<INITIAL>"SAR"      	 return _KW_SAR;
<INITIAL>"SBB"      	 return _KW_SBB;
<INITIAL>"SCASB"      	 return _KW_SCASB;
<INITIAL>"SCASD"      	 return _KW_SCASD;
<INITIAL>"SCASW"      	 return _KW_SCASW;
<INITIAL>"SECTION"      	 return _KW_SECTION;
<INITIAL>"SETA"      	 return _KW_SETA;
<INITIAL>"SETAE"      	 return _KW_SETAE;
<INITIAL>"SETB"      	 return _KW_SETB;
<INITIAL>"SETBE"      	 return _KW_SETBE;
<INITIAL>"SETC"      	 return _KW_SETC;
<INITIAL>"SETE"      	 return _KW_SETE;
<INITIAL>"SETG"      	 return _KW_SETG;
<INITIAL>"SETGE"      	 return _KW_SETGE;
<INITIAL>"SETL"      	 return _KW_SETL;
<INITIAL>"SETLE"      	 return _KW_SETLE;
<INITIAL>"SETNA"      	 return _KW_SETNA;
<INITIAL>"SETNAE"      	 return _KW_SETNAE;
<INITIAL>"SETNB"      	 return _KW_SETNB;
<INITIAL>"SETNBE"      	 return _KW_SETNBE;
<INITIAL>"SETNC"      	 return _KW_SETNC;
<INITIAL>"SETNE"      	 return _KW_SETNE;
<INITIAL>"SETNG"      	 return _KW_SETNG;
<INITIAL>"SETNGE"      	 return _KW_SETNGE;
<INITIAL>"SETNL"      	 return _KW_SETNL;
<INITIAL>"SETNLE"      	 return _KW_SETNLE;
<INITIAL>"SETNO"      	 return _KW_SETNO;
<INITIAL>"SETNP"      	 return _KW_SETNP;
<INITIAL>"SETNS"      	 return _KW_SETNS;
<INITIAL>"SETNZ"      	 return _KW_SETNZ;
<INITIAL>"SETO"      	 return _KW_SETO;
<INITIAL>"SETP"      	 return _KW_SETP;
<INITIAL>"SETPE"      	 return _KW_SETPE;
<INITIAL>"SETPO"      	 return _KW_SETPO;
<INITIAL>"SETS"      	 return _KW_SETS;
<INITIAL>"SETZ"      	 return _KW_SETZ;
<INITIAL>"SGDT"      	 return _KW_SGDT;
<INITIAL>"SHL"      	 return _KW_SHL;
<INITIAL>"SHLD"      	 return _KW_SHLD;
<INITIAL>"SHR"      	 return _KW_SHR;
<INITIAL>"SHRD"      	 return _KW_SHRD;
<INITIAL>"SIDT"      	 return _KW_SIDT;
<INITIAL>"SLDT"      	 return _KW_SLDT;
<INITIAL>"SMSW"      	 return _KW_SMSW;
<INITIAL>"STC"      	 return _KW_STC;
<INITIAL>"STD"      	 return _KW_STD;
<INITIAL>"STI"      	 return _KW_STI;
<INITIAL>"STOSB"      	 return _KW_STOSB;
<INITIAL>"STOSD"      	 return _KW_STOSD;
<INITIAL>"STOSW"      	 return _KW_STOSW;
<INITIAL>"STR"      	 return _KW_STR;
<INITIAL>"SUB"      	 return _KW_SUB;
<INITIAL>"TEST"      	 return _KW_TEST;
<INITIAL>"TIMES"      	 return _KW_TIMES;
<INITIAL>"UD2"      	 return _KW_UD2;
<INITIAL>"VERR"      	 return _KW_VERR;
<INITIAL>"VERW"      	 return _KW_VERW;
<INITIAL>"WAIT"      	 return _KW_WAIT;
<INITIAL>"WBINVD"      	 return _KW_WBINVD;
<INITIAL>"WORD"      	 return _KW_WORD;
<INITIAL>"WRMSR"      	 return _KW_WRMSR;
<INITIAL>"XADD"      	 return _KW_XADD;
<INITIAL>"XCHG"      	 return _KW_XCHG;
<INITIAL>"XLATB"      	 return _KW_XLATB;
<INITIAL>"XOR"      	 return _KW_XOR;

<INITIAL>"#" BEGIN COMMENT; /* BNFC: block comment "#" "\\n" */
<COMMENT>\n BEGIN INITIAL;
<COMMENT>[^\n] /* skip */;
<INITIAL>";" BEGIN COMMENT1; /* BNFC: block comment ";" "\\n" */
<COMMENT1>\n BEGIN INITIAL;
<COMMENT1>[^\n] /* skip */;

<INITIAL>0(X|x)(A|B|C|D|E|F|a|b|c|d|e|f|{DIGIT})+\-*\$*    	 yylval->_string = strdup(yytext); return T_Hex;
<INITIAL>(\_|({DIGIT}|{LETTER}))+\:    	 yylval->_string = strdup(yytext); return T_Label;
<INITIAL>"\""        	 LITERAL_BUFFER_CREATE(); BEGIN STRING;
<STRING>\\             	 BEGIN ESCAPED;
<STRING>\"             	 yylval->_string = LITERAL_BUFFER_HARVEST(); BEGIN INITIAL; return _STRING_;
<STRING>.              	 LITERAL_BUFFER_APPEND_CHAR(yytext[0]);
<ESCAPED>n             	 LITERAL_BUFFER_APPEND_CHAR('\n'); BEGIN STRING;
<ESCAPED>\"            	 LITERAL_BUFFER_APPEND_CHAR('"');  BEGIN STRING;
<ESCAPED>\\            	 LITERAL_BUFFER_APPEND_CHAR('\\'); BEGIN STRING;
<ESCAPED>t             	 LITERAL_BUFFER_APPEND_CHAR('\t'); BEGIN STRING;
<ESCAPED>.             	 LITERAL_BUFFER_APPEND(yytext);    BEGIN STRING;
<STRING,ESCAPED><<EOF>>	 LITERAL_BUFFER_FREE(); return _ERROR_;
<INITIAL>{DIGIT}+      	 yylval->_int = atoi(yytext); return _INTEGER_;
<INITIAL>{LETTER}{IDENT}*      	 yylval->_string = strdup(yytext); return _IDENT_;
<INITIAL>[ \t\r\n\f]      	 /* ignore white space. */;
<INITIAL>.      	 return _ERROR_;

%%  /* Initialization code. */

yyscan_t initialize_lexer(FILE *inp)
{
  yyscan_t scanner;
  if (yylex_init_extra(NULL, &scanner)) return 0;
  if (inp) yyrestart(inp, scanner);
  nask_set_debug(true, scanner); return scanner;
}

