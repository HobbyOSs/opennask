#ifndef ABSYN_HEADER
#define ABSYN_HEADER

#include<string>
#include<vector>
#include<algorithm>

//C++ Abstract Syntax Interface generated by the BNF Converter.

/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;


typedef std::string Hex;
typedef std::string Label;


/********************   Forward Declarations    ********************/

class Program;
class Statement;
class MnemonicArgs;
class Exp;
class Factor;
class ConfigType;
class DataType;
class Opcode;
class Prog;
class LabelStmt;
class DeclareStmt;
class ConfigStmt;
class MnemonicStmt;
class OpcodeStmt;
class MnemoArg;
class PlusExp;
class MinusExp;
class MulExp;
class DivExp;
class ModExp;
class IndirectAddrExp;
class DatatypeExp;
class RangeExp;
class LabelExp;
class ImmExp;
class NumberFactor;
class HexFactor;
class IdentFactor;
class StringFactor;
class BitsConfig;
class InstConfig;
class OptiConfig;
class FormConfig;
class PaddConfig;
class PadsConfig;
class SectConfig;
class AbsoConfig;
class FileConfig;
class ByteDataType;
class WordDataType;
class DwordDataType;
class OpcodesAAA;
class OpcodesAAD;
class OpcodesAAS;
class OpcodesAAM;
class OpcodesADC;
class OpcodesADD;
class OpcodesAND;
class OpcodesALIGN;
class OpcodesALIGNB;
class OpcodesARPL;
class OpcodesBOUND;
class OpcodesBSF;
class OpcodesBSR;
class OpcodesBSWAP;
class OpcodesBT;
class OpcodesBTC;
class OpcodesBTR;
class OpcodesBTS;
class OpcodesCALL;
class OpcodesCBW;
class OpcodesCDQ;
class OpcodesCLC;
class OpcodesCLD;
class OpcodesCLI;
class OpcodesCLTS;
class OpcodesCMC;
class OpcodesCMP;
class OpcodesCMPSB;
class OpcodesCMPSD;
class OpcodesCMPSW;
class OpcodesCMPXCHG;
class OpcodesCPUID;
class OpcodesCWD;
class OpcodesCWDE;
class OpcodesDAA;
class OpcodesDAS;
class OpcodesDB;
class OpcodesDD;
class OpcodesDEC;
class OpcodesDIV;
class OpcodesDQ;
class OpcodesDT;
class OpcodesDW;
class OpcodesEND;
class OpcodesENTER;
class OpcodesEXTERN;
class OpcodesF2XM1;
class OpcodesFABS;
class OpcodesFADD;
class OpcodesFADDP;
class OpcodesFBLD;
class OpcodesFBSTP;
class OpcodesFCHS;
class OpcodesFCLEX;
class OpcodesFCOM;
class OpcodesFCOMP;
class OpcodesFCOMPP;
class OpcodesFCOS;
class OpcodesFDECSTP;
class OpcodesFDISI;
class OpcodesFDIV;
class OpcodesFDIVP;
class OpcodesFDIVR;
class OpcodesFDIVRP;
class OpcodesFENI;
class OpcodesFFREE;
class OpcodesFIADD;
class OpcodesFICOM;
class OpcodesFICOMP;
class OpcodesFIDIV;
class OpcodesFIDIVR;
class OpcodesFILD;
class OpcodesFIMUL;
class OpcodesFINCSTP;
class OpcodesFINIT;
class OpcodesFIST;
class OpcodesFISTP;
class OpcodesFISUB;
class OpcodesFISUBR;
class OpcodesFLD;
class OpcodesFLD1;
class OpcodesFLDCW;
class OpcodesFLDENV;
class OpcodesFLDL2E;
class OpcodesFLDL2T;
class OpcodesFLDLG2;
class OpcodesFLDLN2;
class OpcodesFLDPI;
class OpcodesFLDZ;
class OpcodesFMUL;
class OpcodesFMULP;
class OpcodesFNCLEX;
class OpcodesFNDISI;
class OpcodesFNENI;
class OpcodesFNINIT;
class OpcodesFNOP;
class OpcodesFNSAVE;
class OpcodesFNSTCW;
class OpcodesFNSTENV;
class OpcodesFNSTSW;
class OpcodesFPATAN;
class OpcodesFPTAN;
class OpcodesFPREM;
class OpcodesFPREM1;
class OpcodesFRNDINT;
class OpcodesFRSTOR;
class OpcodesFSAVE;
class OpcodesFSCALE;
class OpcodesFSETPM;
class OpcodesFSIN;
class OpcodesFSINCOS;
class OpcodesFSQRT;
class OpcodesFST;
class OpcodesFSTCW;
class OpcodesFSTENV;
class OpcodesFSTP;
class OpcodesFSTSW;
class OpcodesFSUB;
class OpcodesFSUBP;
class OpcodesFSUBR;
class OpcodesFSUBRP;
class OpcodesFTST;
class OpcodesFUCOM;
class OpcodesFUCOMP;
class OpcodesFUCOMPP;
class OpcodesFXAM;
class OpcodesFXCH;
class OpcodesFXTRACT;
class OpcodesFYL2X;
class OpcodesFYL2XP1;
class OpcodesHLT;
class OpcodesIDIV;
class OpcodesIMUL;
class OpcodesIN;
class OpcodesINC;
class OpcodesINCO;
class OpcodesINSB;
class OpcodesINSD;
class OpcodesINSW;
class OpcodesINT;
class OpcodesINT3;
class OpcodesINTO;
class OpcodesINVD;
class OpcodesINVLPG;
class OpcodesIRET;
class OpcodesIRETD;
class OpcodesIRETW;
class OpcodesJA;
class OpcodesJAE;
class OpcodesJB;
class OpcodesJBE;
class OpcodesJC;
class OpcodesJCXZ;
class OpcodesJE;
class OpcodesJECXZ;
class OpcodesJG;
class OpcodesJGE;
class OpcodesJL;
class OpcodesJLE;
class OpcodesJMP;
class OpcodesJNA;
class OpcodesJNAE;
class OpcodesJNB;
class OpcodesJNBE;
class OpcodesJNC;
class OpcodesJNE;
class OpcodesJNG;
class OpcodesJNGE;
class OpcodesJNL;
class OpcodesJNLE;
class OpcodesJNO;
class OpcodesJNP;
class OpcodesJNS;
class OpcodesJNZ;
class OpcodesJO;
class OpcodesJP;
class OpcodesJPE;
class OpcodesJPO;
class OpcodesJS;
class OpcodesJZ;
class OpcodesLAHF;
class OpcodesLAR;
class OpcodesLDS;
class OpcodesLEA;
class OpcodesLEAVE;
class OpcodesLES;
class OpcodesLFS;
class OpcodesLGDT;
class OpcodesLGS;
class OpcodesLIDT;
class OpcodesLLDT;
class OpcodesLMSW;
class OpcodesLOCK;
class OpcodesLODSB;
class OpcodesLODSD;
class OpcodesLODSW;
class OpcodesLOOP;
class OpcodesLOOPE;
class OpcodesLOOPNE;
class OpcodesLOOPNZ;
class OpcodesLOOPZ;
class OpcodesLSL;
class OpcodesLSS;
class OpcodesLTR;
class OpcodesMOV;
class OpcodesMOVSB;
class OpcodesMOVSD;
class OpcodesMOVSW;
class OpcodesMOVSX;
class OpcodesMOVZX;
class OpcodesMUL;
class OpcodesNEG;
class OpcodesNOP;
class OpcodesNOT;
class OpcodesOR;
class OpcodesORG;
class OpcodesOUT;
class OpcodesOUTSB;
class OpcodesOUTSD;
class OpcodesOUTSW;
class OpcodesPOP;
class OpcodesPOPA;
class OpcodesPOPAD;
class OpcodesPOPAW;
class OpcodesPOPF;
class OpcodesPOPFD;
class OpcodesPOPFW;
class OpcodesPUSH;
class OpcodesPUSHA;
class OpcodesPUSHD;
class OpcodesPUSHAD;
class OpcodesPUSHAW;
class OpcodesPUSHF;
class OpcodesPUSHFD;
class OpcodesPUSHFW;
class OpcodesRCL;
class OpcodesRCR;
class OpcodesRDMSR;
class OpcodesRDPMC;
class OpcodesREP;
class OpcodesREPE;
class OpcodesREPNE;
class OpcodesREPNZ;
class OpcodesREPZ;
class OpcodesRESB;
class OpcodesRESD;
class OpcodesRESQ;
class OpcodesREST;
class OpcodesRESW;
class OpcodesRET;
class OpcodesRETF;
class OpcodesRETN;
class OpcodesROL;
class OpcodesROR;
class OpcodesRSM;
class OpcodesSAHF;
class OpcodesSAL;
class OpcodesSAR;
class OpcodesSBB;
class OpcodesSCASB;
class OpcodesSCASD;
class OpcodesSCASW;
class OpcodesSETA;
class OpcodesSETAE;
class OpcodesSETB;
class OpcodesSETBE;
class OpcodesSETC;
class OpcodesSETE;
class OpcodesSETG;
class OpcodesSETGE;
class OpcodesSETL;
class OpcodesSETLE;
class OpcodesSETNA;
class OpcodesSETNAE;
class OpcodesSETNB;
class OpcodesSETNBE;
class OpcodesSETNC;
class OpcodesSETNE;
class OpcodesSETNG;
class OpcodesSETNGE;
class OpcodesSETNL;
class OpcodesSETNLE;
class OpcodesSETNO;
class OpcodesSETNP;
class OpcodesSETNS;
class OpcodesSETNZ;
class OpcodesSETO;
class OpcodesSETP;
class OpcodesSETPE;
class OpcodesSETPO;
class OpcodesSETS;
class OpcodesSETZ;
class OpcodesSGDT;
class OpcodesSHL;
class OpcodesSHLD;
class OpcodesSHR;
class OpcodesSHRD;
class OpcodesSIDT;
class OpcodesSLDT;
class OpcodesSMSW;
class OpcodesSTC;
class OpcodesSTD;
class OpcodesSTI;
class OpcodesSTOSB;
class OpcodesSTOSD;
class OpcodesSTOSW;
class OpcodesSTR;
class OpcodesSUB;
class OpcodesTEST;
class OpcodesTIMES;
class OpcodesUD2;
class OpcodesVERR;
class OpcodesVERW;
class OpcodesWAIT;
class OpcodesWBINVD;
class OpcodesWRMSR;
class OpcodesXADD;
class OpcodesXCHG;
class OpcodesXLATB;
class OpcodesXOR;
class ListStatement;
class ListMnemonicArgs;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitProgram(Program *p) = 0;
  virtual void visitStatement(Statement *p) = 0;
  virtual void visitMnemonicArgs(MnemonicArgs *p) = 0;
  virtual void visitExp(Exp *p) = 0;
  virtual void visitFactor(Factor *p) = 0;
  virtual void visitConfigType(ConfigType *p) = 0;
  virtual void visitDataType(DataType *p) = 0;
  virtual void visitOpcode(Opcode *p) = 0;
  virtual void visitProg(Prog *p) = 0;
  virtual void visitLabelStmt(LabelStmt *p) = 0;
  virtual void visitDeclareStmt(DeclareStmt *p) = 0;
  virtual void visitConfigStmt(ConfigStmt *p) = 0;
  virtual void visitMnemonicStmt(MnemonicStmt *p) = 0;
  virtual void visitOpcodeStmt(OpcodeStmt *p) = 0;
  virtual void visitMnemoArg(MnemoArg *p) = 0;
  virtual void visitPlusExp(PlusExp *p) = 0;
  virtual void visitMinusExp(MinusExp *p) = 0;
  virtual void visitMulExp(MulExp *p) = 0;
  virtual void visitDivExp(DivExp *p) = 0;
  virtual void visitModExp(ModExp *p) = 0;
  virtual void visitIndirectAddrExp(IndirectAddrExp *p) = 0;
  virtual void visitDatatypeExp(DatatypeExp *p) = 0;
  virtual void visitRangeExp(RangeExp *p) = 0;
  virtual void visitLabelExp(LabelExp *p) = 0;
  virtual void visitImmExp(ImmExp *p) = 0;
  virtual void visitNumberFactor(NumberFactor *p) = 0;
  virtual void visitHexFactor(HexFactor *p) = 0;
  virtual void visitIdentFactor(IdentFactor *p) = 0;
  virtual void visitStringFactor(StringFactor *p) = 0;
  virtual void visitBitsConfig(BitsConfig *p) = 0;
  virtual void visitInstConfig(InstConfig *p) = 0;
  virtual void visitOptiConfig(OptiConfig *p) = 0;
  virtual void visitFormConfig(FormConfig *p) = 0;
  virtual void visitPaddConfig(PaddConfig *p) = 0;
  virtual void visitPadsConfig(PadsConfig *p) = 0;
  virtual void visitSectConfig(SectConfig *p) = 0;
  virtual void visitAbsoConfig(AbsoConfig *p) = 0;
  virtual void visitFileConfig(FileConfig *p) = 0;
  virtual void visitByteDataType(ByteDataType *p) = 0;
  virtual void visitWordDataType(WordDataType *p) = 0;
  virtual void visitDwordDataType(DwordDataType *p) = 0;
  virtual void visitOpcodesAAA(OpcodesAAA *p) = 0;
  virtual void visitOpcodesAAD(OpcodesAAD *p) = 0;
  virtual void visitOpcodesAAS(OpcodesAAS *p) = 0;
  virtual void visitOpcodesAAM(OpcodesAAM *p) = 0;
  virtual void visitOpcodesADC(OpcodesADC *p) = 0;
  virtual void visitOpcodesADD(OpcodesADD *p) = 0;
  virtual void visitOpcodesAND(OpcodesAND *p) = 0;
  virtual void visitOpcodesALIGN(OpcodesALIGN *p) = 0;
  virtual void visitOpcodesALIGNB(OpcodesALIGNB *p) = 0;
  virtual void visitOpcodesARPL(OpcodesARPL *p) = 0;
  virtual void visitOpcodesBOUND(OpcodesBOUND *p) = 0;
  virtual void visitOpcodesBSF(OpcodesBSF *p) = 0;
  virtual void visitOpcodesBSR(OpcodesBSR *p) = 0;
  virtual void visitOpcodesBSWAP(OpcodesBSWAP *p) = 0;
  virtual void visitOpcodesBT(OpcodesBT *p) = 0;
  virtual void visitOpcodesBTC(OpcodesBTC *p) = 0;
  virtual void visitOpcodesBTR(OpcodesBTR *p) = 0;
  virtual void visitOpcodesBTS(OpcodesBTS *p) = 0;
  virtual void visitOpcodesCALL(OpcodesCALL *p) = 0;
  virtual void visitOpcodesCBW(OpcodesCBW *p) = 0;
  virtual void visitOpcodesCDQ(OpcodesCDQ *p) = 0;
  virtual void visitOpcodesCLC(OpcodesCLC *p) = 0;
  virtual void visitOpcodesCLD(OpcodesCLD *p) = 0;
  virtual void visitOpcodesCLI(OpcodesCLI *p) = 0;
  virtual void visitOpcodesCLTS(OpcodesCLTS *p) = 0;
  virtual void visitOpcodesCMC(OpcodesCMC *p) = 0;
  virtual void visitOpcodesCMP(OpcodesCMP *p) = 0;
  virtual void visitOpcodesCMPSB(OpcodesCMPSB *p) = 0;
  virtual void visitOpcodesCMPSD(OpcodesCMPSD *p) = 0;
  virtual void visitOpcodesCMPSW(OpcodesCMPSW *p) = 0;
  virtual void visitOpcodesCMPXCHG(OpcodesCMPXCHG *p) = 0;
  virtual void visitOpcodesCPUID(OpcodesCPUID *p) = 0;
  virtual void visitOpcodesCWD(OpcodesCWD *p) = 0;
  virtual void visitOpcodesCWDE(OpcodesCWDE *p) = 0;
  virtual void visitOpcodesDAA(OpcodesDAA *p) = 0;
  virtual void visitOpcodesDAS(OpcodesDAS *p) = 0;
  virtual void visitOpcodesDB(OpcodesDB *p) = 0;
  virtual void visitOpcodesDD(OpcodesDD *p) = 0;
  virtual void visitOpcodesDEC(OpcodesDEC *p) = 0;
  virtual void visitOpcodesDIV(OpcodesDIV *p) = 0;
  virtual void visitOpcodesDQ(OpcodesDQ *p) = 0;
  virtual void visitOpcodesDT(OpcodesDT *p) = 0;
  virtual void visitOpcodesDW(OpcodesDW *p) = 0;
  virtual void visitOpcodesEND(OpcodesEND *p) = 0;
  virtual void visitOpcodesENTER(OpcodesENTER *p) = 0;
  virtual void visitOpcodesEXTERN(OpcodesEXTERN *p) = 0;
  virtual void visitOpcodesF2XM1(OpcodesF2XM1 *p) = 0;
  virtual void visitOpcodesFABS(OpcodesFABS *p) = 0;
  virtual void visitOpcodesFADD(OpcodesFADD *p) = 0;
  virtual void visitOpcodesFADDP(OpcodesFADDP *p) = 0;
  virtual void visitOpcodesFBLD(OpcodesFBLD *p) = 0;
  virtual void visitOpcodesFBSTP(OpcodesFBSTP *p) = 0;
  virtual void visitOpcodesFCHS(OpcodesFCHS *p) = 0;
  virtual void visitOpcodesFCLEX(OpcodesFCLEX *p) = 0;
  virtual void visitOpcodesFCOM(OpcodesFCOM *p) = 0;
  virtual void visitOpcodesFCOMP(OpcodesFCOMP *p) = 0;
  virtual void visitOpcodesFCOMPP(OpcodesFCOMPP *p) = 0;
  virtual void visitOpcodesFCOS(OpcodesFCOS *p) = 0;
  virtual void visitOpcodesFDECSTP(OpcodesFDECSTP *p) = 0;
  virtual void visitOpcodesFDISI(OpcodesFDISI *p) = 0;
  virtual void visitOpcodesFDIV(OpcodesFDIV *p) = 0;
  virtual void visitOpcodesFDIVP(OpcodesFDIVP *p) = 0;
  virtual void visitOpcodesFDIVR(OpcodesFDIVR *p) = 0;
  virtual void visitOpcodesFDIVRP(OpcodesFDIVRP *p) = 0;
  virtual void visitOpcodesFENI(OpcodesFENI *p) = 0;
  virtual void visitOpcodesFFREE(OpcodesFFREE *p) = 0;
  virtual void visitOpcodesFIADD(OpcodesFIADD *p) = 0;
  virtual void visitOpcodesFICOM(OpcodesFICOM *p) = 0;
  virtual void visitOpcodesFICOMP(OpcodesFICOMP *p) = 0;
  virtual void visitOpcodesFIDIV(OpcodesFIDIV *p) = 0;
  virtual void visitOpcodesFIDIVR(OpcodesFIDIVR *p) = 0;
  virtual void visitOpcodesFILD(OpcodesFILD *p) = 0;
  virtual void visitOpcodesFIMUL(OpcodesFIMUL *p) = 0;
  virtual void visitOpcodesFINCSTP(OpcodesFINCSTP *p) = 0;
  virtual void visitOpcodesFINIT(OpcodesFINIT *p) = 0;
  virtual void visitOpcodesFIST(OpcodesFIST *p) = 0;
  virtual void visitOpcodesFISTP(OpcodesFISTP *p) = 0;
  virtual void visitOpcodesFISUB(OpcodesFISUB *p) = 0;
  virtual void visitOpcodesFISUBR(OpcodesFISUBR *p) = 0;
  virtual void visitOpcodesFLD(OpcodesFLD *p) = 0;
  virtual void visitOpcodesFLD1(OpcodesFLD1 *p) = 0;
  virtual void visitOpcodesFLDCW(OpcodesFLDCW *p) = 0;
  virtual void visitOpcodesFLDENV(OpcodesFLDENV *p) = 0;
  virtual void visitOpcodesFLDL2E(OpcodesFLDL2E *p) = 0;
  virtual void visitOpcodesFLDL2T(OpcodesFLDL2T *p) = 0;
  virtual void visitOpcodesFLDLG2(OpcodesFLDLG2 *p) = 0;
  virtual void visitOpcodesFLDLN2(OpcodesFLDLN2 *p) = 0;
  virtual void visitOpcodesFLDPI(OpcodesFLDPI *p) = 0;
  virtual void visitOpcodesFLDZ(OpcodesFLDZ *p) = 0;
  virtual void visitOpcodesFMUL(OpcodesFMUL *p) = 0;
  virtual void visitOpcodesFMULP(OpcodesFMULP *p) = 0;
  virtual void visitOpcodesFNCLEX(OpcodesFNCLEX *p) = 0;
  virtual void visitOpcodesFNDISI(OpcodesFNDISI *p) = 0;
  virtual void visitOpcodesFNENI(OpcodesFNENI *p) = 0;
  virtual void visitOpcodesFNINIT(OpcodesFNINIT *p) = 0;
  virtual void visitOpcodesFNOP(OpcodesFNOP *p) = 0;
  virtual void visitOpcodesFNSAVE(OpcodesFNSAVE *p) = 0;
  virtual void visitOpcodesFNSTCW(OpcodesFNSTCW *p) = 0;
  virtual void visitOpcodesFNSTENV(OpcodesFNSTENV *p) = 0;
  virtual void visitOpcodesFNSTSW(OpcodesFNSTSW *p) = 0;
  virtual void visitOpcodesFPATAN(OpcodesFPATAN *p) = 0;
  virtual void visitOpcodesFPTAN(OpcodesFPTAN *p) = 0;
  virtual void visitOpcodesFPREM(OpcodesFPREM *p) = 0;
  virtual void visitOpcodesFPREM1(OpcodesFPREM1 *p) = 0;
  virtual void visitOpcodesFRNDINT(OpcodesFRNDINT *p) = 0;
  virtual void visitOpcodesFRSTOR(OpcodesFRSTOR *p) = 0;
  virtual void visitOpcodesFSAVE(OpcodesFSAVE *p) = 0;
  virtual void visitOpcodesFSCALE(OpcodesFSCALE *p) = 0;
  virtual void visitOpcodesFSETPM(OpcodesFSETPM *p) = 0;
  virtual void visitOpcodesFSIN(OpcodesFSIN *p) = 0;
  virtual void visitOpcodesFSINCOS(OpcodesFSINCOS *p) = 0;
  virtual void visitOpcodesFSQRT(OpcodesFSQRT *p) = 0;
  virtual void visitOpcodesFST(OpcodesFST *p) = 0;
  virtual void visitOpcodesFSTCW(OpcodesFSTCW *p) = 0;
  virtual void visitOpcodesFSTENV(OpcodesFSTENV *p) = 0;
  virtual void visitOpcodesFSTP(OpcodesFSTP *p) = 0;
  virtual void visitOpcodesFSTSW(OpcodesFSTSW *p) = 0;
  virtual void visitOpcodesFSUB(OpcodesFSUB *p) = 0;
  virtual void visitOpcodesFSUBP(OpcodesFSUBP *p) = 0;
  virtual void visitOpcodesFSUBR(OpcodesFSUBR *p) = 0;
  virtual void visitOpcodesFSUBRP(OpcodesFSUBRP *p) = 0;
  virtual void visitOpcodesFTST(OpcodesFTST *p) = 0;
  virtual void visitOpcodesFUCOM(OpcodesFUCOM *p) = 0;
  virtual void visitOpcodesFUCOMP(OpcodesFUCOMP *p) = 0;
  virtual void visitOpcodesFUCOMPP(OpcodesFUCOMPP *p) = 0;
  virtual void visitOpcodesFXAM(OpcodesFXAM *p) = 0;
  virtual void visitOpcodesFXCH(OpcodesFXCH *p) = 0;
  virtual void visitOpcodesFXTRACT(OpcodesFXTRACT *p) = 0;
  virtual void visitOpcodesFYL2X(OpcodesFYL2X *p) = 0;
  virtual void visitOpcodesFYL2XP1(OpcodesFYL2XP1 *p) = 0;
  virtual void visitOpcodesHLT(OpcodesHLT *p) = 0;
  virtual void visitOpcodesIDIV(OpcodesIDIV *p) = 0;
  virtual void visitOpcodesIMUL(OpcodesIMUL *p) = 0;
  virtual void visitOpcodesIN(OpcodesIN *p) = 0;
  virtual void visitOpcodesINC(OpcodesINC *p) = 0;
  virtual void visitOpcodesINCO(OpcodesINCO *p) = 0;
  virtual void visitOpcodesINSB(OpcodesINSB *p) = 0;
  virtual void visitOpcodesINSD(OpcodesINSD *p) = 0;
  virtual void visitOpcodesINSW(OpcodesINSW *p) = 0;
  virtual void visitOpcodesINT(OpcodesINT *p) = 0;
  virtual void visitOpcodesINT3(OpcodesINT3 *p) = 0;
  virtual void visitOpcodesINTO(OpcodesINTO *p) = 0;
  virtual void visitOpcodesINVD(OpcodesINVD *p) = 0;
  virtual void visitOpcodesINVLPG(OpcodesINVLPG *p) = 0;
  virtual void visitOpcodesIRET(OpcodesIRET *p) = 0;
  virtual void visitOpcodesIRETD(OpcodesIRETD *p) = 0;
  virtual void visitOpcodesIRETW(OpcodesIRETW *p) = 0;
  virtual void visitOpcodesJA(OpcodesJA *p) = 0;
  virtual void visitOpcodesJAE(OpcodesJAE *p) = 0;
  virtual void visitOpcodesJB(OpcodesJB *p) = 0;
  virtual void visitOpcodesJBE(OpcodesJBE *p) = 0;
  virtual void visitOpcodesJC(OpcodesJC *p) = 0;
  virtual void visitOpcodesJCXZ(OpcodesJCXZ *p) = 0;
  virtual void visitOpcodesJE(OpcodesJE *p) = 0;
  virtual void visitOpcodesJECXZ(OpcodesJECXZ *p) = 0;
  virtual void visitOpcodesJG(OpcodesJG *p) = 0;
  virtual void visitOpcodesJGE(OpcodesJGE *p) = 0;
  virtual void visitOpcodesJL(OpcodesJL *p) = 0;
  virtual void visitOpcodesJLE(OpcodesJLE *p) = 0;
  virtual void visitOpcodesJMP(OpcodesJMP *p) = 0;
  virtual void visitOpcodesJNA(OpcodesJNA *p) = 0;
  virtual void visitOpcodesJNAE(OpcodesJNAE *p) = 0;
  virtual void visitOpcodesJNB(OpcodesJNB *p) = 0;
  virtual void visitOpcodesJNBE(OpcodesJNBE *p) = 0;
  virtual void visitOpcodesJNC(OpcodesJNC *p) = 0;
  virtual void visitOpcodesJNE(OpcodesJNE *p) = 0;
  virtual void visitOpcodesJNG(OpcodesJNG *p) = 0;
  virtual void visitOpcodesJNGE(OpcodesJNGE *p) = 0;
  virtual void visitOpcodesJNL(OpcodesJNL *p) = 0;
  virtual void visitOpcodesJNLE(OpcodesJNLE *p) = 0;
  virtual void visitOpcodesJNO(OpcodesJNO *p) = 0;
  virtual void visitOpcodesJNP(OpcodesJNP *p) = 0;
  virtual void visitOpcodesJNS(OpcodesJNS *p) = 0;
  virtual void visitOpcodesJNZ(OpcodesJNZ *p) = 0;
  virtual void visitOpcodesJO(OpcodesJO *p) = 0;
  virtual void visitOpcodesJP(OpcodesJP *p) = 0;
  virtual void visitOpcodesJPE(OpcodesJPE *p) = 0;
  virtual void visitOpcodesJPO(OpcodesJPO *p) = 0;
  virtual void visitOpcodesJS(OpcodesJS *p) = 0;
  virtual void visitOpcodesJZ(OpcodesJZ *p) = 0;
  virtual void visitOpcodesLAHF(OpcodesLAHF *p) = 0;
  virtual void visitOpcodesLAR(OpcodesLAR *p) = 0;
  virtual void visitOpcodesLDS(OpcodesLDS *p) = 0;
  virtual void visitOpcodesLEA(OpcodesLEA *p) = 0;
  virtual void visitOpcodesLEAVE(OpcodesLEAVE *p) = 0;
  virtual void visitOpcodesLES(OpcodesLES *p) = 0;
  virtual void visitOpcodesLFS(OpcodesLFS *p) = 0;
  virtual void visitOpcodesLGDT(OpcodesLGDT *p) = 0;
  virtual void visitOpcodesLGS(OpcodesLGS *p) = 0;
  virtual void visitOpcodesLIDT(OpcodesLIDT *p) = 0;
  virtual void visitOpcodesLLDT(OpcodesLLDT *p) = 0;
  virtual void visitOpcodesLMSW(OpcodesLMSW *p) = 0;
  virtual void visitOpcodesLOCK(OpcodesLOCK *p) = 0;
  virtual void visitOpcodesLODSB(OpcodesLODSB *p) = 0;
  virtual void visitOpcodesLODSD(OpcodesLODSD *p) = 0;
  virtual void visitOpcodesLODSW(OpcodesLODSW *p) = 0;
  virtual void visitOpcodesLOOP(OpcodesLOOP *p) = 0;
  virtual void visitOpcodesLOOPE(OpcodesLOOPE *p) = 0;
  virtual void visitOpcodesLOOPNE(OpcodesLOOPNE *p) = 0;
  virtual void visitOpcodesLOOPNZ(OpcodesLOOPNZ *p) = 0;
  virtual void visitOpcodesLOOPZ(OpcodesLOOPZ *p) = 0;
  virtual void visitOpcodesLSL(OpcodesLSL *p) = 0;
  virtual void visitOpcodesLSS(OpcodesLSS *p) = 0;
  virtual void visitOpcodesLTR(OpcodesLTR *p) = 0;
  virtual void visitOpcodesMOV(OpcodesMOV *p) = 0;
  virtual void visitOpcodesMOVSB(OpcodesMOVSB *p) = 0;
  virtual void visitOpcodesMOVSD(OpcodesMOVSD *p) = 0;
  virtual void visitOpcodesMOVSW(OpcodesMOVSW *p) = 0;
  virtual void visitOpcodesMOVSX(OpcodesMOVSX *p) = 0;
  virtual void visitOpcodesMOVZX(OpcodesMOVZX *p) = 0;
  virtual void visitOpcodesMUL(OpcodesMUL *p) = 0;
  virtual void visitOpcodesNEG(OpcodesNEG *p) = 0;
  virtual void visitOpcodesNOP(OpcodesNOP *p) = 0;
  virtual void visitOpcodesNOT(OpcodesNOT *p) = 0;
  virtual void visitOpcodesOR(OpcodesOR *p) = 0;
  virtual void visitOpcodesORG(OpcodesORG *p) = 0;
  virtual void visitOpcodesOUT(OpcodesOUT *p) = 0;
  virtual void visitOpcodesOUTSB(OpcodesOUTSB *p) = 0;
  virtual void visitOpcodesOUTSD(OpcodesOUTSD *p) = 0;
  virtual void visitOpcodesOUTSW(OpcodesOUTSW *p) = 0;
  virtual void visitOpcodesPOP(OpcodesPOP *p) = 0;
  virtual void visitOpcodesPOPA(OpcodesPOPA *p) = 0;
  virtual void visitOpcodesPOPAD(OpcodesPOPAD *p) = 0;
  virtual void visitOpcodesPOPAW(OpcodesPOPAW *p) = 0;
  virtual void visitOpcodesPOPF(OpcodesPOPF *p) = 0;
  virtual void visitOpcodesPOPFD(OpcodesPOPFD *p) = 0;
  virtual void visitOpcodesPOPFW(OpcodesPOPFW *p) = 0;
  virtual void visitOpcodesPUSH(OpcodesPUSH *p) = 0;
  virtual void visitOpcodesPUSHA(OpcodesPUSHA *p) = 0;
  virtual void visitOpcodesPUSHD(OpcodesPUSHD *p) = 0;
  virtual void visitOpcodesPUSHAD(OpcodesPUSHAD *p) = 0;
  virtual void visitOpcodesPUSHAW(OpcodesPUSHAW *p) = 0;
  virtual void visitOpcodesPUSHF(OpcodesPUSHF *p) = 0;
  virtual void visitOpcodesPUSHFD(OpcodesPUSHFD *p) = 0;
  virtual void visitOpcodesPUSHFW(OpcodesPUSHFW *p) = 0;
  virtual void visitOpcodesRCL(OpcodesRCL *p) = 0;
  virtual void visitOpcodesRCR(OpcodesRCR *p) = 0;
  virtual void visitOpcodesRDMSR(OpcodesRDMSR *p) = 0;
  virtual void visitOpcodesRDPMC(OpcodesRDPMC *p) = 0;
  virtual void visitOpcodesREP(OpcodesREP *p) = 0;
  virtual void visitOpcodesREPE(OpcodesREPE *p) = 0;
  virtual void visitOpcodesREPNE(OpcodesREPNE *p) = 0;
  virtual void visitOpcodesREPNZ(OpcodesREPNZ *p) = 0;
  virtual void visitOpcodesREPZ(OpcodesREPZ *p) = 0;
  virtual void visitOpcodesRESB(OpcodesRESB *p) = 0;
  virtual void visitOpcodesRESD(OpcodesRESD *p) = 0;
  virtual void visitOpcodesRESQ(OpcodesRESQ *p) = 0;
  virtual void visitOpcodesREST(OpcodesREST *p) = 0;
  virtual void visitOpcodesRESW(OpcodesRESW *p) = 0;
  virtual void visitOpcodesRET(OpcodesRET *p) = 0;
  virtual void visitOpcodesRETF(OpcodesRETF *p) = 0;
  virtual void visitOpcodesRETN(OpcodesRETN *p) = 0;
  virtual void visitOpcodesROL(OpcodesROL *p) = 0;
  virtual void visitOpcodesROR(OpcodesROR *p) = 0;
  virtual void visitOpcodesRSM(OpcodesRSM *p) = 0;
  virtual void visitOpcodesSAHF(OpcodesSAHF *p) = 0;
  virtual void visitOpcodesSAL(OpcodesSAL *p) = 0;
  virtual void visitOpcodesSAR(OpcodesSAR *p) = 0;
  virtual void visitOpcodesSBB(OpcodesSBB *p) = 0;
  virtual void visitOpcodesSCASB(OpcodesSCASB *p) = 0;
  virtual void visitOpcodesSCASD(OpcodesSCASD *p) = 0;
  virtual void visitOpcodesSCASW(OpcodesSCASW *p) = 0;
  virtual void visitOpcodesSETA(OpcodesSETA *p) = 0;
  virtual void visitOpcodesSETAE(OpcodesSETAE *p) = 0;
  virtual void visitOpcodesSETB(OpcodesSETB *p) = 0;
  virtual void visitOpcodesSETBE(OpcodesSETBE *p) = 0;
  virtual void visitOpcodesSETC(OpcodesSETC *p) = 0;
  virtual void visitOpcodesSETE(OpcodesSETE *p) = 0;
  virtual void visitOpcodesSETG(OpcodesSETG *p) = 0;
  virtual void visitOpcodesSETGE(OpcodesSETGE *p) = 0;
  virtual void visitOpcodesSETL(OpcodesSETL *p) = 0;
  virtual void visitOpcodesSETLE(OpcodesSETLE *p) = 0;
  virtual void visitOpcodesSETNA(OpcodesSETNA *p) = 0;
  virtual void visitOpcodesSETNAE(OpcodesSETNAE *p) = 0;
  virtual void visitOpcodesSETNB(OpcodesSETNB *p) = 0;
  virtual void visitOpcodesSETNBE(OpcodesSETNBE *p) = 0;
  virtual void visitOpcodesSETNC(OpcodesSETNC *p) = 0;
  virtual void visitOpcodesSETNE(OpcodesSETNE *p) = 0;
  virtual void visitOpcodesSETNG(OpcodesSETNG *p) = 0;
  virtual void visitOpcodesSETNGE(OpcodesSETNGE *p) = 0;
  virtual void visitOpcodesSETNL(OpcodesSETNL *p) = 0;
  virtual void visitOpcodesSETNLE(OpcodesSETNLE *p) = 0;
  virtual void visitOpcodesSETNO(OpcodesSETNO *p) = 0;
  virtual void visitOpcodesSETNP(OpcodesSETNP *p) = 0;
  virtual void visitOpcodesSETNS(OpcodesSETNS *p) = 0;
  virtual void visitOpcodesSETNZ(OpcodesSETNZ *p) = 0;
  virtual void visitOpcodesSETO(OpcodesSETO *p) = 0;
  virtual void visitOpcodesSETP(OpcodesSETP *p) = 0;
  virtual void visitOpcodesSETPE(OpcodesSETPE *p) = 0;
  virtual void visitOpcodesSETPO(OpcodesSETPO *p) = 0;
  virtual void visitOpcodesSETS(OpcodesSETS *p) = 0;
  virtual void visitOpcodesSETZ(OpcodesSETZ *p) = 0;
  virtual void visitOpcodesSGDT(OpcodesSGDT *p) = 0;
  virtual void visitOpcodesSHL(OpcodesSHL *p) = 0;
  virtual void visitOpcodesSHLD(OpcodesSHLD *p) = 0;
  virtual void visitOpcodesSHR(OpcodesSHR *p) = 0;
  virtual void visitOpcodesSHRD(OpcodesSHRD *p) = 0;
  virtual void visitOpcodesSIDT(OpcodesSIDT *p) = 0;
  virtual void visitOpcodesSLDT(OpcodesSLDT *p) = 0;
  virtual void visitOpcodesSMSW(OpcodesSMSW *p) = 0;
  virtual void visitOpcodesSTC(OpcodesSTC *p) = 0;
  virtual void visitOpcodesSTD(OpcodesSTD *p) = 0;
  virtual void visitOpcodesSTI(OpcodesSTI *p) = 0;
  virtual void visitOpcodesSTOSB(OpcodesSTOSB *p) = 0;
  virtual void visitOpcodesSTOSD(OpcodesSTOSD *p) = 0;
  virtual void visitOpcodesSTOSW(OpcodesSTOSW *p) = 0;
  virtual void visitOpcodesSTR(OpcodesSTR *p) = 0;
  virtual void visitOpcodesSUB(OpcodesSUB *p) = 0;
  virtual void visitOpcodesTEST(OpcodesTEST *p) = 0;
  virtual void visitOpcodesTIMES(OpcodesTIMES *p) = 0;
  virtual void visitOpcodesUD2(OpcodesUD2 *p) = 0;
  virtual void visitOpcodesVERR(OpcodesVERR *p) = 0;
  virtual void visitOpcodesVERW(OpcodesVERW *p) = 0;
  virtual void visitOpcodesWAIT(OpcodesWAIT *p) = 0;
  virtual void visitOpcodesWBINVD(OpcodesWBINVD *p) = 0;
  virtual void visitOpcodesWRMSR(OpcodesWRMSR *p) = 0;
  virtual void visitOpcodesXADD(OpcodesXADD *p) = 0;
  virtual void visitOpcodesXCHG(OpcodesXCHG *p) = 0;
  virtual void visitOpcodesXLATB(OpcodesXLATB *p) = 0;
  virtual void visitOpcodesXOR(OpcodesXOR *p) = 0;
  virtual void visitListStatement(ListStatement *p) = 0;
  virtual void visitListMnemonicArgs(ListMnemonicArgs *p) = 0;


  virtual void visitInteger(Integer x) = 0;
  virtual void visitChar(Char x) = 0;
  virtual void visitDouble(Double x) = 0;
  virtual void visitString(String x) = 0;
  virtual void visitIdent(Ident x) = 0;
  virtual void visitHex(Hex x) = 0;
  virtual void visitLabel(Label x) = 0;

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Program : public Visitable
{
public:
  virtual Program *clone() const = 0;

};

class Statement : public Visitable
{
public:
  virtual Statement *clone() const = 0;

};

class MnemonicArgs : public Visitable
{
public:
  virtual MnemonicArgs *clone() const = 0;

};

class Exp : public Visitable
{
public:
  virtual Exp *clone() const = 0;

};

class Factor : public Visitable
{
public:
  virtual Factor *clone() const = 0;

};

class ConfigType : public Visitable
{
public:
  virtual ConfigType *clone() const = 0;

};

class DataType : public Visitable
{
public:
  virtual DataType *clone() const = 0;

};

class Opcode : public Visitable
{
public:
  virtual Opcode *clone() const = 0;

};



class Prog : public Program
{
public:
  ListStatement *liststatement_;

  Prog(const Prog &);
  Prog &operator=(const Prog &);
  Prog(ListStatement *p1);
  ~Prog();
  virtual void accept(Visitor *v);
  virtual Prog *clone() const;
  void swap(Prog &);
};

class LabelStmt : public Statement
{
public:
  Label label_;

  LabelStmt(const LabelStmt &);
  LabelStmt &operator=(const LabelStmt &);
  LabelStmt(Label p1);
  ~LabelStmt();
  virtual void accept(Visitor *v);
  virtual LabelStmt *clone() const;
  void swap(LabelStmt &);
};

class DeclareStmt : public Statement
{
public:
  Ident ident_;
  Exp *exp_;

  DeclareStmt(const DeclareStmt &);
  DeclareStmt &operator=(const DeclareStmt &);
  DeclareStmt(Ident p1, Exp *p2);
  ~DeclareStmt();
  virtual void accept(Visitor *v);
  virtual DeclareStmt *clone() const;
  void swap(DeclareStmt &);
};

class ConfigStmt : public Statement
{
public:
  ConfigType *configtype_;
  String string_;

  ConfigStmt(const ConfigStmt &);
  ConfigStmt &operator=(const ConfigStmt &);
  ConfigStmt(ConfigType *p1, String p2);
  ~ConfigStmt();
  virtual void accept(Visitor *v);
  virtual ConfigStmt *clone() const;
  void swap(ConfigStmt &);
};

class MnemonicStmt : public Statement
{
public:
  Opcode *opcode_;
  ListMnemonicArgs *listmnemonicargs_;

  MnemonicStmt(const MnemonicStmt &);
  MnemonicStmt &operator=(const MnemonicStmt &);
  MnemonicStmt(Opcode *p1, ListMnemonicArgs *p2);
  ~MnemonicStmt();
  virtual void accept(Visitor *v);
  virtual MnemonicStmt *clone() const;
  void swap(MnemonicStmt &);
};

class OpcodeStmt : public Statement
{
public:
  Opcode *opcode_;

  OpcodeStmt(const OpcodeStmt &);
  OpcodeStmt &operator=(const OpcodeStmt &);
  OpcodeStmt(Opcode *p1);
  ~OpcodeStmt();
  virtual void accept(Visitor *v);
  virtual OpcodeStmt *clone() const;
  void swap(OpcodeStmt &);
};

class MnemoArg : public MnemonicArgs
{
public:
  Exp *exp_;

  MnemoArg(const MnemoArg &);
  MnemoArg &operator=(const MnemoArg &);
  MnemoArg(Exp *p1);
  ~MnemoArg();
  virtual void accept(Visitor *v);
  virtual MnemoArg *clone() const;
  void swap(MnemoArg &);
};

class PlusExp : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  PlusExp(const PlusExp &);
  PlusExp &operator=(const PlusExp &);
  PlusExp(Exp *p1, Exp *p2);
  ~PlusExp();
  virtual void accept(Visitor *v);
  virtual PlusExp *clone() const;
  void swap(PlusExp &);
};

class MinusExp : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  MinusExp(const MinusExp &);
  MinusExp &operator=(const MinusExp &);
  MinusExp(Exp *p1, Exp *p2);
  ~MinusExp();
  virtual void accept(Visitor *v);
  virtual MinusExp *clone() const;
  void swap(MinusExp &);
};

class MulExp : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  MulExp(const MulExp &);
  MulExp &operator=(const MulExp &);
  MulExp(Exp *p1, Exp *p2);
  ~MulExp();
  virtual void accept(Visitor *v);
  virtual MulExp *clone() const;
  void swap(MulExp &);
};

class DivExp : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  DivExp(const DivExp &);
  DivExp &operator=(const DivExp &);
  DivExp(Exp *p1, Exp *p2);
  ~DivExp();
  virtual void accept(Visitor *v);
  virtual DivExp *clone() const;
  void swap(DivExp &);
};

class ModExp : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  ModExp(const ModExp &);
  ModExp &operator=(const ModExp &);
  ModExp(Exp *p1, Exp *p2);
  ~ModExp();
  virtual void accept(Visitor *v);
  virtual ModExp *clone() const;
  void swap(ModExp &);
};

class IndirectAddrExp : public Exp
{
public:
  Exp *exp_;

  IndirectAddrExp(const IndirectAddrExp &);
  IndirectAddrExp &operator=(const IndirectAddrExp &);
  IndirectAddrExp(Exp *p1);
  ~IndirectAddrExp();
  virtual void accept(Visitor *v);
  virtual IndirectAddrExp *clone() const;
  void swap(IndirectAddrExp &);
};

class DatatypeExp : public Exp
{
public:
  DataType *datatype_;
  Exp *exp_;

  DatatypeExp(const DatatypeExp &);
  DatatypeExp &operator=(const DatatypeExp &);
  DatatypeExp(DataType *p1, Exp *p2);
  ~DatatypeExp();
  virtual void accept(Visitor *v);
  virtual DatatypeExp *clone() const;
  void swap(DatatypeExp &);
};

class RangeExp : public Exp
{
public:
  DataType *datatype_;
  Exp *exp_1;
  Exp *exp_2;

  RangeExp(const RangeExp &);
  RangeExp &operator=(const RangeExp &);
  RangeExp(DataType *p1, Exp *p2, Exp *p3);
  ~RangeExp();
  virtual void accept(Visitor *v);
  virtual RangeExp *clone() const;
  void swap(RangeExp &);
};

class LabelExp : public Exp
{
public:
  Label label_;

  LabelExp(const LabelExp &);
  LabelExp &operator=(const LabelExp &);
  LabelExp(Label p1);
  ~LabelExp();
  virtual void accept(Visitor *v);
  virtual LabelExp *clone() const;
  void swap(LabelExp &);
};

class ImmExp : public Exp
{
public:
  Factor *factor_;

  ImmExp(const ImmExp &);
  ImmExp &operator=(const ImmExp &);
  ImmExp(Factor *p1);
  ~ImmExp();
  virtual void accept(Visitor *v);
  virtual ImmExp *clone() const;
  void swap(ImmExp &);
};

class NumberFactor : public Factor
{
public:
  Integer integer_;

  NumberFactor(const NumberFactor &);
  NumberFactor &operator=(const NumberFactor &);
  NumberFactor(Integer p1);
  ~NumberFactor();
  virtual void accept(Visitor *v);
  virtual NumberFactor *clone() const;
  void swap(NumberFactor &);
};

class HexFactor : public Factor
{
public:
  Hex hex_;

  HexFactor(const HexFactor &);
  HexFactor &operator=(const HexFactor &);
  HexFactor(Hex p1);
  ~HexFactor();
  virtual void accept(Visitor *v);
  virtual HexFactor *clone() const;
  void swap(HexFactor &);
};

class IdentFactor : public Factor
{
public:
  Ident ident_;

  IdentFactor(const IdentFactor &);
  IdentFactor &operator=(const IdentFactor &);
  IdentFactor(Ident p1);
  ~IdentFactor();
  virtual void accept(Visitor *v);
  virtual IdentFactor *clone() const;
  void swap(IdentFactor &);
};

class StringFactor : public Factor
{
public:
  String string_;

  StringFactor(const StringFactor &);
  StringFactor &operator=(const StringFactor &);
  StringFactor(String p1);
  ~StringFactor();
  virtual void accept(Visitor *v);
  virtual StringFactor *clone() const;
  void swap(StringFactor &);
};

class BitsConfig : public ConfigType
{
public:

  BitsConfig(const BitsConfig &);
  BitsConfig &operator=(const BitsConfig &);
  BitsConfig();
  ~BitsConfig();
  virtual void accept(Visitor *v);
  virtual BitsConfig *clone() const;
  void swap(BitsConfig &);
};

class InstConfig : public ConfigType
{
public:

  InstConfig(const InstConfig &);
  InstConfig &operator=(const InstConfig &);
  InstConfig();
  ~InstConfig();
  virtual void accept(Visitor *v);
  virtual InstConfig *clone() const;
  void swap(InstConfig &);
};

class OptiConfig : public ConfigType
{
public:

  OptiConfig(const OptiConfig &);
  OptiConfig &operator=(const OptiConfig &);
  OptiConfig();
  ~OptiConfig();
  virtual void accept(Visitor *v);
  virtual OptiConfig *clone() const;
  void swap(OptiConfig &);
};

class FormConfig : public ConfigType
{
public:

  FormConfig(const FormConfig &);
  FormConfig &operator=(const FormConfig &);
  FormConfig();
  ~FormConfig();
  virtual void accept(Visitor *v);
  virtual FormConfig *clone() const;
  void swap(FormConfig &);
};

class PaddConfig : public ConfigType
{
public:

  PaddConfig(const PaddConfig &);
  PaddConfig &operator=(const PaddConfig &);
  PaddConfig();
  ~PaddConfig();
  virtual void accept(Visitor *v);
  virtual PaddConfig *clone() const;
  void swap(PaddConfig &);
};

class PadsConfig : public ConfigType
{
public:

  PadsConfig(const PadsConfig &);
  PadsConfig &operator=(const PadsConfig &);
  PadsConfig();
  ~PadsConfig();
  virtual void accept(Visitor *v);
  virtual PadsConfig *clone() const;
  void swap(PadsConfig &);
};

class SectConfig : public ConfigType
{
public:

  SectConfig(const SectConfig &);
  SectConfig &operator=(const SectConfig &);
  SectConfig();
  ~SectConfig();
  virtual void accept(Visitor *v);
  virtual SectConfig *clone() const;
  void swap(SectConfig &);
};

class AbsoConfig : public ConfigType
{
public:

  AbsoConfig(const AbsoConfig &);
  AbsoConfig &operator=(const AbsoConfig &);
  AbsoConfig();
  ~AbsoConfig();
  virtual void accept(Visitor *v);
  virtual AbsoConfig *clone() const;
  void swap(AbsoConfig &);
};

class FileConfig : public ConfigType
{
public:

  FileConfig(const FileConfig &);
  FileConfig &operator=(const FileConfig &);
  FileConfig();
  ~FileConfig();
  virtual void accept(Visitor *v);
  virtual FileConfig *clone() const;
  void swap(FileConfig &);
};

class ByteDataType : public DataType
{
public:

  ByteDataType(const ByteDataType &);
  ByteDataType &operator=(const ByteDataType &);
  ByteDataType();
  ~ByteDataType();
  virtual void accept(Visitor *v);
  virtual ByteDataType *clone() const;
  void swap(ByteDataType &);
};

class WordDataType : public DataType
{
public:

  WordDataType(const WordDataType &);
  WordDataType &operator=(const WordDataType &);
  WordDataType();
  ~WordDataType();
  virtual void accept(Visitor *v);
  virtual WordDataType *clone() const;
  void swap(WordDataType &);
};

class DwordDataType : public DataType
{
public:

  DwordDataType(const DwordDataType &);
  DwordDataType &operator=(const DwordDataType &);
  DwordDataType();
  ~DwordDataType();
  virtual void accept(Visitor *v);
  virtual DwordDataType *clone() const;
  void swap(DwordDataType &);
};

class OpcodesAAA : public Opcode
{
public:

  OpcodesAAA(const OpcodesAAA &);
  OpcodesAAA &operator=(const OpcodesAAA &);
  OpcodesAAA();
  ~OpcodesAAA();
  virtual void accept(Visitor *v);
  virtual OpcodesAAA *clone() const;
  void swap(OpcodesAAA &);
};

class OpcodesAAD : public Opcode
{
public:

  OpcodesAAD(const OpcodesAAD &);
  OpcodesAAD &operator=(const OpcodesAAD &);
  OpcodesAAD();
  ~OpcodesAAD();
  virtual void accept(Visitor *v);
  virtual OpcodesAAD *clone() const;
  void swap(OpcodesAAD &);
};

class OpcodesAAS : public Opcode
{
public:

  OpcodesAAS(const OpcodesAAS &);
  OpcodesAAS &operator=(const OpcodesAAS &);
  OpcodesAAS();
  ~OpcodesAAS();
  virtual void accept(Visitor *v);
  virtual OpcodesAAS *clone() const;
  void swap(OpcodesAAS &);
};

class OpcodesAAM : public Opcode
{
public:

  OpcodesAAM(const OpcodesAAM &);
  OpcodesAAM &operator=(const OpcodesAAM &);
  OpcodesAAM();
  ~OpcodesAAM();
  virtual void accept(Visitor *v);
  virtual OpcodesAAM *clone() const;
  void swap(OpcodesAAM &);
};

class OpcodesADC : public Opcode
{
public:

  OpcodesADC(const OpcodesADC &);
  OpcodesADC &operator=(const OpcodesADC &);
  OpcodesADC();
  ~OpcodesADC();
  virtual void accept(Visitor *v);
  virtual OpcodesADC *clone() const;
  void swap(OpcodesADC &);
};

class OpcodesADD : public Opcode
{
public:

  OpcodesADD(const OpcodesADD &);
  OpcodesADD &operator=(const OpcodesADD &);
  OpcodesADD();
  ~OpcodesADD();
  virtual void accept(Visitor *v);
  virtual OpcodesADD *clone() const;
  void swap(OpcodesADD &);
};

class OpcodesAND : public Opcode
{
public:

  OpcodesAND(const OpcodesAND &);
  OpcodesAND &operator=(const OpcodesAND &);
  OpcodesAND();
  ~OpcodesAND();
  virtual void accept(Visitor *v);
  virtual OpcodesAND *clone() const;
  void swap(OpcodesAND &);
};

class OpcodesALIGN : public Opcode
{
public:

  OpcodesALIGN(const OpcodesALIGN &);
  OpcodesALIGN &operator=(const OpcodesALIGN &);
  OpcodesALIGN();
  ~OpcodesALIGN();
  virtual void accept(Visitor *v);
  virtual OpcodesALIGN *clone() const;
  void swap(OpcodesALIGN &);
};

class OpcodesALIGNB : public Opcode
{
public:

  OpcodesALIGNB(const OpcodesALIGNB &);
  OpcodesALIGNB &operator=(const OpcodesALIGNB &);
  OpcodesALIGNB();
  ~OpcodesALIGNB();
  virtual void accept(Visitor *v);
  virtual OpcodesALIGNB *clone() const;
  void swap(OpcodesALIGNB &);
};

class OpcodesARPL : public Opcode
{
public:

  OpcodesARPL(const OpcodesARPL &);
  OpcodesARPL &operator=(const OpcodesARPL &);
  OpcodesARPL();
  ~OpcodesARPL();
  virtual void accept(Visitor *v);
  virtual OpcodesARPL *clone() const;
  void swap(OpcodesARPL &);
};

class OpcodesBOUND : public Opcode
{
public:

  OpcodesBOUND(const OpcodesBOUND &);
  OpcodesBOUND &operator=(const OpcodesBOUND &);
  OpcodesBOUND();
  ~OpcodesBOUND();
  virtual void accept(Visitor *v);
  virtual OpcodesBOUND *clone() const;
  void swap(OpcodesBOUND &);
};

class OpcodesBSF : public Opcode
{
public:

  OpcodesBSF(const OpcodesBSF &);
  OpcodesBSF &operator=(const OpcodesBSF &);
  OpcodesBSF();
  ~OpcodesBSF();
  virtual void accept(Visitor *v);
  virtual OpcodesBSF *clone() const;
  void swap(OpcodesBSF &);
};

class OpcodesBSR : public Opcode
{
public:

  OpcodesBSR(const OpcodesBSR &);
  OpcodesBSR &operator=(const OpcodesBSR &);
  OpcodesBSR();
  ~OpcodesBSR();
  virtual void accept(Visitor *v);
  virtual OpcodesBSR *clone() const;
  void swap(OpcodesBSR &);
};

class OpcodesBSWAP : public Opcode
{
public:

  OpcodesBSWAP(const OpcodesBSWAP &);
  OpcodesBSWAP &operator=(const OpcodesBSWAP &);
  OpcodesBSWAP();
  ~OpcodesBSWAP();
  virtual void accept(Visitor *v);
  virtual OpcodesBSWAP *clone() const;
  void swap(OpcodesBSWAP &);
};

class OpcodesBT : public Opcode
{
public:

  OpcodesBT(const OpcodesBT &);
  OpcodesBT &operator=(const OpcodesBT &);
  OpcodesBT();
  ~OpcodesBT();
  virtual void accept(Visitor *v);
  virtual OpcodesBT *clone() const;
  void swap(OpcodesBT &);
};

class OpcodesBTC : public Opcode
{
public:

  OpcodesBTC(const OpcodesBTC &);
  OpcodesBTC &operator=(const OpcodesBTC &);
  OpcodesBTC();
  ~OpcodesBTC();
  virtual void accept(Visitor *v);
  virtual OpcodesBTC *clone() const;
  void swap(OpcodesBTC &);
};

class OpcodesBTR : public Opcode
{
public:

  OpcodesBTR(const OpcodesBTR &);
  OpcodesBTR &operator=(const OpcodesBTR &);
  OpcodesBTR();
  ~OpcodesBTR();
  virtual void accept(Visitor *v);
  virtual OpcodesBTR *clone() const;
  void swap(OpcodesBTR &);
};

class OpcodesBTS : public Opcode
{
public:

  OpcodesBTS(const OpcodesBTS &);
  OpcodesBTS &operator=(const OpcodesBTS &);
  OpcodesBTS();
  ~OpcodesBTS();
  virtual void accept(Visitor *v);
  virtual OpcodesBTS *clone() const;
  void swap(OpcodesBTS &);
};

class OpcodesCALL : public Opcode
{
public:

  OpcodesCALL(const OpcodesCALL &);
  OpcodesCALL &operator=(const OpcodesCALL &);
  OpcodesCALL();
  ~OpcodesCALL();
  virtual void accept(Visitor *v);
  virtual OpcodesCALL *clone() const;
  void swap(OpcodesCALL &);
};

class OpcodesCBW : public Opcode
{
public:

  OpcodesCBW(const OpcodesCBW &);
  OpcodesCBW &operator=(const OpcodesCBW &);
  OpcodesCBW();
  ~OpcodesCBW();
  virtual void accept(Visitor *v);
  virtual OpcodesCBW *clone() const;
  void swap(OpcodesCBW &);
};

class OpcodesCDQ : public Opcode
{
public:

  OpcodesCDQ(const OpcodesCDQ &);
  OpcodesCDQ &operator=(const OpcodesCDQ &);
  OpcodesCDQ();
  ~OpcodesCDQ();
  virtual void accept(Visitor *v);
  virtual OpcodesCDQ *clone() const;
  void swap(OpcodesCDQ &);
};

class OpcodesCLC : public Opcode
{
public:

  OpcodesCLC(const OpcodesCLC &);
  OpcodesCLC &operator=(const OpcodesCLC &);
  OpcodesCLC();
  ~OpcodesCLC();
  virtual void accept(Visitor *v);
  virtual OpcodesCLC *clone() const;
  void swap(OpcodesCLC &);
};

class OpcodesCLD : public Opcode
{
public:

  OpcodesCLD(const OpcodesCLD &);
  OpcodesCLD &operator=(const OpcodesCLD &);
  OpcodesCLD();
  ~OpcodesCLD();
  virtual void accept(Visitor *v);
  virtual OpcodesCLD *clone() const;
  void swap(OpcodesCLD &);
};

class OpcodesCLI : public Opcode
{
public:

  OpcodesCLI(const OpcodesCLI &);
  OpcodesCLI &operator=(const OpcodesCLI &);
  OpcodesCLI();
  ~OpcodesCLI();
  virtual void accept(Visitor *v);
  virtual OpcodesCLI *clone() const;
  void swap(OpcodesCLI &);
};

class OpcodesCLTS : public Opcode
{
public:

  OpcodesCLTS(const OpcodesCLTS &);
  OpcodesCLTS &operator=(const OpcodesCLTS &);
  OpcodesCLTS();
  ~OpcodesCLTS();
  virtual void accept(Visitor *v);
  virtual OpcodesCLTS *clone() const;
  void swap(OpcodesCLTS &);
};

class OpcodesCMC : public Opcode
{
public:

  OpcodesCMC(const OpcodesCMC &);
  OpcodesCMC &operator=(const OpcodesCMC &);
  OpcodesCMC();
  ~OpcodesCMC();
  virtual void accept(Visitor *v);
  virtual OpcodesCMC *clone() const;
  void swap(OpcodesCMC &);
};

class OpcodesCMP : public Opcode
{
public:

  OpcodesCMP(const OpcodesCMP &);
  OpcodesCMP &operator=(const OpcodesCMP &);
  OpcodesCMP();
  ~OpcodesCMP();
  virtual void accept(Visitor *v);
  virtual OpcodesCMP *clone() const;
  void swap(OpcodesCMP &);
};

class OpcodesCMPSB : public Opcode
{
public:

  OpcodesCMPSB(const OpcodesCMPSB &);
  OpcodesCMPSB &operator=(const OpcodesCMPSB &);
  OpcodesCMPSB();
  ~OpcodesCMPSB();
  virtual void accept(Visitor *v);
  virtual OpcodesCMPSB *clone() const;
  void swap(OpcodesCMPSB &);
};

class OpcodesCMPSD : public Opcode
{
public:

  OpcodesCMPSD(const OpcodesCMPSD &);
  OpcodesCMPSD &operator=(const OpcodesCMPSD &);
  OpcodesCMPSD();
  ~OpcodesCMPSD();
  virtual void accept(Visitor *v);
  virtual OpcodesCMPSD *clone() const;
  void swap(OpcodesCMPSD &);
};

class OpcodesCMPSW : public Opcode
{
public:

  OpcodesCMPSW(const OpcodesCMPSW &);
  OpcodesCMPSW &operator=(const OpcodesCMPSW &);
  OpcodesCMPSW();
  ~OpcodesCMPSW();
  virtual void accept(Visitor *v);
  virtual OpcodesCMPSW *clone() const;
  void swap(OpcodesCMPSW &);
};

class OpcodesCMPXCHG : public Opcode
{
public:

  OpcodesCMPXCHG(const OpcodesCMPXCHG &);
  OpcodesCMPXCHG &operator=(const OpcodesCMPXCHG &);
  OpcodesCMPXCHG();
  ~OpcodesCMPXCHG();
  virtual void accept(Visitor *v);
  virtual OpcodesCMPXCHG *clone() const;
  void swap(OpcodesCMPXCHG &);
};

class OpcodesCPUID : public Opcode
{
public:

  OpcodesCPUID(const OpcodesCPUID &);
  OpcodesCPUID &operator=(const OpcodesCPUID &);
  OpcodesCPUID();
  ~OpcodesCPUID();
  virtual void accept(Visitor *v);
  virtual OpcodesCPUID *clone() const;
  void swap(OpcodesCPUID &);
};

class OpcodesCWD : public Opcode
{
public:

  OpcodesCWD(const OpcodesCWD &);
  OpcodesCWD &operator=(const OpcodesCWD &);
  OpcodesCWD();
  ~OpcodesCWD();
  virtual void accept(Visitor *v);
  virtual OpcodesCWD *clone() const;
  void swap(OpcodesCWD &);
};

class OpcodesCWDE : public Opcode
{
public:

  OpcodesCWDE(const OpcodesCWDE &);
  OpcodesCWDE &operator=(const OpcodesCWDE &);
  OpcodesCWDE();
  ~OpcodesCWDE();
  virtual void accept(Visitor *v);
  virtual OpcodesCWDE *clone() const;
  void swap(OpcodesCWDE &);
};

class OpcodesDAA : public Opcode
{
public:

  OpcodesDAA(const OpcodesDAA &);
  OpcodesDAA &operator=(const OpcodesDAA &);
  OpcodesDAA();
  ~OpcodesDAA();
  virtual void accept(Visitor *v);
  virtual OpcodesDAA *clone() const;
  void swap(OpcodesDAA &);
};

class OpcodesDAS : public Opcode
{
public:

  OpcodesDAS(const OpcodesDAS &);
  OpcodesDAS &operator=(const OpcodesDAS &);
  OpcodesDAS();
  ~OpcodesDAS();
  virtual void accept(Visitor *v);
  virtual OpcodesDAS *clone() const;
  void swap(OpcodesDAS &);
};

class OpcodesDB : public Opcode
{
public:

  OpcodesDB(const OpcodesDB &);
  OpcodesDB &operator=(const OpcodesDB &);
  OpcodesDB();
  ~OpcodesDB();
  virtual void accept(Visitor *v);
  virtual OpcodesDB *clone() const;
  void swap(OpcodesDB &);
};

class OpcodesDD : public Opcode
{
public:

  OpcodesDD(const OpcodesDD &);
  OpcodesDD &operator=(const OpcodesDD &);
  OpcodesDD();
  ~OpcodesDD();
  virtual void accept(Visitor *v);
  virtual OpcodesDD *clone() const;
  void swap(OpcodesDD &);
};

class OpcodesDEC : public Opcode
{
public:

  OpcodesDEC(const OpcodesDEC &);
  OpcodesDEC &operator=(const OpcodesDEC &);
  OpcodesDEC();
  ~OpcodesDEC();
  virtual void accept(Visitor *v);
  virtual OpcodesDEC *clone() const;
  void swap(OpcodesDEC &);
};

class OpcodesDIV : public Opcode
{
public:

  OpcodesDIV(const OpcodesDIV &);
  OpcodesDIV &operator=(const OpcodesDIV &);
  OpcodesDIV();
  ~OpcodesDIV();
  virtual void accept(Visitor *v);
  virtual OpcodesDIV *clone() const;
  void swap(OpcodesDIV &);
};

class OpcodesDQ : public Opcode
{
public:

  OpcodesDQ(const OpcodesDQ &);
  OpcodesDQ &operator=(const OpcodesDQ &);
  OpcodesDQ();
  ~OpcodesDQ();
  virtual void accept(Visitor *v);
  virtual OpcodesDQ *clone() const;
  void swap(OpcodesDQ &);
};

class OpcodesDT : public Opcode
{
public:

  OpcodesDT(const OpcodesDT &);
  OpcodesDT &operator=(const OpcodesDT &);
  OpcodesDT();
  ~OpcodesDT();
  virtual void accept(Visitor *v);
  virtual OpcodesDT *clone() const;
  void swap(OpcodesDT &);
};

class OpcodesDW : public Opcode
{
public:

  OpcodesDW(const OpcodesDW &);
  OpcodesDW &operator=(const OpcodesDW &);
  OpcodesDW();
  ~OpcodesDW();
  virtual void accept(Visitor *v);
  virtual OpcodesDW *clone() const;
  void swap(OpcodesDW &);
};

class OpcodesEND : public Opcode
{
public:

  OpcodesEND(const OpcodesEND &);
  OpcodesEND &operator=(const OpcodesEND &);
  OpcodesEND();
  ~OpcodesEND();
  virtual void accept(Visitor *v);
  virtual OpcodesEND *clone() const;
  void swap(OpcodesEND &);
};

class OpcodesENTER : public Opcode
{
public:

  OpcodesENTER(const OpcodesENTER &);
  OpcodesENTER &operator=(const OpcodesENTER &);
  OpcodesENTER();
  ~OpcodesENTER();
  virtual void accept(Visitor *v);
  virtual OpcodesENTER *clone() const;
  void swap(OpcodesENTER &);
};

class OpcodesEXTERN : public Opcode
{
public:

  OpcodesEXTERN(const OpcodesEXTERN &);
  OpcodesEXTERN &operator=(const OpcodesEXTERN &);
  OpcodesEXTERN();
  ~OpcodesEXTERN();
  virtual void accept(Visitor *v);
  virtual OpcodesEXTERN *clone() const;
  void swap(OpcodesEXTERN &);
};

class OpcodesF2XM1 : public Opcode
{
public:

  OpcodesF2XM1(const OpcodesF2XM1 &);
  OpcodesF2XM1 &operator=(const OpcodesF2XM1 &);
  OpcodesF2XM1();
  ~OpcodesF2XM1();
  virtual void accept(Visitor *v);
  virtual OpcodesF2XM1 *clone() const;
  void swap(OpcodesF2XM1 &);
};

class OpcodesFABS : public Opcode
{
public:

  OpcodesFABS(const OpcodesFABS &);
  OpcodesFABS &operator=(const OpcodesFABS &);
  OpcodesFABS();
  ~OpcodesFABS();
  virtual void accept(Visitor *v);
  virtual OpcodesFABS *clone() const;
  void swap(OpcodesFABS &);
};

class OpcodesFADD : public Opcode
{
public:

  OpcodesFADD(const OpcodesFADD &);
  OpcodesFADD &operator=(const OpcodesFADD &);
  OpcodesFADD();
  ~OpcodesFADD();
  virtual void accept(Visitor *v);
  virtual OpcodesFADD *clone() const;
  void swap(OpcodesFADD &);
};

class OpcodesFADDP : public Opcode
{
public:

  OpcodesFADDP(const OpcodesFADDP &);
  OpcodesFADDP &operator=(const OpcodesFADDP &);
  OpcodesFADDP();
  ~OpcodesFADDP();
  virtual void accept(Visitor *v);
  virtual OpcodesFADDP *clone() const;
  void swap(OpcodesFADDP &);
};

class OpcodesFBLD : public Opcode
{
public:

  OpcodesFBLD(const OpcodesFBLD &);
  OpcodesFBLD &operator=(const OpcodesFBLD &);
  OpcodesFBLD();
  ~OpcodesFBLD();
  virtual void accept(Visitor *v);
  virtual OpcodesFBLD *clone() const;
  void swap(OpcodesFBLD &);
};

class OpcodesFBSTP : public Opcode
{
public:

  OpcodesFBSTP(const OpcodesFBSTP &);
  OpcodesFBSTP &operator=(const OpcodesFBSTP &);
  OpcodesFBSTP();
  ~OpcodesFBSTP();
  virtual void accept(Visitor *v);
  virtual OpcodesFBSTP *clone() const;
  void swap(OpcodesFBSTP &);
};

class OpcodesFCHS : public Opcode
{
public:

  OpcodesFCHS(const OpcodesFCHS &);
  OpcodesFCHS &operator=(const OpcodesFCHS &);
  OpcodesFCHS();
  ~OpcodesFCHS();
  virtual void accept(Visitor *v);
  virtual OpcodesFCHS *clone() const;
  void swap(OpcodesFCHS &);
};

class OpcodesFCLEX : public Opcode
{
public:

  OpcodesFCLEX(const OpcodesFCLEX &);
  OpcodesFCLEX &operator=(const OpcodesFCLEX &);
  OpcodesFCLEX();
  ~OpcodesFCLEX();
  virtual void accept(Visitor *v);
  virtual OpcodesFCLEX *clone() const;
  void swap(OpcodesFCLEX &);
};

class OpcodesFCOM : public Opcode
{
public:

  OpcodesFCOM(const OpcodesFCOM &);
  OpcodesFCOM &operator=(const OpcodesFCOM &);
  OpcodesFCOM();
  ~OpcodesFCOM();
  virtual void accept(Visitor *v);
  virtual OpcodesFCOM *clone() const;
  void swap(OpcodesFCOM &);
};

class OpcodesFCOMP : public Opcode
{
public:

  OpcodesFCOMP(const OpcodesFCOMP &);
  OpcodesFCOMP &operator=(const OpcodesFCOMP &);
  OpcodesFCOMP();
  ~OpcodesFCOMP();
  virtual void accept(Visitor *v);
  virtual OpcodesFCOMP *clone() const;
  void swap(OpcodesFCOMP &);
};

class OpcodesFCOMPP : public Opcode
{
public:

  OpcodesFCOMPP(const OpcodesFCOMPP &);
  OpcodesFCOMPP &operator=(const OpcodesFCOMPP &);
  OpcodesFCOMPP();
  ~OpcodesFCOMPP();
  virtual void accept(Visitor *v);
  virtual OpcodesFCOMPP *clone() const;
  void swap(OpcodesFCOMPP &);
};

class OpcodesFCOS : public Opcode
{
public:

  OpcodesFCOS(const OpcodesFCOS &);
  OpcodesFCOS &operator=(const OpcodesFCOS &);
  OpcodesFCOS();
  ~OpcodesFCOS();
  virtual void accept(Visitor *v);
  virtual OpcodesFCOS *clone() const;
  void swap(OpcodesFCOS &);
};

class OpcodesFDECSTP : public Opcode
{
public:

  OpcodesFDECSTP(const OpcodesFDECSTP &);
  OpcodesFDECSTP &operator=(const OpcodesFDECSTP &);
  OpcodesFDECSTP();
  ~OpcodesFDECSTP();
  virtual void accept(Visitor *v);
  virtual OpcodesFDECSTP *clone() const;
  void swap(OpcodesFDECSTP &);
};

class OpcodesFDISI : public Opcode
{
public:

  OpcodesFDISI(const OpcodesFDISI &);
  OpcodesFDISI &operator=(const OpcodesFDISI &);
  OpcodesFDISI();
  ~OpcodesFDISI();
  virtual void accept(Visitor *v);
  virtual OpcodesFDISI *clone() const;
  void swap(OpcodesFDISI &);
};

class OpcodesFDIV : public Opcode
{
public:

  OpcodesFDIV(const OpcodesFDIV &);
  OpcodesFDIV &operator=(const OpcodesFDIV &);
  OpcodesFDIV();
  ~OpcodesFDIV();
  virtual void accept(Visitor *v);
  virtual OpcodesFDIV *clone() const;
  void swap(OpcodesFDIV &);
};

class OpcodesFDIVP : public Opcode
{
public:

  OpcodesFDIVP(const OpcodesFDIVP &);
  OpcodesFDIVP &operator=(const OpcodesFDIVP &);
  OpcodesFDIVP();
  ~OpcodesFDIVP();
  virtual void accept(Visitor *v);
  virtual OpcodesFDIVP *clone() const;
  void swap(OpcodesFDIVP &);
};

class OpcodesFDIVR : public Opcode
{
public:

  OpcodesFDIVR(const OpcodesFDIVR &);
  OpcodesFDIVR &operator=(const OpcodesFDIVR &);
  OpcodesFDIVR();
  ~OpcodesFDIVR();
  virtual void accept(Visitor *v);
  virtual OpcodesFDIVR *clone() const;
  void swap(OpcodesFDIVR &);
};

class OpcodesFDIVRP : public Opcode
{
public:

  OpcodesFDIVRP(const OpcodesFDIVRP &);
  OpcodesFDIVRP &operator=(const OpcodesFDIVRP &);
  OpcodesFDIVRP();
  ~OpcodesFDIVRP();
  virtual void accept(Visitor *v);
  virtual OpcodesFDIVRP *clone() const;
  void swap(OpcodesFDIVRP &);
};

class OpcodesFENI : public Opcode
{
public:

  OpcodesFENI(const OpcodesFENI &);
  OpcodesFENI &operator=(const OpcodesFENI &);
  OpcodesFENI();
  ~OpcodesFENI();
  virtual void accept(Visitor *v);
  virtual OpcodesFENI *clone() const;
  void swap(OpcodesFENI &);
};

class OpcodesFFREE : public Opcode
{
public:

  OpcodesFFREE(const OpcodesFFREE &);
  OpcodesFFREE &operator=(const OpcodesFFREE &);
  OpcodesFFREE();
  ~OpcodesFFREE();
  virtual void accept(Visitor *v);
  virtual OpcodesFFREE *clone() const;
  void swap(OpcodesFFREE &);
};

class OpcodesFIADD : public Opcode
{
public:

  OpcodesFIADD(const OpcodesFIADD &);
  OpcodesFIADD &operator=(const OpcodesFIADD &);
  OpcodesFIADD();
  ~OpcodesFIADD();
  virtual void accept(Visitor *v);
  virtual OpcodesFIADD *clone() const;
  void swap(OpcodesFIADD &);
};

class OpcodesFICOM : public Opcode
{
public:

  OpcodesFICOM(const OpcodesFICOM &);
  OpcodesFICOM &operator=(const OpcodesFICOM &);
  OpcodesFICOM();
  ~OpcodesFICOM();
  virtual void accept(Visitor *v);
  virtual OpcodesFICOM *clone() const;
  void swap(OpcodesFICOM &);
};

class OpcodesFICOMP : public Opcode
{
public:

  OpcodesFICOMP(const OpcodesFICOMP &);
  OpcodesFICOMP &operator=(const OpcodesFICOMP &);
  OpcodesFICOMP();
  ~OpcodesFICOMP();
  virtual void accept(Visitor *v);
  virtual OpcodesFICOMP *clone() const;
  void swap(OpcodesFICOMP &);
};

class OpcodesFIDIV : public Opcode
{
public:

  OpcodesFIDIV(const OpcodesFIDIV &);
  OpcodesFIDIV &operator=(const OpcodesFIDIV &);
  OpcodesFIDIV();
  ~OpcodesFIDIV();
  virtual void accept(Visitor *v);
  virtual OpcodesFIDIV *clone() const;
  void swap(OpcodesFIDIV &);
};

class OpcodesFIDIVR : public Opcode
{
public:

  OpcodesFIDIVR(const OpcodesFIDIVR &);
  OpcodesFIDIVR &operator=(const OpcodesFIDIVR &);
  OpcodesFIDIVR();
  ~OpcodesFIDIVR();
  virtual void accept(Visitor *v);
  virtual OpcodesFIDIVR *clone() const;
  void swap(OpcodesFIDIVR &);
};

class OpcodesFILD : public Opcode
{
public:

  OpcodesFILD(const OpcodesFILD &);
  OpcodesFILD &operator=(const OpcodesFILD &);
  OpcodesFILD();
  ~OpcodesFILD();
  virtual void accept(Visitor *v);
  virtual OpcodesFILD *clone() const;
  void swap(OpcodesFILD &);
};

class OpcodesFIMUL : public Opcode
{
public:

  OpcodesFIMUL(const OpcodesFIMUL &);
  OpcodesFIMUL &operator=(const OpcodesFIMUL &);
  OpcodesFIMUL();
  ~OpcodesFIMUL();
  virtual void accept(Visitor *v);
  virtual OpcodesFIMUL *clone() const;
  void swap(OpcodesFIMUL &);
};

class OpcodesFINCSTP : public Opcode
{
public:

  OpcodesFINCSTP(const OpcodesFINCSTP &);
  OpcodesFINCSTP &operator=(const OpcodesFINCSTP &);
  OpcodesFINCSTP();
  ~OpcodesFINCSTP();
  virtual void accept(Visitor *v);
  virtual OpcodesFINCSTP *clone() const;
  void swap(OpcodesFINCSTP &);
};

class OpcodesFINIT : public Opcode
{
public:

  OpcodesFINIT(const OpcodesFINIT &);
  OpcodesFINIT &operator=(const OpcodesFINIT &);
  OpcodesFINIT();
  ~OpcodesFINIT();
  virtual void accept(Visitor *v);
  virtual OpcodesFINIT *clone() const;
  void swap(OpcodesFINIT &);
};

class OpcodesFIST : public Opcode
{
public:

  OpcodesFIST(const OpcodesFIST &);
  OpcodesFIST &operator=(const OpcodesFIST &);
  OpcodesFIST();
  ~OpcodesFIST();
  virtual void accept(Visitor *v);
  virtual OpcodesFIST *clone() const;
  void swap(OpcodesFIST &);
};

class OpcodesFISTP : public Opcode
{
public:

  OpcodesFISTP(const OpcodesFISTP &);
  OpcodesFISTP &operator=(const OpcodesFISTP &);
  OpcodesFISTP();
  ~OpcodesFISTP();
  virtual void accept(Visitor *v);
  virtual OpcodesFISTP *clone() const;
  void swap(OpcodesFISTP &);
};

class OpcodesFISUB : public Opcode
{
public:

  OpcodesFISUB(const OpcodesFISUB &);
  OpcodesFISUB &operator=(const OpcodesFISUB &);
  OpcodesFISUB();
  ~OpcodesFISUB();
  virtual void accept(Visitor *v);
  virtual OpcodesFISUB *clone() const;
  void swap(OpcodesFISUB &);
};

class OpcodesFISUBR : public Opcode
{
public:

  OpcodesFISUBR(const OpcodesFISUBR &);
  OpcodesFISUBR &operator=(const OpcodesFISUBR &);
  OpcodesFISUBR();
  ~OpcodesFISUBR();
  virtual void accept(Visitor *v);
  virtual OpcodesFISUBR *clone() const;
  void swap(OpcodesFISUBR &);
};

class OpcodesFLD : public Opcode
{
public:

  OpcodesFLD(const OpcodesFLD &);
  OpcodesFLD &operator=(const OpcodesFLD &);
  OpcodesFLD();
  ~OpcodesFLD();
  virtual void accept(Visitor *v);
  virtual OpcodesFLD *clone() const;
  void swap(OpcodesFLD &);
};

class OpcodesFLD1 : public Opcode
{
public:

  OpcodesFLD1(const OpcodesFLD1 &);
  OpcodesFLD1 &operator=(const OpcodesFLD1 &);
  OpcodesFLD1();
  ~OpcodesFLD1();
  virtual void accept(Visitor *v);
  virtual OpcodesFLD1 *clone() const;
  void swap(OpcodesFLD1 &);
};

class OpcodesFLDCW : public Opcode
{
public:

  OpcodesFLDCW(const OpcodesFLDCW &);
  OpcodesFLDCW &operator=(const OpcodesFLDCW &);
  OpcodesFLDCW();
  ~OpcodesFLDCW();
  virtual void accept(Visitor *v);
  virtual OpcodesFLDCW *clone() const;
  void swap(OpcodesFLDCW &);
};

class OpcodesFLDENV : public Opcode
{
public:

  OpcodesFLDENV(const OpcodesFLDENV &);
  OpcodesFLDENV &operator=(const OpcodesFLDENV &);
  OpcodesFLDENV();
  ~OpcodesFLDENV();
  virtual void accept(Visitor *v);
  virtual OpcodesFLDENV *clone() const;
  void swap(OpcodesFLDENV &);
};

class OpcodesFLDL2E : public Opcode
{
public:

  OpcodesFLDL2E(const OpcodesFLDL2E &);
  OpcodesFLDL2E &operator=(const OpcodesFLDL2E &);
  OpcodesFLDL2E();
  ~OpcodesFLDL2E();
  virtual void accept(Visitor *v);
  virtual OpcodesFLDL2E *clone() const;
  void swap(OpcodesFLDL2E &);
};

class OpcodesFLDL2T : public Opcode
{
public:

  OpcodesFLDL2T(const OpcodesFLDL2T &);
  OpcodesFLDL2T &operator=(const OpcodesFLDL2T &);
  OpcodesFLDL2T();
  ~OpcodesFLDL2T();
  virtual void accept(Visitor *v);
  virtual OpcodesFLDL2T *clone() const;
  void swap(OpcodesFLDL2T &);
};

class OpcodesFLDLG2 : public Opcode
{
public:

  OpcodesFLDLG2(const OpcodesFLDLG2 &);
  OpcodesFLDLG2 &operator=(const OpcodesFLDLG2 &);
  OpcodesFLDLG2();
  ~OpcodesFLDLG2();
  virtual void accept(Visitor *v);
  virtual OpcodesFLDLG2 *clone() const;
  void swap(OpcodesFLDLG2 &);
};

class OpcodesFLDLN2 : public Opcode
{
public:

  OpcodesFLDLN2(const OpcodesFLDLN2 &);
  OpcodesFLDLN2 &operator=(const OpcodesFLDLN2 &);
  OpcodesFLDLN2();
  ~OpcodesFLDLN2();
  virtual void accept(Visitor *v);
  virtual OpcodesFLDLN2 *clone() const;
  void swap(OpcodesFLDLN2 &);
};

class OpcodesFLDPI : public Opcode
{
public:

  OpcodesFLDPI(const OpcodesFLDPI &);
  OpcodesFLDPI &operator=(const OpcodesFLDPI &);
  OpcodesFLDPI();
  ~OpcodesFLDPI();
  virtual void accept(Visitor *v);
  virtual OpcodesFLDPI *clone() const;
  void swap(OpcodesFLDPI &);
};

class OpcodesFLDZ : public Opcode
{
public:

  OpcodesFLDZ(const OpcodesFLDZ &);
  OpcodesFLDZ &operator=(const OpcodesFLDZ &);
  OpcodesFLDZ();
  ~OpcodesFLDZ();
  virtual void accept(Visitor *v);
  virtual OpcodesFLDZ *clone() const;
  void swap(OpcodesFLDZ &);
};

class OpcodesFMUL : public Opcode
{
public:

  OpcodesFMUL(const OpcodesFMUL &);
  OpcodesFMUL &operator=(const OpcodesFMUL &);
  OpcodesFMUL();
  ~OpcodesFMUL();
  virtual void accept(Visitor *v);
  virtual OpcodesFMUL *clone() const;
  void swap(OpcodesFMUL &);
};

class OpcodesFMULP : public Opcode
{
public:

  OpcodesFMULP(const OpcodesFMULP &);
  OpcodesFMULP &operator=(const OpcodesFMULP &);
  OpcodesFMULP();
  ~OpcodesFMULP();
  virtual void accept(Visitor *v);
  virtual OpcodesFMULP *clone() const;
  void swap(OpcodesFMULP &);
};

class OpcodesFNCLEX : public Opcode
{
public:

  OpcodesFNCLEX(const OpcodesFNCLEX &);
  OpcodesFNCLEX &operator=(const OpcodesFNCLEX &);
  OpcodesFNCLEX();
  ~OpcodesFNCLEX();
  virtual void accept(Visitor *v);
  virtual OpcodesFNCLEX *clone() const;
  void swap(OpcodesFNCLEX &);
};

class OpcodesFNDISI : public Opcode
{
public:

  OpcodesFNDISI(const OpcodesFNDISI &);
  OpcodesFNDISI &operator=(const OpcodesFNDISI &);
  OpcodesFNDISI();
  ~OpcodesFNDISI();
  virtual void accept(Visitor *v);
  virtual OpcodesFNDISI *clone() const;
  void swap(OpcodesFNDISI &);
};

class OpcodesFNENI : public Opcode
{
public:

  OpcodesFNENI(const OpcodesFNENI &);
  OpcodesFNENI &operator=(const OpcodesFNENI &);
  OpcodesFNENI();
  ~OpcodesFNENI();
  virtual void accept(Visitor *v);
  virtual OpcodesFNENI *clone() const;
  void swap(OpcodesFNENI &);
};

class OpcodesFNINIT : public Opcode
{
public:

  OpcodesFNINIT(const OpcodesFNINIT &);
  OpcodesFNINIT &operator=(const OpcodesFNINIT &);
  OpcodesFNINIT();
  ~OpcodesFNINIT();
  virtual void accept(Visitor *v);
  virtual OpcodesFNINIT *clone() const;
  void swap(OpcodesFNINIT &);
};

class OpcodesFNOP : public Opcode
{
public:

  OpcodesFNOP(const OpcodesFNOP &);
  OpcodesFNOP &operator=(const OpcodesFNOP &);
  OpcodesFNOP();
  ~OpcodesFNOP();
  virtual void accept(Visitor *v);
  virtual OpcodesFNOP *clone() const;
  void swap(OpcodesFNOP &);
};

class OpcodesFNSAVE : public Opcode
{
public:

  OpcodesFNSAVE(const OpcodesFNSAVE &);
  OpcodesFNSAVE &operator=(const OpcodesFNSAVE &);
  OpcodesFNSAVE();
  ~OpcodesFNSAVE();
  virtual void accept(Visitor *v);
  virtual OpcodesFNSAVE *clone() const;
  void swap(OpcodesFNSAVE &);
};

class OpcodesFNSTCW : public Opcode
{
public:

  OpcodesFNSTCW(const OpcodesFNSTCW &);
  OpcodesFNSTCW &operator=(const OpcodesFNSTCW &);
  OpcodesFNSTCW();
  ~OpcodesFNSTCW();
  virtual void accept(Visitor *v);
  virtual OpcodesFNSTCW *clone() const;
  void swap(OpcodesFNSTCW &);
};

class OpcodesFNSTENV : public Opcode
{
public:

  OpcodesFNSTENV(const OpcodesFNSTENV &);
  OpcodesFNSTENV &operator=(const OpcodesFNSTENV &);
  OpcodesFNSTENV();
  ~OpcodesFNSTENV();
  virtual void accept(Visitor *v);
  virtual OpcodesFNSTENV *clone() const;
  void swap(OpcodesFNSTENV &);
};

class OpcodesFNSTSW : public Opcode
{
public:

  OpcodesFNSTSW(const OpcodesFNSTSW &);
  OpcodesFNSTSW &operator=(const OpcodesFNSTSW &);
  OpcodesFNSTSW();
  ~OpcodesFNSTSW();
  virtual void accept(Visitor *v);
  virtual OpcodesFNSTSW *clone() const;
  void swap(OpcodesFNSTSW &);
};

class OpcodesFPATAN : public Opcode
{
public:

  OpcodesFPATAN(const OpcodesFPATAN &);
  OpcodesFPATAN &operator=(const OpcodesFPATAN &);
  OpcodesFPATAN();
  ~OpcodesFPATAN();
  virtual void accept(Visitor *v);
  virtual OpcodesFPATAN *clone() const;
  void swap(OpcodesFPATAN &);
};

class OpcodesFPTAN : public Opcode
{
public:

  OpcodesFPTAN(const OpcodesFPTAN &);
  OpcodesFPTAN &operator=(const OpcodesFPTAN &);
  OpcodesFPTAN();
  ~OpcodesFPTAN();
  virtual void accept(Visitor *v);
  virtual OpcodesFPTAN *clone() const;
  void swap(OpcodesFPTAN &);
};

class OpcodesFPREM : public Opcode
{
public:

  OpcodesFPREM(const OpcodesFPREM &);
  OpcodesFPREM &operator=(const OpcodesFPREM &);
  OpcodesFPREM();
  ~OpcodesFPREM();
  virtual void accept(Visitor *v);
  virtual OpcodesFPREM *clone() const;
  void swap(OpcodesFPREM &);
};

class OpcodesFPREM1 : public Opcode
{
public:

  OpcodesFPREM1(const OpcodesFPREM1 &);
  OpcodesFPREM1 &operator=(const OpcodesFPREM1 &);
  OpcodesFPREM1();
  ~OpcodesFPREM1();
  virtual void accept(Visitor *v);
  virtual OpcodesFPREM1 *clone() const;
  void swap(OpcodesFPREM1 &);
};

class OpcodesFRNDINT : public Opcode
{
public:

  OpcodesFRNDINT(const OpcodesFRNDINT &);
  OpcodesFRNDINT &operator=(const OpcodesFRNDINT &);
  OpcodesFRNDINT();
  ~OpcodesFRNDINT();
  virtual void accept(Visitor *v);
  virtual OpcodesFRNDINT *clone() const;
  void swap(OpcodesFRNDINT &);
};

class OpcodesFRSTOR : public Opcode
{
public:

  OpcodesFRSTOR(const OpcodesFRSTOR &);
  OpcodesFRSTOR &operator=(const OpcodesFRSTOR &);
  OpcodesFRSTOR();
  ~OpcodesFRSTOR();
  virtual void accept(Visitor *v);
  virtual OpcodesFRSTOR *clone() const;
  void swap(OpcodesFRSTOR &);
};

class OpcodesFSAVE : public Opcode
{
public:

  OpcodesFSAVE(const OpcodesFSAVE &);
  OpcodesFSAVE &operator=(const OpcodesFSAVE &);
  OpcodesFSAVE();
  ~OpcodesFSAVE();
  virtual void accept(Visitor *v);
  virtual OpcodesFSAVE *clone() const;
  void swap(OpcodesFSAVE &);
};

class OpcodesFSCALE : public Opcode
{
public:

  OpcodesFSCALE(const OpcodesFSCALE &);
  OpcodesFSCALE &operator=(const OpcodesFSCALE &);
  OpcodesFSCALE();
  ~OpcodesFSCALE();
  virtual void accept(Visitor *v);
  virtual OpcodesFSCALE *clone() const;
  void swap(OpcodesFSCALE &);
};

class OpcodesFSETPM : public Opcode
{
public:

  OpcodesFSETPM(const OpcodesFSETPM &);
  OpcodesFSETPM &operator=(const OpcodesFSETPM &);
  OpcodesFSETPM();
  ~OpcodesFSETPM();
  virtual void accept(Visitor *v);
  virtual OpcodesFSETPM *clone() const;
  void swap(OpcodesFSETPM &);
};

class OpcodesFSIN : public Opcode
{
public:

  OpcodesFSIN(const OpcodesFSIN &);
  OpcodesFSIN &operator=(const OpcodesFSIN &);
  OpcodesFSIN();
  ~OpcodesFSIN();
  virtual void accept(Visitor *v);
  virtual OpcodesFSIN *clone() const;
  void swap(OpcodesFSIN &);
};

class OpcodesFSINCOS : public Opcode
{
public:

  OpcodesFSINCOS(const OpcodesFSINCOS &);
  OpcodesFSINCOS &operator=(const OpcodesFSINCOS &);
  OpcodesFSINCOS();
  ~OpcodesFSINCOS();
  virtual void accept(Visitor *v);
  virtual OpcodesFSINCOS *clone() const;
  void swap(OpcodesFSINCOS &);
};

class OpcodesFSQRT : public Opcode
{
public:

  OpcodesFSQRT(const OpcodesFSQRT &);
  OpcodesFSQRT &operator=(const OpcodesFSQRT &);
  OpcodesFSQRT();
  ~OpcodesFSQRT();
  virtual void accept(Visitor *v);
  virtual OpcodesFSQRT *clone() const;
  void swap(OpcodesFSQRT &);
};

class OpcodesFST : public Opcode
{
public:

  OpcodesFST(const OpcodesFST &);
  OpcodesFST &operator=(const OpcodesFST &);
  OpcodesFST();
  ~OpcodesFST();
  virtual void accept(Visitor *v);
  virtual OpcodesFST *clone() const;
  void swap(OpcodesFST &);
};

class OpcodesFSTCW : public Opcode
{
public:

  OpcodesFSTCW(const OpcodesFSTCW &);
  OpcodesFSTCW &operator=(const OpcodesFSTCW &);
  OpcodesFSTCW();
  ~OpcodesFSTCW();
  virtual void accept(Visitor *v);
  virtual OpcodesFSTCW *clone() const;
  void swap(OpcodesFSTCW &);
};

class OpcodesFSTENV : public Opcode
{
public:

  OpcodesFSTENV(const OpcodesFSTENV &);
  OpcodesFSTENV &operator=(const OpcodesFSTENV &);
  OpcodesFSTENV();
  ~OpcodesFSTENV();
  virtual void accept(Visitor *v);
  virtual OpcodesFSTENV *clone() const;
  void swap(OpcodesFSTENV &);
};

class OpcodesFSTP : public Opcode
{
public:

  OpcodesFSTP(const OpcodesFSTP &);
  OpcodesFSTP &operator=(const OpcodesFSTP &);
  OpcodesFSTP();
  ~OpcodesFSTP();
  virtual void accept(Visitor *v);
  virtual OpcodesFSTP *clone() const;
  void swap(OpcodesFSTP &);
};

class OpcodesFSTSW : public Opcode
{
public:

  OpcodesFSTSW(const OpcodesFSTSW &);
  OpcodesFSTSW &operator=(const OpcodesFSTSW &);
  OpcodesFSTSW();
  ~OpcodesFSTSW();
  virtual void accept(Visitor *v);
  virtual OpcodesFSTSW *clone() const;
  void swap(OpcodesFSTSW &);
};

class OpcodesFSUB : public Opcode
{
public:

  OpcodesFSUB(const OpcodesFSUB &);
  OpcodesFSUB &operator=(const OpcodesFSUB &);
  OpcodesFSUB();
  ~OpcodesFSUB();
  virtual void accept(Visitor *v);
  virtual OpcodesFSUB *clone() const;
  void swap(OpcodesFSUB &);
};

class OpcodesFSUBP : public Opcode
{
public:

  OpcodesFSUBP(const OpcodesFSUBP &);
  OpcodesFSUBP &operator=(const OpcodesFSUBP &);
  OpcodesFSUBP();
  ~OpcodesFSUBP();
  virtual void accept(Visitor *v);
  virtual OpcodesFSUBP *clone() const;
  void swap(OpcodesFSUBP &);
};

class OpcodesFSUBR : public Opcode
{
public:

  OpcodesFSUBR(const OpcodesFSUBR &);
  OpcodesFSUBR &operator=(const OpcodesFSUBR &);
  OpcodesFSUBR();
  ~OpcodesFSUBR();
  virtual void accept(Visitor *v);
  virtual OpcodesFSUBR *clone() const;
  void swap(OpcodesFSUBR &);
};

class OpcodesFSUBRP : public Opcode
{
public:

  OpcodesFSUBRP(const OpcodesFSUBRP &);
  OpcodesFSUBRP &operator=(const OpcodesFSUBRP &);
  OpcodesFSUBRP();
  ~OpcodesFSUBRP();
  virtual void accept(Visitor *v);
  virtual OpcodesFSUBRP *clone() const;
  void swap(OpcodesFSUBRP &);
};

class OpcodesFTST : public Opcode
{
public:

  OpcodesFTST(const OpcodesFTST &);
  OpcodesFTST &operator=(const OpcodesFTST &);
  OpcodesFTST();
  ~OpcodesFTST();
  virtual void accept(Visitor *v);
  virtual OpcodesFTST *clone() const;
  void swap(OpcodesFTST &);
};

class OpcodesFUCOM : public Opcode
{
public:

  OpcodesFUCOM(const OpcodesFUCOM &);
  OpcodesFUCOM &operator=(const OpcodesFUCOM &);
  OpcodesFUCOM();
  ~OpcodesFUCOM();
  virtual void accept(Visitor *v);
  virtual OpcodesFUCOM *clone() const;
  void swap(OpcodesFUCOM &);
};

class OpcodesFUCOMP : public Opcode
{
public:

  OpcodesFUCOMP(const OpcodesFUCOMP &);
  OpcodesFUCOMP &operator=(const OpcodesFUCOMP &);
  OpcodesFUCOMP();
  ~OpcodesFUCOMP();
  virtual void accept(Visitor *v);
  virtual OpcodesFUCOMP *clone() const;
  void swap(OpcodesFUCOMP &);
};

class OpcodesFUCOMPP : public Opcode
{
public:

  OpcodesFUCOMPP(const OpcodesFUCOMPP &);
  OpcodesFUCOMPP &operator=(const OpcodesFUCOMPP &);
  OpcodesFUCOMPP();
  ~OpcodesFUCOMPP();
  virtual void accept(Visitor *v);
  virtual OpcodesFUCOMPP *clone() const;
  void swap(OpcodesFUCOMPP &);
};

class OpcodesFXAM : public Opcode
{
public:

  OpcodesFXAM(const OpcodesFXAM &);
  OpcodesFXAM &operator=(const OpcodesFXAM &);
  OpcodesFXAM();
  ~OpcodesFXAM();
  virtual void accept(Visitor *v);
  virtual OpcodesFXAM *clone() const;
  void swap(OpcodesFXAM &);
};

class OpcodesFXCH : public Opcode
{
public:

  OpcodesFXCH(const OpcodesFXCH &);
  OpcodesFXCH &operator=(const OpcodesFXCH &);
  OpcodesFXCH();
  ~OpcodesFXCH();
  virtual void accept(Visitor *v);
  virtual OpcodesFXCH *clone() const;
  void swap(OpcodesFXCH &);
};

class OpcodesFXTRACT : public Opcode
{
public:

  OpcodesFXTRACT(const OpcodesFXTRACT &);
  OpcodesFXTRACT &operator=(const OpcodesFXTRACT &);
  OpcodesFXTRACT();
  ~OpcodesFXTRACT();
  virtual void accept(Visitor *v);
  virtual OpcodesFXTRACT *clone() const;
  void swap(OpcodesFXTRACT &);
};

class OpcodesFYL2X : public Opcode
{
public:

  OpcodesFYL2X(const OpcodesFYL2X &);
  OpcodesFYL2X &operator=(const OpcodesFYL2X &);
  OpcodesFYL2X();
  ~OpcodesFYL2X();
  virtual void accept(Visitor *v);
  virtual OpcodesFYL2X *clone() const;
  void swap(OpcodesFYL2X &);
};

class OpcodesFYL2XP1 : public Opcode
{
public:

  OpcodesFYL2XP1(const OpcodesFYL2XP1 &);
  OpcodesFYL2XP1 &operator=(const OpcodesFYL2XP1 &);
  OpcodesFYL2XP1();
  ~OpcodesFYL2XP1();
  virtual void accept(Visitor *v);
  virtual OpcodesFYL2XP1 *clone() const;
  void swap(OpcodesFYL2XP1 &);
};

class OpcodesHLT : public Opcode
{
public:

  OpcodesHLT(const OpcodesHLT &);
  OpcodesHLT &operator=(const OpcodesHLT &);
  OpcodesHLT();
  ~OpcodesHLT();
  virtual void accept(Visitor *v);
  virtual OpcodesHLT *clone() const;
  void swap(OpcodesHLT &);
};

class OpcodesIDIV : public Opcode
{
public:

  OpcodesIDIV(const OpcodesIDIV &);
  OpcodesIDIV &operator=(const OpcodesIDIV &);
  OpcodesIDIV();
  ~OpcodesIDIV();
  virtual void accept(Visitor *v);
  virtual OpcodesIDIV *clone() const;
  void swap(OpcodesIDIV &);
};

class OpcodesIMUL : public Opcode
{
public:

  OpcodesIMUL(const OpcodesIMUL &);
  OpcodesIMUL &operator=(const OpcodesIMUL &);
  OpcodesIMUL();
  ~OpcodesIMUL();
  virtual void accept(Visitor *v);
  virtual OpcodesIMUL *clone() const;
  void swap(OpcodesIMUL &);
};

class OpcodesIN : public Opcode
{
public:

  OpcodesIN(const OpcodesIN &);
  OpcodesIN &operator=(const OpcodesIN &);
  OpcodesIN();
  ~OpcodesIN();
  virtual void accept(Visitor *v);
  virtual OpcodesIN *clone() const;
  void swap(OpcodesIN &);
};

class OpcodesINC : public Opcode
{
public:

  OpcodesINC(const OpcodesINC &);
  OpcodesINC &operator=(const OpcodesINC &);
  OpcodesINC();
  ~OpcodesINC();
  virtual void accept(Visitor *v);
  virtual OpcodesINC *clone() const;
  void swap(OpcodesINC &);
};

class OpcodesINCO : public Opcode
{
public:

  OpcodesINCO(const OpcodesINCO &);
  OpcodesINCO &operator=(const OpcodesINCO &);
  OpcodesINCO();
  ~OpcodesINCO();
  virtual void accept(Visitor *v);
  virtual OpcodesINCO *clone() const;
  void swap(OpcodesINCO &);
};

class OpcodesINSB : public Opcode
{
public:

  OpcodesINSB(const OpcodesINSB &);
  OpcodesINSB &operator=(const OpcodesINSB &);
  OpcodesINSB();
  ~OpcodesINSB();
  virtual void accept(Visitor *v);
  virtual OpcodesINSB *clone() const;
  void swap(OpcodesINSB &);
};

class OpcodesINSD : public Opcode
{
public:

  OpcodesINSD(const OpcodesINSD &);
  OpcodesINSD &operator=(const OpcodesINSD &);
  OpcodesINSD();
  ~OpcodesINSD();
  virtual void accept(Visitor *v);
  virtual OpcodesINSD *clone() const;
  void swap(OpcodesINSD &);
};

class OpcodesINSW : public Opcode
{
public:

  OpcodesINSW(const OpcodesINSW &);
  OpcodesINSW &operator=(const OpcodesINSW &);
  OpcodesINSW();
  ~OpcodesINSW();
  virtual void accept(Visitor *v);
  virtual OpcodesINSW *clone() const;
  void swap(OpcodesINSW &);
};

class OpcodesINT : public Opcode
{
public:

  OpcodesINT(const OpcodesINT &);
  OpcodesINT &operator=(const OpcodesINT &);
  OpcodesINT();
  ~OpcodesINT();
  virtual void accept(Visitor *v);
  virtual OpcodesINT *clone() const;
  void swap(OpcodesINT &);
};

class OpcodesINT3 : public Opcode
{
public:

  OpcodesINT3(const OpcodesINT3 &);
  OpcodesINT3 &operator=(const OpcodesINT3 &);
  OpcodesINT3();
  ~OpcodesINT3();
  virtual void accept(Visitor *v);
  virtual OpcodesINT3 *clone() const;
  void swap(OpcodesINT3 &);
};

class OpcodesINTO : public Opcode
{
public:

  OpcodesINTO(const OpcodesINTO &);
  OpcodesINTO &operator=(const OpcodesINTO &);
  OpcodesINTO();
  ~OpcodesINTO();
  virtual void accept(Visitor *v);
  virtual OpcodesINTO *clone() const;
  void swap(OpcodesINTO &);
};

class OpcodesINVD : public Opcode
{
public:

  OpcodesINVD(const OpcodesINVD &);
  OpcodesINVD &operator=(const OpcodesINVD &);
  OpcodesINVD();
  ~OpcodesINVD();
  virtual void accept(Visitor *v);
  virtual OpcodesINVD *clone() const;
  void swap(OpcodesINVD &);
};

class OpcodesINVLPG : public Opcode
{
public:

  OpcodesINVLPG(const OpcodesINVLPG &);
  OpcodesINVLPG &operator=(const OpcodesINVLPG &);
  OpcodesINVLPG();
  ~OpcodesINVLPG();
  virtual void accept(Visitor *v);
  virtual OpcodesINVLPG *clone() const;
  void swap(OpcodesINVLPG &);
};

class OpcodesIRET : public Opcode
{
public:

  OpcodesIRET(const OpcodesIRET &);
  OpcodesIRET &operator=(const OpcodesIRET &);
  OpcodesIRET();
  ~OpcodesIRET();
  virtual void accept(Visitor *v);
  virtual OpcodesIRET *clone() const;
  void swap(OpcodesIRET &);
};

class OpcodesIRETD : public Opcode
{
public:

  OpcodesIRETD(const OpcodesIRETD &);
  OpcodesIRETD &operator=(const OpcodesIRETD &);
  OpcodesIRETD();
  ~OpcodesIRETD();
  virtual void accept(Visitor *v);
  virtual OpcodesIRETD *clone() const;
  void swap(OpcodesIRETD &);
};

class OpcodesIRETW : public Opcode
{
public:

  OpcodesIRETW(const OpcodesIRETW &);
  OpcodesIRETW &operator=(const OpcodesIRETW &);
  OpcodesIRETW();
  ~OpcodesIRETW();
  virtual void accept(Visitor *v);
  virtual OpcodesIRETW *clone() const;
  void swap(OpcodesIRETW &);
};

class OpcodesJA : public Opcode
{
public:

  OpcodesJA(const OpcodesJA &);
  OpcodesJA &operator=(const OpcodesJA &);
  OpcodesJA();
  ~OpcodesJA();
  virtual void accept(Visitor *v);
  virtual OpcodesJA *clone() const;
  void swap(OpcodesJA &);
};

class OpcodesJAE : public Opcode
{
public:

  OpcodesJAE(const OpcodesJAE &);
  OpcodesJAE &operator=(const OpcodesJAE &);
  OpcodesJAE();
  ~OpcodesJAE();
  virtual void accept(Visitor *v);
  virtual OpcodesJAE *clone() const;
  void swap(OpcodesJAE &);
};

class OpcodesJB : public Opcode
{
public:

  OpcodesJB(const OpcodesJB &);
  OpcodesJB &operator=(const OpcodesJB &);
  OpcodesJB();
  ~OpcodesJB();
  virtual void accept(Visitor *v);
  virtual OpcodesJB *clone() const;
  void swap(OpcodesJB &);
};

class OpcodesJBE : public Opcode
{
public:

  OpcodesJBE(const OpcodesJBE &);
  OpcodesJBE &operator=(const OpcodesJBE &);
  OpcodesJBE();
  ~OpcodesJBE();
  virtual void accept(Visitor *v);
  virtual OpcodesJBE *clone() const;
  void swap(OpcodesJBE &);
};

class OpcodesJC : public Opcode
{
public:

  OpcodesJC(const OpcodesJC &);
  OpcodesJC &operator=(const OpcodesJC &);
  OpcodesJC();
  ~OpcodesJC();
  virtual void accept(Visitor *v);
  virtual OpcodesJC *clone() const;
  void swap(OpcodesJC &);
};

class OpcodesJCXZ : public Opcode
{
public:

  OpcodesJCXZ(const OpcodesJCXZ &);
  OpcodesJCXZ &operator=(const OpcodesJCXZ &);
  OpcodesJCXZ();
  ~OpcodesJCXZ();
  virtual void accept(Visitor *v);
  virtual OpcodesJCXZ *clone() const;
  void swap(OpcodesJCXZ &);
};

class OpcodesJE : public Opcode
{
public:

  OpcodesJE(const OpcodesJE &);
  OpcodesJE &operator=(const OpcodesJE &);
  OpcodesJE();
  ~OpcodesJE();
  virtual void accept(Visitor *v);
  virtual OpcodesJE *clone() const;
  void swap(OpcodesJE &);
};

class OpcodesJECXZ : public Opcode
{
public:

  OpcodesJECXZ(const OpcodesJECXZ &);
  OpcodesJECXZ &operator=(const OpcodesJECXZ &);
  OpcodesJECXZ();
  ~OpcodesJECXZ();
  virtual void accept(Visitor *v);
  virtual OpcodesJECXZ *clone() const;
  void swap(OpcodesJECXZ &);
};

class OpcodesJG : public Opcode
{
public:

  OpcodesJG(const OpcodesJG &);
  OpcodesJG &operator=(const OpcodesJG &);
  OpcodesJG();
  ~OpcodesJG();
  virtual void accept(Visitor *v);
  virtual OpcodesJG *clone() const;
  void swap(OpcodesJG &);
};

class OpcodesJGE : public Opcode
{
public:

  OpcodesJGE(const OpcodesJGE &);
  OpcodesJGE &operator=(const OpcodesJGE &);
  OpcodesJGE();
  ~OpcodesJGE();
  virtual void accept(Visitor *v);
  virtual OpcodesJGE *clone() const;
  void swap(OpcodesJGE &);
};

class OpcodesJL : public Opcode
{
public:

  OpcodesJL(const OpcodesJL &);
  OpcodesJL &operator=(const OpcodesJL &);
  OpcodesJL();
  ~OpcodesJL();
  virtual void accept(Visitor *v);
  virtual OpcodesJL *clone() const;
  void swap(OpcodesJL &);
};

class OpcodesJLE : public Opcode
{
public:

  OpcodesJLE(const OpcodesJLE &);
  OpcodesJLE &operator=(const OpcodesJLE &);
  OpcodesJLE();
  ~OpcodesJLE();
  virtual void accept(Visitor *v);
  virtual OpcodesJLE *clone() const;
  void swap(OpcodesJLE &);
};

class OpcodesJMP : public Opcode
{
public:

  OpcodesJMP(const OpcodesJMP &);
  OpcodesJMP &operator=(const OpcodesJMP &);
  OpcodesJMP();
  ~OpcodesJMP();
  virtual void accept(Visitor *v);
  virtual OpcodesJMP *clone() const;
  void swap(OpcodesJMP &);
};

class OpcodesJNA : public Opcode
{
public:

  OpcodesJNA(const OpcodesJNA &);
  OpcodesJNA &operator=(const OpcodesJNA &);
  OpcodesJNA();
  ~OpcodesJNA();
  virtual void accept(Visitor *v);
  virtual OpcodesJNA *clone() const;
  void swap(OpcodesJNA &);
};

class OpcodesJNAE : public Opcode
{
public:

  OpcodesJNAE(const OpcodesJNAE &);
  OpcodesJNAE &operator=(const OpcodesJNAE &);
  OpcodesJNAE();
  ~OpcodesJNAE();
  virtual void accept(Visitor *v);
  virtual OpcodesJNAE *clone() const;
  void swap(OpcodesJNAE &);
};

class OpcodesJNB : public Opcode
{
public:

  OpcodesJNB(const OpcodesJNB &);
  OpcodesJNB &operator=(const OpcodesJNB &);
  OpcodesJNB();
  ~OpcodesJNB();
  virtual void accept(Visitor *v);
  virtual OpcodesJNB *clone() const;
  void swap(OpcodesJNB &);
};

class OpcodesJNBE : public Opcode
{
public:

  OpcodesJNBE(const OpcodesJNBE &);
  OpcodesJNBE &operator=(const OpcodesJNBE &);
  OpcodesJNBE();
  ~OpcodesJNBE();
  virtual void accept(Visitor *v);
  virtual OpcodesJNBE *clone() const;
  void swap(OpcodesJNBE &);
};

class OpcodesJNC : public Opcode
{
public:

  OpcodesJNC(const OpcodesJNC &);
  OpcodesJNC &operator=(const OpcodesJNC &);
  OpcodesJNC();
  ~OpcodesJNC();
  virtual void accept(Visitor *v);
  virtual OpcodesJNC *clone() const;
  void swap(OpcodesJNC &);
};

class OpcodesJNE : public Opcode
{
public:

  OpcodesJNE(const OpcodesJNE &);
  OpcodesJNE &operator=(const OpcodesJNE &);
  OpcodesJNE();
  ~OpcodesJNE();
  virtual void accept(Visitor *v);
  virtual OpcodesJNE *clone() const;
  void swap(OpcodesJNE &);
};

class OpcodesJNG : public Opcode
{
public:

  OpcodesJNG(const OpcodesJNG &);
  OpcodesJNG &operator=(const OpcodesJNG &);
  OpcodesJNG();
  ~OpcodesJNG();
  virtual void accept(Visitor *v);
  virtual OpcodesJNG *clone() const;
  void swap(OpcodesJNG &);
};

class OpcodesJNGE : public Opcode
{
public:

  OpcodesJNGE(const OpcodesJNGE &);
  OpcodesJNGE &operator=(const OpcodesJNGE &);
  OpcodesJNGE();
  ~OpcodesJNGE();
  virtual void accept(Visitor *v);
  virtual OpcodesJNGE *clone() const;
  void swap(OpcodesJNGE &);
};

class OpcodesJNL : public Opcode
{
public:

  OpcodesJNL(const OpcodesJNL &);
  OpcodesJNL &operator=(const OpcodesJNL &);
  OpcodesJNL();
  ~OpcodesJNL();
  virtual void accept(Visitor *v);
  virtual OpcodesJNL *clone() const;
  void swap(OpcodesJNL &);
};

class OpcodesJNLE : public Opcode
{
public:

  OpcodesJNLE(const OpcodesJNLE &);
  OpcodesJNLE &operator=(const OpcodesJNLE &);
  OpcodesJNLE();
  ~OpcodesJNLE();
  virtual void accept(Visitor *v);
  virtual OpcodesJNLE *clone() const;
  void swap(OpcodesJNLE &);
};

class OpcodesJNO : public Opcode
{
public:

  OpcodesJNO(const OpcodesJNO &);
  OpcodesJNO &operator=(const OpcodesJNO &);
  OpcodesJNO();
  ~OpcodesJNO();
  virtual void accept(Visitor *v);
  virtual OpcodesJNO *clone() const;
  void swap(OpcodesJNO &);
};

class OpcodesJNP : public Opcode
{
public:

  OpcodesJNP(const OpcodesJNP &);
  OpcodesJNP &operator=(const OpcodesJNP &);
  OpcodesJNP();
  ~OpcodesJNP();
  virtual void accept(Visitor *v);
  virtual OpcodesJNP *clone() const;
  void swap(OpcodesJNP &);
};

class OpcodesJNS : public Opcode
{
public:

  OpcodesJNS(const OpcodesJNS &);
  OpcodesJNS &operator=(const OpcodesJNS &);
  OpcodesJNS();
  ~OpcodesJNS();
  virtual void accept(Visitor *v);
  virtual OpcodesJNS *clone() const;
  void swap(OpcodesJNS &);
};

class OpcodesJNZ : public Opcode
{
public:

  OpcodesJNZ(const OpcodesJNZ &);
  OpcodesJNZ &operator=(const OpcodesJNZ &);
  OpcodesJNZ();
  ~OpcodesJNZ();
  virtual void accept(Visitor *v);
  virtual OpcodesJNZ *clone() const;
  void swap(OpcodesJNZ &);
};

class OpcodesJO : public Opcode
{
public:

  OpcodesJO(const OpcodesJO &);
  OpcodesJO &operator=(const OpcodesJO &);
  OpcodesJO();
  ~OpcodesJO();
  virtual void accept(Visitor *v);
  virtual OpcodesJO *clone() const;
  void swap(OpcodesJO &);
};

class OpcodesJP : public Opcode
{
public:

  OpcodesJP(const OpcodesJP &);
  OpcodesJP &operator=(const OpcodesJP &);
  OpcodesJP();
  ~OpcodesJP();
  virtual void accept(Visitor *v);
  virtual OpcodesJP *clone() const;
  void swap(OpcodesJP &);
};

class OpcodesJPE : public Opcode
{
public:

  OpcodesJPE(const OpcodesJPE &);
  OpcodesJPE &operator=(const OpcodesJPE &);
  OpcodesJPE();
  ~OpcodesJPE();
  virtual void accept(Visitor *v);
  virtual OpcodesJPE *clone() const;
  void swap(OpcodesJPE &);
};

class OpcodesJPO : public Opcode
{
public:

  OpcodesJPO(const OpcodesJPO &);
  OpcodesJPO &operator=(const OpcodesJPO &);
  OpcodesJPO();
  ~OpcodesJPO();
  virtual void accept(Visitor *v);
  virtual OpcodesJPO *clone() const;
  void swap(OpcodesJPO &);
};

class OpcodesJS : public Opcode
{
public:

  OpcodesJS(const OpcodesJS &);
  OpcodesJS &operator=(const OpcodesJS &);
  OpcodesJS();
  ~OpcodesJS();
  virtual void accept(Visitor *v);
  virtual OpcodesJS *clone() const;
  void swap(OpcodesJS &);
};

class OpcodesJZ : public Opcode
{
public:

  OpcodesJZ(const OpcodesJZ &);
  OpcodesJZ &operator=(const OpcodesJZ &);
  OpcodesJZ();
  ~OpcodesJZ();
  virtual void accept(Visitor *v);
  virtual OpcodesJZ *clone() const;
  void swap(OpcodesJZ &);
};

class OpcodesLAHF : public Opcode
{
public:

  OpcodesLAHF(const OpcodesLAHF &);
  OpcodesLAHF &operator=(const OpcodesLAHF &);
  OpcodesLAHF();
  ~OpcodesLAHF();
  virtual void accept(Visitor *v);
  virtual OpcodesLAHF *clone() const;
  void swap(OpcodesLAHF &);
};

class OpcodesLAR : public Opcode
{
public:

  OpcodesLAR(const OpcodesLAR &);
  OpcodesLAR &operator=(const OpcodesLAR &);
  OpcodesLAR();
  ~OpcodesLAR();
  virtual void accept(Visitor *v);
  virtual OpcodesLAR *clone() const;
  void swap(OpcodesLAR &);
};

class OpcodesLDS : public Opcode
{
public:

  OpcodesLDS(const OpcodesLDS &);
  OpcodesLDS &operator=(const OpcodesLDS &);
  OpcodesLDS();
  ~OpcodesLDS();
  virtual void accept(Visitor *v);
  virtual OpcodesLDS *clone() const;
  void swap(OpcodesLDS &);
};

class OpcodesLEA : public Opcode
{
public:

  OpcodesLEA(const OpcodesLEA &);
  OpcodesLEA &operator=(const OpcodesLEA &);
  OpcodesLEA();
  ~OpcodesLEA();
  virtual void accept(Visitor *v);
  virtual OpcodesLEA *clone() const;
  void swap(OpcodesLEA &);
};

class OpcodesLEAVE : public Opcode
{
public:

  OpcodesLEAVE(const OpcodesLEAVE &);
  OpcodesLEAVE &operator=(const OpcodesLEAVE &);
  OpcodesLEAVE();
  ~OpcodesLEAVE();
  virtual void accept(Visitor *v);
  virtual OpcodesLEAVE *clone() const;
  void swap(OpcodesLEAVE &);
};

class OpcodesLES : public Opcode
{
public:

  OpcodesLES(const OpcodesLES &);
  OpcodesLES &operator=(const OpcodesLES &);
  OpcodesLES();
  ~OpcodesLES();
  virtual void accept(Visitor *v);
  virtual OpcodesLES *clone() const;
  void swap(OpcodesLES &);
};

class OpcodesLFS : public Opcode
{
public:

  OpcodesLFS(const OpcodesLFS &);
  OpcodesLFS &operator=(const OpcodesLFS &);
  OpcodesLFS();
  ~OpcodesLFS();
  virtual void accept(Visitor *v);
  virtual OpcodesLFS *clone() const;
  void swap(OpcodesLFS &);
};

class OpcodesLGDT : public Opcode
{
public:

  OpcodesLGDT(const OpcodesLGDT &);
  OpcodesLGDT &operator=(const OpcodesLGDT &);
  OpcodesLGDT();
  ~OpcodesLGDT();
  virtual void accept(Visitor *v);
  virtual OpcodesLGDT *clone() const;
  void swap(OpcodesLGDT &);
};

class OpcodesLGS : public Opcode
{
public:

  OpcodesLGS(const OpcodesLGS &);
  OpcodesLGS &operator=(const OpcodesLGS &);
  OpcodesLGS();
  ~OpcodesLGS();
  virtual void accept(Visitor *v);
  virtual OpcodesLGS *clone() const;
  void swap(OpcodesLGS &);
};

class OpcodesLIDT : public Opcode
{
public:

  OpcodesLIDT(const OpcodesLIDT &);
  OpcodesLIDT &operator=(const OpcodesLIDT &);
  OpcodesLIDT();
  ~OpcodesLIDT();
  virtual void accept(Visitor *v);
  virtual OpcodesLIDT *clone() const;
  void swap(OpcodesLIDT &);
};

class OpcodesLLDT : public Opcode
{
public:

  OpcodesLLDT(const OpcodesLLDT &);
  OpcodesLLDT &operator=(const OpcodesLLDT &);
  OpcodesLLDT();
  ~OpcodesLLDT();
  virtual void accept(Visitor *v);
  virtual OpcodesLLDT *clone() const;
  void swap(OpcodesLLDT &);
};

class OpcodesLMSW : public Opcode
{
public:

  OpcodesLMSW(const OpcodesLMSW &);
  OpcodesLMSW &operator=(const OpcodesLMSW &);
  OpcodesLMSW();
  ~OpcodesLMSW();
  virtual void accept(Visitor *v);
  virtual OpcodesLMSW *clone() const;
  void swap(OpcodesLMSW &);
};

class OpcodesLOCK : public Opcode
{
public:

  OpcodesLOCK(const OpcodesLOCK &);
  OpcodesLOCK &operator=(const OpcodesLOCK &);
  OpcodesLOCK();
  ~OpcodesLOCK();
  virtual void accept(Visitor *v);
  virtual OpcodesLOCK *clone() const;
  void swap(OpcodesLOCK &);
};

class OpcodesLODSB : public Opcode
{
public:

  OpcodesLODSB(const OpcodesLODSB &);
  OpcodesLODSB &operator=(const OpcodesLODSB &);
  OpcodesLODSB();
  ~OpcodesLODSB();
  virtual void accept(Visitor *v);
  virtual OpcodesLODSB *clone() const;
  void swap(OpcodesLODSB &);
};

class OpcodesLODSD : public Opcode
{
public:

  OpcodesLODSD(const OpcodesLODSD &);
  OpcodesLODSD &operator=(const OpcodesLODSD &);
  OpcodesLODSD();
  ~OpcodesLODSD();
  virtual void accept(Visitor *v);
  virtual OpcodesLODSD *clone() const;
  void swap(OpcodesLODSD &);
};

class OpcodesLODSW : public Opcode
{
public:

  OpcodesLODSW(const OpcodesLODSW &);
  OpcodesLODSW &operator=(const OpcodesLODSW &);
  OpcodesLODSW();
  ~OpcodesLODSW();
  virtual void accept(Visitor *v);
  virtual OpcodesLODSW *clone() const;
  void swap(OpcodesLODSW &);
};

class OpcodesLOOP : public Opcode
{
public:

  OpcodesLOOP(const OpcodesLOOP &);
  OpcodesLOOP &operator=(const OpcodesLOOP &);
  OpcodesLOOP();
  ~OpcodesLOOP();
  virtual void accept(Visitor *v);
  virtual OpcodesLOOP *clone() const;
  void swap(OpcodesLOOP &);
};

class OpcodesLOOPE : public Opcode
{
public:

  OpcodesLOOPE(const OpcodesLOOPE &);
  OpcodesLOOPE &operator=(const OpcodesLOOPE &);
  OpcodesLOOPE();
  ~OpcodesLOOPE();
  virtual void accept(Visitor *v);
  virtual OpcodesLOOPE *clone() const;
  void swap(OpcodesLOOPE &);
};

class OpcodesLOOPNE : public Opcode
{
public:

  OpcodesLOOPNE(const OpcodesLOOPNE &);
  OpcodesLOOPNE &operator=(const OpcodesLOOPNE &);
  OpcodesLOOPNE();
  ~OpcodesLOOPNE();
  virtual void accept(Visitor *v);
  virtual OpcodesLOOPNE *clone() const;
  void swap(OpcodesLOOPNE &);
};

class OpcodesLOOPNZ : public Opcode
{
public:

  OpcodesLOOPNZ(const OpcodesLOOPNZ &);
  OpcodesLOOPNZ &operator=(const OpcodesLOOPNZ &);
  OpcodesLOOPNZ();
  ~OpcodesLOOPNZ();
  virtual void accept(Visitor *v);
  virtual OpcodesLOOPNZ *clone() const;
  void swap(OpcodesLOOPNZ &);
};

class OpcodesLOOPZ : public Opcode
{
public:

  OpcodesLOOPZ(const OpcodesLOOPZ &);
  OpcodesLOOPZ &operator=(const OpcodesLOOPZ &);
  OpcodesLOOPZ();
  ~OpcodesLOOPZ();
  virtual void accept(Visitor *v);
  virtual OpcodesLOOPZ *clone() const;
  void swap(OpcodesLOOPZ &);
};

class OpcodesLSL : public Opcode
{
public:

  OpcodesLSL(const OpcodesLSL &);
  OpcodesLSL &operator=(const OpcodesLSL &);
  OpcodesLSL();
  ~OpcodesLSL();
  virtual void accept(Visitor *v);
  virtual OpcodesLSL *clone() const;
  void swap(OpcodesLSL &);
};

class OpcodesLSS : public Opcode
{
public:

  OpcodesLSS(const OpcodesLSS &);
  OpcodesLSS &operator=(const OpcodesLSS &);
  OpcodesLSS();
  ~OpcodesLSS();
  virtual void accept(Visitor *v);
  virtual OpcodesLSS *clone() const;
  void swap(OpcodesLSS &);
};

class OpcodesLTR : public Opcode
{
public:

  OpcodesLTR(const OpcodesLTR &);
  OpcodesLTR &operator=(const OpcodesLTR &);
  OpcodesLTR();
  ~OpcodesLTR();
  virtual void accept(Visitor *v);
  virtual OpcodesLTR *clone() const;
  void swap(OpcodesLTR &);
};

class OpcodesMOV : public Opcode
{
public:

  OpcodesMOV(const OpcodesMOV &);
  OpcodesMOV &operator=(const OpcodesMOV &);
  OpcodesMOV();
  ~OpcodesMOV();
  virtual void accept(Visitor *v);
  virtual OpcodesMOV *clone() const;
  void swap(OpcodesMOV &);
};

class OpcodesMOVSB : public Opcode
{
public:

  OpcodesMOVSB(const OpcodesMOVSB &);
  OpcodesMOVSB &operator=(const OpcodesMOVSB &);
  OpcodesMOVSB();
  ~OpcodesMOVSB();
  virtual void accept(Visitor *v);
  virtual OpcodesMOVSB *clone() const;
  void swap(OpcodesMOVSB &);
};

class OpcodesMOVSD : public Opcode
{
public:

  OpcodesMOVSD(const OpcodesMOVSD &);
  OpcodesMOVSD &operator=(const OpcodesMOVSD &);
  OpcodesMOVSD();
  ~OpcodesMOVSD();
  virtual void accept(Visitor *v);
  virtual OpcodesMOVSD *clone() const;
  void swap(OpcodesMOVSD &);
};

class OpcodesMOVSW : public Opcode
{
public:

  OpcodesMOVSW(const OpcodesMOVSW &);
  OpcodesMOVSW &operator=(const OpcodesMOVSW &);
  OpcodesMOVSW();
  ~OpcodesMOVSW();
  virtual void accept(Visitor *v);
  virtual OpcodesMOVSW *clone() const;
  void swap(OpcodesMOVSW &);
};

class OpcodesMOVSX : public Opcode
{
public:

  OpcodesMOVSX(const OpcodesMOVSX &);
  OpcodesMOVSX &operator=(const OpcodesMOVSX &);
  OpcodesMOVSX();
  ~OpcodesMOVSX();
  virtual void accept(Visitor *v);
  virtual OpcodesMOVSX *clone() const;
  void swap(OpcodesMOVSX &);
};

class OpcodesMOVZX : public Opcode
{
public:

  OpcodesMOVZX(const OpcodesMOVZX &);
  OpcodesMOVZX &operator=(const OpcodesMOVZX &);
  OpcodesMOVZX();
  ~OpcodesMOVZX();
  virtual void accept(Visitor *v);
  virtual OpcodesMOVZX *clone() const;
  void swap(OpcodesMOVZX &);
};

class OpcodesMUL : public Opcode
{
public:

  OpcodesMUL(const OpcodesMUL &);
  OpcodesMUL &operator=(const OpcodesMUL &);
  OpcodesMUL();
  ~OpcodesMUL();
  virtual void accept(Visitor *v);
  virtual OpcodesMUL *clone() const;
  void swap(OpcodesMUL &);
};

class OpcodesNEG : public Opcode
{
public:

  OpcodesNEG(const OpcodesNEG &);
  OpcodesNEG &operator=(const OpcodesNEG &);
  OpcodesNEG();
  ~OpcodesNEG();
  virtual void accept(Visitor *v);
  virtual OpcodesNEG *clone() const;
  void swap(OpcodesNEG &);
};

class OpcodesNOP : public Opcode
{
public:

  OpcodesNOP(const OpcodesNOP &);
  OpcodesNOP &operator=(const OpcodesNOP &);
  OpcodesNOP();
  ~OpcodesNOP();
  virtual void accept(Visitor *v);
  virtual OpcodesNOP *clone() const;
  void swap(OpcodesNOP &);
};

class OpcodesNOT : public Opcode
{
public:

  OpcodesNOT(const OpcodesNOT &);
  OpcodesNOT &operator=(const OpcodesNOT &);
  OpcodesNOT();
  ~OpcodesNOT();
  virtual void accept(Visitor *v);
  virtual OpcodesNOT *clone() const;
  void swap(OpcodesNOT &);
};

class OpcodesOR : public Opcode
{
public:

  OpcodesOR(const OpcodesOR &);
  OpcodesOR &operator=(const OpcodesOR &);
  OpcodesOR();
  ~OpcodesOR();
  virtual void accept(Visitor *v);
  virtual OpcodesOR *clone() const;
  void swap(OpcodesOR &);
};

class OpcodesORG : public Opcode
{
public:

  OpcodesORG(const OpcodesORG &);
  OpcodesORG &operator=(const OpcodesORG &);
  OpcodesORG();
  ~OpcodesORG();
  virtual void accept(Visitor *v);
  virtual OpcodesORG *clone() const;
  void swap(OpcodesORG &);
};

class OpcodesOUT : public Opcode
{
public:

  OpcodesOUT(const OpcodesOUT &);
  OpcodesOUT &operator=(const OpcodesOUT &);
  OpcodesOUT();
  ~OpcodesOUT();
  virtual void accept(Visitor *v);
  virtual OpcodesOUT *clone() const;
  void swap(OpcodesOUT &);
};

class OpcodesOUTSB : public Opcode
{
public:

  OpcodesOUTSB(const OpcodesOUTSB &);
  OpcodesOUTSB &operator=(const OpcodesOUTSB &);
  OpcodesOUTSB();
  ~OpcodesOUTSB();
  virtual void accept(Visitor *v);
  virtual OpcodesOUTSB *clone() const;
  void swap(OpcodesOUTSB &);
};

class OpcodesOUTSD : public Opcode
{
public:

  OpcodesOUTSD(const OpcodesOUTSD &);
  OpcodesOUTSD &operator=(const OpcodesOUTSD &);
  OpcodesOUTSD();
  ~OpcodesOUTSD();
  virtual void accept(Visitor *v);
  virtual OpcodesOUTSD *clone() const;
  void swap(OpcodesOUTSD &);
};

class OpcodesOUTSW : public Opcode
{
public:

  OpcodesOUTSW(const OpcodesOUTSW &);
  OpcodesOUTSW &operator=(const OpcodesOUTSW &);
  OpcodesOUTSW();
  ~OpcodesOUTSW();
  virtual void accept(Visitor *v);
  virtual OpcodesOUTSW *clone() const;
  void swap(OpcodesOUTSW &);
};

class OpcodesPOP : public Opcode
{
public:

  OpcodesPOP(const OpcodesPOP &);
  OpcodesPOP &operator=(const OpcodesPOP &);
  OpcodesPOP();
  ~OpcodesPOP();
  virtual void accept(Visitor *v);
  virtual OpcodesPOP *clone() const;
  void swap(OpcodesPOP &);
};

class OpcodesPOPA : public Opcode
{
public:

  OpcodesPOPA(const OpcodesPOPA &);
  OpcodesPOPA &operator=(const OpcodesPOPA &);
  OpcodesPOPA();
  ~OpcodesPOPA();
  virtual void accept(Visitor *v);
  virtual OpcodesPOPA *clone() const;
  void swap(OpcodesPOPA &);
};

class OpcodesPOPAD : public Opcode
{
public:

  OpcodesPOPAD(const OpcodesPOPAD &);
  OpcodesPOPAD &operator=(const OpcodesPOPAD &);
  OpcodesPOPAD();
  ~OpcodesPOPAD();
  virtual void accept(Visitor *v);
  virtual OpcodesPOPAD *clone() const;
  void swap(OpcodesPOPAD &);
};

class OpcodesPOPAW : public Opcode
{
public:

  OpcodesPOPAW(const OpcodesPOPAW &);
  OpcodesPOPAW &operator=(const OpcodesPOPAW &);
  OpcodesPOPAW();
  ~OpcodesPOPAW();
  virtual void accept(Visitor *v);
  virtual OpcodesPOPAW *clone() const;
  void swap(OpcodesPOPAW &);
};

class OpcodesPOPF : public Opcode
{
public:

  OpcodesPOPF(const OpcodesPOPF &);
  OpcodesPOPF &operator=(const OpcodesPOPF &);
  OpcodesPOPF();
  ~OpcodesPOPF();
  virtual void accept(Visitor *v);
  virtual OpcodesPOPF *clone() const;
  void swap(OpcodesPOPF &);
};

class OpcodesPOPFD : public Opcode
{
public:

  OpcodesPOPFD(const OpcodesPOPFD &);
  OpcodesPOPFD &operator=(const OpcodesPOPFD &);
  OpcodesPOPFD();
  ~OpcodesPOPFD();
  virtual void accept(Visitor *v);
  virtual OpcodesPOPFD *clone() const;
  void swap(OpcodesPOPFD &);
};

class OpcodesPOPFW : public Opcode
{
public:

  OpcodesPOPFW(const OpcodesPOPFW &);
  OpcodesPOPFW &operator=(const OpcodesPOPFW &);
  OpcodesPOPFW();
  ~OpcodesPOPFW();
  virtual void accept(Visitor *v);
  virtual OpcodesPOPFW *clone() const;
  void swap(OpcodesPOPFW &);
};

class OpcodesPUSH : public Opcode
{
public:

  OpcodesPUSH(const OpcodesPUSH &);
  OpcodesPUSH &operator=(const OpcodesPUSH &);
  OpcodesPUSH();
  ~OpcodesPUSH();
  virtual void accept(Visitor *v);
  virtual OpcodesPUSH *clone() const;
  void swap(OpcodesPUSH &);
};

class OpcodesPUSHA : public Opcode
{
public:

  OpcodesPUSHA(const OpcodesPUSHA &);
  OpcodesPUSHA &operator=(const OpcodesPUSHA &);
  OpcodesPUSHA();
  ~OpcodesPUSHA();
  virtual void accept(Visitor *v);
  virtual OpcodesPUSHA *clone() const;
  void swap(OpcodesPUSHA &);
};

class OpcodesPUSHD : public Opcode
{
public:

  OpcodesPUSHD(const OpcodesPUSHD &);
  OpcodesPUSHD &operator=(const OpcodesPUSHD &);
  OpcodesPUSHD();
  ~OpcodesPUSHD();
  virtual void accept(Visitor *v);
  virtual OpcodesPUSHD *clone() const;
  void swap(OpcodesPUSHD &);
};

class OpcodesPUSHAD : public Opcode
{
public:

  OpcodesPUSHAD(const OpcodesPUSHAD &);
  OpcodesPUSHAD &operator=(const OpcodesPUSHAD &);
  OpcodesPUSHAD();
  ~OpcodesPUSHAD();
  virtual void accept(Visitor *v);
  virtual OpcodesPUSHAD *clone() const;
  void swap(OpcodesPUSHAD &);
};

class OpcodesPUSHAW : public Opcode
{
public:

  OpcodesPUSHAW(const OpcodesPUSHAW &);
  OpcodesPUSHAW &operator=(const OpcodesPUSHAW &);
  OpcodesPUSHAW();
  ~OpcodesPUSHAW();
  virtual void accept(Visitor *v);
  virtual OpcodesPUSHAW *clone() const;
  void swap(OpcodesPUSHAW &);
};

class OpcodesPUSHF : public Opcode
{
public:

  OpcodesPUSHF(const OpcodesPUSHF &);
  OpcodesPUSHF &operator=(const OpcodesPUSHF &);
  OpcodesPUSHF();
  ~OpcodesPUSHF();
  virtual void accept(Visitor *v);
  virtual OpcodesPUSHF *clone() const;
  void swap(OpcodesPUSHF &);
};

class OpcodesPUSHFD : public Opcode
{
public:

  OpcodesPUSHFD(const OpcodesPUSHFD &);
  OpcodesPUSHFD &operator=(const OpcodesPUSHFD &);
  OpcodesPUSHFD();
  ~OpcodesPUSHFD();
  virtual void accept(Visitor *v);
  virtual OpcodesPUSHFD *clone() const;
  void swap(OpcodesPUSHFD &);
};

class OpcodesPUSHFW : public Opcode
{
public:

  OpcodesPUSHFW(const OpcodesPUSHFW &);
  OpcodesPUSHFW &operator=(const OpcodesPUSHFW &);
  OpcodesPUSHFW();
  ~OpcodesPUSHFW();
  virtual void accept(Visitor *v);
  virtual OpcodesPUSHFW *clone() const;
  void swap(OpcodesPUSHFW &);
};

class OpcodesRCL : public Opcode
{
public:

  OpcodesRCL(const OpcodesRCL &);
  OpcodesRCL &operator=(const OpcodesRCL &);
  OpcodesRCL();
  ~OpcodesRCL();
  virtual void accept(Visitor *v);
  virtual OpcodesRCL *clone() const;
  void swap(OpcodesRCL &);
};

class OpcodesRCR : public Opcode
{
public:

  OpcodesRCR(const OpcodesRCR &);
  OpcodesRCR &operator=(const OpcodesRCR &);
  OpcodesRCR();
  ~OpcodesRCR();
  virtual void accept(Visitor *v);
  virtual OpcodesRCR *clone() const;
  void swap(OpcodesRCR &);
};

class OpcodesRDMSR : public Opcode
{
public:

  OpcodesRDMSR(const OpcodesRDMSR &);
  OpcodesRDMSR &operator=(const OpcodesRDMSR &);
  OpcodesRDMSR();
  ~OpcodesRDMSR();
  virtual void accept(Visitor *v);
  virtual OpcodesRDMSR *clone() const;
  void swap(OpcodesRDMSR &);
};

class OpcodesRDPMC : public Opcode
{
public:

  OpcodesRDPMC(const OpcodesRDPMC &);
  OpcodesRDPMC &operator=(const OpcodesRDPMC &);
  OpcodesRDPMC();
  ~OpcodesRDPMC();
  virtual void accept(Visitor *v);
  virtual OpcodesRDPMC *clone() const;
  void swap(OpcodesRDPMC &);
};

class OpcodesREP : public Opcode
{
public:

  OpcodesREP(const OpcodesREP &);
  OpcodesREP &operator=(const OpcodesREP &);
  OpcodesREP();
  ~OpcodesREP();
  virtual void accept(Visitor *v);
  virtual OpcodesREP *clone() const;
  void swap(OpcodesREP &);
};

class OpcodesREPE : public Opcode
{
public:

  OpcodesREPE(const OpcodesREPE &);
  OpcodesREPE &operator=(const OpcodesREPE &);
  OpcodesREPE();
  ~OpcodesREPE();
  virtual void accept(Visitor *v);
  virtual OpcodesREPE *clone() const;
  void swap(OpcodesREPE &);
};

class OpcodesREPNE : public Opcode
{
public:

  OpcodesREPNE(const OpcodesREPNE &);
  OpcodesREPNE &operator=(const OpcodesREPNE &);
  OpcodesREPNE();
  ~OpcodesREPNE();
  virtual void accept(Visitor *v);
  virtual OpcodesREPNE *clone() const;
  void swap(OpcodesREPNE &);
};

class OpcodesREPNZ : public Opcode
{
public:

  OpcodesREPNZ(const OpcodesREPNZ &);
  OpcodesREPNZ &operator=(const OpcodesREPNZ &);
  OpcodesREPNZ();
  ~OpcodesREPNZ();
  virtual void accept(Visitor *v);
  virtual OpcodesREPNZ *clone() const;
  void swap(OpcodesREPNZ &);
};

class OpcodesREPZ : public Opcode
{
public:

  OpcodesREPZ(const OpcodesREPZ &);
  OpcodesREPZ &operator=(const OpcodesREPZ &);
  OpcodesREPZ();
  ~OpcodesREPZ();
  virtual void accept(Visitor *v);
  virtual OpcodesREPZ *clone() const;
  void swap(OpcodesREPZ &);
};

class OpcodesRESB : public Opcode
{
public:

  OpcodesRESB(const OpcodesRESB &);
  OpcodesRESB &operator=(const OpcodesRESB &);
  OpcodesRESB();
  ~OpcodesRESB();
  virtual void accept(Visitor *v);
  virtual OpcodesRESB *clone() const;
  void swap(OpcodesRESB &);
};

class OpcodesRESD : public Opcode
{
public:

  OpcodesRESD(const OpcodesRESD &);
  OpcodesRESD &operator=(const OpcodesRESD &);
  OpcodesRESD();
  ~OpcodesRESD();
  virtual void accept(Visitor *v);
  virtual OpcodesRESD *clone() const;
  void swap(OpcodesRESD &);
};

class OpcodesRESQ : public Opcode
{
public:

  OpcodesRESQ(const OpcodesRESQ &);
  OpcodesRESQ &operator=(const OpcodesRESQ &);
  OpcodesRESQ();
  ~OpcodesRESQ();
  virtual void accept(Visitor *v);
  virtual OpcodesRESQ *clone() const;
  void swap(OpcodesRESQ &);
};

class OpcodesREST : public Opcode
{
public:

  OpcodesREST(const OpcodesREST &);
  OpcodesREST &operator=(const OpcodesREST &);
  OpcodesREST();
  ~OpcodesREST();
  virtual void accept(Visitor *v);
  virtual OpcodesREST *clone() const;
  void swap(OpcodesREST &);
};

class OpcodesRESW : public Opcode
{
public:

  OpcodesRESW(const OpcodesRESW &);
  OpcodesRESW &operator=(const OpcodesRESW &);
  OpcodesRESW();
  ~OpcodesRESW();
  virtual void accept(Visitor *v);
  virtual OpcodesRESW *clone() const;
  void swap(OpcodesRESW &);
};

class OpcodesRET : public Opcode
{
public:

  OpcodesRET(const OpcodesRET &);
  OpcodesRET &operator=(const OpcodesRET &);
  OpcodesRET();
  ~OpcodesRET();
  virtual void accept(Visitor *v);
  virtual OpcodesRET *clone() const;
  void swap(OpcodesRET &);
};

class OpcodesRETF : public Opcode
{
public:

  OpcodesRETF(const OpcodesRETF &);
  OpcodesRETF &operator=(const OpcodesRETF &);
  OpcodesRETF();
  ~OpcodesRETF();
  virtual void accept(Visitor *v);
  virtual OpcodesRETF *clone() const;
  void swap(OpcodesRETF &);
};

class OpcodesRETN : public Opcode
{
public:

  OpcodesRETN(const OpcodesRETN &);
  OpcodesRETN &operator=(const OpcodesRETN &);
  OpcodesRETN();
  ~OpcodesRETN();
  virtual void accept(Visitor *v);
  virtual OpcodesRETN *clone() const;
  void swap(OpcodesRETN &);
};

class OpcodesROL : public Opcode
{
public:

  OpcodesROL(const OpcodesROL &);
  OpcodesROL &operator=(const OpcodesROL &);
  OpcodesROL();
  ~OpcodesROL();
  virtual void accept(Visitor *v);
  virtual OpcodesROL *clone() const;
  void swap(OpcodesROL &);
};

class OpcodesROR : public Opcode
{
public:

  OpcodesROR(const OpcodesROR &);
  OpcodesROR &operator=(const OpcodesROR &);
  OpcodesROR();
  ~OpcodesROR();
  virtual void accept(Visitor *v);
  virtual OpcodesROR *clone() const;
  void swap(OpcodesROR &);
};

class OpcodesRSM : public Opcode
{
public:

  OpcodesRSM(const OpcodesRSM &);
  OpcodesRSM &operator=(const OpcodesRSM &);
  OpcodesRSM();
  ~OpcodesRSM();
  virtual void accept(Visitor *v);
  virtual OpcodesRSM *clone() const;
  void swap(OpcodesRSM &);
};

class OpcodesSAHF : public Opcode
{
public:

  OpcodesSAHF(const OpcodesSAHF &);
  OpcodesSAHF &operator=(const OpcodesSAHF &);
  OpcodesSAHF();
  ~OpcodesSAHF();
  virtual void accept(Visitor *v);
  virtual OpcodesSAHF *clone() const;
  void swap(OpcodesSAHF &);
};

class OpcodesSAL : public Opcode
{
public:

  OpcodesSAL(const OpcodesSAL &);
  OpcodesSAL &operator=(const OpcodesSAL &);
  OpcodesSAL();
  ~OpcodesSAL();
  virtual void accept(Visitor *v);
  virtual OpcodesSAL *clone() const;
  void swap(OpcodesSAL &);
};

class OpcodesSAR : public Opcode
{
public:

  OpcodesSAR(const OpcodesSAR &);
  OpcodesSAR &operator=(const OpcodesSAR &);
  OpcodesSAR();
  ~OpcodesSAR();
  virtual void accept(Visitor *v);
  virtual OpcodesSAR *clone() const;
  void swap(OpcodesSAR &);
};

class OpcodesSBB : public Opcode
{
public:

  OpcodesSBB(const OpcodesSBB &);
  OpcodesSBB &operator=(const OpcodesSBB &);
  OpcodesSBB();
  ~OpcodesSBB();
  virtual void accept(Visitor *v);
  virtual OpcodesSBB *clone() const;
  void swap(OpcodesSBB &);
};

class OpcodesSCASB : public Opcode
{
public:

  OpcodesSCASB(const OpcodesSCASB &);
  OpcodesSCASB &operator=(const OpcodesSCASB &);
  OpcodesSCASB();
  ~OpcodesSCASB();
  virtual void accept(Visitor *v);
  virtual OpcodesSCASB *clone() const;
  void swap(OpcodesSCASB &);
};

class OpcodesSCASD : public Opcode
{
public:

  OpcodesSCASD(const OpcodesSCASD &);
  OpcodesSCASD &operator=(const OpcodesSCASD &);
  OpcodesSCASD();
  ~OpcodesSCASD();
  virtual void accept(Visitor *v);
  virtual OpcodesSCASD *clone() const;
  void swap(OpcodesSCASD &);
};

class OpcodesSCASW : public Opcode
{
public:

  OpcodesSCASW(const OpcodesSCASW &);
  OpcodesSCASW &operator=(const OpcodesSCASW &);
  OpcodesSCASW();
  ~OpcodesSCASW();
  virtual void accept(Visitor *v);
  virtual OpcodesSCASW *clone() const;
  void swap(OpcodesSCASW &);
};

class OpcodesSETA : public Opcode
{
public:

  OpcodesSETA(const OpcodesSETA &);
  OpcodesSETA &operator=(const OpcodesSETA &);
  OpcodesSETA();
  ~OpcodesSETA();
  virtual void accept(Visitor *v);
  virtual OpcodesSETA *clone() const;
  void swap(OpcodesSETA &);
};

class OpcodesSETAE : public Opcode
{
public:

  OpcodesSETAE(const OpcodesSETAE &);
  OpcodesSETAE &operator=(const OpcodesSETAE &);
  OpcodesSETAE();
  ~OpcodesSETAE();
  virtual void accept(Visitor *v);
  virtual OpcodesSETAE *clone() const;
  void swap(OpcodesSETAE &);
};

class OpcodesSETB : public Opcode
{
public:

  OpcodesSETB(const OpcodesSETB &);
  OpcodesSETB &operator=(const OpcodesSETB &);
  OpcodesSETB();
  ~OpcodesSETB();
  virtual void accept(Visitor *v);
  virtual OpcodesSETB *clone() const;
  void swap(OpcodesSETB &);
};

class OpcodesSETBE : public Opcode
{
public:

  OpcodesSETBE(const OpcodesSETBE &);
  OpcodesSETBE &operator=(const OpcodesSETBE &);
  OpcodesSETBE();
  ~OpcodesSETBE();
  virtual void accept(Visitor *v);
  virtual OpcodesSETBE *clone() const;
  void swap(OpcodesSETBE &);
};

class OpcodesSETC : public Opcode
{
public:

  OpcodesSETC(const OpcodesSETC &);
  OpcodesSETC &operator=(const OpcodesSETC &);
  OpcodesSETC();
  ~OpcodesSETC();
  virtual void accept(Visitor *v);
  virtual OpcodesSETC *clone() const;
  void swap(OpcodesSETC &);
};

class OpcodesSETE : public Opcode
{
public:

  OpcodesSETE(const OpcodesSETE &);
  OpcodesSETE &operator=(const OpcodesSETE &);
  OpcodesSETE();
  ~OpcodesSETE();
  virtual void accept(Visitor *v);
  virtual OpcodesSETE *clone() const;
  void swap(OpcodesSETE &);
};

class OpcodesSETG : public Opcode
{
public:

  OpcodesSETG(const OpcodesSETG &);
  OpcodesSETG &operator=(const OpcodesSETG &);
  OpcodesSETG();
  ~OpcodesSETG();
  virtual void accept(Visitor *v);
  virtual OpcodesSETG *clone() const;
  void swap(OpcodesSETG &);
};

class OpcodesSETGE : public Opcode
{
public:

  OpcodesSETGE(const OpcodesSETGE &);
  OpcodesSETGE &operator=(const OpcodesSETGE &);
  OpcodesSETGE();
  ~OpcodesSETGE();
  virtual void accept(Visitor *v);
  virtual OpcodesSETGE *clone() const;
  void swap(OpcodesSETGE &);
};

class OpcodesSETL : public Opcode
{
public:

  OpcodesSETL(const OpcodesSETL &);
  OpcodesSETL &operator=(const OpcodesSETL &);
  OpcodesSETL();
  ~OpcodesSETL();
  virtual void accept(Visitor *v);
  virtual OpcodesSETL *clone() const;
  void swap(OpcodesSETL &);
};

class OpcodesSETLE : public Opcode
{
public:

  OpcodesSETLE(const OpcodesSETLE &);
  OpcodesSETLE &operator=(const OpcodesSETLE &);
  OpcodesSETLE();
  ~OpcodesSETLE();
  virtual void accept(Visitor *v);
  virtual OpcodesSETLE *clone() const;
  void swap(OpcodesSETLE &);
};

class OpcodesSETNA : public Opcode
{
public:

  OpcodesSETNA(const OpcodesSETNA &);
  OpcodesSETNA &operator=(const OpcodesSETNA &);
  OpcodesSETNA();
  ~OpcodesSETNA();
  virtual void accept(Visitor *v);
  virtual OpcodesSETNA *clone() const;
  void swap(OpcodesSETNA &);
};

class OpcodesSETNAE : public Opcode
{
public:

  OpcodesSETNAE(const OpcodesSETNAE &);
  OpcodesSETNAE &operator=(const OpcodesSETNAE &);
  OpcodesSETNAE();
  ~OpcodesSETNAE();
  virtual void accept(Visitor *v);
  virtual OpcodesSETNAE *clone() const;
  void swap(OpcodesSETNAE &);
};

class OpcodesSETNB : public Opcode
{
public:

  OpcodesSETNB(const OpcodesSETNB &);
  OpcodesSETNB &operator=(const OpcodesSETNB &);
  OpcodesSETNB();
  ~OpcodesSETNB();
  virtual void accept(Visitor *v);
  virtual OpcodesSETNB *clone() const;
  void swap(OpcodesSETNB &);
};

class OpcodesSETNBE : public Opcode
{
public:

  OpcodesSETNBE(const OpcodesSETNBE &);
  OpcodesSETNBE &operator=(const OpcodesSETNBE &);
  OpcodesSETNBE();
  ~OpcodesSETNBE();
  virtual void accept(Visitor *v);
  virtual OpcodesSETNBE *clone() const;
  void swap(OpcodesSETNBE &);
};

class OpcodesSETNC : public Opcode
{
public:

  OpcodesSETNC(const OpcodesSETNC &);
  OpcodesSETNC &operator=(const OpcodesSETNC &);
  OpcodesSETNC();
  ~OpcodesSETNC();
  virtual void accept(Visitor *v);
  virtual OpcodesSETNC *clone() const;
  void swap(OpcodesSETNC &);
};

class OpcodesSETNE : public Opcode
{
public:

  OpcodesSETNE(const OpcodesSETNE &);
  OpcodesSETNE &operator=(const OpcodesSETNE &);
  OpcodesSETNE();
  ~OpcodesSETNE();
  virtual void accept(Visitor *v);
  virtual OpcodesSETNE *clone() const;
  void swap(OpcodesSETNE &);
};

class OpcodesSETNG : public Opcode
{
public:

  OpcodesSETNG(const OpcodesSETNG &);
  OpcodesSETNG &operator=(const OpcodesSETNG &);
  OpcodesSETNG();
  ~OpcodesSETNG();
  virtual void accept(Visitor *v);
  virtual OpcodesSETNG *clone() const;
  void swap(OpcodesSETNG &);
};

class OpcodesSETNGE : public Opcode
{
public:

  OpcodesSETNGE(const OpcodesSETNGE &);
  OpcodesSETNGE &operator=(const OpcodesSETNGE &);
  OpcodesSETNGE();
  ~OpcodesSETNGE();
  virtual void accept(Visitor *v);
  virtual OpcodesSETNGE *clone() const;
  void swap(OpcodesSETNGE &);
};

class OpcodesSETNL : public Opcode
{
public:

  OpcodesSETNL(const OpcodesSETNL &);
  OpcodesSETNL &operator=(const OpcodesSETNL &);
  OpcodesSETNL();
  ~OpcodesSETNL();
  virtual void accept(Visitor *v);
  virtual OpcodesSETNL *clone() const;
  void swap(OpcodesSETNL &);
};

class OpcodesSETNLE : public Opcode
{
public:

  OpcodesSETNLE(const OpcodesSETNLE &);
  OpcodesSETNLE &operator=(const OpcodesSETNLE &);
  OpcodesSETNLE();
  ~OpcodesSETNLE();
  virtual void accept(Visitor *v);
  virtual OpcodesSETNLE *clone() const;
  void swap(OpcodesSETNLE &);
};

class OpcodesSETNO : public Opcode
{
public:

  OpcodesSETNO(const OpcodesSETNO &);
  OpcodesSETNO &operator=(const OpcodesSETNO &);
  OpcodesSETNO();
  ~OpcodesSETNO();
  virtual void accept(Visitor *v);
  virtual OpcodesSETNO *clone() const;
  void swap(OpcodesSETNO &);
};

class OpcodesSETNP : public Opcode
{
public:

  OpcodesSETNP(const OpcodesSETNP &);
  OpcodesSETNP &operator=(const OpcodesSETNP &);
  OpcodesSETNP();
  ~OpcodesSETNP();
  virtual void accept(Visitor *v);
  virtual OpcodesSETNP *clone() const;
  void swap(OpcodesSETNP &);
};

class OpcodesSETNS : public Opcode
{
public:

  OpcodesSETNS(const OpcodesSETNS &);
  OpcodesSETNS &operator=(const OpcodesSETNS &);
  OpcodesSETNS();
  ~OpcodesSETNS();
  virtual void accept(Visitor *v);
  virtual OpcodesSETNS *clone() const;
  void swap(OpcodesSETNS &);
};

class OpcodesSETNZ : public Opcode
{
public:

  OpcodesSETNZ(const OpcodesSETNZ &);
  OpcodesSETNZ &operator=(const OpcodesSETNZ &);
  OpcodesSETNZ();
  ~OpcodesSETNZ();
  virtual void accept(Visitor *v);
  virtual OpcodesSETNZ *clone() const;
  void swap(OpcodesSETNZ &);
};

class OpcodesSETO : public Opcode
{
public:

  OpcodesSETO(const OpcodesSETO &);
  OpcodesSETO &operator=(const OpcodesSETO &);
  OpcodesSETO();
  ~OpcodesSETO();
  virtual void accept(Visitor *v);
  virtual OpcodesSETO *clone() const;
  void swap(OpcodesSETO &);
};

class OpcodesSETP : public Opcode
{
public:

  OpcodesSETP(const OpcodesSETP &);
  OpcodesSETP &operator=(const OpcodesSETP &);
  OpcodesSETP();
  ~OpcodesSETP();
  virtual void accept(Visitor *v);
  virtual OpcodesSETP *clone() const;
  void swap(OpcodesSETP &);
};

class OpcodesSETPE : public Opcode
{
public:

  OpcodesSETPE(const OpcodesSETPE &);
  OpcodesSETPE &operator=(const OpcodesSETPE &);
  OpcodesSETPE();
  ~OpcodesSETPE();
  virtual void accept(Visitor *v);
  virtual OpcodesSETPE *clone() const;
  void swap(OpcodesSETPE &);
};

class OpcodesSETPO : public Opcode
{
public:

  OpcodesSETPO(const OpcodesSETPO &);
  OpcodesSETPO &operator=(const OpcodesSETPO &);
  OpcodesSETPO();
  ~OpcodesSETPO();
  virtual void accept(Visitor *v);
  virtual OpcodesSETPO *clone() const;
  void swap(OpcodesSETPO &);
};

class OpcodesSETS : public Opcode
{
public:

  OpcodesSETS(const OpcodesSETS &);
  OpcodesSETS &operator=(const OpcodesSETS &);
  OpcodesSETS();
  ~OpcodesSETS();
  virtual void accept(Visitor *v);
  virtual OpcodesSETS *clone() const;
  void swap(OpcodesSETS &);
};

class OpcodesSETZ : public Opcode
{
public:

  OpcodesSETZ(const OpcodesSETZ &);
  OpcodesSETZ &operator=(const OpcodesSETZ &);
  OpcodesSETZ();
  ~OpcodesSETZ();
  virtual void accept(Visitor *v);
  virtual OpcodesSETZ *clone() const;
  void swap(OpcodesSETZ &);
};

class OpcodesSGDT : public Opcode
{
public:

  OpcodesSGDT(const OpcodesSGDT &);
  OpcodesSGDT &operator=(const OpcodesSGDT &);
  OpcodesSGDT();
  ~OpcodesSGDT();
  virtual void accept(Visitor *v);
  virtual OpcodesSGDT *clone() const;
  void swap(OpcodesSGDT &);
};

class OpcodesSHL : public Opcode
{
public:

  OpcodesSHL(const OpcodesSHL &);
  OpcodesSHL &operator=(const OpcodesSHL &);
  OpcodesSHL();
  ~OpcodesSHL();
  virtual void accept(Visitor *v);
  virtual OpcodesSHL *clone() const;
  void swap(OpcodesSHL &);
};

class OpcodesSHLD : public Opcode
{
public:

  OpcodesSHLD(const OpcodesSHLD &);
  OpcodesSHLD &operator=(const OpcodesSHLD &);
  OpcodesSHLD();
  ~OpcodesSHLD();
  virtual void accept(Visitor *v);
  virtual OpcodesSHLD *clone() const;
  void swap(OpcodesSHLD &);
};

class OpcodesSHR : public Opcode
{
public:

  OpcodesSHR(const OpcodesSHR &);
  OpcodesSHR &operator=(const OpcodesSHR &);
  OpcodesSHR();
  ~OpcodesSHR();
  virtual void accept(Visitor *v);
  virtual OpcodesSHR *clone() const;
  void swap(OpcodesSHR &);
};

class OpcodesSHRD : public Opcode
{
public:

  OpcodesSHRD(const OpcodesSHRD &);
  OpcodesSHRD &operator=(const OpcodesSHRD &);
  OpcodesSHRD();
  ~OpcodesSHRD();
  virtual void accept(Visitor *v);
  virtual OpcodesSHRD *clone() const;
  void swap(OpcodesSHRD &);
};

class OpcodesSIDT : public Opcode
{
public:

  OpcodesSIDT(const OpcodesSIDT &);
  OpcodesSIDT &operator=(const OpcodesSIDT &);
  OpcodesSIDT();
  ~OpcodesSIDT();
  virtual void accept(Visitor *v);
  virtual OpcodesSIDT *clone() const;
  void swap(OpcodesSIDT &);
};

class OpcodesSLDT : public Opcode
{
public:

  OpcodesSLDT(const OpcodesSLDT &);
  OpcodesSLDT &operator=(const OpcodesSLDT &);
  OpcodesSLDT();
  ~OpcodesSLDT();
  virtual void accept(Visitor *v);
  virtual OpcodesSLDT *clone() const;
  void swap(OpcodesSLDT &);
};

class OpcodesSMSW : public Opcode
{
public:

  OpcodesSMSW(const OpcodesSMSW &);
  OpcodesSMSW &operator=(const OpcodesSMSW &);
  OpcodesSMSW();
  ~OpcodesSMSW();
  virtual void accept(Visitor *v);
  virtual OpcodesSMSW *clone() const;
  void swap(OpcodesSMSW &);
};

class OpcodesSTC : public Opcode
{
public:

  OpcodesSTC(const OpcodesSTC &);
  OpcodesSTC &operator=(const OpcodesSTC &);
  OpcodesSTC();
  ~OpcodesSTC();
  virtual void accept(Visitor *v);
  virtual OpcodesSTC *clone() const;
  void swap(OpcodesSTC &);
};

class OpcodesSTD : public Opcode
{
public:

  OpcodesSTD(const OpcodesSTD &);
  OpcodesSTD &operator=(const OpcodesSTD &);
  OpcodesSTD();
  ~OpcodesSTD();
  virtual void accept(Visitor *v);
  virtual OpcodesSTD *clone() const;
  void swap(OpcodesSTD &);
};

class OpcodesSTI : public Opcode
{
public:

  OpcodesSTI(const OpcodesSTI &);
  OpcodesSTI &operator=(const OpcodesSTI &);
  OpcodesSTI();
  ~OpcodesSTI();
  virtual void accept(Visitor *v);
  virtual OpcodesSTI *clone() const;
  void swap(OpcodesSTI &);
};

class OpcodesSTOSB : public Opcode
{
public:

  OpcodesSTOSB(const OpcodesSTOSB &);
  OpcodesSTOSB &operator=(const OpcodesSTOSB &);
  OpcodesSTOSB();
  ~OpcodesSTOSB();
  virtual void accept(Visitor *v);
  virtual OpcodesSTOSB *clone() const;
  void swap(OpcodesSTOSB &);
};

class OpcodesSTOSD : public Opcode
{
public:

  OpcodesSTOSD(const OpcodesSTOSD &);
  OpcodesSTOSD &operator=(const OpcodesSTOSD &);
  OpcodesSTOSD();
  ~OpcodesSTOSD();
  virtual void accept(Visitor *v);
  virtual OpcodesSTOSD *clone() const;
  void swap(OpcodesSTOSD &);
};

class OpcodesSTOSW : public Opcode
{
public:

  OpcodesSTOSW(const OpcodesSTOSW &);
  OpcodesSTOSW &operator=(const OpcodesSTOSW &);
  OpcodesSTOSW();
  ~OpcodesSTOSW();
  virtual void accept(Visitor *v);
  virtual OpcodesSTOSW *clone() const;
  void swap(OpcodesSTOSW &);
};

class OpcodesSTR : public Opcode
{
public:

  OpcodesSTR(const OpcodesSTR &);
  OpcodesSTR &operator=(const OpcodesSTR &);
  OpcodesSTR();
  ~OpcodesSTR();
  virtual void accept(Visitor *v);
  virtual OpcodesSTR *clone() const;
  void swap(OpcodesSTR &);
};

class OpcodesSUB : public Opcode
{
public:

  OpcodesSUB(const OpcodesSUB &);
  OpcodesSUB &operator=(const OpcodesSUB &);
  OpcodesSUB();
  ~OpcodesSUB();
  virtual void accept(Visitor *v);
  virtual OpcodesSUB *clone() const;
  void swap(OpcodesSUB &);
};

class OpcodesTEST : public Opcode
{
public:

  OpcodesTEST(const OpcodesTEST &);
  OpcodesTEST &operator=(const OpcodesTEST &);
  OpcodesTEST();
  ~OpcodesTEST();
  virtual void accept(Visitor *v);
  virtual OpcodesTEST *clone() const;
  void swap(OpcodesTEST &);
};

class OpcodesTIMES : public Opcode
{
public:

  OpcodesTIMES(const OpcodesTIMES &);
  OpcodesTIMES &operator=(const OpcodesTIMES &);
  OpcodesTIMES();
  ~OpcodesTIMES();
  virtual void accept(Visitor *v);
  virtual OpcodesTIMES *clone() const;
  void swap(OpcodesTIMES &);
};

class OpcodesUD2 : public Opcode
{
public:

  OpcodesUD2(const OpcodesUD2 &);
  OpcodesUD2 &operator=(const OpcodesUD2 &);
  OpcodesUD2();
  ~OpcodesUD2();
  virtual void accept(Visitor *v);
  virtual OpcodesUD2 *clone() const;
  void swap(OpcodesUD2 &);
};

class OpcodesVERR : public Opcode
{
public:

  OpcodesVERR(const OpcodesVERR &);
  OpcodesVERR &operator=(const OpcodesVERR &);
  OpcodesVERR();
  ~OpcodesVERR();
  virtual void accept(Visitor *v);
  virtual OpcodesVERR *clone() const;
  void swap(OpcodesVERR &);
};

class OpcodesVERW : public Opcode
{
public:

  OpcodesVERW(const OpcodesVERW &);
  OpcodesVERW &operator=(const OpcodesVERW &);
  OpcodesVERW();
  ~OpcodesVERW();
  virtual void accept(Visitor *v);
  virtual OpcodesVERW *clone() const;
  void swap(OpcodesVERW &);
};

class OpcodesWAIT : public Opcode
{
public:

  OpcodesWAIT(const OpcodesWAIT &);
  OpcodesWAIT &operator=(const OpcodesWAIT &);
  OpcodesWAIT();
  ~OpcodesWAIT();
  virtual void accept(Visitor *v);
  virtual OpcodesWAIT *clone() const;
  void swap(OpcodesWAIT &);
};

class OpcodesWBINVD : public Opcode
{
public:

  OpcodesWBINVD(const OpcodesWBINVD &);
  OpcodesWBINVD &operator=(const OpcodesWBINVD &);
  OpcodesWBINVD();
  ~OpcodesWBINVD();
  virtual void accept(Visitor *v);
  virtual OpcodesWBINVD *clone() const;
  void swap(OpcodesWBINVD &);
};

class OpcodesWRMSR : public Opcode
{
public:

  OpcodesWRMSR(const OpcodesWRMSR &);
  OpcodesWRMSR &operator=(const OpcodesWRMSR &);
  OpcodesWRMSR();
  ~OpcodesWRMSR();
  virtual void accept(Visitor *v);
  virtual OpcodesWRMSR *clone() const;
  void swap(OpcodesWRMSR &);
};

class OpcodesXADD : public Opcode
{
public:

  OpcodesXADD(const OpcodesXADD &);
  OpcodesXADD &operator=(const OpcodesXADD &);
  OpcodesXADD();
  ~OpcodesXADD();
  virtual void accept(Visitor *v);
  virtual OpcodesXADD *clone() const;
  void swap(OpcodesXADD &);
};

class OpcodesXCHG : public Opcode
{
public:

  OpcodesXCHG(const OpcodesXCHG &);
  OpcodesXCHG &operator=(const OpcodesXCHG &);
  OpcodesXCHG();
  ~OpcodesXCHG();
  virtual void accept(Visitor *v);
  virtual OpcodesXCHG *clone() const;
  void swap(OpcodesXCHG &);
};

class OpcodesXLATB : public Opcode
{
public:

  OpcodesXLATB(const OpcodesXLATB &);
  OpcodesXLATB &operator=(const OpcodesXLATB &);
  OpcodesXLATB();
  ~OpcodesXLATB();
  virtual void accept(Visitor *v);
  virtual OpcodesXLATB *clone() const;
  void swap(OpcodesXLATB &);
};

class OpcodesXOR : public Opcode
{
public:

  OpcodesXOR(const OpcodesXOR &);
  OpcodesXOR &operator=(const OpcodesXOR &);
  OpcodesXOR();
  ~OpcodesXOR();
  virtual void accept(Visitor *v);
  virtual OpcodesXOR *clone() const;
  void swap(OpcodesXOR &);
};



class ListStatement : public Visitable, public std::vector<Statement*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListStatement *clone() const;
};

ListStatement* consListStatement(Statement* x, ListStatement* xs);

class ListMnemonicArgs : public Visitable, public std::vector<MnemonicArgs*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListMnemonicArgs *clone() const;
};

ListMnemonicArgs* consListMnemonicArgs(MnemonicArgs* x, ListMnemonicArgs* xs);





#endif
