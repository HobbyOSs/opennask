/* File generated by the BNF Converter (bnfc 2.9.5). */

#ifndef ABSYN_HEADER
#define ABSYN_HEADER

#include <string>
#include <list>
#include <algorithm>
#include <memory>

//C++ Abstract Syntax Interface.

/********************   TypeDef Section    ********************/

using Integer = int;
using Char = char;
using Double = double;
using String = std::string;
using Ident = std::string;

using NaskChar = std::string;
using Hex = std::string;
using Id = std::string;


/********************   Forward Declarations    ********************/

class Program;
class Statement;
class MnemonicArgs;
class Exp;
class Label;
class MemoryAddr;
class IndexExp;
class UnaryOperator;
class Factor;
class JumpDir;
class SReg;
class ConfigType;
class DataType;
class OpcodeNoParam;
class Opcode;
class Prog;
class LabelStmt;
class DeclareStmt;
class ExportSymStmt;
class ExternSymStmt;
class ConfigStmt;
class MnemonicStmt;
class OpcodeStmt;
class MnemoArg;
class SregExp;
class DatatypeExp;
class MemoryAddrExp;
class JmpMemoryAddrExp;
class LabelExp;
class SegmentOffsetDataExp;
class SegmentOffsetExp;
class PlusExp;
class MinusExp;
class MulExp;
class DivExp;
class ModExp;
class SregFrameExp;
class PreOpExp;
class ImmExp;
class Direct;
class BasedOrIndexed;
class Indexed;
class BasedIndexed;
class BasedIndexedDisp;
class BasedIndexedDispScale;
class IndexScaleExp;
class Negative;
class NumberFactor;
class HexFactor;
class IdentFactor;
class StringFactor;
class CharFactor;
class ShortJumpDir;
class NearJumpDir;
class FarJumpDir;
class SRegCS;
class SRegDS;
class SRegES;
class SRegSS;
class SRegFS;
class SRegGS;
class BitsConfig;
class InstConfig;
class OptiConfig;
class FormConfig;
class PaddConfig;
class PadsConfig;
class SectConfig;
class AbsoConfig;
class FileConfig;
class ByteDataType;
class WordDataType;
class DwordDataType;
class OpcodesAAA;
class OpcodesAAD;
class OpcodesAAS;
class OpcodesAAM;
class OpcodesADC;
class OpcodesADD;
class OpcodesAND;
class OpcodesALIGN;
class OpcodesALIGNB;
class OpcodesARPL;
class OpcodesBOUND;
class OpcodesBSF;
class OpcodesBSR;
class OpcodesBSWAP;
class OpcodesBT;
class OpcodesBTC;
class OpcodesBTR;
class OpcodesBTS;
class OpcodesCALL;
class OpcodesCBW;
class OpcodesCDQ;
class OpcodesCLC;
class OpcodesCLD;
class OpcodesCLI;
class OpcodesCLTS;
class OpcodesCMC;
class OpcodesCMP;
class OpcodesCMPSB;
class OpcodesCMPSD;
class OpcodesCMPSW;
class OpcodesCMPXCHG;
class OpcodesCPUID;
class OpcodesCWD;
class OpcodesCWDE;
class OpcodesDAA;
class OpcodesDAS;
class OpcodesDB;
class OpcodesDD;
class OpcodesDEC;
class OpcodesDIV;
class OpcodesDQ;
class OpcodesDT;
class OpcodesDW;
class OpcodesEND;
class OpcodesENTER;
class OpcodesF2XM1;
class OpcodesFABS;
class OpcodesFADD;
class OpcodesFADDP;
class OpcodesFBLD;
class OpcodesFBSTP;
class OpcodesFCHS;
class OpcodesFCLEX;
class OpcodesFCOM;
class OpcodesFCOMP;
class OpcodesFCOMPP;
class OpcodesFCOS;
class OpcodesFDECSTP;
class OpcodesFDISI;
class OpcodesFDIV;
class OpcodesFDIVP;
class OpcodesFDIVR;
class OpcodesFDIVRP;
class OpcodesFENI;
class OpcodesFFREE;
class OpcodesFIADD;
class OpcodesFICOM;
class OpcodesFICOMP;
class OpcodesFIDIV;
class OpcodesFIDIVR;
class OpcodesFILD;
class OpcodesFIMUL;
class OpcodesFINCSTP;
class OpcodesFINIT;
class OpcodesFIST;
class OpcodesFISTP;
class OpcodesFISUB;
class OpcodesFISUBR;
class OpcodesFLD;
class OpcodesFLD1;
class OpcodesFLDCW;
class OpcodesFLDENV;
class OpcodesFLDL2E;
class OpcodesFLDL2T;
class OpcodesFLDLG2;
class OpcodesFLDLN2;
class OpcodesFLDPI;
class OpcodesFLDZ;
class OpcodesFMUL;
class OpcodesFMULP;
class OpcodesFNCLEX;
class OpcodesFNDISI;
class OpcodesFNENI;
class OpcodesFNINIT;
class OpcodesFNOP;
class OpcodesFNSAVE;
class OpcodesFNSTCW;
class OpcodesFNSTENV;
class OpcodesFNSTSW;
class OpcodesFPATAN;
class OpcodesFPTAN;
class OpcodesFPREM;
class OpcodesFPREM1;
class OpcodesFRNDINT;
class OpcodesFRSTOR;
class OpcodesFSAVE;
class OpcodesFSCALE;
class OpcodesFSETPM;
class OpcodesFSIN;
class OpcodesFSINCOS;
class OpcodesFSQRT;
class OpcodesFST;
class OpcodesFSTCW;
class OpcodesFSTENV;
class OpcodesFSTP;
class OpcodesFSTSW;
class OpcodesFSUB;
class OpcodesFSUBP;
class OpcodesFSUBR;
class OpcodesFSUBRP;
class OpcodesFTST;
class OpcodesFUCOM;
class OpcodesFUCOMP;
class OpcodesFUCOMPP;
class OpcodesFXAM;
class OpcodesFXCH;
class OpcodesFXTRACT;
class OpcodesFYL2X;
class OpcodesFYL2XP1;
class OpcodesHLT;
class OpcodesIDIV;
class OpcodesIMUL;
class OpcodesIN;
class OpcodesINC;
class OpcodesINCO;
class OpcodesINSB;
class OpcodesINSD;
class OpcodesINSW;
class OpcodesINT;
class OpcodesINT3;
class OpcodesINTO;
class OpcodesINVD;
class OpcodesINVLPG;
class OpcodesIRET;
class OpcodesIRETD;
class OpcodesIRETW;
class OpcodesJA;
class OpcodesJAE;
class OpcodesJB;
class OpcodesJBE;
class OpcodesJC;
class OpcodesJCXZ;
class OpcodesJE;
class OpcodesJECXZ;
class OpcodesJG;
class OpcodesJGE;
class OpcodesJL;
class OpcodesJLE;
class OpcodesJMP;
class OpcodesJNA;
class OpcodesJNAE;
class OpcodesJNB;
class OpcodesJNBE;
class OpcodesJNC;
class OpcodesJNE;
class OpcodesJNG;
class OpcodesJNGE;
class OpcodesJNL;
class OpcodesJNLE;
class OpcodesJNO;
class OpcodesJNP;
class OpcodesJNS;
class OpcodesJNZ;
class OpcodesJO;
class OpcodesJP;
class OpcodesJPE;
class OpcodesJPO;
class OpcodesJS;
class OpcodesJZ;
class OpcodesLAHF;
class OpcodesLAR;
class OpcodesLDS;
class OpcodesLEA;
class OpcodesLEAVE;
class OpcodesLES;
class OpcodesLFS;
class OpcodesLGDT;
class OpcodesLGS;
class OpcodesLIDT;
class OpcodesLLDT;
class OpcodesLMSW;
class OpcodesLOCK;
class OpcodesLODSB;
class OpcodesLODSD;
class OpcodesLODSW;
class OpcodesLOOP;
class OpcodesLOOPE;
class OpcodesLOOPNE;
class OpcodesLOOPNZ;
class OpcodesLOOPZ;
class OpcodesLSL;
class OpcodesLSS;
class OpcodesLTR;
class OpcodesMOV;
class OpcodesMOVSB;
class OpcodesMOVSD;
class OpcodesMOVSW;
class OpcodesMOVSX;
class OpcodesMOVZX;
class OpcodesMUL;
class OpcodesNEG;
class OpcodesNOP;
class OpcodesNOT;
class OpcodesOR;
class OpcodesORG;
class OpcodesOUT;
class OpcodesOUTSB;
class OpcodesOUTSD;
class OpcodesOUTSW;
class OpcodesPOP;
class OpcodesPOPA;
class OpcodesPOPAD;
class OpcodesPOPAW;
class OpcodesPOPF;
class OpcodesPOPFD;
class OpcodesPOPFW;
class OpcodesPUSH;
class OpcodesPUSHA;
class OpcodesPUSHD;
class OpcodesPUSHAD;
class OpcodesPUSHAW;
class OpcodesPUSHF;
class OpcodesPUSHFD;
class OpcodesPUSHFW;
class OpcodesRCL;
class OpcodesRCR;
class OpcodesRDMSR;
class OpcodesRDPMC;
class OpcodesREP;
class OpcodesREPE;
class OpcodesREPNE;
class OpcodesREPNZ;
class OpcodesREPZ;
class OpcodesRESB;
class OpcodesRESD;
class OpcodesRESQ;
class OpcodesREST;
class OpcodesRESW;
class OpcodesRET;
class OpcodesRETF;
class OpcodesRETN;
class OpcodesROL;
class OpcodesROR;
class OpcodesRSM;
class OpcodesSAHF;
class OpcodesSAL;
class OpcodesSAR;
class OpcodesSBB;
class OpcodesSCASB;
class OpcodesSCASD;
class OpcodesSCASW;
class OpcodesSETA;
class OpcodesSETAE;
class OpcodesSETB;
class OpcodesSETBE;
class OpcodesSETC;
class OpcodesSETE;
class OpcodesSETG;
class OpcodesSETGE;
class OpcodesSETL;
class OpcodesSETLE;
class OpcodesSETNA;
class OpcodesSETNAE;
class OpcodesSETNB;
class OpcodesSETNBE;
class OpcodesSETNC;
class OpcodesSETNE;
class OpcodesSETNG;
class OpcodesSETNGE;
class OpcodesSETNL;
class OpcodesSETNLE;
class OpcodesSETNO;
class OpcodesSETNP;
class OpcodesSETNS;
class OpcodesSETNZ;
class OpcodesSETO;
class OpcodesSETP;
class OpcodesSETPE;
class OpcodesSETPO;
class OpcodesSETS;
class OpcodesSETZ;
class OpcodesSGDT;
class OpcodesSHL;
class OpcodesSHLD;
class OpcodesSHR;
class OpcodesSHRD;
class OpcodesSIDT;
class OpcodesSLDT;
class OpcodesSMSW;
class OpcodesSTC;
class OpcodesSTD;
class OpcodesSTI;
class OpcodesSTOSB;
class OpcodesSTOSD;
class OpcodesSTOSW;
class OpcodesSTR;
class OpcodesSUB;
class OpcodesTEST;
class OpcodesTIMES;
class OpcodesUD2;
class OpcodesVERR;
class OpcodesVERW;
class OpcodesWAIT;
class OpcodesWBINVD;
class OpcodesWRMSR;
class OpcodesXADD;
class OpcodesXCHG;
class OpcodesXLATB;
class OpcodesXOR;
class ListStatement;
class ListFactor;
class ListMnemonicArgs;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
    virtual ~Visitor() {}
    virtual void visitProgram(Program *p) = 0;
    virtual void visitStatement(Statement *p) = 0;
    virtual void visitMnemonicArgs(MnemonicArgs *p) = 0;
    virtual void visitExp(Exp *p) = 0;
    virtual void visitLabel(Label *p) = 0;
    virtual void visitMemoryAddr(MemoryAddr *p) = 0;
    virtual void visitIndexExp(IndexExp *p) = 0;
    virtual void visitUnaryOperator(UnaryOperator *p) = 0;
    virtual void visitFactor(Factor *p) = 0;
    virtual void visitJumpDir(JumpDir *p) = 0;
    virtual void visitSReg(SReg *p) = 0;
    virtual void visitConfigType(ConfigType *p) = 0;
    virtual void visitDataType(DataType *p) = 0;
    virtual void visitOpcodeNoParam(OpcodeNoParam *p) = 0;
    virtual void visitOpcode(Opcode *p) = 0;
    virtual void visitProg(Prog *p) = 0;
    virtual void visitLabelStmt(LabelStmt *p) = 0;
    virtual void visitDeclareStmt(DeclareStmt *p) = 0;
    virtual void visitExportSymStmt(ExportSymStmt *p) = 0;
    virtual void visitExternSymStmt(ExternSymStmt *p) = 0;
    virtual void visitConfigStmt(ConfigStmt *p) = 0;
    virtual void visitMnemonicStmt(MnemonicStmt *p) = 0;
    virtual void visitOpcodeStmt(OpcodeStmt *p) = 0;
    virtual void visitMnemoArg(MnemoArg *p) = 0;
    virtual void visitSregExp(SregExp *p) = 0;
    virtual void visitDatatypeExp(DatatypeExp *p) = 0;
    virtual void visitMemoryAddrExp(MemoryAddrExp *p) = 0;
    virtual void visitJmpMemoryAddrExp(JmpMemoryAddrExp *p) = 0;
    virtual void visitLabelExp(LabelExp *p) = 0;
    virtual void visitSegmentOffsetDataExp(SegmentOffsetDataExp *p) = 0;
    virtual void visitSegmentOffsetExp(SegmentOffsetExp *p) = 0;
    virtual void visitPlusExp(PlusExp *p) = 0;
    virtual void visitMinusExp(MinusExp *p) = 0;
    virtual void visitMulExp(MulExp *p) = 0;
    virtual void visitDivExp(DivExp *p) = 0;
    virtual void visitModExp(ModExp *p) = 0;
    virtual void visitSregFrameExp(SregFrameExp *p) = 0;
    virtual void visitPreOpExp(PreOpExp *p) = 0;
    virtual void visitImmExp(ImmExp *p) = 0;
    virtual void visitDirect(Direct *p) = 0;
    virtual void visitBasedOrIndexed(BasedOrIndexed *p) = 0;
    virtual void visitIndexed(Indexed *p) = 0;
    virtual void visitBasedIndexed(BasedIndexed *p) = 0;
    virtual void visitBasedIndexedDisp(BasedIndexedDisp *p) = 0;
    virtual void visitBasedIndexedDispScale(BasedIndexedDispScale *p) = 0;
    virtual void visitIndexScaleExp(IndexScaleExp *p) = 0;
    virtual void visitNegative(Negative *p) = 0;
    virtual void visitNumberFactor(NumberFactor *p) = 0;
    virtual void visitHexFactor(HexFactor *p) = 0;
    virtual void visitIdentFactor(IdentFactor *p) = 0;
    virtual void visitStringFactor(StringFactor *p) = 0;
    virtual void visitCharFactor(CharFactor *p) = 0;
    virtual void visitShortJumpDir(ShortJumpDir *p) = 0;
    virtual void visitNearJumpDir(NearJumpDir *p) = 0;
    virtual void visitFarJumpDir(FarJumpDir *p) = 0;
    virtual void visitSRegCS(SRegCS *p) = 0;
    virtual void visitSRegDS(SRegDS *p) = 0;
    virtual void visitSRegES(SRegES *p) = 0;
    virtual void visitSRegSS(SRegSS *p) = 0;
    virtual void visitSRegFS(SRegFS *p) = 0;
    virtual void visitSRegGS(SRegGS *p) = 0;
    virtual void visitBitsConfig(BitsConfig *p) = 0;
    virtual void visitInstConfig(InstConfig *p) = 0;
    virtual void visitOptiConfig(OptiConfig *p) = 0;
    virtual void visitFormConfig(FormConfig *p) = 0;
    virtual void visitPaddConfig(PaddConfig *p) = 0;
    virtual void visitPadsConfig(PadsConfig *p) = 0;
    virtual void visitSectConfig(SectConfig *p) = 0;
    virtual void visitAbsoConfig(AbsoConfig *p) = 0;
    virtual void visitFileConfig(FileConfig *p) = 0;
    virtual void visitByteDataType(ByteDataType *p) = 0;
    virtual void visitWordDataType(WordDataType *p) = 0;
    virtual void visitDwordDataType(DwordDataType *p) = 0;
    virtual void visitOpcodesAAA(OpcodesAAA *p) = 0;
    virtual void visitOpcodesAAD(OpcodesAAD *p) = 0;
    virtual void visitOpcodesAAS(OpcodesAAS *p) = 0;
    virtual void visitOpcodesAAM(OpcodesAAM *p) = 0;
    virtual void visitOpcodesADC(OpcodesADC *p) = 0;
    virtual void visitOpcodesADD(OpcodesADD *p) = 0;
    virtual void visitOpcodesAND(OpcodesAND *p) = 0;
    virtual void visitOpcodesALIGN(OpcodesALIGN *p) = 0;
    virtual void visitOpcodesALIGNB(OpcodesALIGNB *p) = 0;
    virtual void visitOpcodesARPL(OpcodesARPL *p) = 0;
    virtual void visitOpcodesBOUND(OpcodesBOUND *p) = 0;
    virtual void visitOpcodesBSF(OpcodesBSF *p) = 0;
    virtual void visitOpcodesBSR(OpcodesBSR *p) = 0;
    virtual void visitOpcodesBSWAP(OpcodesBSWAP *p) = 0;
    virtual void visitOpcodesBT(OpcodesBT *p) = 0;
    virtual void visitOpcodesBTC(OpcodesBTC *p) = 0;
    virtual void visitOpcodesBTR(OpcodesBTR *p) = 0;
    virtual void visitOpcodesBTS(OpcodesBTS *p) = 0;
    virtual void visitOpcodesCALL(OpcodesCALL *p) = 0;
    virtual void visitOpcodesCBW(OpcodesCBW *p) = 0;
    virtual void visitOpcodesCDQ(OpcodesCDQ *p) = 0;
    virtual void visitOpcodesCLC(OpcodesCLC *p) = 0;
    virtual void visitOpcodesCLD(OpcodesCLD *p) = 0;
    virtual void visitOpcodesCLI(OpcodesCLI *p) = 0;
    virtual void visitOpcodesCLTS(OpcodesCLTS *p) = 0;
    virtual void visitOpcodesCMC(OpcodesCMC *p) = 0;
    virtual void visitOpcodesCMP(OpcodesCMP *p) = 0;
    virtual void visitOpcodesCMPSB(OpcodesCMPSB *p) = 0;
    virtual void visitOpcodesCMPSD(OpcodesCMPSD *p) = 0;
    virtual void visitOpcodesCMPSW(OpcodesCMPSW *p) = 0;
    virtual void visitOpcodesCMPXCHG(OpcodesCMPXCHG *p) = 0;
    virtual void visitOpcodesCPUID(OpcodesCPUID *p) = 0;
    virtual void visitOpcodesCWD(OpcodesCWD *p) = 0;
    virtual void visitOpcodesCWDE(OpcodesCWDE *p) = 0;
    virtual void visitOpcodesDAA(OpcodesDAA *p) = 0;
    virtual void visitOpcodesDAS(OpcodesDAS *p) = 0;
    virtual void visitOpcodesDB(OpcodesDB *p) = 0;
    virtual void visitOpcodesDD(OpcodesDD *p) = 0;
    virtual void visitOpcodesDEC(OpcodesDEC *p) = 0;
    virtual void visitOpcodesDIV(OpcodesDIV *p) = 0;
    virtual void visitOpcodesDQ(OpcodesDQ *p) = 0;
    virtual void visitOpcodesDT(OpcodesDT *p) = 0;
    virtual void visitOpcodesDW(OpcodesDW *p) = 0;
    virtual void visitOpcodesEND(OpcodesEND *p) = 0;
    virtual void visitOpcodesENTER(OpcodesENTER *p) = 0;
    virtual void visitOpcodesF2XM1(OpcodesF2XM1 *p) = 0;
    virtual void visitOpcodesFABS(OpcodesFABS *p) = 0;
    virtual void visitOpcodesFADD(OpcodesFADD *p) = 0;
    virtual void visitOpcodesFADDP(OpcodesFADDP *p) = 0;
    virtual void visitOpcodesFBLD(OpcodesFBLD *p) = 0;
    virtual void visitOpcodesFBSTP(OpcodesFBSTP *p) = 0;
    virtual void visitOpcodesFCHS(OpcodesFCHS *p) = 0;
    virtual void visitOpcodesFCLEX(OpcodesFCLEX *p) = 0;
    virtual void visitOpcodesFCOM(OpcodesFCOM *p) = 0;
    virtual void visitOpcodesFCOMP(OpcodesFCOMP *p) = 0;
    virtual void visitOpcodesFCOMPP(OpcodesFCOMPP *p) = 0;
    virtual void visitOpcodesFCOS(OpcodesFCOS *p) = 0;
    virtual void visitOpcodesFDECSTP(OpcodesFDECSTP *p) = 0;
    virtual void visitOpcodesFDISI(OpcodesFDISI *p) = 0;
    virtual void visitOpcodesFDIV(OpcodesFDIV *p) = 0;
    virtual void visitOpcodesFDIVP(OpcodesFDIVP *p) = 0;
    virtual void visitOpcodesFDIVR(OpcodesFDIVR *p) = 0;
    virtual void visitOpcodesFDIVRP(OpcodesFDIVRP *p) = 0;
    virtual void visitOpcodesFENI(OpcodesFENI *p) = 0;
    virtual void visitOpcodesFFREE(OpcodesFFREE *p) = 0;
    virtual void visitOpcodesFIADD(OpcodesFIADD *p) = 0;
    virtual void visitOpcodesFICOM(OpcodesFICOM *p) = 0;
    virtual void visitOpcodesFICOMP(OpcodesFICOMP *p) = 0;
    virtual void visitOpcodesFIDIV(OpcodesFIDIV *p) = 0;
    virtual void visitOpcodesFIDIVR(OpcodesFIDIVR *p) = 0;
    virtual void visitOpcodesFILD(OpcodesFILD *p) = 0;
    virtual void visitOpcodesFIMUL(OpcodesFIMUL *p) = 0;
    virtual void visitOpcodesFINCSTP(OpcodesFINCSTP *p) = 0;
    virtual void visitOpcodesFINIT(OpcodesFINIT *p) = 0;
    virtual void visitOpcodesFIST(OpcodesFIST *p) = 0;
    virtual void visitOpcodesFISTP(OpcodesFISTP *p) = 0;
    virtual void visitOpcodesFISUB(OpcodesFISUB *p) = 0;
    virtual void visitOpcodesFISUBR(OpcodesFISUBR *p) = 0;
    virtual void visitOpcodesFLD(OpcodesFLD *p) = 0;
    virtual void visitOpcodesFLD1(OpcodesFLD1 *p) = 0;
    virtual void visitOpcodesFLDCW(OpcodesFLDCW *p) = 0;
    virtual void visitOpcodesFLDENV(OpcodesFLDENV *p) = 0;
    virtual void visitOpcodesFLDL2E(OpcodesFLDL2E *p) = 0;
    virtual void visitOpcodesFLDL2T(OpcodesFLDL2T *p) = 0;
    virtual void visitOpcodesFLDLG2(OpcodesFLDLG2 *p) = 0;
    virtual void visitOpcodesFLDLN2(OpcodesFLDLN2 *p) = 0;
    virtual void visitOpcodesFLDPI(OpcodesFLDPI *p) = 0;
    virtual void visitOpcodesFLDZ(OpcodesFLDZ *p) = 0;
    virtual void visitOpcodesFMUL(OpcodesFMUL *p) = 0;
    virtual void visitOpcodesFMULP(OpcodesFMULP *p) = 0;
    virtual void visitOpcodesFNCLEX(OpcodesFNCLEX *p) = 0;
    virtual void visitOpcodesFNDISI(OpcodesFNDISI *p) = 0;
    virtual void visitOpcodesFNENI(OpcodesFNENI *p) = 0;
    virtual void visitOpcodesFNINIT(OpcodesFNINIT *p) = 0;
    virtual void visitOpcodesFNOP(OpcodesFNOP *p) = 0;
    virtual void visitOpcodesFNSAVE(OpcodesFNSAVE *p) = 0;
    virtual void visitOpcodesFNSTCW(OpcodesFNSTCW *p) = 0;
    virtual void visitOpcodesFNSTENV(OpcodesFNSTENV *p) = 0;
    virtual void visitOpcodesFNSTSW(OpcodesFNSTSW *p) = 0;
    virtual void visitOpcodesFPATAN(OpcodesFPATAN *p) = 0;
    virtual void visitOpcodesFPTAN(OpcodesFPTAN *p) = 0;
    virtual void visitOpcodesFPREM(OpcodesFPREM *p) = 0;
    virtual void visitOpcodesFPREM1(OpcodesFPREM1 *p) = 0;
    virtual void visitOpcodesFRNDINT(OpcodesFRNDINT *p) = 0;
    virtual void visitOpcodesFRSTOR(OpcodesFRSTOR *p) = 0;
    virtual void visitOpcodesFSAVE(OpcodesFSAVE *p) = 0;
    virtual void visitOpcodesFSCALE(OpcodesFSCALE *p) = 0;
    virtual void visitOpcodesFSETPM(OpcodesFSETPM *p) = 0;
    virtual void visitOpcodesFSIN(OpcodesFSIN *p) = 0;
    virtual void visitOpcodesFSINCOS(OpcodesFSINCOS *p) = 0;
    virtual void visitOpcodesFSQRT(OpcodesFSQRT *p) = 0;
    virtual void visitOpcodesFST(OpcodesFST *p) = 0;
    virtual void visitOpcodesFSTCW(OpcodesFSTCW *p) = 0;
    virtual void visitOpcodesFSTENV(OpcodesFSTENV *p) = 0;
    virtual void visitOpcodesFSTP(OpcodesFSTP *p) = 0;
    virtual void visitOpcodesFSTSW(OpcodesFSTSW *p) = 0;
    virtual void visitOpcodesFSUB(OpcodesFSUB *p) = 0;
    virtual void visitOpcodesFSUBP(OpcodesFSUBP *p) = 0;
    virtual void visitOpcodesFSUBR(OpcodesFSUBR *p) = 0;
    virtual void visitOpcodesFSUBRP(OpcodesFSUBRP *p) = 0;
    virtual void visitOpcodesFTST(OpcodesFTST *p) = 0;
    virtual void visitOpcodesFUCOM(OpcodesFUCOM *p) = 0;
    virtual void visitOpcodesFUCOMP(OpcodesFUCOMP *p) = 0;
    virtual void visitOpcodesFUCOMPP(OpcodesFUCOMPP *p) = 0;
    virtual void visitOpcodesFXAM(OpcodesFXAM *p) = 0;
    virtual void visitOpcodesFXCH(OpcodesFXCH *p) = 0;
    virtual void visitOpcodesFXTRACT(OpcodesFXTRACT *p) = 0;
    virtual void visitOpcodesFYL2X(OpcodesFYL2X *p) = 0;
    virtual void visitOpcodesFYL2XP1(OpcodesFYL2XP1 *p) = 0;
    virtual void visitOpcodesHLT(OpcodesHLT *p) = 0;
    virtual void visitOpcodesIDIV(OpcodesIDIV *p) = 0;
    virtual void visitOpcodesIMUL(OpcodesIMUL *p) = 0;
    virtual void visitOpcodesIN(OpcodesIN *p) = 0;
    virtual void visitOpcodesINC(OpcodesINC *p) = 0;
    virtual void visitOpcodesINCO(OpcodesINCO *p) = 0;
    virtual void visitOpcodesINSB(OpcodesINSB *p) = 0;
    virtual void visitOpcodesINSD(OpcodesINSD *p) = 0;
    virtual void visitOpcodesINSW(OpcodesINSW *p) = 0;
    virtual void visitOpcodesINT(OpcodesINT *p) = 0;
    virtual void visitOpcodesINT3(OpcodesINT3 *p) = 0;
    virtual void visitOpcodesINTO(OpcodesINTO *p) = 0;
    virtual void visitOpcodesINVD(OpcodesINVD *p) = 0;
    virtual void visitOpcodesINVLPG(OpcodesINVLPG *p) = 0;
    virtual void visitOpcodesIRET(OpcodesIRET *p) = 0;
    virtual void visitOpcodesIRETD(OpcodesIRETD *p) = 0;
    virtual void visitOpcodesIRETW(OpcodesIRETW *p) = 0;
    virtual void visitOpcodesJA(OpcodesJA *p) = 0;
    virtual void visitOpcodesJAE(OpcodesJAE *p) = 0;
    virtual void visitOpcodesJB(OpcodesJB *p) = 0;
    virtual void visitOpcodesJBE(OpcodesJBE *p) = 0;
    virtual void visitOpcodesJC(OpcodesJC *p) = 0;
    virtual void visitOpcodesJCXZ(OpcodesJCXZ *p) = 0;
    virtual void visitOpcodesJE(OpcodesJE *p) = 0;
    virtual void visitOpcodesJECXZ(OpcodesJECXZ *p) = 0;
    virtual void visitOpcodesJG(OpcodesJG *p) = 0;
    virtual void visitOpcodesJGE(OpcodesJGE *p) = 0;
    virtual void visitOpcodesJL(OpcodesJL *p) = 0;
    virtual void visitOpcodesJLE(OpcodesJLE *p) = 0;
    virtual void visitOpcodesJMP(OpcodesJMP *p) = 0;
    virtual void visitOpcodesJNA(OpcodesJNA *p) = 0;
    virtual void visitOpcodesJNAE(OpcodesJNAE *p) = 0;
    virtual void visitOpcodesJNB(OpcodesJNB *p) = 0;
    virtual void visitOpcodesJNBE(OpcodesJNBE *p) = 0;
    virtual void visitOpcodesJNC(OpcodesJNC *p) = 0;
    virtual void visitOpcodesJNE(OpcodesJNE *p) = 0;
    virtual void visitOpcodesJNG(OpcodesJNG *p) = 0;
    virtual void visitOpcodesJNGE(OpcodesJNGE *p) = 0;
    virtual void visitOpcodesJNL(OpcodesJNL *p) = 0;
    virtual void visitOpcodesJNLE(OpcodesJNLE *p) = 0;
    virtual void visitOpcodesJNO(OpcodesJNO *p) = 0;
    virtual void visitOpcodesJNP(OpcodesJNP *p) = 0;
    virtual void visitOpcodesJNS(OpcodesJNS *p) = 0;
    virtual void visitOpcodesJNZ(OpcodesJNZ *p) = 0;
    virtual void visitOpcodesJO(OpcodesJO *p) = 0;
    virtual void visitOpcodesJP(OpcodesJP *p) = 0;
    virtual void visitOpcodesJPE(OpcodesJPE *p) = 0;
    virtual void visitOpcodesJPO(OpcodesJPO *p) = 0;
    virtual void visitOpcodesJS(OpcodesJS *p) = 0;
    virtual void visitOpcodesJZ(OpcodesJZ *p) = 0;
    virtual void visitOpcodesLAHF(OpcodesLAHF *p) = 0;
    virtual void visitOpcodesLAR(OpcodesLAR *p) = 0;
    virtual void visitOpcodesLDS(OpcodesLDS *p) = 0;
    virtual void visitOpcodesLEA(OpcodesLEA *p) = 0;
    virtual void visitOpcodesLEAVE(OpcodesLEAVE *p) = 0;
    virtual void visitOpcodesLES(OpcodesLES *p) = 0;
    virtual void visitOpcodesLFS(OpcodesLFS *p) = 0;
    virtual void visitOpcodesLGDT(OpcodesLGDT *p) = 0;
    virtual void visitOpcodesLGS(OpcodesLGS *p) = 0;
    virtual void visitOpcodesLIDT(OpcodesLIDT *p) = 0;
    virtual void visitOpcodesLLDT(OpcodesLLDT *p) = 0;
    virtual void visitOpcodesLMSW(OpcodesLMSW *p) = 0;
    virtual void visitOpcodesLOCK(OpcodesLOCK *p) = 0;
    virtual void visitOpcodesLODSB(OpcodesLODSB *p) = 0;
    virtual void visitOpcodesLODSD(OpcodesLODSD *p) = 0;
    virtual void visitOpcodesLODSW(OpcodesLODSW *p) = 0;
    virtual void visitOpcodesLOOP(OpcodesLOOP *p) = 0;
    virtual void visitOpcodesLOOPE(OpcodesLOOPE *p) = 0;
    virtual void visitOpcodesLOOPNE(OpcodesLOOPNE *p) = 0;
    virtual void visitOpcodesLOOPNZ(OpcodesLOOPNZ *p) = 0;
    virtual void visitOpcodesLOOPZ(OpcodesLOOPZ *p) = 0;
    virtual void visitOpcodesLSL(OpcodesLSL *p) = 0;
    virtual void visitOpcodesLSS(OpcodesLSS *p) = 0;
    virtual void visitOpcodesLTR(OpcodesLTR *p) = 0;
    virtual void visitOpcodesMOV(OpcodesMOV *p) = 0;
    virtual void visitOpcodesMOVSB(OpcodesMOVSB *p) = 0;
    virtual void visitOpcodesMOVSD(OpcodesMOVSD *p) = 0;
    virtual void visitOpcodesMOVSW(OpcodesMOVSW *p) = 0;
    virtual void visitOpcodesMOVSX(OpcodesMOVSX *p) = 0;
    virtual void visitOpcodesMOVZX(OpcodesMOVZX *p) = 0;
    virtual void visitOpcodesMUL(OpcodesMUL *p) = 0;
    virtual void visitOpcodesNEG(OpcodesNEG *p) = 0;
    virtual void visitOpcodesNOP(OpcodesNOP *p) = 0;
    virtual void visitOpcodesNOT(OpcodesNOT *p) = 0;
    virtual void visitOpcodesOR(OpcodesOR *p) = 0;
    virtual void visitOpcodesORG(OpcodesORG *p) = 0;
    virtual void visitOpcodesOUT(OpcodesOUT *p) = 0;
    virtual void visitOpcodesOUTSB(OpcodesOUTSB *p) = 0;
    virtual void visitOpcodesOUTSD(OpcodesOUTSD *p) = 0;
    virtual void visitOpcodesOUTSW(OpcodesOUTSW *p) = 0;
    virtual void visitOpcodesPOP(OpcodesPOP *p) = 0;
    virtual void visitOpcodesPOPA(OpcodesPOPA *p) = 0;
    virtual void visitOpcodesPOPAD(OpcodesPOPAD *p) = 0;
    virtual void visitOpcodesPOPAW(OpcodesPOPAW *p) = 0;
    virtual void visitOpcodesPOPF(OpcodesPOPF *p) = 0;
    virtual void visitOpcodesPOPFD(OpcodesPOPFD *p) = 0;
    virtual void visitOpcodesPOPFW(OpcodesPOPFW *p) = 0;
    virtual void visitOpcodesPUSH(OpcodesPUSH *p) = 0;
    virtual void visitOpcodesPUSHA(OpcodesPUSHA *p) = 0;
    virtual void visitOpcodesPUSHD(OpcodesPUSHD *p) = 0;
    virtual void visitOpcodesPUSHAD(OpcodesPUSHAD *p) = 0;
    virtual void visitOpcodesPUSHAW(OpcodesPUSHAW *p) = 0;
    virtual void visitOpcodesPUSHF(OpcodesPUSHF *p) = 0;
    virtual void visitOpcodesPUSHFD(OpcodesPUSHFD *p) = 0;
    virtual void visitOpcodesPUSHFW(OpcodesPUSHFW *p) = 0;
    virtual void visitOpcodesRCL(OpcodesRCL *p) = 0;
    virtual void visitOpcodesRCR(OpcodesRCR *p) = 0;
    virtual void visitOpcodesRDMSR(OpcodesRDMSR *p) = 0;
    virtual void visitOpcodesRDPMC(OpcodesRDPMC *p) = 0;
    virtual void visitOpcodesREP(OpcodesREP *p) = 0;
    virtual void visitOpcodesREPE(OpcodesREPE *p) = 0;
    virtual void visitOpcodesREPNE(OpcodesREPNE *p) = 0;
    virtual void visitOpcodesREPNZ(OpcodesREPNZ *p) = 0;
    virtual void visitOpcodesREPZ(OpcodesREPZ *p) = 0;
    virtual void visitOpcodesRESB(OpcodesRESB *p) = 0;
    virtual void visitOpcodesRESD(OpcodesRESD *p) = 0;
    virtual void visitOpcodesRESQ(OpcodesRESQ *p) = 0;
    virtual void visitOpcodesREST(OpcodesREST *p) = 0;
    virtual void visitOpcodesRESW(OpcodesRESW *p) = 0;
    virtual void visitOpcodesRET(OpcodesRET *p) = 0;
    virtual void visitOpcodesRETF(OpcodesRETF *p) = 0;
    virtual void visitOpcodesRETN(OpcodesRETN *p) = 0;
    virtual void visitOpcodesROL(OpcodesROL *p) = 0;
    virtual void visitOpcodesROR(OpcodesROR *p) = 0;
    virtual void visitOpcodesRSM(OpcodesRSM *p) = 0;
    virtual void visitOpcodesSAHF(OpcodesSAHF *p) = 0;
    virtual void visitOpcodesSAL(OpcodesSAL *p) = 0;
    virtual void visitOpcodesSAR(OpcodesSAR *p) = 0;
    virtual void visitOpcodesSBB(OpcodesSBB *p) = 0;
    virtual void visitOpcodesSCASB(OpcodesSCASB *p) = 0;
    virtual void visitOpcodesSCASD(OpcodesSCASD *p) = 0;
    virtual void visitOpcodesSCASW(OpcodesSCASW *p) = 0;
    virtual void visitOpcodesSETA(OpcodesSETA *p) = 0;
    virtual void visitOpcodesSETAE(OpcodesSETAE *p) = 0;
    virtual void visitOpcodesSETB(OpcodesSETB *p) = 0;
    virtual void visitOpcodesSETBE(OpcodesSETBE *p) = 0;
    virtual void visitOpcodesSETC(OpcodesSETC *p) = 0;
    virtual void visitOpcodesSETE(OpcodesSETE *p) = 0;
    virtual void visitOpcodesSETG(OpcodesSETG *p) = 0;
    virtual void visitOpcodesSETGE(OpcodesSETGE *p) = 0;
    virtual void visitOpcodesSETL(OpcodesSETL *p) = 0;
    virtual void visitOpcodesSETLE(OpcodesSETLE *p) = 0;
    virtual void visitOpcodesSETNA(OpcodesSETNA *p) = 0;
    virtual void visitOpcodesSETNAE(OpcodesSETNAE *p) = 0;
    virtual void visitOpcodesSETNB(OpcodesSETNB *p) = 0;
    virtual void visitOpcodesSETNBE(OpcodesSETNBE *p) = 0;
    virtual void visitOpcodesSETNC(OpcodesSETNC *p) = 0;
    virtual void visitOpcodesSETNE(OpcodesSETNE *p) = 0;
    virtual void visitOpcodesSETNG(OpcodesSETNG *p) = 0;
    virtual void visitOpcodesSETNGE(OpcodesSETNGE *p) = 0;
    virtual void visitOpcodesSETNL(OpcodesSETNL *p) = 0;
    virtual void visitOpcodesSETNLE(OpcodesSETNLE *p) = 0;
    virtual void visitOpcodesSETNO(OpcodesSETNO *p) = 0;
    virtual void visitOpcodesSETNP(OpcodesSETNP *p) = 0;
    virtual void visitOpcodesSETNS(OpcodesSETNS *p) = 0;
    virtual void visitOpcodesSETNZ(OpcodesSETNZ *p) = 0;
    virtual void visitOpcodesSETO(OpcodesSETO *p) = 0;
    virtual void visitOpcodesSETP(OpcodesSETP *p) = 0;
    virtual void visitOpcodesSETPE(OpcodesSETPE *p) = 0;
    virtual void visitOpcodesSETPO(OpcodesSETPO *p) = 0;
    virtual void visitOpcodesSETS(OpcodesSETS *p) = 0;
    virtual void visitOpcodesSETZ(OpcodesSETZ *p) = 0;
    virtual void visitOpcodesSGDT(OpcodesSGDT *p) = 0;
    virtual void visitOpcodesSHL(OpcodesSHL *p) = 0;
    virtual void visitOpcodesSHLD(OpcodesSHLD *p) = 0;
    virtual void visitOpcodesSHR(OpcodesSHR *p) = 0;
    virtual void visitOpcodesSHRD(OpcodesSHRD *p) = 0;
    virtual void visitOpcodesSIDT(OpcodesSIDT *p) = 0;
    virtual void visitOpcodesSLDT(OpcodesSLDT *p) = 0;
    virtual void visitOpcodesSMSW(OpcodesSMSW *p) = 0;
    virtual void visitOpcodesSTC(OpcodesSTC *p) = 0;
    virtual void visitOpcodesSTD(OpcodesSTD *p) = 0;
    virtual void visitOpcodesSTI(OpcodesSTI *p) = 0;
    virtual void visitOpcodesSTOSB(OpcodesSTOSB *p) = 0;
    virtual void visitOpcodesSTOSD(OpcodesSTOSD *p) = 0;
    virtual void visitOpcodesSTOSW(OpcodesSTOSW *p) = 0;
    virtual void visitOpcodesSTR(OpcodesSTR *p) = 0;
    virtual void visitOpcodesSUB(OpcodesSUB *p) = 0;
    virtual void visitOpcodesTEST(OpcodesTEST *p) = 0;
    virtual void visitOpcodesTIMES(OpcodesTIMES *p) = 0;
    virtual void visitOpcodesUD2(OpcodesUD2 *p) = 0;
    virtual void visitOpcodesVERR(OpcodesVERR *p) = 0;
    virtual void visitOpcodesVERW(OpcodesVERW *p) = 0;
    virtual void visitOpcodesWAIT(OpcodesWAIT *p) = 0;
    virtual void visitOpcodesWBINVD(OpcodesWBINVD *p) = 0;
    virtual void visitOpcodesWRMSR(OpcodesWRMSR *p) = 0;
    virtual void visitOpcodesXADD(OpcodesXADD *p) = 0;
    virtual void visitOpcodesXCHG(OpcodesXCHG *p) = 0;
    virtual void visitOpcodesXLATB(OpcodesXLATB *p) = 0;
    virtual void visitOpcodesXOR(OpcodesXOR *p) = 0;
    virtual void visitListStatement(ListStatement *p) = 0;
    virtual void visitListFactor(ListFactor *p) = 0;
    virtual void visitListMnemonicArgs(ListMnemonicArgs *p) = 0;


    virtual void visitInteger(Integer x) = 0;
    virtual void visitChar(Char x) = 0;
    virtual void visitDouble(Double x) = 0;
    virtual void visitString(String x) = 0;
    virtual void visitIdent(Ident x) = 0;
    virtual void visitNaskChar(NaskChar x) = 0;
    virtual void visitHex(Hex x) = 0;
    virtual void visitId(Id x) = 0;

};


class Visitable
{
 public:
    virtual ~Visitable() {}
    virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Program : public Visitable
{
public:
    virtual std::shared_ptr<Program> clone() const = 0;
    int line_number, char_number;
};

class Statement : public Visitable
{
public:
    virtual std::shared_ptr<Statement> clone() const = 0;
    int line_number, char_number;
};

class MnemonicArgs : public Visitable
{
public:
    virtual std::shared_ptr<MnemonicArgs> clone() const = 0;
    int line_number, char_number;
};

class Exp : public Visitable
{
public:
    virtual std::shared_ptr<Exp> clone() const = 0;
    int line_number, char_number;
};

class Label : public Visitable
{
public:
    virtual std::shared_ptr<Label> clone() const = 0;
    int line_number, char_number;
};

class MemoryAddr : public Visitable
{
public:
    virtual std::shared_ptr<MemoryAddr> clone() const = 0;
    int line_number, char_number;
};

class IndexExp : public Visitable
{
public:
    virtual std::shared_ptr<IndexExp> clone() const = 0;
    int line_number, char_number;
};

class UnaryOperator : public Visitable
{
public:
    virtual std::shared_ptr<UnaryOperator> clone() const = 0;
    int line_number, char_number;
};

class Factor : public Visitable
{
public:
    virtual std::shared_ptr<Factor> clone() const = 0;
    int line_number, char_number;
};

class JumpDir : public Visitable
{
public:
    virtual std::shared_ptr<JumpDir> clone() const = 0;
    int line_number, char_number;
};

class SReg : public Visitable
{
public:
    virtual std::shared_ptr<SReg> clone() const = 0;
    int line_number, char_number;
};

class ConfigType : public Visitable
{
public:
    virtual std::shared_ptr<ConfigType> clone() const = 0;
    int line_number, char_number;
};

class DataType : public Visitable
{
public:
    virtual std::shared_ptr<DataType> clone() const = 0;
    int line_number, char_number;
};

class OpcodeNoParam : public Visitable
{
public:
    virtual std::shared_ptr<OpcodeNoParam> clone() const = 0;
    int line_number, char_number;
};

class Opcode : public Visitable
{
public:
    virtual std::shared_ptr<Opcode> clone() const = 0;
    int line_number, char_number;
};



class Prog : public Program
{
public:
    std::shared_ptr<ListStatement> liststatement_;

    Prog(std::shared_ptr<ListStatement> p1)
    : Program(), liststatement_{p1}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Program>  clone() const;
};

class LabelStmt : public Statement
{
public:
    std::shared_ptr<Label> label_;

    LabelStmt(std::shared_ptr<Label> p1)
    : Statement(), label_{p1}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Statement>  clone() const;
};

class DeclareStmt : public Statement
{
public:
    Id id_;
    std::shared_ptr<Exp> exp_;

    DeclareStmt(Id p1, std::shared_ptr<Exp> p2)
    : Statement(), id_{p1}, exp_{p2}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Statement>  clone() const;
};

class ExportSymStmt : public Statement
{
public:
    std::shared_ptr<ListFactor> listfactor_;

    ExportSymStmt(std::shared_ptr<ListFactor> p1)
    : Statement(), listfactor_{p1}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Statement>  clone() const;
};

class ExternSymStmt : public Statement
{
public:
    std::shared_ptr<ListFactor> listfactor_;

    ExternSymStmt(std::shared_ptr<ListFactor> p1)
    : Statement(), listfactor_{p1}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Statement>  clone() const;
};

class ConfigStmt : public Statement
{
public:
    std::shared_ptr<ConfigType> configtype_;
    std::shared_ptr<Factor> factor_;

    ConfigStmt(std::shared_ptr<ConfigType> p1, std::shared_ptr<Factor> p2)
    : Statement(), configtype_{p1}, factor_{p2}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Statement>  clone() const;
};

class MnemonicStmt : public Statement
{
public:
    std::shared_ptr<Opcode> opcode_;
    std::shared_ptr<ListMnemonicArgs> listmnemonicargs_;

    MnemonicStmt(std::shared_ptr<Opcode> p1, std::shared_ptr<ListMnemonicArgs> p2)
    : Statement(), opcode_{p1}, listmnemonicargs_{p2}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Statement>  clone() const;
};

class OpcodeStmt : public Statement
{
public:
    std::shared_ptr<OpcodeNoParam> opcodenoparam_;

    OpcodeStmt(std::shared_ptr<OpcodeNoParam> p1)
    : Statement(), opcodenoparam_{p1}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Statement>  clone() const;
};

class MnemoArg : public MnemonicArgs
{
public:
    std::shared_ptr<Exp> exp_;

    MnemoArg(std::shared_ptr<Exp> p1)
    : MnemonicArgs(), exp_{p1}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<MnemonicArgs>  clone() const;
};

class SregExp : public Exp
{
public:
    std::shared_ptr<SReg> sreg_;

    SregExp(std::shared_ptr<SReg> p1)
    : Exp(), sreg_{p1}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Exp>  clone() const;
};

class DatatypeExp : public Exp
{
public:
    std::shared_ptr<DataType> datatype_;
    std::shared_ptr<MemoryAddr> memoryaddr_;

    DatatypeExp(std::shared_ptr<DataType> p1, std::shared_ptr<MemoryAddr> p2)
    : Exp(), datatype_{p1}, memoryaddr_{p2}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Exp>  clone() const;
};

class MemoryAddrExp : public Exp
{
public:
    std::shared_ptr<MemoryAddr> memoryaddr_;

    MemoryAddrExp(std::shared_ptr<MemoryAddr> p1)
    : Exp(), memoryaddr_{p1}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Exp>  clone() const;
};

class JmpMemoryAddrExp : public Exp
{
public:
    std::shared_ptr<JumpDir> jumpdir_;
    std::shared_ptr<MemoryAddr> memoryaddr_;

    JmpMemoryAddrExp(std::shared_ptr<JumpDir> p1, std::shared_ptr<MemoryAddr> p2)
    : Exp(), jumpdir_{p1}, memoryaddr_{p2}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Exp>  clone() const;
};

class SegmentOffsetDataExp : public Exp
{
public:
    std::shared_ptr<DataType> datatype_;
    std::shared_ptr<Exp> exp_1;
    std::shared_ptr<Exp> exp_2;

    SegmentOffsetDataExp(std::shared_ptr<DataType> p1, std::shared_ptr<Exp> p2, std::shared_ptr<Exp> p3)
    : Exp(), datatype_{p1}, exp_1{p2}, exp_2{p3}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Exp>  clone() const;
};

class SegmentOffsetExp : public Exp
{
public:
    std::shared_ptr<Exp> exp_1;
    std::shared_ptr<Exp> exp_2;

    SegmentOffsetExp(std::shared_ptr<Exp> p1, std::shared_ptr<Exp> p2)
    : Exp(), exp_1{p1}, exp_2{p2}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Exp>  clone() const;
};

class PlusExp : public Exp
{
public:
    std::shared_ptr<Exp> exp_1;
    std::shared_ptr<Exp> exp_2;

    PlusExp(std::shared_ptr<Exp> p1, std::shared_ptr<Exp> p2)
    : Exp(), exp_1{p1}, exp_2{p2}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Exp>  clone() const;
};

class MinusExp : public Exp
{
public:
    std::shared_ptr<Exp> exp_1;
    std::shared_ptr<Exp> exp_2;

    MinusExp(std::shared_ptr<Exp> p1, std::shared_ptr<Exp> p2)
    : Exp(), exp_1{p1}, exp_2{p2}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Exp>  clone() const;
};

class MulExp : public Exp
{
public:
    std::shared_ptr<Exp> exp_1;
    std::shared_ptr<Exp> exp_2;

    MulExp(std::shared_ptr<Exp> p1, std::shared_ptr<Exp> p2)
    : Exp(), exp_1{p1}, exp_2{p2}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Exp>  clone() const;
};

class DivExp : public Exp
{
public:
    std::shared_ptr<Exp> exp_1;
    std::shared_ptr<Exp> exp_2;

    DivExp(std::shared_ptr<Exp> p1, std::shared_ptr<Exp> p2)
    : Exp(), exp_1{p1}, exp_2{p2}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Exp>  clone() const;
};

class ModExp : public Exp
{
public:
    std::shared_ptr<Exp> exp_1;
    std::shared_ptr<Exp> exp_2;

    ModExp(std::shared_ptr<Exp> p1, std::shared_ptr<Exp> p2)
    : Exp(), exp_1{p1}, exp_2{p2}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Exp>  clone() const;
};

class SregFrameExp : public Exp
{
public:
    std::shared_ptr<SReg> sreg_;
    Id id_;

    SregFrameExp(std::shared_ptr<SReg> p1, Id p2)
    : Exp(), sreg_{p1}, id_{p2}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Exp>  clone() const;
};

class PreOpExp : public Exp
{
public:
    std::shared_ptr<UnaryOperator> unaryoperator_;
    std::shared_ptr<Factor> factor_;

    PreOpExp(std::shared_ptr<UnaryOperator> p1, std::shared_ptr<Factor> p2)
    : Exp(), unaryoperator_{p1}, factor_{p2}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Exp>  clone() const;
};

class ImmExp : public Exp
{
public:
    std::shared_ptr<Factor> factor_;

    ImmExp(std::shared_ptr<Factor> p1)
    : Exp(), factor_{p1}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Exp>  clone() const;
};

class LabelExp : public Label
{
public:
    std::shared_ptr<Exp> exp_;

    LabelExp(std::shared_ptr<Exp> p1)
    : Label(), exp_{p1}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Label>  clone() const;
};

class Direct : public MemoryAddr
{
public:
    std::shared_ptr<Exp> exp_;

    Direct(std::shared_ptr<Exp> p1)
    : MemoryAddr(), exp_{p1}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<MemoryAddr>  clone() const;
};

class BasedOrIndexed : public MemoryAddr
{
public:
    Id id_;
    std::shared_ptr<Exp> exp_;

    BasedOrIndexed(Id p1, std::shared_ptr<Exp> p2)
    : MemoryAddr(), id_{p1}, exp_{p2}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<MemoryAddr>  clone() const;
};

class Indexed : public MemoryAddr
{
public:
    std::shared_ptr<IndexExp> indexexp_;
    Integer integer_;

    Indexed(std::shared_ptr<IndexExp> p1, Integer p2)
    : MemoryAddr(), indexexp_{p1}, integer_{p2}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<MemoryAddr>  clone() const;
};

class BasedIndexed : public MemoryAddr
{
public:
    Id id_1;
    Id id_2;

    BasedIndexed(Id p1, Id p2)
    : MemoryAddr(), id_1{p1}, id_2{p2}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<MemoryAddr>  clone() const;
};

class BasedIndexedDisp : public MemoryAddr
{
public:
    Id id_1;
    Id id_2;
    Integer integer_;

    BasedIndexedDisp(Id p1, Id p2, Integer p3)
    : MemoryAddr(), id_1{p1}, id_2{p2}, integer_{p3}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<MemoryAddr>  clone() const;
};

class BasedIndexedDispScale : public MemoryAddr
{
public:
    Id id_;
    std::shared_ptr<IndexExp> indexexp_;
    Integer integer_;

    BasedIndexedDispScale(Id p1, std::shared_ptr<IndexExp> p2, Integer p3)
    : MemoryAddr(), id_{p1}, indexexp_{p2}, integer_{p3}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<MemoryAddr>  clone() const;
};

class IndexScaleExp : public IndexExp
{
public:
    Id id_;
    Integer integer_;

    IndexScaleExp(Id p1, Integer p2)
    : IndexExp(), id_{p1}, integer_{p2}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<IndexExp>  clone() const;
};

class Negative : public UnaryOperator
{
public:

    Negative(): UnaryOperator (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<UnaryOperator>  clone() const;
};

class NumberFactor : public Factor
{
public:
    Integer integer_;

    NumberFactor(Integer p1)
    : Factor(), integer_{p1}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Factor>  clone() const;
};

class HexFactor : public Factor
{
public:
    Hex hex_;

    HexFactor(Hex p1)
    : Factor(), hex_{p1}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Factor>  clone() const;
};

class IdentFactor : public Factor
{
public:
    Id id_;

    IdentFactor(Id p1)
    : Factor(), id_{p1}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Factor>  clone() const;
};

class StringFactor : public Factor
{
public:
    String string_;

    StringFactor(String p1)
    : Factor(), string_{p1}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Factor>  clone() const;
};

class CharFactor : public Factor
{
public:
    NaskChar naskchar_;

    CharFactor(NaskChar p1)
    : Factor(), naskchar_{p1}
    {};


    virtual void accept(Visitor *v) override;
    std::shared_ptr<Factor>  clone() const;
};

class ShortJumpDir : public JumpDir
{
public:

    ShortJumpDir(): JumpDir (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<JumpDir>  clone() const;
};

class NearJumpDir : public JumpDir
{
public:

    NearJumpDir(): JumpDir (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<JumpDir>  clone() const;
};

class FarJumpDir : public JumpDir
{
public:

    FarJumpDir(): JumpDir (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<JumpDir>  clone() const;
};

class SRegCS : public SReg
{
public:

    SRegCS(): SReg (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<SReg>  clone() const;
};

class SRegDS : public SReg
{
public:

    SRegDS(): SReg (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<SReg>  clone() const;
};

class SRegES : public SReg
{
public:

    SRegES(): SReg (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<SReg>  clone() const;
};

class SRegSS : public SReg
{
public:

    SRegSS(): SReg (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<SReg>  clone() const;
};

class SRegFS : public SReg
{
public:

    SRegFS(): SReg (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<SReg>  clone() const;
};

class SRegGS : public SReg
{
public:

    SRegGS(): SReg (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<SReg>  clone() const;
};

class BitsConfig : public ConfigType
{
public:

    BitsConfig(): ConfigType (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<ConfigType>  clone() const;
};

class InstConfig : public ConfigType
{
public:

    InstConfig(): ConfigType (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<ConfigType>  clone() const;
};

class OptiConfig : public ConfigType
{
public:

    OptiConfig(): ConfigType (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<ConfigType>  clone() const;
};

class FormConfig : public ConfigType
{
public:

    FormConfig(): ConfigType (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<ConfigType>  clone() const;
};

class PaddConfig : public ConfigType
{
public:

    PaddConfig(): ConfigType (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<ConfigType>  clone() const;
};

class PadsConfig : public ConfigType
{
public:

    PadsConfig(): ConfigType (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<ConfigType>  clone() const;
};

class SectConfig : public ConfigType
{
public:

    SectConfig(): ConfigType (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<ConfigType>  clone() const;
};

class AbsoConfig : public ConfigType
{
public:

    AbsoConfig(): ConfigType (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<ConfigType>  clone() const;
};

class FileConfig : public ConfigType
{
public:

    FileConfig(): ConfigType (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<ConfigType>  clone() const;
};

class ByteDataType : public DataType
{
public:

    ByteDataType(): DataType (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<DataType>  clone() const;
};

class WordDataType : public DataType
{
public:

    WordDataType(): DataType (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<DataType>  clone() const;
};

class DwordDataType : public DataType
{
public:

    DwordDataType(): DataType (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<DataType>  clone() const;
};

class OpcodesAAA : public OpcodeNoParam
{
public:

    OpcodesAAA(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesAAS : public OpcodeNoParam
{
public:

    OpcodesAAS(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesCBW : public OpcodeNoParam
{
public:

    OpcodesCBW(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesCDQ : public OpcodeNoParam
{
public:

    OpcodesCDQ(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesCLC : public OpcodeNoParam
{
public:

    OpcodesCLC(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesCLD : public OpcodeNoParam
{
public:

    OpcodesCLD(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesCLI : public OpcodeNoParam
{
public:

    OpcodesCLI(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesCLTS : public OpcodeNoParam
{
public:

    OpcodesCLTS(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesCMC : public OpcodeNoParam
{
public:

    OpcodesCMC(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesCMPSB : public OpcodeNoParam
{
public:

    OpcodesCMPSB(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesCMPSD : public OpcodeNoParam
{
public:

    OpcodesCMPSD(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesCMPSW : public OpcodeNoParam
{
public:

    OpcodesCMPSW(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesCWD : public OpcodeNoParam
{
public:

    OpcodesCWD(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesCWDE : public OpcodeNoParam
{
public:

    OpcodesCWDE(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesDAA : public OpcodeNoParam
{
public:

    OpcodesDAA(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesDAS : public OpcodeNoParam
{
public:

    OpcodesDAS(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesF2XM1 : public OpcodeNoParam
{
public:

    OpcodesF2XM1(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFABS : public OpcodeNoParam
{
public:

    OpcodesFABS(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFCHS : public OpcodeNoParam
{
public:

    OpcodesFCHS(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFCLEX : public OpcodeNoParam
{
public:

    OpcodesFCLEX(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFCOMPP : public OpcodeNoParam
{
public:

    OpcodesFCOMPP(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFCOS : public OpcodeNoParam
{
public:

    OpcodesFCOS(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFDECSTP : public OpcodeNoParam
{
public:

    OpcodesFDECSTP(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFDISI : public OpcodeNoParam
{
public:

    OpcodesFDISI(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFENI : public OpcodeNoParam
{
public:

    OpcodesFENI(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFINCSTP : public OpcodeNoParam
{
public:

    OpcodesFINCSTP(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFINIT : public OpcodeNoParam
{
public:

    OpcodesFINIT(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFLD1 : public OpcodeNoParam
{
public:

    OpcodesFLD1(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFLDL2E : public OpcodeNoParam
{
public:

    OpcodesFLDL2E(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFLDL2T : public OpcodeNoParam
{
public:

    OpcodesFLDL2T(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFLDLG2 : public OpcodeNoParam
{
public:

    OpcodesFLDLG2(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFLDLN2 : public OpcodeNoParam
{
public:

    OpcodesFLDLN2(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFLDPI : public OpcodeNoParam
{
public:

    OpcodesFLDPI(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFLDZ : public OpcodeNoParam
{
public:

    OpcodesFLDZ(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFNCLEX : public OpcodeNoParam
{
public:

    OpcodesFNCLEX(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFNDISI : public OpcodeNoParam
{
public:

    OpcodesFNDISI(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFNENI : public OpcodeNoParam
{
public:

    OpcodesFNENI(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFNINIT : public OpcodeNoParam
{
public:

    OpcodesFNINIT(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFNOP : public OpcodeNoParam
{
public:

    OpcodesFNOP(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFPATAN : public OpcodeNoParam
{
public:

    OpcodesFPATAN(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFPTAN : public OpcodeNoParam
{
public:

    OpcodesFPTAN(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFPREM : public OpcodeNoParam
{
public:

    OpcodesFPREM(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFPREM1 : public OpcodeNoParam
{
public:

    OpcodesFPREM1(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFRNDINT : public OpcodeNoParam
{
public:

    OpcodesFRNDINT(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFSCALE : public OpcodeNoParam
{
public:

    OpcodesFSCALE(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFSETPM : public OpcodeNoParam
{
public:

    OpcodesFSETPM(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFSIN : public OpcodeNoParam
{
public:

    OpcodesFSIN(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFSINCOS : public OpcodeNoParam
{
public:

    OpcodesFSINCOS(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFSQRT : public OpcodeNoParam
{
public:

    OpcodesFSQRT(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFTST : public OpcodeNoParam
{
public:

    OpcodesFTST(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFUCOMPP : public OpcodeNoParam
{
public:

    OpcodesFUCOMPP(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFXAM : public OpcodeNoParam
{
public:

    OpcodesFXAM(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFXTRACT : public OpcodeNoParam
{
public:

    OpcodesFXTRACT(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFYL2X : public OpcodeNoParam
{
public:

    OpcodesFYL2X(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesFYL2XP1 : public OpcodeNoParam
{
public:

    OpcodesFYL2XP1(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesHLT : public OpcodeNoParam
{
public:

    OpcodesHLT(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesINSB : public OpcodeNoParam
{
public:

    OpcodesINSB(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesINSD : public OpcodeNoParam
{
public:

    OpcodesINSD(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesINSW : public OpcodeNoParam
{
public:

    OpcodesINSW(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesINT3 : public OpcodeNoParam
{
public:

    OpcodesINT3(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesINTO : public OpcodeNoParam
{
public:

    OpcodesINTO(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesINVD : public OpcodeNoParam
{
public:

    OpcodesINVD(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesIRET : public OpcodeNoParam
{
public:

    OpcodesIRET(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesIRETD : public OpcodeNoParam
{
public:

    OpcodesIRETD(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesIRETW : public OpcodeNoParam
{
public:

    OpcodesIRETW(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesLAHF : public OpcodeNoParam
{
public:

    OpcodesLAHF(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesLEAVE : public OpcodeNoParam
{
public:

    OpcodesLEAVE(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesLODSB : public OpcodeNoParam
{
public:

    OpcodesLODSB(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesLODSD : public OpcodeNoParam
{
public:

    OpcodesLODSD(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesLODSW : public OpcodeNoParam
{
public:

    OpcodesLODSW(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesMOVSB : public OpcodeNoParam
{
public:

    OpcodesMOVSB(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesMOVSD : public OpcodeNoParam
{
public:

    OpcodesMOVSD(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesMOVSW : public OpcodeNoParam
{
public:

    OpcodesMOVSW(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesPOPA : public OpcodeNoParam
{
public:

    OpcodesPOPA(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesPOPAD : public OpcodeNoParam
{
public:

    OpcodesPOPAD(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesPOPAW : public OpcodeNoParam
{
public:

    OpcodesPOPAW(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesPOPF : public OpcodeNoParam
{
public:

    OpcodesPOPF(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesPOPFD : public OpcodeNoParam
{
public:

    OpcodesPOPFD(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesPOPFW : public OpcodeNoParam
{
public:

    OpcodesPOPFW(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesPUSHA : public OpcodeNoParam
{
public:

    OpcodesPUSHA(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesPUSHD : public OpcodeNoParam
{
public:

    OpcodesPUSHD(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesPUSHAD : public OpcodeNoParam
{
public:

    OpcodesPUSHAD(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesPUSHAW : public OpcodeNoParam
{
public:

    OpcodesPUSHAW(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesPUSHF : public OpcodeNoParam
{
public:

    OpcodesPUSHF(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesPUSHFD : public OpcodeNoParam
{
public:

    OpcodesPUSHFD(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesPUSHFW : public OpcodeNoParam
{
public:

    OpcodesPUSHFW(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesRET : public OpcodeNoParam
{
public:

    OpcodesRET(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesSAHF : public OpcodeNoParam
{
public:

    OpcodesSAHF(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesSCASB : public OpcodeNoParam
{
public:

    OpcodesSCASB(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesSCASD : public OpcodeNoParam
{
public:

    OpcodesSCASD(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesSCASW : public OpcodeNoParam
{
public:

    OpcodesSCASW(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesSTC : public OpcodeNoParam
{
public:

    OpcodesSTC(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesSTD : public OpcodeNoParam
{
public:

    OpcodesSTD(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesSTI : public OpcodeNoParam
{
public:

    OpcodesSTI(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesSTOSB : public OpcodeNoParam
{
public:

    OpcodesSTOSB(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesSTOSD : public OpcodeNoParam
{
public:

    OpcodesSTOSD(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesSTOSW : public OpcodeNoParam
{
public:

    OpcodesSTOSW(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesWAIT : public OpcodeNoParam
{
public:

    OpcodesWAIT(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesWBINVD : public OpcodeNoParam
{
public:

    OpcodesWBINVD(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesXLATB : public OpcodeNoParam
{
public:

    OpcodesXLATB(): OpcodeNoParam (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<OpcodeNoParam>  clone() const;
};

class OpcodesAAD : public Opcode
{
public:

    OpcodesAAD(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesAAM : public Opcode
{
public:

    OpcodesAAM(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesADC : public Opcode
{
public:

    OpcodesADC(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesADD : public Opcode
{
public:

    OpcodesADD(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesAND : public Opcode
{
public:

    OpcodesAND(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesALIGN : public Opcode
{
public:

    OpcodesALIGN(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesALIGNB : public Opcode
{
public:

    OpcodesALIGNB(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesARPL : public Opcode
{
public:

    OpcodesARPL(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesBOUND : public Opcode
{
public:

    OpcodesBOUND(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesBSF : public Opcode
{
public:

    OpcodesBSF(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesBSR : public Opcode
{
public:

    OpcodesBSR(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesBSWAP : public Opcode
{
public:

    OpcodesBSWAP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesBT : public Opcode
{
public:

    OpcodesBT(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesBTC : public Opcode
{
public:

    OpcodesBTC(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesBTR : public Opcode
{
public:

    OpcodesBTR(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesBTS : public Opcode
{
public:

    OpcodesBTS(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesCALL : public Opcode
{
public:

    OpcodesCALL(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesCMP : public Opcode
{
public:

    OpcodesCMP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesCMPXCHG : public Opcode
{
public:

    OpcodesCMPXCHG(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesCPUID : public Opcode
{
public:

    OpcodesCPUID(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesDB : public Opcode
{
public:

    OpcodesDB(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesDD : public Opcode
{
public:

    OpcodesDD(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesDEC : public Opcode
{
public:

    OpcodesDEC(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesDIV : public Opcode
{
public:

    OpcodesDIV(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesDQ : public Opcode
{
public:

    OpcodesDQ(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesDT : public Opcode
{
public:

    OpcodesDT(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesDW : public Opcode
{
public:

    OpcodesDW(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesEND : public Opcode
{
public:

    OpcodesEND(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesENTER : public Opcode
{
public:

    OpcodesENTER(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFADD : public Opcode
{
public:

    OpcodesFADD(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFADDP : public Opcode
{
public:

    OpcodesFADDP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFBLD : public Opcode
{
public:

    OpcodesFBLD(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFBSTP : public Opcode
{
public:

    OpcodesFBSTP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFCOM : public Opcode
{
public:

    OpcodesFCOM(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFCOMP : public Opcode
{
public:

    OpcodesFCOMP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFDIV : public Opcode
{
public:

    OpcodesFDIV(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFDIVP : public Opcode
{
public:

    OpcodesFDIVP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFDIVR : public Opcode
{
public:

    OpcodesFDIVR(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFDIVRP : public Opcode
{
public:

    OpcodesFDIVRP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFFREE : public Opcode
{
public:

    OpcodesFFREE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFIADD : public Opcode
{
public:

    OpcodesFIADD(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFICOM : public Opcode
{
public:

    OpcodesFICOM(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFICOMP : public Opcode
{
public:

    OpcodesFICOMP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFIDIV : public Opcode
{
public:

    OpcodesFIDIV(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFIDIVR : public Opcode
{
public:

    OpcodesFIDIVR(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFILD : public Opcode
{
public:

    OpcodesFILD(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFIMUL : public Opcode
{
public:

    OpcodesFIMUL(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFIST : public Opcode
{
public:

    OpcodesFIST(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFISTP : public Opcode
{
public:

    OpcodesFISTP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFISUB : public Opcode
{
public:

    OpcodesFISUB(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFISUBR : public Opcode
{
public:

    OpcodesFISUBR(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFLD : public Opcode
{
public:

    OpcodesFLD(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFLDCW : public Opcode
{
public:

    OpcodesFLDCW(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFLDENV : public Opcode
{
public:

    OpcodesFLDENV(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFMUL : public Opcode
{
public:

    OpcodesFMUL(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFMULP : public Opcode
{
public:

    OpcodesFMULP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFNSAVE : public Opcode
{
public:

    OpcodesFNSAVE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFNSTCW : public Opcode
{
public:

    OpcodesFNSTCW(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFNSTENV : public Opcode
{
public:

    OpcodesFNSTENV(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFNSTSW : public Opcode
{
public:

    OpcodesFNSTSW(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFRSTOR : public Opcode
{
public:

    OpcodesFRSTOR(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFSAVE : public Opcode
{
public:

    OpcodesFSAVE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFST : public Opcode
{
public:

    OpcodesFST(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFSTCW : public Opcode
{
public:

    OpcodesFSTCW(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFSTENV : public Opcode
{
public:

    OpcodesFSTENV(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFSTP : public Opcode
{
public:

    OpcodesFSTP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFSTSW : public Opcode
{
public:

    OpcodesFSTSW(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFSUB : public Opcode
{
public:

    OpcodesFSUB(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFSUBP : public Opcode
{
public:

    OpcodesFSUBP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFSUBR : public Opcode
{
public:

    OpcodesFSUBR(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFSUBRP : public Opcode
{
public:

    OpcodesFSUBRP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFUCOM : public Opcode
{
public:

    OpcodesFUCOM(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFUCOMP : public Opcode
{
public:

    OpcodesFUCOMP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesFXCH : public Opcode
{
public:

    OpcodesFXCH(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesIDIV : public Opcode
{
public:

    OpcodesIDIV(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesIMUL : public Opcode
{
public:

    OpcodesIMUL(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesIN : public Opcode
{
public:

    OpcodesIN(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesINC : public Opcode
{
public:

    OpcodesINC(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesINCO : public Opcode
{
public:

    OpcodesINCO(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesINT : public Opcode
{
public:

    OpcodesINT(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesINVLPG : public Opcode
{
public:

    OpcodesINVLPG(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJA : public Opcode
{
public:

    OpcodesJA(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJAE : public Opcode
{
public:

    OpcodesJAE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJB : public Opcode
{
public:

    OpcodesJB(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJBE : public Opcode
{
public:

    OpcodesJBE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJC : public Opcode
{
public:

    OpcodesJC(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJCXZ : public Opcode
{
public:

    OpcodesJCXZ(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJE : public Opcode
{
public:

    OpcodesJE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJECXZ : public Opcode
{
public:

    OpcodesJECXZ(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJG : public Opcode
{
public:

    OpcodesJG(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJGE : public Opcode
{
public:

    OpcodesJGE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJL : public Opcode
{
public:

    OpcodesJL(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJLE : public Opcode
{
public:

    OpcodesJLE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJMP : public Opcode
{
public:

    OpcodesJMP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJNA : public Opcode
{
public:

    OpcodesJNA(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJNAE : public Opcode
{
public:

    OpcodesJNAE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJNB : public Opcode
{
public:

    OpcodesJNB(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJNBE : public Opcode
{
public:

    OpcodesJNBE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJNC : public Opcode
{
public:

    OpcodesJNC(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJNE : public Opcode
{
public:

    OpcodesJNE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJNG : public Opcode
{
public:

    OpcodesJNG(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJNGE : public Opcode
{
public:

    OpcodesJNGE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJNL : public Opcode
{
public:

    OpcodesJNL(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJNLE : public Opcode
{
public:

    OpcodesJNLE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJNO : public Opcode
{
public:

    OpcodesJNO(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJNP : public Opcode
{
public:

    OpcodesJNP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJNS : public Opcode
{
public:

    OpcodesJNS(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJNZ : public Opcode
{
public:

    OpcodesJNZ(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJO : public Opcode
{
public:

    OpcodesJO(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJP : public Opcode
{
public:

    OpcodesJP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJPE : public Opcode
{
public:

    OpcodesJPE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJPO : public Opcode
{
public:

    OpcodesJPO(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJS : public Opcode
{
public:

    OpcodesJS(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesJZ : public Opcode
{
public:

    OpcodesJZ(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesLAR : public Opcode
{
public:

    OpcodesLAR(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesLDS : public Opcode
{
public:

    OpcodesLDS(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesLEA : public Opcode
{
public:

    OpcodesLEA(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesLES : public Opcode
{
public:

    OpcodesLES(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesLFS : public Opcode
{
public:

    OpcodesLFS(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesLGDT : public Opcode
{
public:

    OpcodesLGDT(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesLGS : public Opcode
{
public:

    OpcodesLGS(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesLIDT : public Opcode
{
public:

    OpcodesLIDT(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesLLDT : public Opcode
{
public:

    OpcodesLLDT(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesLMSW : public Opcode
{
public:

    OpcodesLMSW(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesLOCK : public Opcode
{
public:

    OpcodesLOCK(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesLOOP : public Opcode
{
public:

    OpcodesLOOP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesLOOPE : public Opcode
{
public:

    OpcodesLOOPE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesLOOPNE : public Opcode
{
public:

    OpcodesLOOPNE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesLOOPNZ : public Opcode
{
public:

    OpcodesLOOPNZ(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesLOOPZ : public Opcode
{
public:

    OpcodesLOOPZ(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesLSL : public Opcode
{
public:

    OpcodesLSL(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesLSS : public Opcode
{
public:

    OpcodesLSS(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesLTR : public Opcode
{
public:

    OpcodesLTR(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesMOV : public Opcode
{
public:

    OpcodesMOV(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesMOVSX : public Opcode
{
public:

    OpcodesMOVSX(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesMOVZX : public Opcode
{
public:

    OpcodesMOVZX(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesMUL : public Opcode
{
public:

    OpcodesMUL(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesNEG : public Opcode
{
public:

    OpcodesNEG(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesNOP : public Opcode
{
public:

    OpcodesNOP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesNOT : public Opcode
{
public:

    OpcodesNOT(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesOR : public Opcode
{
public:

    OpcodesOR(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesORG : public Opcode
{
public:

    OpcodesORG(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesOUT : public Opcode
{
public:

    OpcodesOUT(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesOUTSB : public Opcode
{
public:

    OpcodesOUTSB(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesOUTSD : public Opcode
{
public:

    OpcodesOUTSD(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesOUTSW : public Opcode
{
public:

    OpcodesOUTSW(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesPOP : public Opcode
{
public:

    OpcodesPOP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesPUSH : public Opcode
{
public:

    OpcodesPUSH(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesRCL : public Opcode
{
public:

    OpcodesRCL(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesRCR : public Opcode
{
public:

    OpcodesRCR(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesRDMSR : public Opcode
{
public:

    OpcodesRDMSR(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesRDPMC : public Opcode
{
public:

    OpcodesRDPMC(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesREP : public Opcode
{
public:

    OpcodesREP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesREPE : public Opcode
{
public:

    OpcodesREPE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesREPNE : public Opcode
{
public:

    OpcodesREPNE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesREPNZ : public Opcode
{
public:

    OpcodesREPNZ(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesREPZ : public Opcode
{
public:

    OpcodesREPZ(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesRESB : public Opcode
{
public:

    OpcodesRESB(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesRESD : public Opcode
{
public:

    OpcodesRESD(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesRESQ : public Opcode
{
public:

    OpcodesRESQ(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesREST : public Opcode
{
public:

    OpcodesREST(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesRESW : public Opcode
{
public:

    OpcodesRESW(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesRETF : public Opcode
{
public:

    OpcodesRETF(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesRETN : public Opcode
{
public:

    OpcodesRETN(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesROL : public Opcode
{
public:

    OpcodesROL(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesROR : public Opcode
{
public:

    OpcodesROR(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesRSM : public Opcode
{
public:

    OpcodesRSM(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSAL : public Opcode
{
public:

    OpcodesSAL(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSAR : public Opcode
{
public:

    OpcodesSAR(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSBB : public Opcode
{
public:

    OpcodesSBB(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETA : public Opcode
{
public:

    OpcodesSETA(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETAE : public Opcode
{
public:

    OpcodesSETAE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETB : public Opcode
{
public:

    OpcodesSETB(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETBE : public Opcode
{
public:

    OpcodesSETBE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETC : public Opcode
{
public:

    OpcodesSETC(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETE : public Opcode
{
public:

    OpcodesSETE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETG : public Opcode
{
public:

    OpcodesSETG(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETGE : public Opcode
{
public:

    OpcodesSETGE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETL : public Opcode
{
public:

    OpcodesSETL(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETLE : public Opcode
{
public:

    OpcodesSETLE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETNA : public Opcode
{
public:

    OpcodesSETNA(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETNAE : public Opcode
{
public:

    OpcodesSETNAE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETNB : public Opcode
{
public:

    OpcodesSETNB(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETNBE : public Opcode
{
public:

    OpcodesSETNBE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETNC : public Opcode
{
public:

    OpcodesSETNC(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETNE : public Opcode
{
public:

    OpcodesSETNE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETNG : public Opcode
{
public:

    OpcodesSETNG(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETNGE : public Opcode
{
public:

    OpcodesSETNGE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETNL : public Opcode
{
public:

    OpcodesSETNL(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETNLE : public Opcode
{
public:

    OpcodesSETNLE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETNO : public Opcode
{
public:

    OpcodesSETNO(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETNP : public Opcode
{
public:

    OpcodesSETNP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETNS : public Opcode
{
public:

    OpcodesSETNS(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETNZ : public Opcode
{
public:

    OpcodesSETNZ(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETO : public Opcode
{
public:

    OpcodesSETO(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETP : public Opcode
{
public:

    OpcodesSETP(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETPE : public Opcode
{
public:

    OpcodesSETPE(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETPO : public Opcode
{
public:

    OpcodesSETPO(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETS : public Opcode
{
public:

    OpcodesSETS(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSETZ : public Opcode
{
public:

    OpcodesSETZ(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSGDT : public Opcode
{
public:

    OpcodesSGDT(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSHL : public Opcode
{
public:

    OpcodesSHL(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSHLD : public Opcode
{
public:

    OpcodesSHLD(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSHR : public Opcode
{
public:

    OpcodesSHR(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSHRD : public Opcode
{
public:

    OpcodesSHRD(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSIDT : public Opcode
{
public:

    OpcodesSIDT(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSLDT : public Opcode
{
public:

    OpcodesSLDT(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSMSW : public Opcode
{
public:

    OpcodesSMSW(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSTR : public Opcode
{
public:

    OpcodesSTR(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesSUB : public Opcode
{
public:

    OpcodesSUB(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesTEST : public Opcode
{
public:

    OpcodesTEST(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesTIMES : public Opcode
{
public:

    OpcodesTIMES(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesUD2 : public Opcode
{
public:

    OpcodesUD2(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesVERR : public Opcode
{
public:

    OpcodesVERR(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesVERW : public Opcode
{
public:

    OpcodesVERW(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesWRMSR : public Opcode
{
public:

    OpcodesWRMSR(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesXADD : public Opcode
{
public:

    OpcodesXADD(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesXCHG : public Opcode
{
public:

    OpcodesXCHG(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};

class OpcodesXOR : public Opcode
{
public:

    OpcodesXOR(): Opcode (){};

    virtual void accept(Visitor *v) override;
    std::shared_ptr<Opcode>  clone() const;
};



class ListStatement : public Visitable
{
public:
    ListStatement() : liststatement_{}
    {}

    std::list<std::shared_ptr<Statement>> liststatement_;

    // define iterator and const_iterator, expose it
    using iterator = typename std::list<std::shared_ptr<Statement>>::iterator;
    using const_iterator = typename std::list<std::shared_ptr<Statement>>::const_iterator;
    auto begin() const { return liststatement_.begin(); }
    auto begin()       { return liststatement_.begin(); }
    auto end()   const { return liststatement_.end(); }
    auto end()         { return liststatement_.end(); }

    virtual void accept(Visitor *v);
    std::shared_ptr<ListStatement>  clone() const;
    void cons(std::shared_ptr<Statement>);
    void reverse();
};


class ListFactor : public Visitable
{
public:
    ListFactor() : listfactor_{}
    {}

    std::list<std::shared_ptr<Factor>> listfactor_;

    // define iterator and const_iterator, expose it
    using iterator = typename std::list<std::shared_ptr<Factor>>::iterator;
    using const_iterator = typename std::list<std::shared_ptr<Factor>>::const_iterator;
    auto begin() const { return listfactor_.begin(); }
    auto begin()       { return listfactor_.begin(); }
    auto end()   const { return listfactor_.end(); }
    auto end()         { return listfactor_.end(); }

    virtual void accept(Visitor *v);
    std::shared_ptr<ListFactor>  clone() const;
    void cons(std::shared_ptr<Factor>);
    void reverse();
};


class ListMnemonicArgs : public Visitable
{
public:
    ListMnemonicArgs() : listmnemonicargs_{}
    {}

    std::list<std::shared_ptr<MnemonicArgs>> listmnemonicargs_;

    // define iterator and const_iterator, expose it
    using iterator = typename std::list<std::shared_ptr<MnemonicArgs>>::iterator;
    using const_iterator = typename std::list<std::shared_ptr<MnemonicArgs>>::const_iterator;
    auto begin() const { return listmnemonicargs_.begin(); }
    auto begin()       { return listmnemonicargs_.begin(); }
    auto end()   const { return listmnemonicargs_.end(); }
    auto end()         { return listmnemonicargs_.end(); }

    virtual void accept(Visitor *v);
    std::shared_ptr<ListMnemonicArgs>  clone() const;
    void cons(std::shared_ptr<MnemonicArgs>);
    void reverse();
};






#endif
