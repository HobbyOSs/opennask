/* -*- c++ -*- File generated by the BNF Converter (bnfc 2.9.5). */

/* Parser definition to be used with Bison. */

/* Generate header file for lexer. */
%defines "bison.hh"

/* Reentrant parser */
/* lalr1.cc always pure parser. needless to define %define api.pure full */

%define api.parser.class {NaskParser}
%code top {
#include <memory>
}
%code requires{
#include "absyn.hh"


        class NaskScanner;
        class NaskDriver;

}
%parse-param { NaskScanner  &scanner  }
%parse-param { NaskDriver  &driver  }

/* Turn on line/column tracking in the nask_lloc structure: */
%locations
/* variant based implementation of semantic values for C++ */
%require "3.2"
%define api.value.type variant
/* 'yacc.c' does not support variant, so use skeleton 'lalr1.cc' */
%skeleton "lalr1.cc"

%code{
/* Begin C++ preamble code */
#include <algorithm> /* for std::reverse */
#include <iostream>
#include <cstdlib>
#include <fstream>

/* include for all driver functions */
#include "driver.hh"

#undef yylex
#define yylex scanner.lex
}


%token              _ERROR_
%token              _PERCENT      /* % */
%token              _STAR         /* * */
%token              _PLUS         /* + */
%token              _COMMA        /* , */
%token              _MINUS        /* - */
%token              _SLASH        /* / */
%token              _COLON        /* : */
%token              _KW_AAA       /* AAA */
%token              _KW_AAD       /* AAD */
%token              _KW_AAM       /* AAM */
%token              _KW_AAS       /* AAS */
%token              _KW_ABSOLUTE  /* ABSOLUTE */
%token              _KW_ADC       /* ADC */
%token              _KW_ADD       /* ADD */
%token              _KW_ALIGN     /* ALIGN */
%token              _KW_ALIGNB    /* ALIGNB */
%token              _KW_AND       /* AND */
%token              _KW_ARPL      /* ARPL */
%token              _KW_BITS      /* BITS */
%token              _KW_BOUND     /* BOUND */
%token              _KW_BSF       /* BSF */
%token              _KW_BSR       /* BSR */
%token              _KW_BSWAP     /* BSWAP */
%token              _KW_BT        /* BT */
%token              _KW_BTC       /* BTC */
%token              _KW_BTR       /* BTR */
%token              _KW_BTS       /* BTS */
%token              _KW_BYTE      /* BYTE */
%token              _KW_CALL      /* CALL */
%token              _KW_CBW       /* CBW */
%token              _KW_CDQ       /* CDQ */
%token              _KW_CLC       /* CLC */
%token              _KW_CLD       /* CLD */
%token              _KW_CLI       /* CLI */
%token              _KW_CLTS      /* CLTS */
%token              _KW_CMC       /* CMC */
%token              _KW_CMP       /* CMP */
%token              _KW_CMPSB     /* CMPSB */
%token              _KW_CMPSD     /* CMPSD */
%token              _KW_CMPSW     /* CMPSW */
%token              _KW_CMPXCHG   /* CMPXCHG */
%token              _KW_CPUID     /* CPUID */
%token              _KW_CWD       /* CWD */
%token              _KW_CWDE      /* CWDE */
%token              _KW_DAA       /* DAA */
%token              _KW_DAS       /* DAS */
%token              _KW_DB        /* DB */
%token              _KW_DD        /* DD */
%token              _KW_DEC       /* DEC */
%token              _KW_DIV       /* DIV */
%token              _KW_DQ        /* DQ */
%token              _KW_DT        /* DT */
%token              _KW_DW        /* DW */
%token              _KW_DWORD     /* DWORD */
%token              _KW_END       /* END */
%token              _KW_ENTER     /* ENTER */
%token              _KW_EQU       /* EQU */
%token              _KW_EXTERN    /* EXTERN */
%token              _KW_F2XM1     /* F2XM1 */
%token              _KW_FABS      /* FABS */
%token              _KW_FADD      /* FADD */
%token              _KW_FADDP     /* FADDP */
%token              _KW_FBLD      /* FBLD */
%token              _KW_FBSTP     /* FBSTP */
%token              _KW_FCHS      /* FCHS */
%token              _KW_FCLEX     /* FCLEX */
%token              _KW_FCOM      /* FCOM */
%token              _KW_FCOMP     /* FCOMP */
%token              _KW_FCOMPP    /* FCOMPP */
%token              _KW_FCOS      /* FCOS */
%token              _KW_FDECSTP   /* FDECSTP */
%token              _KW_FDISI     /* FDISI */
%token              _KW_FDIV      /* FDIV */
%token              _KW_FDIVP     /* FDIVP */
%token              _KW_FDIVR     /* FDIVR */
%token              _KW_FDIVRP    /* FDIVRP */
%token              _KW_FENI      /* FENI */
%token              _KW_FFREE     /* FFREE */
%token              _KW_FIADD     /* FIADD */
%token              _KW_FICOM     /* FICOM */
%token              _KW_FICOMP    /* FICOMP */
%token              _KW_FIDIV     /* FIDIV */
%token              _KW_FIDIVR    /* FIDIVR */
%token              _KW_FILD      /* FILD */
%token              _KW_FILE      /* FILE */
%token              _KW_FIMUL     /* FIMUL */
%token              _KW_FINCSTP   /* FINCSTP */
%token              _KW_FINIT     /* FINIT */
%token              _KW_FIST      /* FIST */
%token              _KW_FISTP     /* FISTP */
%token              _KW_FISUB     /* FISUB */
%token              _KW_FISUBR    /* FISUBR */
%token              _KW_FLD       /* FLD */
%token              _KW_FLD1      /* FLD1 */
%token              _KW_FLDCW     /* FLDCW */
%token              _KW_FLDENV    /* FLDENV */
%token              _KW_FLDL2E    /* FLDL2E */
%token              _KW_FLDL2T    /* FLDL2T */
%token              _KW_FLDLG2    /* FLDLG2 */
%token              _KW_FLDLN2    /* FLDLN2 */
%token              _KW_FLDPI     /* FLDPI */
%token              _KW_FLDZ      /* FLDZ */
%token              _KW_FMUL      /* FMUL */
%token              _KW_FMULP     /* FMULP */
%token              _KW_FNCLEX    /* FNCLEX */
%token              _KW_FNDISI    /* FNDISI */
%token              _KW_FNENI     /* FNENI */
%token              _KW_FNINIT    /* FNINIT */
%token              _KW_FNOP      /* FNOP */
%token              _KW_FNSAVE    /* FNSAVE */
%token              _KW_FNSTCW    /* FNSTCW */
%token              _KW_FNSTENV   /* FNSTENV */
%token              _KW_FNSTSW    /* FNSTSW */
%token              _KW_FORMAT    /* FORMAT */
%token              _KW_FPATAN    /* FPATAN */
%token              _KW_FPREM     /* FPREM */
%token              _KW_FPREM1    /* FPREM1 */
%token              _KW_FPTAN     /* FPTAN */
%token              _KW_FRNDINT   /* FRNDINT */
%token              _KW_FRSTOR    /* FRSTOR */
%token              _KW_FSAVE     /* FSAVE */
%token              _KW_FSCALE    /* FSCALE */
%token              _KW_FSETPM    /* FSETPM */
%token              _KW_FSIN      /* FSIN */
%token              _KW_FSINCOS   /* FSINCOS */
%token              _KW_FSQRT     /* FSQRT */
%token              _KW_FST       /* FST */
%token              _KW_FSTCW     /* FSTCW */
%token              _KW_FSTENV    /* FSTENV */
%token              _KW_FSTP      /* FSTP */
%token              _KW_FSTSW     /* FSTSW */
%token              _KW_FSUB      /* FSUB */
%token              _KW_FSUBP     /* FSUBP */
%token              _KW_FSUBR     /* FSUBR */
%token              _KW_FSUBRP    /* FSUBRP */
%token              _KW_FTST      /* FTST */
%token              _KW_FUCOM     /* FUCOM */
%token              _KW_FUCOMP    /* FUCOMP */
%token              _KW_FUCOMPP   /* FUCOMPP */
%token              _KW_FXAM      /* FXAM */
%token              _KW_FXCH      /* FXCH */
%token              _KW_FXTRACT   /* FXTRACT */
%token              _KW_FYL2X     /* FYL2X */
%token              _KW_FYL2XP1   /* FYL2XP1 */
%token              _KW_HLT       /* HLT */
%token              _KW_IDIV      /* IDIV */
%token              _KW_IMUL      /* IMUL */
%token              _KW_IN        /* IN */
%token              _KW_INC       /* INC */
%token              _KW_INCO      /* INCO */
%token              _KW_INSB      /* INSB */
%token              _KW_INSD      /* INSD */
%token              _KW_INSTRSET  /* INSTRSET */
%token              _KW_INSW      /* INSW */
%token              _KW_INT       /* INT */
%token              _KW_INT3      /* INT3 */
%token              _KW_INTO      /* INTO */
%token              _KW_INVD      /* INVD */
%token              _KW_INVLPG    /* INVLPG */
%token              _KW_IRET      /* IRET */
%token              _KW_IRETD     /* IRETD */
%token              _KW_IRETW     /* IRETW */
%token              _KW_JA        /* JA */
%token              _KW_JAE       /* JAE */
%token              _KW_JB        /* JB */
%token              _KW_JBE       /* JBE */
%token              _KW_JC        /* JC */
%token              _KW_JCXZ      /* JCXZ */
%token              _KW_JE        /* JE */
%token              _KW_JECXZ     /* JECXZ */
%token              _KW_JG        /* JG */
%token              _KW_JGE       /* JGE */
%token              _KW_JL        /* JL */
%token              _KW_JLE       /* JLE */
%token              _KW_JMP       /* JMP */
%token              _KW_JNA       /* JNA */
%token              _KW_JNAE      /* JNAE */
%token              _KW_JNB       /* JNB */
%token              _KW_JNBE      /* JNBE */
%token              _KW_JNC       /* JNC */
%token              _KW_JNE       /* JNE */
%token              _KW_JNG       /* JNG */
%token              _KW_JNGE      /* JNGE */
%token              _KW_JNL       /* JNL */
%token              _KW_JNLE      /* JNLE */
%token              _KW_JNO       /* JNO */
%token              _KW_JNP       /* JNP */
%token              _KW_JNS       /* JNS */
%token              _KW_JNZ       /* JNZ */
%token              _KW_JO        /* JO */
%token              _KW_JP        /* JP */
%token              _KW_JPE       /* JPE */
%token              _KW_JPO       /* JPO */
%token              _KW_JS        /* JS */
%token              _KW_JZ        /* JZ */
%token              _KW_LAHF      /* LAHF */
%token              _KW_LAR       /* LAR */
%token              _KW_LDS       /* LDS */
%token              _KW_LEA       /* LEA */
%token              _KW_LEAVE     /* LEAVE */
%token              _KW_LES       /* LES */
%token              _KW_LFS       /* LFS */
%token              _KW_LGDT      /* LGDT */
%token              _KW_LGS       /* LGS */
%token              _KW_LIDT      /* LIDT */
%token              _KW_LLDT      /* LLDT */
%token              _KW_LMSW      /* LMSW */
%token              _KW_LOCK      /* LOCK */
%token              _KW_LODSB     /* LODSB */
%token              _KW_LODSD     /* LODSD */
%token              _KW_LODSW     /* LODSW */
%token              _KW_LOOP      /* LOOP */
%token              _KW_LOOPE     /* LOOPE */
%token              _KW_LOOPNE    /* LOOPNE */
%token              _KW_LOOPNZ    /* LOOPNZ */
%token              _KW_LOOPZ     /* LOOPZ */
%token              _KW_LSL       /* LSL */
%token              _KW_LSS       /* LSS */
%token              _KW_LTR       /* LTR */
%token              _KW_MOV       /* MOV */
%token              _KW_MOVSB     /* MOVSB */
%token              _KW_MOVSD     /* MOVSD */
%token              _KW_MOVSW     /* MOVSW */
%token              _KW_MOVSX     /* MOVSX */
%token              _KW_MOVZX     /* MOVZX */
%token              _KW_MUL       /* MUL */
%token              _KW_NEG       /* NEG */
%token              _KW_NOP       /* NOP */
%token              _KW_NOT       /* NOT */
%token              _KW_OPTIMIZE  /* OPTIMIZE */
%token              _KW_OR        /* OR */
%token              _KW_ORG       /* ORG */
%token              _KW_OUT       /* OUT */
%token              _KW_OUTSB     /* OUTSB */
%token              _KW_OUTSD     /* OUTSD */
%token              _KW_OUTSW     /* OUTSW */
%token              _KW_PADDING   /* PADDING */
%token              _KW_PADSET    /* PADSET */
%token              _KW_POP       /* POP */
%token              _KW_POPA      /* POPA */
%token              _KW_POPAD     /* POPAD */
%token              _KW_POPAW     /* POPAW */
%token              _KW_POPF      /* POPF */
%token              _KW_POPFD     /* POPFD */
%token              _KW_POPFW     /* POPFW */
%token              _KW_PUSH      /* PUSH */
%token              _KW_PUSHA     /* PUSHA */
%token              _KW_PUSHAD    /* PUSHAD */
%token              _KW_PUSHAW    /* PUSHAW */
%token              _KW_PUSHD     /* PUSHD */
%token              _KW_PUSHF     /* PUSHF */
%token              _KW_PUSHFD    /* PUSHFD */
%token              _KW_PUSHFW    /* PUSHFW */
%token              _KW_RCL       /* RCL */
%token              _KW_RCR       /* RCR */
%token              _KW_RDMSR     /* RDMSR */
%token              _KW_RDPMC     /* RDPMC */
%token              _KW_REP       /* REP */
%token              _KW_REPE      /* REPE */
%token              _KW_REPNE     /* REPNE */
%token              _KW_REPNZ     /* REPNZ */
%token              _KW_REPZ      /* REPZ */
%token              _KW_RESB      /* RESB */
%token              _KW_RESD      /* RESD */
%token              _KW_RESQ      /* RESQ */
%token              _KW_REST      /* REST */
%token              _KW_RESW      /* RESW */
%token              _KW_RET       /* RET */
%token              _KW_RETF      /* RETF */
%token              _KW_RETN      /* RETN */
%token              _KW_ROL       /* ROL */
%token              _KW_ROR       /* ROR */
%token              _KW_RSM       /* RSM */
%token              _KW_SAHF      /* SAHF */
%token              _KW_SAL       /* SAL */
%token              _KW_SAR       /* SAR */
%token              _KW_SBB       /* SBB */
%token              _KW_SCASB     /* SCASB */
%token              _KW_SCASD     /* SCASD */
%token              _KW_SCASW     /* SCASW */
%token              _KW_SECTION   /* SECTION */
%token              _KW_SETA      /* SETA */
%token              _KW_SETAE     /* SETAE */
%token              _KW_SETB      /* SETB */
%token              _KW_SETBE     /* SETBE */
%token              _KW_SETC      /* SETC */
%token              _KW_SETE      /* SETE */
%token              _KW_SETG      /* SETG */
%token              _KW_SETGE     /* SETGE */
%token              _KW_SETL      /* SETL */
%token              _KW_SETLE     /* SETLE */
%token              _KW_SETNA     /* SETNA */
%token              _KW_SETNAE    /* SETNAE */
%token              _KW_SETNB     /* SETNB */
%token              _KW_SETNBE    /* SETNBE */
%token              _KW_SETNC     /* SETNC */
%token              _KW_SETNE     /* SETNE */
%token              _KW_SETNG     /* SETNG */
%token              _KW_SETNGE    /* SETNGE */
%token              _KW_SETNL     /* SETNL */
%token              _KW_SETNLE    /* SETNLE */
%token              _KW_SETNO     /* SETNO */
%token              _KW_SETNP     /* SETNP */
%token              _KW_SETNS     /* SETNS */
%token              _KW_SETNZ     /* SETNZ */
%token              _KW_SETO      /* SETO */
%token              _KW_SETP      /* SETP */
%token              _KW_SETPE     /* SETPE */
%token              _KW_SETPO     /* SETPO */
%token              _KW_SETS      /* SETS */
%token              _KW_SETZ      /* SETZ */
%token              _KW_SGDT      /* SGDT */
%token              _KW_SHL       /* SHL */
%token              _KW_SHLD      /* SHLD */
%token              _KW_SHR       /* SHR */
%token              _KW_SHRD      /* SHRD */
%token              _KW_SIDT      /* SIDT */
%token              _KW_SLDT      /* SLDT */
%token              _KW_SMSW      /* SMSW */
%token              _KW_STC       /* STC */
%token              _KW_STD       /* STD */
%token              _KW_STI       /* STI */
%token              _KW_STOSB     /* STOSB */
%token              _KW_STOSD     /* STOSD */
%token              _KW_STOSW     /* STOSW */
%token              _KW_STR       /* STR */
%token              _KW_SUB       /* SUB */
%token              _KW_TEST      /* TEST */
%token              _KW_TIMES     /* TIMES */
%token              _KW_UD2       /* UD2 */
%token              _KW_VERR      /* VERR */
%token              _KW_VERW      /* VERW */
%token              _KW_WAIT      /* WAIT */
%token              _KW_WBINVD    /* WBINVD */
%token              _KW_WORD      /* WORD */
%token              _KW_WRMSR     /* WRMSR */
%token              _KW_XADD      /* XADD */
%token              _KW_XCHG      /* XCHG */
%token              _KW_XLATB     /* XLATB */
%token              _KW_XOR       /* XOR */
%token              _LBRACK       /* [ */
%token              _RBRACK       /* ] */
%token<std::string> T_Hex         /* Hex */
%token<std::string> T_Label       /* Label */
%token<std::string> _STRING_
%token<int>         _INTEGER_
%token<std::string> _IDENT_


%type <std::shared_ptr<Program>> Program
%type <std::shared_ptr<ListStatement>> ListStatement
%type <std::shared_ptr<Statement>> Statement
%type <std::shared_ptr<ListMnemonicArgs>> ListMnemonicArgs
%type <std::shared_ptr<MnemonicArgs>> MnemonicArgs
%type <std::shared_ptr<Exp>> Exp
%type <std::shared_ptr<MemoryAddr>> MemoryAddr
%type <std::shared_ptr<IndexExp>> IndexExp
%type <std::shared_ptr<Factor>> Factor
%type <std::shared_ptr<ConfigType>> ConfigType
%type <std::shared_ptr<DataType>> DataType
%type <std::shared_ptr<Opcode>> Opcode

%start Program

%%

Program : ListStatement { $1->reverse();$$ = std::make_shared<Prog>($1); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.program_ = $$; }
;
ListStatement : Statement { $$ = std::make_shared<ListStatement>(); $$->cons($1); driver.liststatement_ = $$; }
  | Statement ListStatement { $2->cons($1); $$ = $2; driver.liststatement_ = $$; }
;
Statement : T_Label { $$ = std::make_shared<LabelStmt>($1); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.statement_ = $$; }
  | _IDENT_ _KW_EQU Exp { $$ = std::make_shared<DeclareStmt>($1, $3); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.statement_ = $$; }
  | _LBRACK ConfigType Factor _RBRACK { $$ = std::make_shared<ConfigStmt>($2, $3); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.statement_ = $$; }
  | Opcode ListMnemonicArgs { $2->reverse();$$ = std::make_shared<MnemonicStmt>($1, $2); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.statement_ = $$; }
  | Opcode { $$ = std::make_shared<OpcodeStmt>($1); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.statement_ = $$; }
;
ListMnemonicArgs : MnemonicArgs { $$ = std::make_shared<ListMnemonicArgs>(); $$->cons($1); driver.listmnemonicargs_ = $$; }
  | MnemonicArgs _COMMA ListMnemonicArgs { $3->cons($1); $$ = $3; driver.listmnemonicargs_ = $$; }
;
MnemonicArgs : Exp { $$ = std::make_shared<MnemoArg>($1); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.mnemonicargs_ = $$; }
;
Exp : Exp _PLUS Exp { $$ = std::make_shared<PlusExp>($1, $3); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.exp_ = $$; }
  | Exp _MINUS Exp { $$ = std::make_shared<MinusExp>($1, $3); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.exp_ = $$; }
  | Exp _STAR Exp { $$ = std::make_shared<MulExp>($1, $3); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.exp_ = $$; }
  | Exp _SLASH Exp { $$ = std::make_shared<DivExp>($1, $3); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.exp_ = $$; }
  | Exp _PERCENT Exp { $$ = std::make_shared<ModExp>($1, $3); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.exp_ = $$; }
  | DataType MemoryAddr { $$ = std::make_shared<DatatypeExp>($1, $2); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.exp_ = $$; }
  | DataType Exp _COLON Exp { $$ = std::make_shared<RangeExp>($1, $2, $4); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.exp_ = $$; }
  | Factor { $$ = std::make_shared<ImmExp>($1); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.exp_ = $$; }
  | MemoryAddr { $$ = std::make_shared<MemoryAddrExp>($1); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.exp_ = $$; }
;
MemoryAddr : _LBRACK Factor _RBRACK { $$ = std::make_shared<Direct>($2); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.memoryaddr_ = $$; }
  | _LBRACK IndexExp _PLUS Factor _RBRACK { $$ = std::make_shared<Indexed>($2, $4); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.memoryaddr_ = $$; }
  | _LBRACK Factor _PLUS IndexExp _RBRACK { $$ = std::make_shared<Based>($2, $4); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.memoryaddr_ = $$; }
  | _LBRACK Factor _PLUS IndexExp _PLUS Factor _RBRACK { $$ = std::make_shared<BasedIndexedDisp>($2, $4, $6); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.memoryaddr_ = $$; }
;
IndexExp : Factor { $$ = std::make_shared<IndexScaleExp>($1); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.indexexp_ = $$; }
  | Factor _STAR _INTEGER_ { $$ = std::make_shared<IndexScaleNExp>($1, $3); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.indexexp_ = $$; }
;
Factor : _INTEGER_ { $$ = std::make_shared<NumberFactor>($1); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.factor_ = $$; }
  | T_Hex { $$ = std::make_shared<HexFactor>($1); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.factor_ = $$; }
  | _IDENT_ { $$ = std::make_shared<IdentFactor>($1); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.factor_ = $$; }
  | _STRING_ { $$ = std::make_shared<StringFactor>($1); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.factor_ = $$; }
;
ConfigType : _KW_BITS { $$ = std::make_shared<BitsConfig>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.configtype_ = $$; }
  | _KW_INSTRSET { $$ = std::make_shared<InstConfig>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.configtype_ = $$; }
  | _KW_OPTIMIZE { $$ = std::make_shared<OptiConfig>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.configtype_ = $$; }
  | _KW_FORMAT { $$ = std::make_shared<FormConfig>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.configtype_ = $$; }
  | _KW_PADDING { $$ = std::make_shared<PaddConfig>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.configtype_ = $$; }
  | _KW_PADSET { $$ = std::make_shared<PadsConfig>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.configtype_ = $$; }
  | _KW_SECTION { $$ = std::make_shared<SectConfig>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.configtype_ = $$; }
  | _KW_ABSOLUTE { $$ = std::make_shared<AbsoConfig>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.configtype_ = $$; }
  | _KW_FILE { $$ = std::make_shared<FileConfig>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.configtype_ = $$; }
;
DataType : _KW_BYTE { $$ = std::make_shared<ByteDataType>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.datatype_ = $$; }
  | _KW_WORD { $$ = std::make_shared<WordDataType>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.datatype_ = $$; }
  | _KW_DWORD { $$ = std::make_shared<DwordDataType>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.datatype_ = $$; }
;
Opcode : _KW_AAA { $$ = std::make_shared<OpcodesAAA>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_AAD { $$ = std::make_shared<OpcodesAAD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_AAS { $$ = std::make_shared<OpcodesAAS>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_AAM { $$ = std::make_shared<OpcodesAAM>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_ADC { $$ = std::make_shared<OpcodesADC>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_ADD { $$ = std::make_shared<OpcodesADD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_AND { $$ = std::make_shared<OpcodesAND>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_ALIGN { $$ = std::make_shared<OpcodesALIGN>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_ALIGNB { $$ = std::make_shared<OpcodesALIGNB>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_ARPL { $$ = std::make_shared<OpcodesARPL>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_BOUND { $$ = std::make_shared<OpcodesBOUND>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_BSF { $$ = std::make_shared<OpcodesBSF>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_BSR { $$ = std::make_shared<OpcodesBSR>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_BSWAP { $$ = std::make_shared<OpcodesBSWAP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_BT { $$ = std::make_shared<OpcodesBT>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_BTC { $$ = std::make_shared<OpcodesBTC>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_BTR { $$ = std::make_shared<OpcodesBTR>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_BTS { $$ = std::make_shared<OpcodesBTS>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_CALL { $$ = std::make_shared<OpcodesCALL>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_CBW { $$ = std::make_shared<OpcodesCBW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_CDQ { $$ = std::make_shared<OpcodesCDQ>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_CLC { $$ = std::make_shared<OpcodesCLC>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_CLD { $$ = std::make_shared<OpcodesCLD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_CLI { $$ = std::make_shared<OpcodesCLI>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_CLTS { $$ = std::make_shared<OpcodesCLTS>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_CMC { $$ = std::make_shared<OpcodesCMC>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_CMP { $$ = std::make_shared<OpcodesCMP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_CMPSB { $$ = std::make_shared<OpcodesCMPSB>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_CMPSD { $$ = std::make_shared<OpcodesCMPSD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_CMPSW { $$ = std::make_shared<OpcodesCMPSW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_CMPXCHG { $$ = std::make_shared<OpcodesCMPXCHG>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_CPUID { $$ = std::make_shared<OpcodesCPUID>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_CWD { $$ = std::make_shared<OpcodesCWD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_CWDE { $$ = std::make_shared<OpcodesCWDE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_DAA { $$ = std::make_shared<OpcodesDAA>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_DAS { $$ = std::make_shared<OpcodesDAS>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_DB { $$ = std::make_shared<OpcodesDB>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_DD { $$ = std::make_shared<OpcodesDD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_DEC { $$ = std::make_shared<OpcodesDEC>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_DIV { $$ = std::make_shared<OpcodesDIV>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_DQ { $$ = std::make_shared<OpcodesDQ>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_DT { $$ = std::make_shared<OpcodesDT>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_DW { $$ = std::make_shared<OpcodesDW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_END { $$ = std::make_shared<OpcodesEND>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_ENTER { $$ = std::make_shared<OpcodesENTER>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_EXTERN { $$ = std::make_shared<OpcodesEXTERN>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_F2XM1 { $$ = std::make_shared<OpcodesF2XM1>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FABS { $$ = std::make_shared<OpcodesFABS>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FADD { $$ = std::make_shared<OpcodesFADD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FADDP { $$ = std::make_shared<OpcodesFADDP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FBLD { $$ = std::make_shared<OpcodesFBLD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FBSTP { $$ = std::make_shared<OpcodesFBSTP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FCHS { $$ = std::make_shared<OpcodesFCHS>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FCLEX { $$ = std::make_shared<OpcodesFCLEX>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FCOM { $$ = std::make_shared<OpcodesFCOM>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FCOMP { $$ = std::make_shared<OpcodesFCOMP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FCOMPP { $$ = std::make_shared<OpcodesFCOMPP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FCOS { $$ = std::make_shared<OpcodesFCOS>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FDECSTP { $$ = std::make_shared<OpcodesFDECSTP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FDISI { $$ = std::make_shared<OpcodesFDISI>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FDIV { $$ = std::make_shared<OpcodesFDIV>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FDIVP { $$ = std::make_shared<OpcodesFDIVP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FDIVR { $$ = std::make_shared<OpcodesFDIVR>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FDIVRP { $$ = std::make_shared<OpcodesFDIVRP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FENI { $$ = std::make_shared<OpcodesFENI>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FFREE { $$ = std::make_shared<OpcodesFFREE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FIADD { $$ = std::make_shared<OpcodesFIADD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FICOM { $$ = std::make_shared<OpcodesFICOM>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FICOMP { $$ = std::make_shared<OpcodesFICOMP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FIDIV { $$ = std::make_shared<OpcodesFIDIV>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FIDIVR { $$ = std::make_shared<OpcodesFIDIVR>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FILD { $$ = std::make_shared<OpcodesFILD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FIMUL { $$ = std::make_shared<OpcodesFIMUL>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FINCSTP { $$ = std::make_shared<OpcodesFINCSTP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FINIT { $$ = std::make_shared<OpcodesFINIT>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FIST { $$ = std::make_shared<OpcodesFIST>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FISTP { $$ = std::make_shared<OpcodesFISTP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FISUB { $$ = std::make_shared<OpcodesFISUB>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FISUBR { $$ = std::make_shared<OpcodesFISUBR>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FLD { $$ = std::make_shared<OpcodesFLD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FLD1 { $$ = std::make_shared<OpcodesFLD1>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FLDCW { $$ = std::make_shared<OpcodesFLDCW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FLDENV { $$ = std::make_shared<OpcodesFLDENV>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FLDL2E { $$ = std::make_shared<OpcodesFLDL2E>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FLDL2T { $$ = std::make_shared<OpcodesFLDL2T>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FLDLG2 { $$ = std::make_shared<OpcodesFLDLG2>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FLDLN2 { $$ = std::make_shared<OpcodesFLDLN2>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FLDPI { $$ = std::make_shared<OpcodesFLDPI>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FLDZ { $$ = std::make_shared<OpcodesFLDZ>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FMUL { $$ = std::make_shared<OpcodesFMUL>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FMULP { $$ = std::make_shared<OpcodesFMULP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FNCLEX { $$ = std::make_shared<OpcodesFNCLEX>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FNDISI { $$ = std::make_shared<OpcodesFNDISI>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FNENI { $$ = std::make_shared<OpcodesFNENI>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FNINIT { $$ = std::make_shared<OpcodesFNINIT>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FNOP { $$ = std::make_shared<OpcodesFNOP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FNSAVE { $$ = std::make_shared<OpcodesFNSAVE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FNSTCW { $$ = std::make_shared<OpcodesFNSTCW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FNSTENV { $$ = std::make_shared<OpcodesFNSTENV>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FNSTSW { $$ = std::make_shared<OpcodesFNSTSW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FPATAN { $$ = std::make_shared<OpcodesFPATAN>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FPTAN { $$ = std::make_shared<OpcodesFPTAN>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FPREM { $$ = std::make_shared<OpcodesFPREM>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FPREM1 { $$ = std::make_shared<OpcodesFPREM1>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FRNDINT { $$ = std::make_shared<OpcodesFRNDINT>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FRSTOR { $$ = std::make_shared<OpcodesFRSTOR>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FSAVE { $$ = std::make_shared<OpcodesFSAVE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FSCALE { $$ = std::make_shared<OpcodesFSCALE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FSETPM { $$ = std::make_shared<OpcodesFSETPM>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FSIN { $$ = std::make_shared<OpcodesFSIN>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FSINCOS { $$ = std::make_shared<OpcodesFSINCOS>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FSQRT { $$ = std::make_shared<OpcodesFSQRT>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FST { $$ = std::make_shared<OpcodesFST>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FSTCW { $$ = std::make_shared<OpcodesFSTCW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FSTENV { $$ = std::make_shared<OpcodesFSTENV>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FSTP { $$ = std::make_shared<OpcodesFSTP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FSTSW { $$ = std::make_shared<OpcodesFSTSW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FSUB { $$ = std::make_shared<OpcodesFSUB>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FSUBP { $$ = std::make_shared<OpcodesFSUBP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FSUBR { $$ = std::make_shared<OpcodesFSUBR>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FSUBRP { $$ = std::make_shared<OpcodesFSUBRP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FTST { $$ = std::make_shared<OpcodesFTST>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FUCOM { $$ = std::make_shared<OpcodesFUCOM>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FUCOMP { $$ = std::make_shared<OpcodesFUCOMP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FUCOMPP { $$ = std::make_shared<OpcodesFUCOMPP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FXAM { $$ = std::make_shared<OpcodesFXAM>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FXCH { $$ = std::make_shared<OpcodesFXCH>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FXTRACT { $$ = std::make_shared<OpcodesFXTRACT>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FYL2X { $$ = std::make_shared<OpcodesFYL2X>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_FYL2XP1 { $$ = std::make_shared<OpcodesFYL2XP1>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_HLT { $$ = std::make_shared<OpcodesHLT>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_IDIV { $$ = std::make_shared<OpcodesIDIV>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_IMUL { $$ = std::make_shared<OpcodesIMUL>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_IN { $$ = std::make_shared<OpcodesIN>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_INC { $$ = std::make_shared<OpcodesINC>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_INCO { $$ = std::make_shared<OpcodesINCO>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_INSB { $$ = std::make_shared<OpcodesINSB>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_INSD { $$ = std::make_shared<OpcodesINSD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_INSW { $$ = std::make_shared<OpcodesINSW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_INT { $$ = std::make_shared<OpcodesINT>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_INT3 { $$ = std::make_shared<OpcodesINT3>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_INTO { $$ = std::make_shared<OpcodesINTO>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_INVD { $$ = std::make_shared<OpcodesINVD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_INVLPG { $$ = std::make_shared<OpcodesINVLPG>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_IRET { $$ = std::make_shared<OpcodesIRET>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_IRETD { $$ = std::make_shared<OpcodesIRETD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_IRETW { $$ = std::make_shared<OpcodesIRETW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JA { $$ = std::make_shared<OpcodesJA>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JAE { $$ = std::make_shared<OpcodesJAE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JB { $$ = std::make_shared<OpcodesJB>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JBE { $$ = std::make_shared<OpcodesJBE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JC { $$ = std::make_shared<OpcodesJC>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JCXZ { $$ = std::make_shared<OpcodesJCXZ>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JE { $$ = std::make_shared<OpcodesJE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JECXZ { $$ = std::make_shared<OpcodesJECXZ>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JG { $$ = std::make_shared<OpcodesJG>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JGE { $$ = std::make_shared<OpcodesJGE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JL { $$ = std::make_shared<OpcodesJL>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JLE { $$ = std::make_shared<OpcodesJLE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JMP { $$ = std::make_shared<OpcodesJMP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JNA { $$ = std::make_shared<OpcodesJNA>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JNAE { $$ = std::make_shared<OpcodesJNAE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JNB { $$ = std::make_shared<OpcodesJNB>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JNBE { $$ = std::make_shared<OpcodesJNBE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JNC { $$ = std::make_shared<OpcodesJNC>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JNE { $$ = std::make_shared<OpcodesJNE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JNG { $$ = std::make_shared<OpcodesJNG>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JNGE { $$ = std::make_shared<OpcodesJNGE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JNL { $$ = std::make_shared<OpcodesJNL>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JNLE { $$ = std::make_shared<OpcodesJNLE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JNO { $$ = std::make_shared<OpcodesJNO>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JNP { $$ = std::make_shared<OpcodesJNP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JNS { $$ = std::make_shared<OpcodesJNS>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JNZ { $$ = std::make_shared<OpcodesJNZ>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JO { $$ = std::make_shared<OpcodesJO>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JP { $$ = std::make_shared<OpcodesJP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JPE { $$ = std::make_shared<OpcodesJPE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JPO { $$ = std::make_shared<OpcodesJPO>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JS { $$ = std::make_shared<OpcodesJS>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_JZ { $$ = std::make_shared<OpcodesJZ>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LAHF { $$ = std::make_shared<OpcodesLAHF>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LAR { $$ = std::make_shared<OpcodesLAR>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LDS { $$ = std::make_shared<OpcodesLDS>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LEA { $$ = std::make_shared<OpcodesLEA>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LEAVE { $$ = std::make_shared<OpcodesLEAVE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LES { $$ = std::make_shared<OpcodesLES>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LFS { $$ = std::make_shared<OpcodesLFS>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LGDT { $$ = std::make_shared<OpcodesLGDT>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LGS { $$ = std::make_shared<OpcodesLGS>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LIDT { $$ = std::make_shared<OpcodesLIDT>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LLDT { $$ = std::make_shared<OpcodesLLDT>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LMSW { $$ = std::make_shared<OpcodesLMSW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LOCK { $$ = std::make_shared<OpcodesLOCK>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LODSB { $$ = std::make_shared<OpcodesLODSB>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LODSD { $$ = std::make_shared<OpcodesLODSD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LODSW { $$ = std::make_shared<OpcodesLODSW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LOOP { $$ = std::make_shared<OpcodesLOOP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LOOPE { $$ = std::make_shared<OpcodesLOOPE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LOOPNE { $$ = std::make_shared<OpcodesLOOPNE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LOOPNZ { $$ = std::make_shared<OpcodesLOOPNZ>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LOOPZ { $$ = std::make_shared<OpcodesLOOPZ>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LSL { $$ = std::make_shared<OpcodesLSL>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LSS { $$ = std::make_shared<OpcodesLSS>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_LTR { $$ = std::make_shared<OpcodesLTR>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_MOV { $$ = std::make_shared<OpcodesMOV>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_MOVSB { $$ = std::make_shared<OpcodesMOVSB>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_MOVSD { $$ = std::make_shared<OpcodesMOVSD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_MOVSW { $$ = std::make_shared<OpcodesMOVSW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_MOVSX { $$ = std::make_shared<OpcodesMOVSX>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_MOVZX { $$ = std::make_shared<OpcodesMOVZX>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_MUL { $$ = std::make_shared<OpcodesMUL>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_NEG { $$ = std::make_shared<OpcodesNEG>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_NOP { $$ = std::make_shared<OpcodesNOP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_NOT { $$ = std::make_shared<OpcodesNOT>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_OR { $$ = std::make_shared<OpcodesOR>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_ORG { $$ = std::make_shared<OpcodesORG>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_OUT { $$ = std::make_shared<OpcodesOUT>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_OUTSB { $$ = std::make_shared<OpcodesOUTSB>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_OUTSD { $$ = std::make_shared<OpcodesOUTSD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_OUTSW { $$ = std::make_shared<OpcodesOUTSW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_POP { $$ = std::make_shared<OpcodesPOP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_POPA { $$ = std::make_shared<OpcodesPOPA>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_POPAD { $$ = std::make_shared<OpcodesPOPAD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_POPAW { $$ = std::make_shared<OpcodesPOPAW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_POPF { $$ = std::make_shared<OpcodesPOPF>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_POPFD { $$ = std::make_shared<OpcodesPOPFD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_POPFW { $$ = std::make_shared<OpcodesPOPFW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_PUSH { $$ = std::make_shared<OpcodesPUSH>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_PUSHA { $$ = std::make_shared<OpcodesPUSHA>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_PUSHD { $$ = std::make_shared<OpcodesPUSHD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_PUSHAD { $$ = std::make_shared<OpcodesPUSHAD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_PUSHAW { $$ = std::make_shared<OpcodesPUSHAW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_PUSHF { $$ = std::make_shared<OpcodesPUSHF>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_PUSHFD { $$ = std::make_shared<OpcodesPUSHFD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_PUSHFW { $$ = std::make_shared<OpcodesPUSHFW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_RCL { $$ = std::make_shared<OpcodesRCL>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_RCR { $$ = std::make_shared<OpcodesRCR>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_RDMSR { $$ = std::make_shared<OpcodesRDMSR>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_RDPMC { $$ = std::make_shared<OpcodesRDPMC>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_REP { $$ = std::make_shared<OpcodesREP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_REPE { $$ = std::make_shared<OpcodesREPE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_REPNE { $$ = std::make_shared<OpcodesREPNE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_REPNZ { $$ = std::make_shared<OpcodesREPNZ>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_REPZ { $$ = std::make_shared<OpcodesREPZ>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_RESB { $$ = std::make_shared<OpcodesRESB>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_RESD { $$ = std::make_shared<OpcodesRESD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_RESQ { $$ = std::make_shared<OpcodesRESQ>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_REST { $$ = std::make_shared<OpcodesREST>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_RESW { $$ = std::make_shared<OpcodesRESW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_RET { $$ = std::make_shared<OpcodesRET>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_RETF { $$ = std::make_shared<OpcodesRETF>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_RETN { $$ = std::make_shared<OpcodesRETN>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_ROL { $$ = std::make_shared<OpcodesROL>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_ROR { $$ = std::make_shared<OpcodesROR>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_RSM { $$ = std::make_shared<OpcodesRSM>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SAHF { $$ = std::make_shared<OpcodesSAHF>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SAL { $$ = std::make_shared<OpcodesSAL>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SAR { $$ = std::make_shared<OpcodesSAR>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SBB { $$ = std::make_shared<OpcodesSBB>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SCASB { $$ = std::make_shared<OpcodesSCASB>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SCASD { $$ = std::make_shared<OpcodesSCASD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SCASW { $$ = std::make_shared<OpcodesSCASW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETA { $$ = std::make_shared<OpcodesSETA>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETAE { $$ = std::make_shared<OpcodesSETAE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETB { $$ = std::make_shared<OpcodesSETB>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETBE { $$ = std::make_shared<OpcodesSETBE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETC { $$ = std::make_shared<OpcodesSETC>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETE { $$ = std::make_shared<OpcodesSETE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETG { $$ = std::make_shared<OpcodesSETG>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETGE { $$ = std::make_shared<OpcodesSETGE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETL { $$ = std::make_shared<OpcodesSETL>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETLE { $$ = std::make_shared<OpcodesSETLE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETNA { $$ = std::make_shared<OpcodesSETNA>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETNAE { $$ = std::make_shared<OpcodesSETNAE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETNB { $$ = std::make_shared<OpcodesSETNB>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETNBE { $$ = std::make_shared<OpcodesSETNBE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETNC { $$ = std::make_shared<OpcodesSETNC>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETNE { $$ = std::make_shared<OpcodesSETNE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETNG { $$ = std::make_shared<OpcodesSETNG>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETNGE { $$ = std::make_shared<OpcodesSETNGE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETNL { $$ = std::make_shared<OpcodesSETNL>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETNLE { $$ = std::make_shared<OpcodesSETNLE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETNO { $$ = std::make_shared<OpcodesSETNO>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETNP { $$ = std::make_shared<OpcodesSETNP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETNS { $$ = std::make_shared<OpcodesSETNS>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETNZ { $$ = std::make_shared<OpcodesSETNZ>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETO { $$ = std::make_shared<OpcodesSETO>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETP { $$ = std::make_shared<OpcodesSETP>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETPE { $$ = std::make_shared<OpcodesSETPE>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETPO { $$ = std::make_shared<OpcodesSETPO>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETS { $$ = std::make_shared<OpcodesSETS>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SETZ { $$ = std::make_shared<OpcodesSETZ>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SGDT { $$ = std::make_shared<OpcodesSGDT>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SHL { $$ = std::make_shared<OpcodesSHL>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SHLD { $$ = std::make_shared<OpcodesSHLD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SHR { $$ = std::make_shared<OpcodesSHR>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SHRD { $$ = std::make_shared<OpcodesSHRD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SIDT { $$ = std::make_shared<OpcodesSIDT>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SLDT { $$ = std::make_shared<OpcodesSLDT>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SMSW { $$ = std::make_shared<OpcodesSMSW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_STC { $$ = std::make_shared<OpcodesSTC>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_STD { $$ = std::make_shared<OpcodesSTD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_STI { $$ = std::make_shared<OpcodesSTI>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_STOSB { $$ = std::make_shared<OpcodesSTOSB>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_STOSD { $$ = std::make_shared<OpcodesSTOSD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_STOSW { $$ = std::make_shared<OpcodesSTOSW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_STR { $$ = std::make_shared<OpcodesSTR>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_SUB { $$ = std::make_shared<OpcodesSUB>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_TEST { $$ = std::make_shared<OpcodesTEST>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_TIMES { $$ = std::make_shared<OpcodesTIMES>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_UD2 { $$ = std::make_shared<OpcodesUD2>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_VERR { $$ = std::make_shared<OpcodesVERR>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_VERW { $$ = std::make_shared<OpcodesVERW>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_WAIT { $$ = std::make_shared<OpcodesWAIT>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_WBINVD { $$ = std::make_shared<OpcodesWBINVD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_WRMSR { $$ = std::make_shared<OpcodesWRMSR>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_XADD { $$ = std::make_shared<OpcodesXADD>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_XCHG { $$ = std::make_shared<OpcodesXCHG>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_XLATB { $$ = std::make_shared<OpcodesXLATB>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
  | _KW_XOR { $$ = std::make_shared<OpcodesXOR>(); $$->line_number = @$.begin.line; $$->char_number = @$.begin.column; driver.opcode_ = $$; }
;

%%


void nask_::NaskParser::error(const nask_::NaskParser::location_type& l, const std::string& m)
{
    driver.error(*scanner.loc, m);
}


