#line 2 "lexer.cc"

#line 4 "lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define nask__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer nask__create_buffer
#endif

#ifdef yy_delete_buffer
#define nask__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer nask__delete_buffer
#endif

#ifdef yy_scan_buffer
#define nask__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer nask__scan_buffer
#endif

#ifdef yy_scan_string
#define nask__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string nask__scan_string
#endif

#ifdef yy_scan_bytes
#define nask__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes nask__scan_bytes
#endif

#ifdef yy_init_buffer
#define nask__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer nask__init_buffer
#endif

#ifdef yy_flush_buffer
#define nask__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer nask__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define nask__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state nask__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define nask__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer nask__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define nask_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state nask_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define nask_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state nask_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define nask_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack nask_ensure_buffer_stack
#endif

#ifdef yylex
#define nask_lex_ALREADY_DEFINED
#else
#define yylex nask_lex
#endif

#ifdef yyrestart
#define nask_restart_ALREADY_DEFINED
#else
#define yyrestart nask_restart
#endif

#ifdef yylex_init
#define nask_lex_init_ALREADY_DEFINED
#else
#define yylex_init nask_lex_init
#endif

#ifdef yylex_init_extra
#define nask_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra nask_lex_init_extra
#endif

#ifdef yylex_destroy
#define nask_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy nask_lex_destroy
#endif

#ifdef yyget_debug
#define nask_get_debug_ALREADY_DEFINED
#else
#define yyget_debug nask_get_debug
#endif

#ifdef yyset_debug
#define nask_set_debug_ALREADY_DEFINED
#else
#define yyset_debug nask_set_debug
#endif

#ifdef yyget_extra
#define nask_get_extra_ALREADY_DEFINED
#else
#define yyget_extra nask_get_extra
#endif

#ifdef yyset_extra
#define nask_set_extra_ALREADY_DEFINED
#else
#define yyset_extra nask_set_extra
#endif

#ifdef yyget_in
#define nask_get_in_ALREADY_DEFINED
#else
#define yyget_in nask_get_in
#endif

#ifdef yyset_in
#define nask_set_in_ALREADY_DEFINED
#else
#define yyset_in nask_set_in
#endif

#ifdef yyget_out
#define nask_get_out_ALREADY_DEFINED
#else
#define yyget_out nask_get_out
#endif

#ifdef yyset_out
#define nask_set_out_ALREADY_DEFINED
#else
#define yyset_out nask_set_out
#endif

#ifdef yyget_leng
#define nask_get_leng_ALREADY_DEFINED
#else
#define yyget_leng nask_get_leng
#endif

#ifdef yyget_text
#define nask_get_text_ALREADY_DEFINED
#else
#define yyget_text nask_get_text
#endif

#ifdef yyget_lineno
#define nask_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno nask_get_lineno
#endif

#ifdef yyset_lineno
#define nask_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno nask_set_lineno
#endif

#ifdef yyget_column
#define nask_get_column_ALREADY_DEFINED
#else
#define yyget_column nask_get_column
#endif

#ifdef yyset_column
#define nask_set_column_ALREADY_DEFINED
#else
#define yyset_column nask_set_column
#endif

#ifdef yywrap
#define nask_wrap_ALREADY_DEFINED
#else
#define yywrap nask_wrap
#endif

#ifdef yyget_lval
#define nask_get_lval_ALREADY_DEFINED
#else
#define yyget_lval nask_get_lval
#endif

#ifdef yyset_lval
#define nask_set_lval_ALREADY_DEFINED
#else
#define yyset_lval nask_set_lval
#endif

#ifdef yyget_lloc
#define nask_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc nask_get_lloc
#endif

#ifdef yyset_lloc
#define nask_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc nask_set_lloc
#endif

#ifdef yyalloc
#define nask_alloc_ALREADY_DEFINED
#else
#define yyalloc nask_alloc
#endif

#ifdef yyrealloc
#define nask_realloc_ALREADY_DEFINED
#else
#define yyrealloc nask_realloc
#endif

#ifdef yyfree
#define nask_free_ALREADY_DEFINED
#else
#define yyfree nask_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define nask_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 370
#define YY_END_OF_BUFFER 371
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[735] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  371,  369,  368,  368,
      369,  357,  349,   14,   12,   10,    3,   11,   13,  366,
      366,   15,  352,    6,  369,    7,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,    1,    2,
      369,  370,  360,  359,  358,  365,  362,  363,  361,  364,
      351,  350,  354,  353,    5,  366,    0,    8,    4,    9,
      367,  367,  356,  367,  367,  367,  367,  367,  367,  367,
      367,  367,   32,  367,  367,  367,  367,  367,  367,  367,

      367,  367,   55,   56,  367,  367,   59,   60,   61,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  156,  367,  171,  173,  175,  177,
      179,  181,  367,  367,  198,  199,  202,  203,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  239,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,    0,  355,   16,

       17,   18,   19,  367,   21,   22,  367,   25,  367,  367,
      367,   29,   30,  367,   33,   34,   35,  367,  367,   38,
       39,   40,   41,   42,  367,   44,   45,  367,   51,   53,
       54,   57,   58,  367,   63,  367,   65,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  101,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  135,  367,  367,  367,
      367,  367,  367,  367,  153,  367,  367,  157,  367,  163,
      367,  367,  172,  174,  367,  367,  180,  182,  183,  184,

      186,  188,  189,  190,  192,  194,  195,  196,  197,  200,
      201,  367,  205,  206,  207,  209,  210,  367,  212,  367,
      367,  367,  367,  367,  367,  225,  226,  227,  228,  234,
      235,  236,  237,  367,  240,  241,  367,  247,  367,  262,
      263,  367,  367,  266,  367,  276,  279,  280,  281,  367,
      283,  284,  285,  367,  367,  367,  367,  321,  323,  367,
      367,  367,  328,  329,  330,  367,  334,  335,  367,  367,
      338,  367,  367,  367,  367,  367,  367,  367,  367,  348,
      355,  355,  367,  367,   26,   27,  367,  367,   36,   37,
       43,  367,  367,  367,   52,  367,  367,  367,  367,   68,

       69,   71,  367,   73,  367,   75,   78,  367,  367,   81,
       85,  367,  367,  367,  367,   92,   93,  367,  367,  367,
       97,  367,  102,  367,  367,  367,  367,  110,  111,  367,
      367,  367,  367,  117,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  132,  367,  367,  367,  138,
      367,  140,  144,  367,  148,  149,  367,  367,  154,  155,
      158,  159,  160,  367,  162,  164,  165,  166,  367,  168,
      176,  367,  185,  187,  191,  193,  204,  367,  211,  213,
      214,  215,  216,  367,  220,  367,  367,  367,  367,  367,
      367,  248,  251,  254,  367,  367,  267,  367,  270,  271,

      272,  273,  274,  275,  277,  278,  282,  367,  367,  290,
      292,  294,  295,  296,  298,  367,  314,  315,  318,  319,
      320,  322,  324,  325,  326,  327,  367,  336,  367,  339,
      340,  341,  367,  343,  367,  345,  346,  367,  367,   23,
       28,   31,   46,   47,   48,  367,   50,   62,   64,  367,
       67,   70,   72,   74,   76,  367,   80,   82,   83,   86,
       87,   88,   90,   94,  367,   96,   98,   99,  103,  367,
      367,  367,  367,  109,  112,  367,  367,  115,  367,  367,
      367,  367,  367,  367,  367,  124,  126,  367,  367,  129,
      367,  367,  367,  134,  136,  367,  139,  141,  142,  145,

      367,  151,  367,  367,  169,  170,  178,  208,  217,  218,
      219,  221,  367,  224,  229,  230,  231,  232,  233,  367,
      242,  243,  244,  367,  367,  249,  250,  252,  253,  255,
      258,  259,  264,  265,  268,  269,  286,  287,  288,  367,
      291,  293,  297,  299,  300,  302,  304,  305,  306,  308,
      310,  311,  312,  313,  316,  317,  331,  332,  333,  337,
      367,  344,  347,  367,   24,  367,   66,   77,  367,   84,
       89,   91,  367,  100,  104,  105,  106,  107,  108,  113,
      114,  116,  118,  119,  367,  121,  122,  123,  125,  367,
      128,  130,  131,  367,  137,  143,  146,  367,  367,  367,

      167,  222,  223,  367,  367,  246,  256,  257,  260,  261,
      367,  301,  303,  307,  309,  342,  367,   49,   79,   95,
      120,  127,  133,  147,  150,  152,  367,  367,  245,  289,
       20,  161,  238,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    1,    9,    1,
        1,   10,   11,   12,   13,    1,   14,   15,   16,   17,
       18,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    1,    1,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,    1,   54,    1,   55,   56,   57,   58,

       59,   60,   61,   61,   61,   61,   61,   61,   61,   62,
       61,   61,   61,   61,   61,   63,   61,   61,   61,   64,
       61,   61,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[65] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    1,
        1,    1,    1,    1,    3,    3,    3,    3,    3,    4,
        1,    1,    1,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3
    } ;

static const flex_int16_t yy_base[743] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   62,   63,
       66,   69,  245,  215,  206,  200,  194, 2388, 2388, 2388,
      151, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388,   60,
       65, 2388, 2388,  147,  145,  116,   81,  102,  124,  163,
      117,  194,   76,   77,  139,  235,  277,  118,  127,  133,
      160,  173,  313,   83,   82,  177,  226,  220, 2388, 2388,
       75, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388,
     2388, 2388, 2388, 2388, 2388,  264,  344, 2388, 2388, 2388,
        0,   78, 2388,  275,  170,  249,  175,  134,   80,  205,
       85,  281,  310,  206,  279,  278,   84,  378,  327,  208,

      315,  284,   79,  178,  355,  346,  356,  359,  368,  369,
      371,  374,  375,  399,  400,  401,  406,  376,  408,  421,
      425,  422,  442,  435,  454,  445,  464,  452,  467,  490,
      483,  481,  491,  493,  503,  498,  511,  512,  513,  517,
      519,  533,  534,  566,  536,  543,  546,  548,  556,  551,
      558,  560,  561,  587,  590,  570,  599,  603,  591,  605,
      608,  611,  612,  615,  627,  620,  621,  625,  628,  634,
      641,  646,  659,  654,  660,  668,  673,  688,  690,  664,
      694,  696,  700,  703,  708,  717,  718,  724,  720,  726,
      730,  738,  744,  745,  747,  752,  748,   53,  127,  564,

      663,  762,  765,  766,  767,  769,  775,  774,  779,  782,
      783,  784,  787,  788,  789,  791,  792,  807,  808,  809,
      810,  811,  813,  814,  815,  817,  823,  829,  830,  831,
      832,  833,  836,  837,  845,  852,  854,  855,  858,  860,
      868,  873,  867,  874,  877,  882,  880,  889,  890,  895,
      909,  907,  911,  913,  919,  925,  927,  934,  929,  931,
      946,  939,  948,  953,  960,  969,  967,  972,  974,  982,
      987,  988,  989,  996, 1003, 1004, 1008, 1006, 1009, 1010,
     1013, 1027, 1018, 1035, 1034, 1036, 1048, 1049, 1052, 1053,
     1055, 1054, 1056, 1057, 1061, 1070, 1077, 1080, 1084, 1085,

     1086, 1092, 1093, 1099, 1100, 1101, 1107, 1113, 1114, 1115,
     1116, 1117, 1121, 1122, 1123, 1129, 1130, 1131, 1135, 1136,
     1137, 1139, 1143, 1144, 1145, 1151, 1152, 1153, 1157, 1159,
     1173, 1174, 1175, 1179, 1181, 1182, 1183, 1188, 1189, 1195,
     1196, 1197, 1210, 1213, 1211, 1215, 1214, 1218, 1223, 1237,
     1239, 1240, 1241, 1245, 1253, 1273, 1257, 1255, 1259, 1261,
     1262, 1260, 1265, 1269, 1275, 1283, 1299, 1301, 1305, 1308,
     1309, 1311, 1313, 1318, 1315, 1321, 1327, 1330, 1325, 1331,
     2388,   63, 1339, 1343, 1345, 1351, 1357, 1353, 1358, 1359,
     1363, 1371, 1367, 1375, 1380, 1381, 1387, 1393, 1395, 1396,

     1397, 1399, 1401, 1403, 1405, 1411, 1413, 1418, 1419, 1423,
     1425, 1427, 1439, 1435, 1437, 1440, 1449, 1453, 1455, 1457,
     1459, 1461, 1462, 1465, 1471, 1475, 1477, 1484, 1485, 1487,
     1491, 1494, 1499, 1506, 1508, 1509, 1515, 1521, 1511, 1513,
     1530, 1533, 1535, 1538, 1536, 1540, 1548, 1550, 1553, 1557,
     1560, 1562, 1566, 1569, 1570, 1574, 1575, 1576, 1578, 1579,
     1592, 1594, 1596, 1599, 1600, 1601, 1602, 1606, 1608, 1609,
     1614, 1616, 1618, 1622, 1623, 1624, 1626, 1630, 1631, 1638,
     1640, 1643, 1644, 1645, 1648, 1652, 1661, 1665, 1667, 1670,
     1687, 1685, 1692, 1697, 1688, 1701, 1695, 1709, 1714, 1715,

     1717, 1722, 1724, 1727, 1731, 1732, 1734, 1736, 1737, 1740,
     1746, 1741, 1754, 1756, 1758, 1763, 1759, 1762, 1764, 1777,
     1784, 1787, 1789, 1791, 1796, 1799, 1801, 1803, 1806, 1805,
     1808, 1811, 1813, 1815, 1821, 1823, 1825, 1827, 1830, 1831,
     1835, 1845, 1847, 1849, 1851, 1852, 1853, 1857, 1859, 1861,
     1865, 1867, 1869, 1871, 1873, 1874, 1877, 1881, 1883, 1886,
     1887, 1889, 1891, 1895, 1896, 1899, 1901, 1905, 1908, 1911,
     1915, 1917, 1921, 1923, 1930, 1933, 1936, 1940, 1942, 1943,
     1945, 1946, 1955, 1959, 1958, 1967, 1962, 1968, 1965, 1971,
     1980, 1981, 1984, 1985, 1988, 1990, 2002, 2004, 2005, 2006,

     2007, 2008, 2010, 2011, 2012, 2020, 2024, 2029, 2030, 2032,
     2034, 2038, 2042, 2046, 2047, 2048, 2050, 2052, 2054, 2055,
     2056, 2060, 2064, 2069, 2070, 2073, 2074, 2076, 2077, 2078,
     2082, 2090, 2091, 2092, 2095, 2096, 2099, 2100, 2104, 2108,
     2112, 2113, 2114, 2118, 2120, 2121, 2122, 2126, 2134, 2135,
     2136, 2139, 2142, 2148, 2149, 2151, 2152, 2156, 2157, 2158,
     2161, 2164, 2165, 2166, 2170, 2171, 2173, 2174, 2178, 2179,
     2183, 2186, 2187, 2188, 2191, 2192, 2195, 2196, 2200, 2204,
     2205, 2208, 2210, 2212, 2213, 2214, 2217, 2220, 2222, 2226,
     2227, 2229, 2230, 2232, 2234, 2235, 2236, 2242, 2244, 2248,

     2249, 2252, 2254, 2258, 2262, 2264, 2270, 2271, 2272, 2274,
     2276, 2278, 2279, 2280, 2286, 2292, 2293, 2295, 2296, 2298,
     2300, 2301, 2308, 2310, 2314, 2315, 2316, 2317, 2318, 2320,
     2322, 2323, 2324, 2388, 2360, 2364, 2368, 2372, 2376, 2379,
     2381, 2384
    } ;

static const flex_int16_t yy_def[743] =
    {   0,
      734,    1,  735,  735,  735,  735,  735,  735,  736,  736,
      737,  737,  738,  738,  739,  739,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  740,  740,  740,  740,
      740,   39,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  734,  734,
      741,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      742,  740,  734,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  741,   77,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  144,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      734,  734,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  144,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,    0,  734,  734,  734,  734,  734,  734,
      734,  734
    } ;

static const flex_int16_t yy_nxt[2453] =
    {   0,
       18,   19,   20,   21,   22,   23,   18,   24,   18,   25,
       26,   27,   28,   29,   30,   31,   31,   31,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   43,   47,   48,   49,   50,   51,
       43,   52,   53,   54,   55,   56,   57,   58,   43,   43,
       59,   18,   60,   61,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   62,   62,   64,   64,   62,  381,
       67,   62,   83,   67,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   84,   85,   77,   86,  188,
       81,  186,  132,   65,   65,  187,   87,   68,   88,  209,
       68,   83,   89,   77,  221,   81,   81,   69,   70,  211,
       69,   70,   81,  381,   90,   81,   83,   83,   80,  382,
       91,   81,   81,   83,   92,   93,   83,   81,   95,   96,
       94,   97,   83,   83,  110,  162,  160,  111,   83,   98,
       99,  208,  161,  100,  112,  163,  133,   79,   81,   78,
      101,   81,  164,   75,  165,  134,  135,  166,   81,   83,
      136,   81,   83,   81,  167,   81,   81,  102,  103,   83,
      104,  105,   83,  734,   83,  106,   83,   83,  168,  170,

      171,  172,   74,  107,  169,  189,  108,  207,   74,  109,
      113,  173,  204,   81,   81,  174,   81,   72,  114,  115,
      116,  117,  118,  119,   83,   83,  120,   83,   81,  121,
      122,  123,  124,  125,   81,  126,  127,  128,  129,   83,
       82,  130,  131,   81,  194,   83,  195,   72,  210,  218,
      190,  191,  228,  734,   83,  196,  734,   81,  197,  137,
      138,  139,  734,  140,  192,  141,  734,  193,   83,  734,
      142,  143,  144,  145,  146,  205,  206,  147,   76,   76,
       76,   76,   76,   81,  148,   81,   81,   81,  734,   81,
      734,  734,   81,  734,   83,  734,   83,   83,   83,  200,

       83,  149,  201,   83,  150,  151,  152,  153,  230,  154,
      212,  202,  155,  156,  219,  157,  734,  203,   81,  158,
      159,   81,  213,   81,  220,  734,  231,  214,  734,   83,
      734,  734,   83,  734,   83,   81,  215,  175,  176,  177,
      734,  178,  229,  179,  180,  181,   83,  734,  182,  183,
      734,  216,  217,  226,   81,  734,  184,  185,  199,  199,
      199,  199,  199,   81,   81,   83,  227,   81,  199,  199,
      199,  199,  199,  199,   83,   83,   81,   81,   83,   81,
      734,  232,   81,   81,   81,  734,   81,   83,   83,  734,
       83,  233,  734,   83,   83,   83,  235,   83,  199,  199,

      199,  199,  199,  199,  222,  223,  234,   81,   81,   81,
      224,  734,  236,  249,   81,  237,   81,  238,   83,   83,
       83,  225,  239,  734,  240,   83,  241,   83,  734,   81,
       81,  734,  244,   81,  247,  242,  245,  734,  248,  246,
       83,   83,  243,   81,   83,  251,  734,  252,  253,  250,
       81,  734,  258,   81,   83,  734,  254,  255,  256,  734,
       81,   83,   81,  257,   83,  734,  259,  734,  260,  261,
      262,   83,   81,   83,  263,   81,  266,  734,  267,  734,
      264,  734,  270,   83,  265,  734,   83,  271,  272,   81,
      273,   81,  274,  280,  279,  268,  275,  269,   81,   81,

       83,   81,   83,  734,  276,  734,   81,  277,  278,   83,
       83,   81,   83,  734,  281,  734,  282,   83,  284,   81,
       81,   81,   83,  286,  285,   81,  292,   81,  734,  288,
       83,   83,   83,  283,  734,  734,   83,  287,   83,  293,
      294,   81,   81,  296,   81,  289,  290,  297,  291,  734,
      734,   81,   83,   83,   81,   83,   81,  734,  734,   81,
      295,  298,   83,  734,   81,   83,   81,   83,   81,   81,
       83,  310,   81,  299,   81,   83,  734,   83,   81,   83,
       83,  311,  315,   83,  734,   83,  734,  312,  318,   83,
      300,  301,  302,  314,  303,   81,  304,  313,   81,   81,

      316,  305,  317,  319,  306,  307,   83,   81,  308,   83,
       83,   81,  322,   81,  320,  309,   81,  321,   83,   81,
       81,  734,   83,   81,   83,  323,  324,   83,   81,   81,
       83,   83,  328,   81,   83,   81,   81,  325,  326,   83,
       83,  331,   81,  330,   83,  327,   83,   83,  337,   81,
      329,  332,  734,   83,   81,  333,  734,  335,  334,  734,
       83,  734,   81,  336,  338,   83,  734,   81,   81,  340,
      339,   81,   81,   83,  734,  341,   81,  342,   83,   83,
      343,   81,   83,   83,  734,  344,  734,   83,  345,  346,
      349,  350,   83,  353,  347,  351,   81,  354,   81,  358,

      348,  352,   81,  734,   81,  359,  734,   83,   81,   83,
      734,   81,  734,   83,  355,   83,   81,  357,  734,   83,
      734,  360,   83,  361,  734,   81,   81,   83,   81,  363,
      364,  356,   81,  368,   81,  365,   83,   83,   81,   83,
      371,  366,  362,   83,  367,   83,   81,  734,  734,   83,
      734,  734,   81,   81,  370,   81,   81,   83,  373,  369,
       81,  372,  374,   83,   83,  734,   83,   83,  734,  734,
       81,   83,  377,   81,   81,   81,  379,   81,  378,  375,
      376,   83,   81,   81,   83,   83,   83,   81,   83,  380,
       81,   81,   81,   83,   83,   81,   81,   81,   83,   81,

       81,   83,   83,   83,  383,  384,   83,   83,   83,  734,
       83,   83,  388,  734,  385,   81,   81,   81,   81,   81,
      387,   81,   81,   81,  386,   81,   83,   83,   83,   83,
       83,   81,   83,   83,   83,  389,   83,   81,   81,   81,
       81,   81,   83,  390,   81,   81,  734,  734,   83,   83,
       83,   83,   83,   81,  734,   83,   83,  391,  395,  734,
       81,  394,   81,   81,   83,  392,   81,  734,   81,  734,
      393,   83,  734,   83,   83,   81,   81,   83,  396,   83,
      397,   81,   81,  398,  734,   81,   83,   83,   81,  734,
       81,  734,   83,   83,  399,  401,   83,   81,   81,   83,

      402,   83,  400,   81,  734,  405,  408,  734,   83,   83,
      403,  734,  734,  734,   83,   81,  404,   81,  406,   81,
      734,   81,  411,  412,  407,  734,   83,   81,   83,  734,
       83,  409,   83,   81,  410,   81,  413,   81,   83,   81,
      416,  417,   81,  415,   83,  414,   83,   81,   83,  423,
       83,  419,  734,   83,   81,  734,   81,  420,   83,  734,
      424,   81,  425,  418,  429,   83,  430,   83,   81,  426,
      421,  422,   83,  427,  734,   81,  432,   81,  431,   83,
       81,  734,   81,  428,  435,  433,   83,  734,   83,  734,
       81,   83,  434,   83,  734,   81,   81,   81,  440,  734,

      439,   83,  734,  436,   81,  437,   83,   83,   83,  441,
      438,   81,   81,  444,   81,   83,   81,   81,   81,  734,
      734,   81,   83,   83,  734,   83,   81,   83,   83,   83,
      442,  452,   83,  443,  448,   81,  449,   83,  734,  445,
      446,  734,   81,   81,   81,  447,   83,  450,  454,  455,
      451,  458,  453,   83,   83,   83,   81,   81,  456,  457,
       81,   81,   81,   81,   81,   81,  734,   83,   83,   81,
      466,   83,   83,   83,   83,   83,   83,  462,   81,  463,
       83,  459,  468,  460,  734,   81,  734,  461,   81,   83,
      469,  467,   81,   81,   81,  464,   83,  470,  465,   83,

       81,   81,  734,   83,   83,   83,  734,   81,   81,   81,
      471,   83,   83,  473,  474,   81,  734,  472,   83,   83,
       83,   81,   81,   81,   81,   81,   83,  475,  476,   81,
       81,   81,   83,   83,   83,   83,   83,   81,   81,   81,
       83,   83,   83,   81,   81,   81,  477,   81,   83,   83,
       83,   81,   81,   81,   83,   83,   83,  734,   83,   81,
       81,   81,   83,   83,   83,   81,  734,   81,  478,  734,
       83,   83,   83,  734,  479,  734,   83,  483,   83,  480,
      481,   81,   81,   81,  485,  482,  484,   81,  734,   81,
       81,   81,   83,   83,   83,  734,   81,   81,   83,  486,

       83,   83,   83,   81,   81,   81,  487,   83,   83,  734,
      490,  488,  492,  734,   83,   83,   83,  493,   81,   81,
      494,   81,   81,   81,  489,  491,   81,  734,  734,   83,
       83,   81,   83,   83,   83,  734,  500,   83,  501,  495,
      734,  497,   83,  734,  505,   81,  496,   81,   81,   81,
      498,  502,  506,   81,  503,  734,   83,  504,   83,   83,
       83,   81,  499,   81,   83,   81,  507,   81,   81,   81,
       81,  734,   83,   81,   83,  734,   83,   81,   83,   83,
       83,   83,  522,   81,   83,  734,  523,  508,   83,  734,
      734,   81,  734,  734,   83,  734,  509,  510,  511,  512,

      521,  513,   83,  514,  524,  525,  526,   81,  515,   81,
      516,  517,  518,   81,  734,  519,   81,   81,   83,   81,
       83,   81,  520,   81,   83,  527,   81,   83,   83,   81,
       83,  734,   83,   81,   83,   81,  529,   83,   81,   81,
       83,  734,  534,  734,   83,  734,   83,   81,  528,   83,
       83,   81,  530,   81,  536,  533,  532,  531,   83,   81,
      537,   81,   83,  535,   83,   81,   81,   81,  538,  734,
       83,   81,   83,  734,  539,   81,   83,   83,   83,   81,
      540,  734,   83,   81,  541,  734,   83,  734,   81,   81,
       83,  734,  542,  546,   83,   81,  543,  734,  544,   83,

       83,   81,  547,   81,   81,   81,   83,   81,  548,   81,
      551,   81,   83,   81,   83,   83,   83,  545,   83,   81,
       83,   81,   83,  734,   83,  734,   81,   81,  549,  734,
       83,   81,   83,   81,  550,   81,  552,   83,   83,  734,
      553,  734,   83,   81,   83,   81,   83,   81,   81,  734,
      555,  557,  554,  734,   83,  560,   83,   81,   83,   83,
      556,   81,  558,   81,  559,   81,  561,   81,   83,   81,
       81,  562,   83,   81,   83,  734,   83,  734,   83,   81,
       83,   83,  563,   81,   83,   81,  568,  734,  564,  734,
       83,  571,   81,   81,   83,   81,   83,  565,  567,   81,

      566,  734,   81,   83,   83,  572,   83,   81,  570,  574,
       83,  569,  573,   83,   81,  576,   81,   81,   83,   81,
      734,   81,  734,   81,  575,   83,  578,   83,   83,   81,
       83,  579,   83,  577,   83,  581,  734,  582,   81,  584,
       83,   81,  734,   81,   81,  585,   81,  586,   81,   83,
      587,  583,   83,  580,   83,   83,   81,   83,   81,   83,
      734,   81,  588,  590,  734,   81,  593,   83,   81,   83,
       81,  589,   83,  591,   81,  592,   83,   81,   81,   83,
      734,   83,   81,   81,   81,   83,   81,   81,   83,   83,
      596,  594,  734,   83,   83,   83,  595,   83,   83,  601,

       81,  598,   81,  599,   81,  600,  597,   81,   81,   81,
       81,   83,  734,   83,   81,   83,   81,   81,   83,   83,
       83,   83,   81,  602,   81,   83,   81,   83,   83,  734,
       81,   81,   81,   83,   81,   83,  605,   83,   81,   81,
      603,   83,   83,   83,  734,   83,   81,  604,   81,   83,
       83,   81,   81,   81,  734,  606,   81,   83,  608,   83,
       81,  734,   83,   83,   83,  607,  734,   83,  734,   81,
      609,   83,  610,   81,  734,   81,  612,  615,   81,  616,
       83,  734,  734,  734,   83,  613,   83,  734,  734,   83,
      734,  611,  621,   81,  622,   81,   81,  614,  617,  618,

       81,  620,  624,   81,   83,   81,   83,   83,  619,   81,
      734,   83,  626,  623,   83,  625,   83,   81,  734,  628,
       83,  630,   81,   81,  631,   81,  632,  634,   83,  633,
       81,  627,   81,   83,   83,   81,   83,  635,  629,   81,
       81,   83,   81,   83,   81,   81,   83,  734,   81,   81,
       83,   83,  734,   83,   81,   83,   83,  734,  636,   83,
       83,  637,   81,  638,   81,   83,   81,   81,  641,  640,
       81,  734,   81,   83,  642,   83,  734,   83,   83,  734,
      734,   83,  639,   83,  643,   81,  644,  645,  646,  647,
      655,  648,   81,  649,  734,   81,   83,   81,  650,   81,

      656,  651,  652,   83,   81,  653,   83,   81,   83,   81,
       83,   81,  654,   81,   81,   83,   81,  734,   83,   81,
       83,   81,   83,   81,   83,   83,  657,   83,  658,   81,
       83,   81,   83,   81,   83,   81,  734,  734,   81,   81,
       83,  734,   83,   81,   83,  734,   83,  659,  660,   83,
       83,  734,  663,   81,   83,   81,  665,   81,  661,   81,
       81,   81,  662,  734,   83,   81,   83,   81,   83,   81,
       83,   83,   83,   81,  664,   81,   83,   81,   83,   81,
       83,   81,   81,  666,   83,   81,   83,  734,   83,   81,
       83,   81,   83,   83,   81,   81,   83,   81,  667,   81,

       83,  734,   83,   81,   81,   83,   83,   81,   83,   81,
       83,  734,  668,   81,   83,   83,   81,  669,   83,   81,
       83,  734,  670,   81,   83,   81,  734,   83,  671,   81,
       83,   81,  672,  678,   83,  734,   83,  679,   81,  673,
       83,   81,   83,  676,   81,  734,  674,  734,   81,   83,
       81,   81,   83,   81,   81,   83,  675,  734,  677,   83,
      734,   83,   83,   81,   83,   83,   81,   81,  681,  734,
       81,  683,  734,   81,   83,   81,   81,   83,   83,   81,
      680,   83,  689,  685,   83,  682,   83,   83,   81,   81,
       83,  684,   81,   81,  734,  688,   81,  734,   81,   83,

       83,  686,  687,   83,   83,  690,  691,   83,  692,   83,
       81,  734,   81,   81,   81,   81,   81,  693,   81,   81,
       81,   83,  694,   83,   83,   83,   83,   83,   81,   83,
       83,   83,   81,  698,  734,  695,  734,   81,   81,   83,
       81,  701,   81,   83,  696,  697,   81,  699,   83,   83,
       81,   83,  700,   83,   81,   81,   81,   83,   81,  734,
       81,   83,   81,   81,   81,   83,   83,   83,   81,   83,
      702,   83,   81,   83,   83,   83,  734,   81,   81,   83,
      734,   81,   81,   83,   81,   81,   81,  704,   83,   83,
       81,  703,   83,   83,  734,   83,   83,   83,   81,   81,

       81,   83,  734,   81,   81,  707,  705,   81,   81,   83,
       83,   83,   81,  706,   83,   83,   81,  709,   83,   83,
       81,   81,   81,   83,  708,  734,   81,   83,   81,   81,
       81,   83,   83,   83,   81,  734,  710,   83,  734,   83,
       83,   83,   81,   81,   81,   83,  711,   81,  712,  713,
       81,  734,  734,   83,   83,   83,   81,   81,   83,   81,
       81,   83,  714,  715,   81,   81,   81,   83,   83,   81,
       83,   83,   81,   81,   81,   83,   83,   83,   81,   81,
       83,   81,   81,   83,   83,   83,   81,   81,  716,   83,
       83,   81,   83,   83,   81,   81,   81,   83,   83,   81,

       81,  718,   83,   81,   81,   83,   83,   83,   81,  717,
       83,   83,   81,   81,   83,   83,   81,  719,   81,   83,
       81,   81,   81,   83,   83,   81,  720,   83,   81,   83,
       81,   83,   83,   83,   81,   81,   83,   81,   81,   83,
       81,   83,   81,   81,   81,   83,   83,  734,   83,   83,
       81,   83,   81,   83,   83,   83,   81,   81,  721,  726,
       81,   83,   81,   83,  734,  734,   81,   83,   83,  722,
       81,   83,   81,   83,  723,  724,  727,   83,   81,   81,
       81,   83,   81,   83,   81,  725,   81,   81,   81,   83,
       83,   83,  729,   83,   81,   83,  734,   83,   83,   83,

       81,   81,  734,   81,   81,   83,   81,  728,   81,   81,
      734,   83,   83,  730,   83,   83,   81,   83,   81,   83,
       83,  731,   81,   81,   81,   81,   81,   83,   81,   83,
       81,   81,   81,   83,   83,   83,   83,   83,  734,   83,
      734,   83,   83,   83,  734,  733,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  732,
       62,   62,   62,   62,   63,   63,   63,   63,   66,   66,
       66,   66,   71,   71,   71,   71,   73,   73,   73,   73,
       82,   82,   82,  198,  198,   81,   81,   17,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,

      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734
    } ;

static const flex_int16_t yy_chk[2453] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    9,   10,    9,   10,   11,  382,
       11,   12,  198,   12,   30,   30,   30,   30,   30,   31,
       31,   31,   31,   31,   43,   44,   82,  103,   89,   37,
       55,   54,   97,   91,   61,   43,   44,   82,  103,   89,

       37,   55,   54,   97,   91,   37,   37,   30,   37,   55,
       38,   54,   44,    9,   10,   54,   37,   11,   37,   89,
       12,   38,   37,   30,   97,   41,   48,   11,   11,   91,
       12,   12,   39,  199,   38,   49,   41,   48,   36,  199,
       38,   50,   88,   39,   38,   38,   49,   45,   39,   39,
       38,   39,   50,   88,   41,   49,   48,   41,   45,   39,
       39,   88,   48,   39,   41,   49,   45,   35,   51,   34,
       39,   40,   50,   21,   50,   45,   45,   50,   85,   51,
       45,   52,   40,   87,   51,   56,  104,   40,   40,   85,
       40,   40,   52,   17,   87,   40,   56,  104,   51,   52,

       52,   52,   16,   40,   51,   56,   40,   87,   15,   40,
       42,   52,   85,   90,   94,   52,  100,   14,   42,   42,
       42,   42,   42,   42,   90,   94,   42,  100,   58,   42,
       42,   42,   42,   42,   57,   42,   42,   42,   42,   58,
       42,   42,   42,   46,   58,   57,   58,   13,   90,   94,
       57,   57,  100,    0,   46,   58,    0,   86,   58,   46,
       46,   46,    0,   46,   57,   46,    0,   57,   86,    0,
       46,   46,   46,   46,   46,   86,   86,   46,   76,   76,
       76,   76,   76,   84,   46,   47,   96,   95,    0,   92,
        0,    0,  102,    0,   84,    0,   47,   96,   95,   84,

       92,   47,   84,  102,   47,   47,   47,   47,  102,   47,
       92,   84,   47,   47,   95,   47,    0,   84,   93,   47,
       47,   53,   92,  101,   96,    0,  102,   92,    0,   93,
        0,    0,   53,    0,  101,   99,   93,   53,   53,   53,
        0,   53,  101,   53,   53,   53,   99,    0,   53,   53,
        0,   93,   93,   99,  106,    0,   53,   53,   77,   77,
       77,   77,   77,  105,  107,  106,   99,  108,   77,   77,
       77,   77,   77,   77,  105,  107,  109,  110,  108,  111,
        0,  105,  112,  113,  118,    0,   98,  109,  110,    0,
      111,  106,    0,  112,  113,  118,  110,   98,   77,   77,

       77,   77,   77,   77,   98,   98,  109,  114,  115,  116,
       98,    0,  110,  118,  117,  111,  119,  112,  114,  115,
      116,   98,  113,    0,  114,  117,  114,  119,    0,  120,
      122,    0,  116,  121,  117,  115,  116,    0,  117,  116,
      120,  122,  115,  124,  121,  120,    0,  120,  120,  119,
      123,    0,  121,  126,  124,    0,  120,  120,  120,    0,
      128,  123,  125,  120,  126,    0,  122,    0,  123,  123,
      123,  128,  127,  125,  123,  129,  124,    0,  125,    0,
      123,    0,  126,  127,  123,    0,  129,  126,  127,  132,
      127,  131,  127,  129,  128,  125,  127,  125,  130,  133,

      132,  134,  131,    0,  127,    0,  136,  127,  127,  130,
      133,  135,  134,    0,  130,    0,  130,  136,  131,  137,
      138,  139,  135,  133,  132,  140,  136,  141,    0,  135,
      137,  138,  139,  130,    0,    0,  140,  134,  141,  137,
      138,  142,  143,  140,  145,  135,  135,  141,  135,    0,
        0,  146,  142,  143,  147,  145,  148,    0,    0,  150,
      139,  142,  146,    0,  149,  147,  151,  148,  152,  153,
      150,  146,  200,  143,  144,  149,    0,  151,  156,  152,
      153,  146,  151,  200,    0,  144,    0,  149,  153,  156,
      144,  144,  144,  150,  144,  154,  144,  149,  155,  159,

      151,  144,  152,  153,  144,  144,  154,  157,  144,  155,
      159,  158,  156,  160,  154,  144,  161,  155,  157,  162,
      163,    0,  158,  164,  160,  157,  157,  161,  166,  167,
      162,  163,  159,  168,  164,  165,  169,  157,  158,  166,
      167,  162,  170,  161,  168,  158,  165,  169,  167,  171,
      160,  163,    0,  170,  172,  163,    0,  165,  164,    0,
      171,    0,  174,  166,  168,  172,    0,  173,  175,  170,
      169,  201,  180,  174,    0,  170,  176,  171,  173,  175,
      171,  177,  201,  180,    0,  172,    0,  176,  172,  172,
      174,  175,  177,  176,  173,  175,  178,  177,  179,  180,

      173,  175,  181,    0,  182,  180,    0,  178,  183,  179,
        0,  184,    0,  181,  178,  182,  185,  179,    0,  183,
        0,  181,  184,  182,    0,  186,  187,  185,  189,  184,
      184,  178,  188,  185,  190,  184,  186,  187,  191,  189,
      188,  184,  183,  188,  184,  190,  192,    0,    0,  191,
        0,    0,  193,  194,  187,  195,  197,  192,  190,  186,
      196,  189,  191,  193,  194,    0,  195,  197,    0,    0,
      202,  196,  194,  203,  204,  205,  196,  206,  195,  192,
      193,  202,  208,  207,  203,  204,  205,  209,  206,  197,
      210,  211,  212,  208,  207,  213,  214,  215,  209,  216,

      217,  210,  211,  212,  204,  207,  213,  214,  215,    0,
      216,  217,  214,    0,  209,  218,  219,  220,  221,  222,
      211,  223,  224,  225,  210,  226,  218,  219,  220,  221,
      222,  227,  223,  224,  225,  218,  226,  228,  229,  230,
      231,  232,  227,  219,  233,  234,    0,    0,  228,  229,
      230,  231,  232,  235,    0,  233,  234,  225,  229,    0,
      236,  228,  237,  238,  235,  227,  239,    0,  240,    0,
      227,  236,    0,  237,  238,  243,  241,  239,  234,  240,
      236,  242,  244,  238,    0,  245,  243,  241,  247,    0,
      246,    0,  242,  244,  239,  241,  245,  248,  249,  247,

      242,  246,  240,  250,    0,  245,  247,    0,  248,  249,
      243,    0,    0,    0,  250,  252,  244,  251,  246,  253,
        0,  254,  249,  250,  246,    0,  252,  255,  251,    0,
      253,  248,  254,  256,  248,  257,  251,  259,  255,  260,
      254,  254,  258,  253,  256,  252,  257,  262,  259,  258,
      260,  256,    0,  258,  261,    0,  263,  256,  262,    0,
      258,  264,  258,  255,  259,  261,  260,  263,  265,  258,
      257,  257,  264,  258,    0,  267,  262,  266,  261,  265,
      268,    0,  269,  258,  265,  263,  267,    0,  266,    0,
      270,  268,  264,  269,    0,  271,  272,  273,  269,    0,

      268,  270,    0,  265,  274,  266,  271,  272,  273,  270,
      267,  275,  276,  273,  278,  274,  277,  279,  280,    0,
        0,  281,  275,  276,    0,  278,  283,  277,  279,  280,
      271,  278,  281,  272,  277,  282,  277,  283,    0,  274,
      275,    0,  285,  284,  286,  276,  282,  277,  280,  281,
      277,  284,  279,  285,  284,  286,  287,  288,  282,  283,
      289,  290,  292,  291,  293,  294,    0,  287,  288,  295,
      290,  289,  290,  292,  291,  293,  294,  289,  296,  289,
      295,  286,  291,  287,    0,  297,    0,  288,  298,  296,
      291,  290,  299,  300,  301,  289,  297,  292,  289,  298,

      302,  303,    0,  299,  300,  301,    0,  304,  305,  306,
      295,  302,  303,  300,  301,  307,    0,  296,  304,  305,
      306,  308,  309,  310,  311,  312,  307,  304,  305,  313,
      314,  315,  308,  309,  310,  311,  312,  316,  317,  318,
      313,  314,  315,  319,  320,  321,  312,  322,  316,  317,
      318,  323,  324,  325,  319,  320,  321,    0,  322,  326,
      327,  328,  323,  324,  325,  329,    0,  330,  315,    0,
      326,  327,  328,    0,  318,    0,  329,  323,  330,  320,
      321,  331,  332,  333,  325,  322,  324,  334,    0,  335,
      336,  337,  331,  332,  333,    0,  338,  339,  334,  329,

      335,  336,  337,  340,  341,  342,  329,  338,  339,    0,
      337,  334,  338,    0,  340,  341,  342,  338,  343,  345,
      339,  344,  347,  346,  336,  337,  348,    0,    0,  343,
      345,  349,  344,  347,  346,    0,  345,  348,  345,  342,
        0,  344,  349,    0,  346,  350,  343,  351,  352,  353,
      344,  345,  346,  354,  345,    0,  350,  345,  351,  352,
      353,  355,  344,  358,  354,  357,  350,  359,  362,  360,
      361,    0,  355,  363,  358,    0,  357,  364,  359,  362,
      360,  361,  358,  365,  363,    0,  359,  354,  364,    0,
        0,  366,    0,    0,  365,    0,  355,  356,  356,  356,

      357,  356,  366,  356,  360,  361,  362,  367,  356,  368,
      356,  356,  356,  369,    0,  356,  370,  371,  367,  372,
      368,  373,  356,  375,  369,  366,  374,  370,  371,  376,
      372,    0,  373,  379,  375,  377,  370,  374,  378,  380,
      376,    0,  375,    0,  379,    0,  377,  383,  369,  378,
      380,  384,  372,  385,  377,  374,  373,  372,  383,  386,
      378,  388,  384,  376,  385,  387,  389,  390,  379,    0,
      386,  391,  388,    0,  383,  393,  387,  389,  390,  392,
      384,    0,  391,  394,  387,    0,  393,    0,  395,  396,
      392,    0,  388,  393,  394,  397,  392,    0,  392,  395,

      396,  398,  394,  399,  400,  401,  397,  402,  396,  403,
      399,  404,  398,  405,  399,  400,  401,  392,  402,  406,
      403,  407,  404,    0,  405,    0,  408,  409,  397,    0,
      406,  410,  407,  411,  398,  412,  401,  408,  409,    0,
      403,    0,  410,  414,  411,  415,  412,  413,  416,    0,
      406,  409,  405,    0,  414,  412,  415,  417,  413,  416,
      408,  418,  410,  419,  410,  420,  413,  421,  417,  422,
      423,  414,  418,  424,  419,    0,  420,    0,  421,  425,
      422,  423,  415,  426,  424,  427,  422,    0,  418,    0,
      425,  426,  428,  429,  426,  430,  427,  419,  421,  431,

      420,    0,  432,  428,  429,  426,  430,  433,  425,  427,
      431,  424,  426,  432,  434,  430,  435,  436,  433,  439,
        0,  440,    0,  437,  429,  434,  432,  435,  436,  438,
      439,  433,  440,  431,  437,  436,    0,  436,  441,  437,
      438,  442,    0,  443,  445,  438,  444,  439,  446,  441,
      440,  436,  442,  435,  443,  445,  447,  444,  448,  446,
        0,  449,  441,  443,    0,  450,  446,  447,  451,  448,
      452,  442,  449,  444,  453,  445,  450,  454,  455,  451,
        0,  452,  456,  457,  458,  453,  459,  460,  454,  455,
      449,  447,    0,  456,  457,  458,  448,  459,  460,  457,

      461,  452,  462,  452,  463,  454,  451,  464,  465,  466,
      467,  461,    0,  462,  468,  463,  469,  470,  464,  465,
      466,  467,  471,  458,  472,  468,  473,  469,  470,    0,
      474,  475,  476,  471,  477,  472,  470,  473,  478,  479,
      464,  474,  475,  476,    0,  477,  480,  469,  481,  478,
      479,  482,  483,  484,    0,  470,  485,  480,  478,  481,
      486,    0,  482,  483,  484,  472,    0,  485,    0,  487,
      484,  486,  484,  488,    0,  489,  485,  486,  490,  486,
      487,    0,    0,    0,  488,  485,  489,    0,    0,  490,
        0,  484,  489,  492,  489,  491,  495,  485,  486,  486,

      493,  488,  490,  497,  492,  494,  491,  495,  487,  496,
        0,  493,  492,  489,  497,  491,  494,  498,    0,  493,
      496,  494,  499,  500,  494,  501,  494,  496,  498,  495,
      502,  492,  503,  499,  500,  504,  501,  498,  493,  505,
      506,  502,  507,  503,  508,  509,  504,    0,  510,  512,
      505,  506,    0,  507,  511,  508,  509,    0,  498,  510,
      512,  508,  513,  508,  514,  511,  515,  517,  510,  509,
      518,    0,  519,  513,  511,  514,    0,  515,  517,    0,
        0,  518,  508,  519,  514,  520,  515,  516,  516,  516,
      518,  516,  521,  516,    0,  522,  520,  523,  516,  524,

      518,  516,  516,  521,  525,  516,  522,  526,  523,  527,
      524,  528,  516,  530,  529,  525,  531,    0,  526,  532,
      527,  533,  528,  534,  530,  529,  527,  531,  527,  535,
      532,  536,  533,  537,  534,  538,    0,    0,  539,  540,
      535,    0,  536,  541,  537,    0,  538,  527,  529,  539,
      540,    0,  538,  542,  541,  543,  540,  544,  533,  545,
      546,  547,  535,    0,  542,  548,  543,  549,  544,  550,
      545,  546,  547,  551,  539,  552,  548,  553,  549,  554,
      550,  555,  556,  546,  551,  557,  552,    0,  553,  558,
      554,  559,  555,  556,  560,  561,  557,  562,  550,  563,

      558,    0,  559,  564,  565,  560,  561,  566,  562,  567,
      563,    0,  555,  568,  564,  565,  569,  556,  566,  570,
      567,    0,  559,  571,  568,  572,    0,  569,  562,  573,
      570,  574,  563,  572,  571,    0,  572,  573,  575,  565,
      573,  576,  574,  571,  577,    0,  568,    0,  578,  575,
      579,  580,  576,  581,  582,  577,  570,    0,  571,  578,
        0,  579,  580,  583,  581,  582,  585,  584,  577,    0,
      587,  580,    0,  589,  583,  586,  588,  585,  584,  590,
      576,  587,  586,  582,  589,  579,  586,  588,  591,  592,
      590,  581,  593,  594,    0,  585,  595,    0,  596,  591,

      592,  583,  584,  593,  594,  588,  589,  595,  591,  596,
      597,    0,  598,  599,  600,  601,  602,  592,  603,  604,
      605,  597,  593,  598,  599,  600,  601,  602,  606,  603,
      604,  605,  607,  601,    0,  596,    0,  608,  609,  606,
      610,  604,  611,  607,  599,  600,  612,  602,  608,  609,
      613,  610,  603,  611,  614,  615,  616,  612,  617,    0,
      618,  613,  619,  620,  621,  614,  615,  616,  622,  617,
      613,  618,  623,  619,  620,  621,    0,  624,  625,  622,
        0,  626,  627,  623,  628,  629,  630,  620,  624,  625,
      631,  613,  626,  627,    0,  628,  629,  630,  632,  633,

      634,  631,    0,  635,  636,  630,  624,  637,  638,  632,
      633,  634,  639,  625,  635,  636,  640,  632,  637,  638,
      641,  642,  643,  639,  630,    0,  644,  640,  645,  646,
      647,  641,  642,  643,  648,    0,  632,  644,    0,  645,
      646,  647,  649,  650,  651,  648,  640,  652,  645,  646,
      653,    0,    0,  649,  650,  651,  654,  655,  652,  656,
      657,  653,  649,  650,  658,  659,  660,  654,  655,  661,
      656,  657,  662,  663,  664,  658,  659,  660,  665,  666,
      661,  667,  668,  662,  663,  664,  669,  670,  661,  665,
      666,  671,  667,  668,  672,  673,  674,  669,  670,  675,

      676,  666,  671,  677,  678,  672,  673,  674,  679,  664,
      675,  676,  680,  681,  677,  678,  682,  669,  683,  679,
      684,  685,  686,  680,  681,  687,  673,  682,  688,  683,
      689,  684,  685,  686,  690,  691,  687,  692,  693,  688,
      694,  689,  695,  696,  697,  690,  691,    0,  692,  693,
      698,  694,  699,  695,  696,  697,  700,  701,  685,  699,
      702,  698,  703,  699,    0,    0,  704,  700,  701,  690,
      705,  702,  706,  703,  694,  697,  700,  704,  707,  708,
      709,  705,  710,  706,  711,  698,  712,  713,  714,  707,
      708,  709,  705,  710,  715,  711,    0,  712,  713,  714,

      716,  717,    0,  718,  719,  715,  720,  704,  721,  722,
        0,  716,  717,  711,  718,  719,  723,  720,  724,  721,
      722,  717,  725,  726,  727,  728,  729,  723,  730,  724,
      731,  732,  733,  725,  726,  727,  728,  729,    0,  730,
        0,  731,  732,  733,    0,  728,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  727,
      735,  735,  735,  735,  736,  736,  736,  736,  737,  737,
      737,  737,  738,  738,  738,  738,  739,  739,  739,  739,
      740,  740,  740,  741,  741,  742,  742,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,

      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "nask.l"
/* -*- c -*- This FLex file was machine-generated by the BNF converter */
#define YY_NO_INPUT 1
/* Additional data for the lexer: a buffer for lexing string literals. */
#line 10 "nask.l"
#include "absyn.hh"
#include "bison.hh"

#define initialize_lexer nask__initialize_lexer

/* BEGIN extensible string buffer */

#include "buffer.hh"

/* The initial size of the buffer to lex string literals. */
#define LITERAL_BUFFER_INITIAL_SIZE 1024

/* The pointer to the literal buffer. */
#define literal_buffer yyextra

/* Initialize the literal buffer. */
#define LITERAL_BUFFER_CREATE() literal_buffer = newBuffer(LITERAL_BUFFER_INITIAL_SIZE)

/* Append characters at the end of the buffer. */
#define LITERAL_BUFFER_APPEND(s) bufferAppendString(literal_buffer, s)

/* Append a character at the end of the buffer. */
#define LITERAL_BUFFER_APPEND_CHAR(c) bufferAppendChar(literal_buffer, c)

/* Release the buffer, returning a pointer to its content. */
#define LITERAL_BUFFER_HARVEST() releaseBuffer(literal_buffer)

/* In exceptional cases, e.g. when reaching EOF, we have to free the buffer. */
#define LITERAL_BUFFER_FREE() freeBuffer(literal_buffer)

/* END extensible string buffer */

static void update_loc(YYLTYPE* loc, char* text)
{
  loc->first_line = loc->last_line;
  loc->first_column = loc->last_column;
  int i = 0;
  for (; text[i] != '\0'; ++i) {
      if (text[i] == '\n') {
          ++loc->last_line;
          loc->last_column = 0;
      } else {
          ++loc->last_column;
      }
  }
}
#define YY_USER_ACTION update_loc(yylloc, yytext);

#line 1494 "lexer.cc"

#line 1496 "lexer.cc"

#define INITIAL 0
#define CHAR 1
#define CHARESC 2
#define CHAREND 3
#define STRING 4
#define ESCAPED 5
#define COMMENT 6
#define COMMENT1 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE Buffer

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 67 "nask.l"


#line 1786 "lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 735 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2388 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 69 "nask.l"
return _LBRACK;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 70 "nask.l"
return _RBRACK;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 71 "nask.l"
return _COMMA;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 72 "nask.l"
return _DEQ;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 73 "nask.l"
return _BANGEQ;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 74 "nask.l"
return _LT;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 75 "nask.l"
return _GT;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 76 "nask.l"
return _LDARROW;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 77 "nask.l"
return _GTEQ;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 78 "nask.l"
return _PLUS;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 79 "nask.l"
return _MINUS;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 80 "nask.l"
return _STAR;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 81 "nask.l"
return _SLASH;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 82 "nask.l"
return _PERCENT;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 83 "nask.l"
return _COLON;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 84 "nask.l"
return _KW_AAA;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 85 "nask.l"
return _KW_AAD;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 86 "nask.l"
return _KW_AAM;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 87 "nask.l"
return _KW_AAS;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 88 "nask.l"
return _KW_ABSOLUTE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 89 "nask.l"
return _KW_ADC;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 90 "nask.l"
return _KW_ADD;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 91 "nask.l"
return _KW_ALIGN;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 92 "nask.l"
return _KW_ALIGNB;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 93 "nask.l"
return _KW_AND;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 94 "nask.l"
return _KW_ARPL;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 95 "nask.l"
return _KW_BITS;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 96 "nask.l"
return _KW_BOUND;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 97 "nask.l"
return _KW_BSF;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 98 "nask.l"
return _KW_BSR;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 99 "nask.l"
return _KW_BSWAP;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 100 "nask.l"
return _KW_BT;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 101 "nask.l"
return _KW_BTC;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 102 "nask.l"
return _KW_BTR;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 103 "nask.l"
return _KW_BTS;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 104 "nask.l"
return _KW_BYTE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 105 "nask.l"
return _KW_CALL;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 106 "nask.l"
return _KW_CBW;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 107 "nask.l"
return _KW_CDQ;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 108 "nask.l"
return _KW_CLC;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 109 "nask.l"
return _KW_CLD;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 110 "nask.l"
return _KW_CLI;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 111 "nask.l"
return _KW_CLTS;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 112 "nask.l"
return _KW_CMC;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 113 "nask.l"
return _KW_CMP;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 114 "nask.l"
return _KW_CMPSB;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 115 "nask.l"
return _KW_CMPSD;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 116 "nask.l"
return _KW_CMPSW;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 117 "nask.l"
return _KW_CMPXCHG;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 118 "nask.l"
return _KW_CPUID;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 119 "nask.l"
return _KW_CWD;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 120 "nask.l"
return _KW_CWDE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 121 "nask.l"
return _KW_DAA;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 122 "nask.l"
return _KW_DAS;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 123 "nask.l"
return _KW_DB;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 124 "nask.l"
return _KW_DD;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 125 "nask.l"
return _KW_DEC;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 126 "nask.l"
return _KW_DIV;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 127 "nask.l"
return _KW_DQ;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 128 "nask.l"
return _KW_DT;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 129 "nask.l"
return _KW_DW;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 130 "nask.l"
return _KW_DWORD;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 131 "nask.l"
return _KW_END;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 132 "nask.l"
return _KW_ENTER;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 133 "nask.l"
return _KW_EQU;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 134 "nask.l"
return _KW_EXTERN;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 135 "nask.l"
return _KW_F2XM1;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 136 "nask.l"
return _KW_FABS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 137 "nask.l"
return _KW_FADD;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 138 "nask.l"
return _KW_FADDP;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 139 "nask.l"
return _KW_FBLD;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 140 "nask.l"
return _KW_FBSTP;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 141 "nask.l"
return _KW_FCHS;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 142 "nask.l"
return _KW_FCLEX;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 143 "nask.l"
return _KW_FCOM;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 144 "nask.l"
return _KW_FCOMP;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 145 "nask.l"
return _KW_FCOMPP;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 146 "nask.l"
return _KW_FCOS;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 147 "nask.l"
return _KW_FDECSTP;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 148 "nask.l"
return _KW_FDISI;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 149 "nask.l"
return _KW_FDIV;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 150 "nask.l"
return _KW_FDIVP;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 151 "nask.l"
return _KW_FDIVR;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 152 "nask.l"
return _KW_FDIVRP;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 153 "nask.l"
return _KW_FENI;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 154 "nask.l"
return _KW_FFREE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 155 "nask.l"
return _KW_FIADD;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 156 "nask.l"
return _KW_FICOM;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 157 "nask.l"
return _KW_FICOMP;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 158 "nask.l"
return _KW_FIDIV;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 159 "nask.l"
return _KW_FIDIVR;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 160 "nask.l"
return _KW_FILD;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 161 "nask.l"
return _KW_FILE;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 162 "nask.l"
return _KW_FIMUL;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 163 "nask.l"
return _KW_FINCSTP;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 164 "nask.l"
return _KW_FINIT;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 165 "nask.l"
return _KW_FIST;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 166 "nask.l"
return _KW_FISTP;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 167 "nask.l"
return _KW_FISUB;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 168 "nask.l"
return _KW_FISUBR;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 169 "nask.l"
return _KW_FLD;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 170 "nask.l"
return _KW_FLD1;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 171 "nask.l"
return _KW_FLDCW;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 172 "nask.l"
return _KW_FLDENV;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 173 "nask.l"
return _KW_FLDL2E;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 174 "nask.l"
return _KW_FLDL2T;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 175 "nask.l"
return _KW_FLDLG2;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 176 "nask.l"
return _KW_FLDLN2;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 177 "nask.l"
return _KW_FLDPI;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 178 "nask.l"
return _KW_FLDZ;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 179 "nask.l"
return _KW_FMUL;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 180 "nask.l"
return _KW_FMULP;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 181 "nask.l"
return _KW_FNCLEX;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 182 "nask.l"
return _KW_FNDISI;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 183 "nask.l"
return _KW_FNENI;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 184 "nask.l"
return _KW_FNINIT;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 185 "nask.l"
return _KW_FNOP;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 186 "nask.l"
return _KW_FNSAVE;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 187 "nask.l"
return _KW_FNSTCW;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 188 "nask.l"
return _KW_FNSTENV;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 189 "nask.l"
return _KW_FNSTSW;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 190 "nask.l"
return _KW_FORMAT;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 191 "nask.l"
return _KW_FPATAN;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 192 "nask.l"
return _KW_FPREM;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 193 "nask.l"
return _KW_FPREM1;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 194 "nask.l"
return _KW_FPTAN;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 195 "nask.l"
return _KW_FRNDINT;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 196 "nask.l"
return _KW_FRSTOR;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 197 "nask.l"
return _KW_FSAVE;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 198 "nask.l"
return _KW_FSCALE;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 199 "nask.l"
return _KW_FSETPM;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 200 "nask.l"
return _KW_FSIN;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 201 "nask.l"
return _KW_FSINCOS;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 202 "nask.l"
return _KW_FSQRT;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 203 "nask.l"
return _KW_FST;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 204 "nask.l"
return _KW_FSTCW;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 205 "nask.l"
return _KW_FSTENV;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 206 "nask.l"
return _KW_FSTP;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 207 "nask.l"
return _KW_FSTSW;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 208 "nask.l"
return _KW_FSUB;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 209 "nask.l"
return _KW_FSUBP;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 210 "nask.l"
return _KW_FSUBR;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 211 "nask.l"
return _KW_FSUBRP;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 212 "nask.l"
return _KW_FTST;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 213 "nask.l"
return _KW_FUCOM;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 214 "nask.l"
return _KW_FUCOMP;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 215 "nask.l"
return _KW_FUCOMPP;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 216 "nask.l"
return _KW_FXAM;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 217 "nask.l"
return _KW_FXCH;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 218 "nask.l"
return _KW_FXTRACT;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 219 "nask.l"
return _KW_FYL2X;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 220 "nask.l"
return _KW_FYL2XP1;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 221 "nask.l"
return _KW_HLT;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 222 "nask.l"
return _KW_IDIV;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 223 "nask.l"
return _KW_IMUL;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 224 "nask.l"
return _KW_IN;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 225 "nask.l"
return _KW_INC;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 226 "nask.l"
return _KW_INCO;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 227 "nask.l"
return _KW_INSB;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 228 "nask.l"
return _KW_INSD;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 229 "nask.l"
return _KW_INSTRSET;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 230 "nask.l"
return _KW_INSW;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 231 "nask.l"
return _KW_INT;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 232 "nask.l"
return _KW_INT3;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 233 "nask.l"
return _KW_INTO;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 234 "nask.l"
return _KW_INVD;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 235 "nask.l"
return _KW_INVLPG;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 236 "nask.l"
return _KW_IRET;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 237 "nask.l"
return _KW_IRETD;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 238 "nask.l"
return _KW_IRETW;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 239 "nask.l"
return _KW_JA;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 240 "nask.l"
return _KW_JAE;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 241 "nask.l"
return _KW_JB;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 242 "nask.l"
return _KW_JBE;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 243 "nask.l"
return _KW_JC;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 244 "nask.l"
return _KW_JCXZ;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 245 "nask.l"
return _KW_JE;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 246 "nask.l"
return _KW_JECXZ;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 247 "nask.l"
return _KW_JG;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 248 "nask.l"
return _KW_JGE;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 249 "nask.l"
return _KW_JL;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 250 "nask.l"
return _KW_JLE;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 251 "nask.l"
return _KW_JMP;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 252 "nask.l"
return _KW_JNA;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 253 "nask.l"
return _KW_JNAE;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 254 "nask.l"
return _KW_JNB;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 255 "nask.l"
return _KW_JNBE;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 256 "nask.l"
return _KW_JNC;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 257 "nask.l"
return _KW_JNE;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 258 "nask.l"
return _KW_JNG;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 259 "nask.l"
return _KW_JNGE;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 260 "nask.l"
return _KW_JNL;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 261 "nask.l"
return _KW_JNLE;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 262 "nask.l"
return _KW_JNO;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 263 "nask.l"
return _KW_JNP;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 264 "nask.l"
return _KW_JNS;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 265 "nask.l"
return _KW_JNZ;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 266 "nask.l"
return _KW_JO;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 267 "nask.l"
return _KW_JP;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 268 "nask.l"
return _KW_JPE;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 269 "nask.l"
return _KW_JPO;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 270 "nask.l"
return _KW_JS;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 271 "nask.l"
return _KW_JZ;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 272 "nask.l"
return _KW_LAHF;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 273 "nask.l"
return _KW_LAR;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 274 "nask.l"
return _KW_LDS;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 275 "nask.l"
return _KW_LEA;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 276 "nask.l"
return _KW_LEAVE;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 277 "nask.l"
return _KW_LES;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 278 "nask.l"
return _KW_LFS;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 279 "nask.l"
return _KW_LGDT;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 280 "nask.l"
return _KW_LGS;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 281 "nask.l"
return _KW_LIDT;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 282 "nask.l"
return _KW_LLDT;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 283 "nask.l"
return _KW_LMSW;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 284 "nask.l"
return _KW_LOCK;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 285 "nask.l"
return _KW_LODSB;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 286 "nask.l"
return _KW_LODSD;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 287 "nask.l"
return _KW_LODSW;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 288 "nask.l"
return _KW_LOOP;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 289 "nask.l"
return _KW_LOOPE;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 290 "nask.l"
return _KW_LOOPNE;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 291 "nask.l"
return _KW_LOOPNZ;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 292 "nask.l"
return _KW_LOOPZ;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 293 "nask.l"
return _KW_LSL;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 294 "nask.l"
return _KW_LSS;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 295 "nask.l"
return _KW_LTR;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 296 "nask.l"
return _KW_MOV;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 297 "nask.l"
return _KW_MOVSB;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 298 "nask.l"
return _KW_MOVSD;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 299 "nask.l"
return _KW_MOVSW;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 300 "nask.l"
return _KW_MOVSX;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 301 "nask.l"
return _KW_MOVZX;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 302 "nask.l"
return _KW_MUL;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 303 "nask.l"
return _KW_NEG;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 304 "nask.l"
return _KW_NOP;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 305 "nask.l"
return _KW_NOT;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 306 "nask.l"
return _KW_OPTIMIZE;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 307 "nask.l"
return _KW_OR;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 308 "nask.l"
return _KW_ORG;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 309 "nask.l"
return _KW_OUT;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 310 "nask.l"
return _KW_OUTSB;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 311 "nask.l"
return _KW_OUTSD;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 312 "nask.l"
return _KW_OUTSW;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 313 "nask.l"
return _KW_PADDING;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 314 "nask.l"
return _KW_PADSET;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 315 "nask.l"
return _KW_POP;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 316 "nask.l"
return _KW_POPA;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 317 "nask.l"
return _KW_POPAD;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 318 "nask.l"
return _KW_POPAW;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 319 "nask.l"
return _KW_POPF;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 320 "nask.l"
return _KW_POPFD;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 321 "nask.l"
return _KW_POPFW;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 322 "nask.l"
return _KW_PUSH;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 323 "nask.l"
return _KW_PUSHA;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 324 "nask.l"
return _KW_PUSHAD;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 325 "nask.l"
return _KW_PUSHAW;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 326 "nask.l"
return _KW_PUSHD;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 327 "nask.l"
return _KW_PUSHF;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 328 "nask.l"
return _KW_PUSHFD;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 329 "nask.l"
return _KW_PUSHFW;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 330 "nask.l"
return _KW_RCL;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 331 "nask.l"
return _KW_RCR;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 332 "nask.l"
return _KW_RDMSR;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 333 "nask.l"
return _KW_RDPMC;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 334 "nask.l"
return _KW_REP;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 335 "nask.l"
return _KW_REPE;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 336 "nask.l"
return _KW_REPNE;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 337 "nask.l"
return _KW_REPNZ;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 338 "nask.l"
return _KW_REPZ;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 339 "nask.l"
return _KW_RESB;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 340 "nask.l"
return _KW_RESD;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 341 "nask.l"
return _KW_RESQ;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 342 "nask.l"
return _KW_REST;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 343 "nask.l"
return _KW_RESW;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 344 "nask.l"
return _KW_RET;
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 345 "nask.l"
return _KW_RETF;
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 346 "nask.l"
return _KW_RETN;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 347 "nask.l"
return _KW_ROL;
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 348 "nask.l"
return _KW_ROR;
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 349 "nask.l"
return _KW_RSM;
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 350 "nask.l"
return _KW_SAHF;
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 351 "nask.l"
return _KW_SAL;
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 352 "nask.l"
return _KW_SAR;
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 353 "nask.l"
return _KW_SBB;
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 354 "nask.l"
return _KW_SCASB;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 355 "nask.l"
return _KW_SCASD;
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 356 "nask.l"
return _KW_SCASW;
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 357 "nask.l"
return _KW_SECTION;
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 358 "nask.l"
return _KW_SETA;
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 359 "nask.l"
return _KW_SETAE;
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 360 "nask.l"
return _KW_SETB;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 361 "nask.l"
return _KW_SETBE;
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 362 "nask.l"
return _KW_SETC;
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 363 "nask.l"
return _KW_SETE;
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 364 "nask.l"
return _KW_SETG;
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 365 "nask.l"
return _KW_SETGE;
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 366 "nask.l"
return _KW_SETL;
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 367 "nask.l"
return _KW_SETLE;
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 368 "nask.l"
return _KW_SETNA;
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 369 "nask.l"
return _KW_SETNAE;
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 370 "nask.l"
return _KW_SETNB;
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 371 "nask.l"
return _KW_SETNBE;
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 372 "nask.l"
return _KW_SETNC;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 373 "nask.l"
return _KW_SETNE;
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 374 "nask.l"
return _KW_SETNG;
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 375 "nask.l"
return _KW_SETNGE;
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 376 "nask.l"
return _KW_SETNL;
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 377 "nask.l"
return _KW_SETNLE;
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 378 "nask.l"
return _KW_SETNO;
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 379 "nask.l"
return _KW_SETNP;
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 380 "nask.l"
return _KW_SETNS;
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 381 "nask.l"
return _KW_SETNZ;
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 382 "nask.l"
return _KW_SETO;
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 383 "nask.l"
return _KW_SETP;
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 384 "nask.l"
return _KW_SETPE;
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 385 "nask.l"
return _KW_SETPO;
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 386 "nask.l"
return _KW_SETS;
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 387 "nask.l"
return _KW_SETZ;
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 388 "nask.l"
return _KW_SGDT;
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 389 "nask.l"
return _KW_SHL;
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 390 "nask.l"
return _KW_SHLD;
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 391 "nask.l"
return _KW_SHR;
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 392 "nask.l"
return _KW_SHRD;
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 393 "nask.l"
return _KW_SIDT;
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 394 "nask.l"
return _KW_SLDT;
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 395 "nask.l"
return _KW_SMSW;
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 396 "nask.l"
return _KW_STC;
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 397 "nask.l"
return _KW_STD;
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 398 "nask.l"
return _KW_STI;
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 399 "nask.l"
return _KW_STOSB;
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 400 "nask.l"
return _KW_STOSD;
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 401 "nask.l"
return _KW_STOSW;
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 402 "nask.l"
return _KW_STR;
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 403 "nask.l"
return _KW_SUB;
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 404 "nask.l"
return _KW_TEST;
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 405 "nask.l"
return _KW_TIMES;
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 406 "nask.l"
return _KW_UD2;
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 407 "nask.l"
return _KW_VERR;
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 408 "nask.l"
return _KW_VERW;
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 409 "nask.l"
return _KW_WAIT;
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 410 "nask.l"
return _KW_WBINVD;
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 411 "nask.l"
return _KW_WORD;
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 412 "nask.l"
return _KW_WRMSR;
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 413 "nask.l"
return _KW_XADD;
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 414 "nask.l"
return _KW_XCHG;
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 415 "nask.l"
return _KW_XLATB;
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 416 "nask.l"
return _KW_XOR;
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 418 "nask.l"
BEGIN COMMENT; /* BNFC: block comment "#" "\\n" */
	YY_BREAK
case 350:
/* rule 350 can match eol */
YY_RULE_SETUP
#line 419 "nask.l"
BEGIN INITIAL;
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 420 "nask.l"
/* skip */;
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 421 "nask.l"
BEGIN COMMENT1; /* BNFC: block comment ";" "\\n" */
	YY_BREAK
case 353:
/* rule 353 can match eol */
YY_RULE_SETUP
#line 422 "nask.l"
BEGIN INITIAL;
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 423 "nask.l"
/* skip */;
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 425 "nask.l"
yylval->_string = strdup(yytext); return T_Hex;
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 426 "nask.l"
yylval->_string = strdup(yytext); return T_Label;
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 427 "nask.l"
LITERAL_BUFFER_CREATE(); BEGIN STRING;
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 428 "nask.l"
BEGIN ESCAPED;
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 429 "nask.l"
yylval->_string = LITERAL_BUFFER_HARVEST(); BEGIN INITIAL; return _STRING_;
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 430 "nask.l"
LITERAL_BUFFER_APPEND_CHAR(yytext[0]);
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 431 "nask.l"
LITERAL_BUFFER_APPEND_CHAR('\n'); BEGIN STRING;
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 432 "nask.l"
LITERAL_BUFFER_APPEND_CHAR('"');  BEGIN STRING;
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 433 "nask.l"
LITERAL_BUFFER_APPEND_CHAR('\\'); BEGIN STRING;
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 434 "nask.l"
LITERAL_BUFFER_APPEND_CHAR('\t'); BEGIN STRING;
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 435 "nask.l"
LITERAL_BUFFER_APPEND(yytext);    BEGIN STRING;
	YY_BREAK
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(ESCAPED):
#line 436 "nask.l"
LITERAL_BUFFER_FREE(); return _ERROR_;
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 437 "nask.l"
yylval->_int = atoi(yytext); return _INTEGER_;
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 438 "nask.l"
yylval->_string = strdup(yytext); return _IDENT_;
	YY_BREAK
case 368:
/* rule 368 can match eol */
YY_RULE_SETUP
#line 439 "nask.l"
/* ignore white space. */;
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 440 "nask.l"
return _ERROR_;
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 442 "nask.l"
ECHO;
	YY_BREAK
#line 3701 "lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CHAR):
case YY_STATE_EOF(CHARESC):
case YY_STATE_EOF(CHAREND):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(COMMENT1):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 735 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 735 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 734);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 442 "nask.l"


yyscan_t initialize_lexer(FILE *inp)
{
  yyscan_t scanner;
  if (yylex_init_extra(NULL, &scanner)) return 0;
  if (inp) yyrestart(inp, scanner);
  return scanner;
}


