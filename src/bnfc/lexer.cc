#line 2 "lexer.cc"

#line 4 "lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define nask__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer nask__create_buffer
#endif

#ifdef yy_delete_buffer
#define nask__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer nask__delete_buffer
#endif

#ifdef yy_scan_buffer
#define nask__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer nask__scan_buffer
#endif

#ifdef yy_scan_string
#define nask__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string nask__scan_string
#endif

#ifdef yy_scan_bytes
#define nask__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes nask__scan_bytes
#endif

#ifdef yy_init_buffer
#define nask__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer nask__init_buffer
#endif

#ifdef yy_flush_buffer
#define nask__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer nask__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define nask__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state nask__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define nask__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer nask__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define nask_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state nask_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define nask_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state nask_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define nask_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack nask_ensure_buffer_stack
#endif

#ifdef yylex
#define nask_lex_ALREADY_DEFINED
#else
#define yylex nask_lex
#endif

#ifdef yyrestart
#define nask_restart_ALREADY_DEFINED
#else
#define yyrestart nask_restart
#endif

#ifdef yylex_init
#define nask_lex_init_ALREADY_DEFINED
#else
#define yylex_init nask_lex_init
#endif

#ifdef yylex_init_extra
#define nask_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra nask_lex_init_extra
#endif

#ifdef yylex_destroy
#define nask_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy nask_lex_destroy
#endif

#ifdef yyget_debug
#define nask_get_debug_ALREADY_DEFINED
#else
#define yyget_debug nask_get_debug
#endif

#ifdef yyset_debug
#define nask_set_debug_ALREADY_DEFINED
#else
#define yyset_debug nask_set_debug
#endif

#ifdef yyget_extra
#define nask_get_extra_ALREADY_DEFINED
#else
#define yyget_extra nask_get_extra
#endif

#ifdef yyset_extra
#define nask_set_extra_ALREADY_DEFINED
#else
#define yyset_extra nask_set_extra
#endif

#ifdef yyget_in
#define nask_get_in_ALREADY_DEFINED
#else
#define yyget_in nask_get_in
#endif

#ifdef yyset_in
#define nask_set_in_ALREADY_DEFINED
#else
#define yyset_in nask_set_in
#endif

#ifdef yyget_out
#define nask_get_out_ALREADY_DEFINED
#else
#define yyget_out nask_get_out
#endif

#ifdef yyset_out
#define nask_set_out_ALREADY_DEFINED
#else
#define yyset_out nask_set_out
#endif

#ifdef yyget_leng
#define nask_get_leng_ALREADY_DEFINED
#else
#define yyget_leng nask_get_leng
#endif

#ifdef yyget_text
#define nask_get_text_ALREADY_DEFINED
#else
#define yyget_text nask_get_text
#endif

#ifdef yyget_lineno
#define nask_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno nask_get_lineno
#endif

#ifdef yyset_lineno
#define nask_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno nask_set_lineno
#endif

#ifdef yyget_column
#define nask_get_column_ALREADY_DEFINED
#else
#define yyget_column nask_get_column
#endif

#ifdef yyset_column
#define nask_set_column_ALREADY_DEFINED
#else
#define yyset_column nask_set_column
#endif

#ifdef yywrap
#define nask_wrap_ALREADY_DEFINED
#else
#define yywrap nask_wrap
#endif

#ifdef yyget_lval
#define nask_get_lval_ALREADY_DEFINED
#else
#define yyget_lval nask_get_lval
#endif

#ifdef yyset_lval
#define nask_set_lval_ALREADY_DEFINED
#else
#define yyset_lval nask_set_lval
#endif

#ifdef yyget_lloc
#define nask_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc nask_get_lloc
#endif

#ifdef yyset_lloc
#define nask_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc nask_set_lloc
#endif

#ifdef yyalloc
#define nask_alloc_ALREADY_DEFINED
#else
#define yyalloc nask_alloc
#endif

#ifdef yyrealloc
#define nask_realloc_ALREADY_DEFINED
#else
#define yyrealloc nask_realloc
#endif

#ifdef yyfree
#define nask_free_ALREADY_DEFINED
#else
#define yyfree nask_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define nask_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 365
#define YY_END_OF_BUFFER 366
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[731] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  366,  364,  363,  351,
      363,  352,  343,    8,    6,    4,    3,    5,    7,  361,
      361,    9,  346,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,    1,    2,  364,  365,  355,
      354,  353,  360,  357,  358,  356,  359,  345,  344,  348,
      347,  351,  361,    0,  362,  362,    0,  362,  362,  362,
      362,  362,  362,  362,  362,  362,   26,  362,  362,  362,
      362,  362,  362,  362,  362,  362,   49,   50,  362,  362,

       53,   54,   55,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  150,  362,
      165,  167,  169,  171,  173,  175,  362,  362,  192,  193,
      196,  197,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  233,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,    0,  349,  350,    0,   10,   11,   12,   13,  362,

       15,   16,  362,   19,  362,  362,  362,   23,   24,  362,
       27,   28,   29,  362,  362,   32,   33,   34,   35,   36,
      362,   38,   39,  362,   45,   47,   48,   51,   52,  362,
       57,  362,   59,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,   95,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  129,  362,  362,  362,  362,  362,  362,  362,
      147,  362,  362,  151,  362,  157,  362,  362,  166,  168,
      362,  362,  174,  176,  177,  178,  180,  182,  183,  184,

      186,  188,  189,  190,  191,  194,  195,  362,  199,  200,
      201,  203,  204,  362,  206,  362,  362,  362,  362,  362,
      362,  219,  220,  221,  222,  228,  229,  230,  231,  362,
      234,  235,  362,  241,  362,  256,  257,  362,  362,  260,
      362,  270,  273,  274,  275,  362,  277,  278,  279,  362,
      362,  362,  362,  315,  317,  362,  362,  362,  322,  323,
      324,  362,  328,  329,  362,  362,  332,  362,  362,  362,
      362,  362,  362,  362,  362,  342,  349,  349,  362,  362,
       20,   21,  362,  362,   30,   31,   37,  362,  362,  362,
       46,  362,  362,  362,  362,   62,   63,   65,  362,   67,

      362,   69,   72,  362,  362,   75,   79,  362,  362,  362,
      362,   86,   87,  362,  362,  362,   91,  362,   96,  362,
      362,  362,  362,  104,  105,  362,  362,  362,  362,  111,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  126,  362,  362,  362,  132,  362,  134,  138,  362,
      142,  143,  362,  362,  148,  149,  152,  153,  154,  362,
      156,  158,  159,  160,  362,  162,  170,  362,  179,  181,
      185,  187,  198,  362,  205,  207,  208,  209,  210,  362,
      214,  362,  362,  362,  362,  362,  362,  242,  245,  248,
      362,  362,  261,  362,  264,  265,  266,  267,  268,  269,

      271,  272,  276,  362,  362,  284,  286,  288,  289,  290,
      292,  362,  308,  309,  312,  313,  314,  316,  318,  319,
      320,  321,  362,  330,  362,  333,  334,  335,  362,  337,
      362,  339,  340,  362,  362,   17,   22,   25,   40,   41,
       42,  362,   44,   56,   58,  362,   61,   64,   66,   68,
       70,  362,   74,   76,   77,   80,   81,   82,   84,   88,
      362,   90,   92,   93,   97,  362,  362,  362,  362,  103,
      106,  362,  362,  109,  362,  362,  362,  362,  362,  362,
      362,  118,  120,  362,  362,  123,  362,  362,  362,  128,
      130,  362,  133,  135,  136,  139,  362,  145,  362,  362,

      163,  164,  172,  202,  211,  212,  213,  215,  362,  218,
      223,  224,  225,  226,  227,  362,  236,  237,  238,  362,
      362,  243,  244,  246,  247,  249,  252,  253,  258,  259,
      262,  263,  280,  281,  282,  362,  285,  287,  291,  293,
      294,  296,  298,  299,  300,  302,  304,  305,  306,  307,
      310,  311,  325,  326,  327,  331,  362,  338,  341,  362,
       18,  362,   60,   71,  362,   78,   83,   85,  362,   94,
       98,   99,  100,  101,  102,  107,  108,  110,  112,  113,
      362,  115,  116,  117,  119,  362,  122,  124,  125,  362,
      131,  137,  140,  362,  362,  362,  161,  216,  217,  362,

      362,  240,  250,  251,  254,  255,  362,  295,  297,  301,
      303,  336,  362,   43,   73,   89,  114,  121,  127,  141,
      144,  146,  362,  362,  239,  283,   14,  155,  232,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    7,    8,    1,    9,    1,
        1,   10,   11,   12,   13,    1,   14,   15,   16,   17,
       18,   19,   19,   19,   19,   19,   19,   20,   21,    1,
        1,    1,    1,    1,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,    1,   51,    1,   52,   53,   54,   55,

       56,   57,   58,   58,   58,   58,   58,   58,   58,   59,
       58,   58,   58,   58,   58,   60,   58,   58,   58,   61,
       58,   58,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[62] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    1,
        1,    1,    1,    1,    3,    3,    3,    3,    3,    4,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3
    } ;

static const flex_int16_t yy_base[739] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   59,   60,
       63,   66,  161,  146,  131,  130,  120, 2400, 2400, 2400,
      102, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400,   57,
       62, 2400, 2400,   78,  101,  123,  159,  120,  187,   73,
       74,  141,  225,  264,  150,  118,   77,  221,  230,  297,
      143,   79,  168,  260,  313, 2400, 2400,   72, 2400, 2400,
     2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400,
     2400, 2400,  259,  335,    0,   75,   86,  346,  178,  181,
       76,  182,  199,  142,  226,  354,  304,  336,  309,  292,
      115,  375,  387,  355,  358,  294,  119,  356,  393,  392,

      394,  395,  400,  401,  399,  409,  413,  414,  423,  418,
      435,  437,  439,  451,  444,  457,  470,  472,  492,  473,
      496,  489,  495,  508,  515,  516,  530,  531,  534,  533,
      535,  536,  543,  556,  558,  559,  561,  590,  562,  581,
      563,  577,  580,  582,  584,  585,  611,  583,  619,  612,
      625,  620,  626,  634,  638,  639,  646,  648,  653,  654,
      655,  670,  673,  676,  677,  679,  685,  683,  692,  713,
      682,  714,  717,  719,  720,  721,  723,  740,  739,  741,
      748,  757,  747,  760,  763,  764,  776,  769,  778,  779,
      782,   71,  123, 2400,   67,  786,  788,  791,  795,  796,

      800,  803,  805,  804,  808,  809,  810,  817,  818,  822,
      826,  827,  830,  831,  834,  839,  843,  844,  846,  849,
      851,  852,  853,  856,  859,  861,  868,  869,  874,  875,
      881,  883,  887,  890,  888,  891,  893,  895,  897,  903,
      910,  912,  915,  917,  920,  925,  924,  933,  938,  939,
      946,  947,  952,  954,  953,  970,  972,  975,  976,  980,
      996,  988,  989,  995, 1003, 1004, 1011, 1018, 1019, 1023,
     1024, 1026, 1031, 1025, 1033, 1027, 1047, 1040, 1053, 1063,
     1057, 1066, 1067, 1069, 1070, 1076, 1082, 1079, 1088, 1097,
     1101, 1104, 1107, 1109, 1110, 1113, 1114, 1116, 1117, 1126,

     1133, 1123, 1135, 1136, 1138, 1141, 1142, 1145, 1148, 1151,
     1154, 1155, 1157, 1158, 1160, 1161, 1164, 1167, 1174, 1170,
     1176, 1173, 1180, 1183, 1189, 1192, 1195, 1198, 1199, 1205,
     1207, 1208, 1212, 1211, 1214, 1221, 1230, 1231, 1233, 1235,
     1237, 1238, 1236, 1254, 1257, 1259, 1260, 1263, 1267, 1275,
     1276, 1296, 1280, 1279, 1281, 1282, 1285, 1283, 1288, 1289,
     1305, 1319, 1321, 1325, 1326, 1328, 1329, 1331, 1333, 1338,
     1335, 1341, 1343, 1356, 1357, 1360, 2400,   60, 1362, 1369,
     1363, 1370, 1376, 1377, 1379, 1382, 1383, 1385, 1391, 1397,
     1398, 1400, 1403, 1404, 1410, 1407, 1412, 1419, 1424, 1425,

     1426, 1427, 1428, 1432, 1445, 1431, 1446, 1447, 1449, 1467,
     1468, 1469, 1470, 1471, 1472, 1473, 1476, 1474, 1475, 1489,
     1490, 1499, 1498, 1497, 1506, 1511, 1512, 1515, 1520, 1521,
     1527, 1529, 1537, 1542, 1545, 1547, 1551, 1552, 1554, 1557,
     1564, 1567, 1566, 1569, 1574, 1576, 1583, 1584, 1586, 1588,
     1590, 1591, 1596, 1605, 1606, 1608, 1610, 1611, 1615, 1620,
     1623, 1624, 1625, 1627, 1628, 1629, 1632, 1633, 1637, 1642,
     1646, 1647, 1649, 1651, 1652, 1654, 1655, 1659, 1661, 1667,
     1669, 1673, 1674, 1679, 1677, 1692, 1694, 1706, 1714, 1715,
     1716, 1721, 1718, 1723, 1724, 1737, 1739, 1742, 1743, 1744,

     1745, 1747, 1751, 1752, 1759, 1760, 1764, 1765, 1767, 1772,
     1773, 1778, 1774, 1796, 1788, 1800, 1801, 1803, 1804, 1808,
     1810, 1817, 1818, 1820, 1824, 1822, 1825, 1826, 1827, 1830,
     1839, 1840, 1843, 1845, 1846, 1849, 1847, 1862, 1864, 1865,
     1866, 1867, 1870, 1871, 1872, 1874, 1880, 1884, 1886, 1888,
     1890, 1892, 1893, 1894, 1898, 1896, 1902, 1906, 1908, 1910,
     1911, 1912, 1914, 1916, 1920, 1928, 1933, 1929, 1941, 1936,
     1942, 1945, 1948, 1955, 1957, 1960, 1961, 1964, 1963, 1967,
     1976, 1973, 1982, 1983, 1986, 1992, 1995, 2000, 2004, 2007,
     2008, 2010, 2013, 2017, 2022, 2023, 2026, 2027, 2029, 2035,

     2032, 2036, 2042, 2045, 2048, 2052, 2057, 2058, 2061, 2062,
     2064, 2065, 2066, 2070, 2071, 2074, 2079, 2080, 2083, 2086,
     2087, 2089, 2092, 2093, 2096, 2102, 2105, 2106, 2109, 2110,
     2114, 2115, 2123, 2124, 2127, 2128, 2129, 2131, 2132, 2133,
     2136, 2145, 2146, 2148, 2149, 2150, 2152, 2154, 2158, 2164,
     2168, 2170, 2171, 2172, 2173, 2174, 2176, 2177, 2178, 2180,
     2186, 2190, 2193, 2194, 2195, 2196, 2199, 2200, 2202, 2203,
     2208, 2215, 2216, 2217, 2218, 2220, 2221, 2222, 2224, 2225,
     2234, 2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244, 2246,
     2247, 2256, 2259, 2260, 2265, 2263, 2264, 2278, 2279, 2282,

     2283, 2284, 2285, 2286, 2288, 2298, 2300, 2301, 2303, 2304,
     2305, 2306, 2307, 2308, 2310, 2322, 2323, 2325, 2327, 2328,
     2329, 2330, 2331, 2332, 2335, 2337, 2344, 2345, 2347, 2400,
     2372, 2376, 2380, 2384, 2388, 2391, 2393, 2396
    } ;

static const flex_int16_t yy_def[739] =
    {   0,
      730,    1,  731,  731,  731,  731,  731,  731,  732,  732,
      733,  733,  734,  734,  735,  735,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  736,  736,  736,  736,  736,   36,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  730,  730,  737,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  738,  736,  730,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  737,   74,  730,  730,  736,  736,  736,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  138,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  730,  730,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  138,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,    0,
      730,  730,  730,  730,  730,  730,  730,  730
    } ;

static const flex_int16_t yy_nxt[2462] =
    {   0,
       18,   19,   20,   21,   22,   23,   18,   24,   18,   25,
       26,   27,   28,   29,   30,   31,   31,   31,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   40,   44,   45,   46,   47,   48,   40,   49,   50,
       51,   52,   53,   54,   55,   40,   40,   56,   18,   57,
       58,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   59,   59,   61,   61,   59,  377,   64,   59,  194,
       64,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   75,   75,   75,   75,   75,   75,   75,  194,  195,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   78,

       79,   74,   80,  182,   72,  203,  126,   62,   62,   75,
       81,   65,   82,  158,   65,  159,   83,   74,  160,  730,
       77,   66,   67,   75,   66,   67,   75,   75,   75,  377,
       84,   75,   71,   71,   77,  378,   85,   77,   77,   77,
       86,   87,   77,  156,   89,   90,   88,   91,   69,   75,
       75,   75,  217,  157,  104,   92,   93,  105,   75,   94,
       77,   77,   77,   69,  106,  127,   95,   75,  180,   77,
      730,  730,  181,  730,  128,  129,   75,  730,   77,  130,
       96,   97,  206,   98,   99,  154,   75,   77,  100,   75,
       75,  155,  730,  183,  730,  730,  101,   77,  730,  102,

       77,   77,  103,  107,  201,  202,  204,   75,  108,  109,
      110,  111,  112,  113,  730,  730,  114,  200,   77,  115,
      116,  117,  118,  119,  730,  120,  121,  122,  123,   75,
       76,  124,  125,   75,   75,  205,  730,  730,   75,  730,
       77,  730,  161,  730,   77,   77,  131,  132,  133,   77,
      134,  730,  135,  164,  165,  166,  162,  136,  137,  138,
      139,  140,  163,  730,  141,  167,  730,  207,   75,  168,
      730,  142,   75,   73,   73,   73,   73,   73,  730,   77,
      730,  184,  185,   77,  730,  143,  730,  730,  144,  145,
      146,  147,  730,  148,  730,  186,  149,  150,  187,  151,

       75,  730,   75,  152,  153,   75,  730,  730,  730,  730,
      730,   77,   75,   77,  730,  226,   77,   75,  169,  170,
      171,   75,  172,   77,  173,  174,  175,  211,   77,  176,
      177,  730,   77,  227,  188,  216,  189,  178,  179,  730,
      730,  215,  212,  213,   75,  190,  730,  730,  191,  193,
      193,  193,  193,  193,   75,   77,  193,  193,  193,  193,
      193,  193,   75,   75,   75,   77,   75,  196,  730,  730,
      197,  730,  730,   77,   77,   77,  214,   77,  730,  198,
      208,  730,  225,   75,  730,  199,  193,  193,  193,  193,
      193,  193,  209,  730,   77,   75,  224,  210,  218,  219,

       75,   75,   75,   75,  220,  730,   77,   75,   75,   75,
      222,   77,   77,   77,   77,  221,  228,   75,   77,   77,
       77,   75,   75,  223,  730,  231,   75,  730,   77,  730,
      730,   75,   77,   77,  229,  230,  236,   77,  237,  730,
      233,  232,   77,   75,  730,   75,  240,   75,  730,  234,
      241,  730,   75,  242,   77,  238,   77,  235,   77,   75,
      243,  730,  239,   77,  244,   75,  730,  730,  254,  730,
       77,  245,  247,  730,  248,  249,   77,  246,   75,  730,
       75,   75,  730,  250,  251,  252,  730,  730,  730,   77,
      253,   77,   77,  256,  257,  258,  730,   75,  255,  259,

       75,  730,  730,   75,   75,  260,  730,  266,   77,  261,
      262,   77,  267,  263,   77,   77,   75,  268,  276,  269,
      730,  270,  730,   75,   75,  271,  730,   77,  275,  277,
      264,  278,  265,  272,   77,   77,  273,  274,   75,   75,
      730,   75,   75,   75,   75,  730,  730,  280,  279,   77,
       77,   75,   77,   77,   77,   77,  281,  284,  288,  282,
      289,  290,   77,  730,   75,  730,   75,   75,  730,   75,
       75,   75,  283,  285,  286,   77,  287,   77,   77,  292,
       77,   77,   77,  293,  294,   75,  730,  291,   75,   75,
       75,   75,   75,   75,  730,  730,   77,  295,   75,   77,

       77,   77,   77,   77,   77,  311,  306,  316,  308,   77,
      730,  296,  297,  298,  730,  299,  307,  300,  309,   75,
       75,  310,  301,  312,  313,  302,  303,   75,   75,  304,
       77,   77,  730,   75,   75,  314,  305,  730,   77,   77,
      730,  730,   75,  317,   77,   77,   75,   75,  319,  320,
      315,  318,  322,   77,   75,  730,   75,   77,   77,  323,
      321,   75,   75,   75,  324,   77,  327,   77,  730,  730,
      326,  730,   77,   77,   77,  730,  325,  730,   75,  333,
      331,   75,  328,  730,   75,   75,  329,   75,  330,   77,
       75,   75,   77,   75,  332,   77,   77,  730,   77,  730,

       75,   77,   77,  350,   77,  730,  334,  730,  336,  730,
      338,   77,  335,  339,  337,  340,  345,  343,  341,  342,
      346,   75,   75,  344,  347,   75,  730,   75,   75,   75,
      348,   75,   77,   77,  730,  349,   77,  351,   77,   77,
       77,  353,   77,  730,  356,  357,  730,   75,   75,   75,
      730,  354,  730,  730,  352,   75,   75,  355,   77,   77,
       77,  364,  358,  359,  360,   75,   77,   77,   75,  361,
      730,   75,   75,  367,  730,  362,   77,   75,  363,   77,
      365,  366,   77,   77,   75,  368,   75,   75,   77,  369,
       75,  730,  370,  373,   75,   77,   75,   77,   77,   75,

      375,   77,  371,   75,   75,   77,  374,   77,   75,  372,
       77,   75,   75,   75,   77,   77,   75,   75,   75,   77,
      376,  730,   77,   77,   77,   75,   75,   77,   77,   77,
       75,  379,  380,  730,   75,   75,   77,   77,   75,   75,
      381,   77,   75,  384,  383,   77,   77,   75,  382,   77,
       77,   75,   75,   77,   75,  730,  385,   75,   77,   75,
       75,   75,   77,   77,   75,   77,  386,   75,   77,   75,
       77,   77,   77,  730,  730,   77,   75,   75,   77,  730,
       77,  730,   75,   75,  391,  390,  730,   77,   77,   75,
      387,   75,  388,   77,   77,   75,   75,  389,   75,   75,

       77,   75,   77,   75,  730,   75,   77,   77,  393,   77,
       77,   75,   77,  392,   77,  394,   77,  397,   75,  398,
       75,  395,   77,   75,  730,   75,  730,  730,   75,   77,
      396,   77,   75,   75,   77,  401,   77,  399,  404,   77,
      730,   75,  400,   77,   77,  402,   75,   75,  409,  407,
      408,  403,   77,  730,   75,   75,  405,   77,   77,  406,
       75,   75,   75,  412,  413,   77,   77,  411,  410,  419,
      415,   77,   77,   77,  730,  730,  416,  420,   75,  421,
       75,  730,  730,   75,   75,  425,  422,  414,   75,   77,
      423,   77,  417,  418,   77,   77,   75,   75,  730,   77,

      424,  427,  426,   75,   75,  730,  730,   77,   77,  428,
      429,   75,   75,  730,   77,   77,  430,  431,  730,   75,
      435,  433,   77,   77,  436,  730,   75,   75,  437,  434,
       77,   75,   75,   75,   75,   75,  432,   77,   77,   75,
      440,   75,   77,   77,   77,   77,   77,  448,   75,  730,
       77,  438,   77,  730,  444,   75,  445,  730,  442,   77,
      439,   75,  450,  441,  443,   75,   77,  446,  452,  730,
      447,   75,   77,  449,   75,   75,   77,   75,   75,  454,
      451,  730,   77,  730,   75,   77,   77,   75,   77,   77,
       75,  453,  458,  462,  459,   77,   75,  730,   77,  456,

      730,   77,  730,  730,  457,   75,  464,   77,  455,   75,
      460,  463,   75,  461,  465,   75,   77,   75,   75,  466,
       77,   75,   75,   77,   75,   75,   77,  730,   77,   77,
      730,   75,   77,   77,   75,   77,   77,  730,  469,  470,
      730,   75,   77,   75,   75,   77,   75,  467,  468,   75,
       75,  471,   77,   75,   77,   77,   75,   77,  472,   75,
       77,   77,   75,   75,   77,   75,   75,   77,   75,   75,
       77,  473,   75,   77,   77,   75,   77,   77,   75,   77,
       77,   75,   75,   77,   75,  730,   77,  730,   75,   77,
      730,   75,   77,   77,  730,   77,  474,   75,  475,   77,

       75,  476,   77,   75,  477,  479,   75,   75,   77,  480,
      478,   77,  481,   75,   77,   75,   75,   77,   77,   75,
       75,  730,   75,  730,   77,  730,   77,   77,  482,   75,
       77,   77,  488,   77,  484,  483,  486,  489,   75,   75,
       77,   75,  490,   75,   75,   75,   75,  485,  730,   77,
       77,  487,   77,  730,   77,   77,   77,   77,  730,  496,
      493,  497,   75,  730,  501,   75,  492,   75,   75,  494,
      491,   75,  502,   77,  498,   75,   77,  499,   77,   77,
      500,  495,   77,   75,   75,  503,   77,   75,   75,   75,
       75,   75,  730,   75,   77,   77,   75,   75,   77,   77,

       77,   77,   77,  518,   77,  519,  730,   77,   77,  730,
      730,  730,  730,   75,  504,  730,  505,  506,  507,  508,
      517,  509,  520,  510,   77,  521,  522,   75,  511,   75,
      512,  513,  514,   75,   75,  515,   75,   75,   77,   75,
       77,   75,  516,   75,   77,   77,   75,   77,   77,   75,
       77,   75,   77,  525,   77,  730,  730,   77,  523,  530,
       77,  730,   77,  730,   75,   75,  524,  532,   75,  526,
       75,   75,  529,  528,  527,   77,   77,   75,   75,   77,
      531,   77,   77,  533,   75,   75,  730,   75,   77,   77,
       75,   75,  730,   75,  535,   77,   77,  534,   77,   75,

      537,   77,   77,  536,   77,   75,   75,  539,   75,  540,
       77,   75,   75,  538,  542,   75,   77,   77,   75,   77,
       75,  543,   77,   77,  544,  547,   77,   75,  541,   77,
      730,   77,   75,   75,   75,   75,   75,  730,   77,   75,
       75,  545,  546,   77,   77,   77,   77,   77,  548,  730,
       77,   77,  730,   75,   75,   75,  730,   75,  730,  730,
      549,  730,  730,  551,   77,   77,   77,  554,   77,  555,
      550,  552,  556,  557,  553,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,  730,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,  564,   75,   75,  730,

      558,  730,  730,  560,  730,   75,   75,   75,   77,   77,
      559,  561,  563,  562,   75,  567,   77,   77,   77,   75,
       75,  730,  730,   75,  566,   77,  568,  570,   75,   75,
       77,   77,  565,  569,   77,   75,  572,   75,  730,   77,
       77,  730,  571,  730,  574,   75,   77,  730,   77,  575,
       75,  573,  577,   75,  578,   75,   77,  730,  580,   75,
       75,   77,   75,  581,   77,   75,   77,  730,  579,  576,
       77,   77,   75,   77,   75,   75,   77,   75,  582,  586,
      584,  583,   75,   77,   75,   77,   77,  585,   77,  587,
      589,   75,   75,   77,   75,   77,   75,  730,   75,   75,

      588,  730,   77,   77,   75,   77,  590,   77,  592,   77,
       77,  730,  591,   75,   75,   77,   75,  597,   75,   75,
      594,  596,  595,   75,   77,   77,  593,   77,   75,   77,
       77,   75,   75,   75,   77,   75,   75,   75,  730,   77,
       75,   75,   77,   77,   77,   75,   77,   77,   77,  598,
       75,   77,   77,  601,   75,   75,   77,   75,  599,   75,
       75,   77,   75,   75,  600,   77,   77,   75,   77,   75,
       77,   77,  602,   77,   77,   75,  604,   75,   77,  603,
       77,   75,   75,  730,  730,   75,   77,   75,   77,  605,
      730,  606,   77,   77,  608,  611,   77,  612,   77,  617,

       75,  618,   75,  609,  730,  730,  730,  730,  730,  730,
      607,   77,  616,   77,   75,  610,  613,  614,  615,  621,
      619,  620,   75,   75,   75,   77,   75,  730,  730,   75,
      622,   75,   75,   77,   77,   77,  626,   77,  624,  627,
       77,  628,   77,   77,  630,   75,  730,   75,  631,  623,
       75,   75,   75,   75,  629,   75,   77,  625,   77,   75,
       75,   77,   77,   77,   77,  730,   77,   75,   75,  632,
       77,   77,   75,   75,  633,   75,  634,  730,   77,   77,
       75,   75,   75,   77,   77,  637,   77,  730,  636,  638,
      730,   77,   77,   77,  730,  635,   75,  639,  640,  641,

      642,  643,  730,  644,   75,  645,  730,   77,   75,   75,
      646,   75,   75,  647,  648,   77,   75,  649,   75,   77,
       77,  651,   77,   77,  650,   75,   75,   77,   75,   77,
       75,  652,   75,   75,   75,   75,   77,   77,   75,   77,
      653,   77,  654,   77,   77,   77,   77,   75,   75,   77,
      730,   75,  730,   75,   75,   75,  730,   75,   77,   77,
      730,  655,   77,  656,   77,   77,   77,  659,   77,  657,
       75,  661,   75,   75,   75,   75,  730,  658,   75,   75,
       75,   77,   75,   77,   77,   77,   77,  660,   75,   77,
       77,   77,   75,   77,   75,  662,   75,  730,   75,   77,

       75,   75,   75,   77,   75,   77,   75,   77,  663,   77,
       75,   77,   77,   77,   75,   77,   75,   77,   75,   75,
       75,   77,   75,  730,   75,   77,  664,   77,   75,   77,
       77,   77,  665,   77,  666,   77,   75,   75,  730,   77,
      730,   75,  667,  730,   75,  674,  668,   77,   77,   75,
       75,  669,   77,   75,  670,   77,   75,  675,  672,  730,
       77,   77,  730,   75,   77,   75,  730,   77,   75,   75,
      671,   75,   75,  673,   77,   75,   77,  677,  730,   77,
       77,   75,   77,   77,   75,  679,   77,  730,  685,  676,
       75,   75,   77,  730,   75,   77,  730,  678,  681,  730,

       75,   77,   77,   75,  680,   77,  682,  683,   75,  730,
      684,   77,   75,  730,   77,   75,   75,  686,   75,   77,
      688,   75,  730,   77,  687,   75,   77,   77,  730,   77,
       75,   75,   77,  689,   75,   75,   77,   75,  730,  690,
       75,   77,   77,   75,   75,   77,   77,  730,   77,  694,
       75,   77,  691,   75,   77,   77,   75,  730,  692,  693,
       75,   77,  697,  695,   77,   75,   75,   77,  696,   75,
       75,   77,   75,   75,   75,  730,   77,   77,   75,   75,
       77,   77,   75,   77,   77,   77,  698,   75,   75,   77,
       77,   75,  730,   77,   75,   75,  730,   75,   77,   77,

       75,   75,   77,  700,   75,   77,   77,  699,   77,  730,
       75,   77,   77,   75,   75,   77,  730,   75,   75,  730,
      701,   77,   75,   75,   77,   77,  703,  702,   77,   77,
      705,   75,   75,   77,   77,   75,   75,   75,  730,   75,
       75,   75,   77,   77,   75,  704,   77,   77,   77,  706,
       77,   77,   77,   75,   75,   77,   75,   75,   75,  730,
       75,  708,   75,  707,   77,   77,   75,   77,   77,   77,
      709,   77,   75,   77,  710,  711,   75,   77,   75,   75,
       75,   75,   75,   77,   75,   75,   75,   77,   75,   77,
       77,   77,   77,   77,   75,   77,   77,   77,   75,   77,

      712,   75,   75,   75,   75,   77,  730,   75,   75,   77,
       75,   75,   77,   77,   77,   77,   75,  714,   77,   77,
      713,   77,   77,   75,   75,   75,   75,   77,   75,   75,
       75,  715,   75,   75,   77,   77,   77,   77,  716,   77,
       77,   77,   75,   77,   77,   75,   75,   75,   75,   75,
       75,   75,   75,   77,   75,   75,   77,   77,   77,   77,
       77,   77,   77,   77,   75,   77,   77,   75,   75,  730,
      730,   75,   75,   75,  730,   77,  717,  730,   77,   77,
      722,  718,   77,   77,   77,  719,   75,   75,  723,  730,
       75,   75,   75,   75,   75,  720,   75,   77,   77,  730,

      721,   77,   77,   77,   77,   77,   75,   77,   75,   75,
      725,   75,   75,   75,   75,   75,   75,   77,   75,   77,
       77,  730,   77,   77,   77,   77,   77,   77,  724,   77,
       75,   75,  727,   75,  726,   75,   75,   75,   75,   75,
       75,   77,   77,   75,   77,   75,   77,   77,   77,   77,
       77,   77,   75,   75,   77,   75,   77,  729,  730,  730,
      730,  730,  730,   77,   77,  730,   77,  730,  730,  730,
      730,  728,   59,   59,   59,   59,   60,   60,   60,   60,
       63,   63,   63,   63,   68,   68,   68,   68,   70,   70,
       70,   70,   76,   76,   76,  192,  192,   75,   75,   17,

      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730
    } ;

static const flex_int16_t yy_chk[2462] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    9,   10,    9,   10,   11,  378,   11,   12,  195,
       12,   30,   30,   30,   30,   30,   31,   31,   31,   31,
       31,   40,   41,   76,   81,   47,   34,   52,   77,   77,
      192,   58,   40,   41,   76,   81,   47,   34,   52,   34,

       34,   30,   34,   52,   21,   81,   41,    9,   10,   35,
       34,   11,   34,   47,   12,   47,   34,   30,   47,   17,
       35,   11,   11,   91,   12,   12,   46,   97,   38,  193,
       35,   36,   16,   15,   91,  193,   35,   46,   97,   38,
       35,   35,   36,   46,   36,   36,   35,   36,   14,   42,
       84,   51,   91,   46,   38,   36,   36,   38,   45,   36,
       42,   84,   51,   13,   38,   42,   36,   37,   51,   45,
        0,    0,   51,    0,   42,   42,   53,    0,   37,   42,
       37,   37,   84,   37,   37,   45,   79,   53,   37,   80,
       82,   45,    0,   53,    0,    0,   37,   79,    0,   37,

       80,   82,   37,   39,   80,   80,   82,   83,   39,   39,
       39,   39,   39,   39,    0,    0,   39,   79,   83,   39,
       39,   39,   39,   39,    0,   39,   39,   39,   39,   48,
       39,   39,   39,   43,   85,   83,    0,    0,   49,    0,
       48,    0,   48,    0,   43,   85,   43,   43,   43,   49,
       43,    0,   43,   49,   49,   49,   48,   43,   43,   43,
       43,   43,   48,    0,   43,   49,    0,   85,   54,   49,
        0,   43,   44,   73,   73,   73,   73,   73,    0,   54,
        0,   54,   54,   44,    0,   44,    0,    0,   44,   44,
       44,   44,    0,   44,    0,   54,   44,   44,   54,   44,

       90,    0,   96,   44,   44,   50,    0,    0,    0,    0,
        0,   90,   87,   96,    0,   96,   50,   89,   50,   50,
       50,   55,   50,   87,   50,   50,   50,   87,   89,   50,
       50,    0,   55,   96,   55,   90,   55,   50,   50,    0,
        0,   89,   87,   87,   88,   55,    0,    0,   55,   74,
       74,   74,   74,   74,   78,   88,   74,   74,   74,   74,
       74,   74,   86,   94,   98,   78,   95,   78,    0,    0,
       78,    0,    0,   86,   94,   98,   88,   95,    0,   78,
       86,    0,   95,   92,    0,   78,   74,   74,   74,   74,
       74,   74,   86,    0,   92,   93,   94,   86,   92,   92,

      100,   99,  101,  102,   92,    0,   93,  105,  103,  104,
       93,  100,   99,  101,  102,   92,   99,  106,  105,  103,
      104,  107,  108,   93,    0,  104,  110,    0,  106,    0,
        0,  109,  107,  108,  100,  103,  108,  110,  108,    0,
      105,  104,  109,  111,    0,  112,  110,  113,    0,  106,
      110,    0,  115,  110,  111,  109,  112,  107,  113,  114,
      111,    0,  109,  115,  111,  116,    0,    0,  115,    0,
      114,  112,  114,    0,  114,  114,  116,  113,  117,    0,
      118,  120,    0,  114,  114,  114,    0,    0,    0,  117,
      114,  118,  120,  117,  117,  117,    0,  122,  116,  117,

      119,    0,    0,  123,  121,  117,    0,  120,  122,  117,
      118,  119,  120,  119,  123,  121,  124,  121,  123,  121,
        0,  121,    0,  125,  126,  121,    0,  124,  122,  124,
      119,  124,  119,  121,  125,  126,  121,  121,  127,  128,
        0,  130,  129,  131,  132,    0,    0,  125,  124,  127,
      128,  133,  130,  129,  131,  132,  126,  129,  130,  127,
      131,  132,  133,    0,  134,    0,  135,  136,    0,  137,
      139,  141,  128,  129,  129,  134,  129,  135,  136,  134,
      137,  139,  141,  135,  136,  142,    0,  133,  143,  140,
      144,  148,  145,  146,    0,    0,  142,  137,  138,  143,

      140,  144,  148,  145,  146,  145,  140,  148,  143,  138,
        0,  138,  138,  138,    0,  138,  140,  138,  143,  147,
      150,  144,  138,  145,  146,  138,  138,  149,  152,  138,
      147,  150,    0,  151,  153,  147,  138,    0,  149,  152,
        0,    0,  154,  149,  151,  153,  155,  156,  151,  151,
      147,  150,  152,  154,  157,    0,  158,  155,  156,  152,
      151,  159,  160,  161,  153,  157,  156,  158,    0,    0,
      155,    0,  159,  160,  161,    0,  154,    0,  162,  161,
      159,  163,  157,    0,  164,  165,  157,  166,  158,  162,
      171,  168,  163,  167,  160,  164,  165,    0,  166,    0,

      169,  171,  168,  171,  167,    0,  162,    0,  164,    0,
      165,  169,  163,  165,  164,  166,  168,  167,  166,  166,
      169,  170,  172,  167,  169,  173,    0,  174,  175,  176,
      169,  177,  170,  172,    0,  170,  173,  172,  174,  175,
      176,  173,  177,    0,  175,  176,    0,  179,  178,  180,
        0,  174,    0,    0,  172,  183,  181,  174,  179,  178,
      180,  179,  177,  178,  178,  182,  183,  181,  184,  178,
        0,  185,  186,  182,    0,  178,  182,  188,  178,  184,
      180,  181,  185,  186,  187,  183,  189,  190,  188,  184,
      191,    0,  185,  188,  196,  187,  197,  189,  190,  198,

      190,  191,  186,  199,  200,  196,  189,  197,  201,  187,
      198,  202,  204,  203,  199,  200,  205,  206,  207,  201,
      191,    0,  202,  204,  203,  208,  209,  205,  206,  207,
      210,  200,  203,    0,  211,  212,  208,  209,  213,  214,
      205,  210,  215,  210,  207,  211,  212,  216,  206,  213,
      214,  217,  218,  215,  219,    0,  214,  220,  216,  221,
      222,  223,  217,  218,  224,  219,  215,  225,  220,  226,
      221,  222,  223,    0,    0,  224,  227,  228,  225,    0,
      226,    0,  229,  230,  225,  224,    0,  227,  228,  231,
      221,  232,  223,  229,  230,  233,  235,  223,  234,  236,

      231,  237,  232,  238,    0,  239,  233,  235,  232,  234,
      236,  240,  237,  230,  238,  234,  239,  237,  241,  238,
      242,  235,  240,  243,    0,  244,    0,    0,  245,  241,
      236,  242,  247,  246,  243,  241,  244,  239,  243,  245,
        0,  248,  240,  247,  246,  242,  249,  250,  247,  245,
      246,  242,  248,    0,  251,  252,  244,  249,  250,  244,
      253,  255,  254,  250,  250,  251,  252,  249,  248,  254,
      252,  253,  255,  254,    0,    0,  252,  254,  256,  254,
      257,    0,    0,  258,  259,  255,  254,  251,  260,  256,
      254,  257,  253,  253,  258,  259,  262,  263,    0,  260,

      254,  257,  256,  264,  261,    0,    0,  262,  263,  258,
      259,  265,  266,    0,  264,  261,  260,  261,    0,  267,
      264,  262,  265,  266,  265,    0,  268,  269,  266,  263,
      267,  270,  271,  274,  272,  276,  261,  268,  269,  273,
      269,  275,  270,  271,  274,  272,  276,  274,  278,    0,
      273,  267,  275,    0,  273,  277,  273,    0,  271,  278,
      268,  279,  276,  270,  272,  281,  277,  273,  278,    0,
      273,  280,  279,  275,  282,  283,  281,  284,  285,  280,
      277,    0,  280,    0,  286,  282,  283,  288,  284,  285,
      287,  279,  285,  286,  285,  286,  289,    0,  288,  283,

        0,  287,    0,    0,  284,  290,  287,  289,  282,  291,
      285,  286,  292,  285,  287,  293,  290,  294,  295,  288,
      291,  296,  297,  292,  298,  299,  293,    0,  294,  295,
        0,  302,  296,  297,  300,  298,  299,    0,  296,  297,
        0,  301,  302,  303,  304,  300,  305,  291,  292,  306,
      307,  300,  301,  308,  303,  304,  309,  305,  301,  310,
      306,  307,  311,  312,  308,  313,  314,  309,  315,  316,
      310,  308,  317,  311,  312,  318,  313,  314,  320,  315,
      316,  322,  319,  317,  321,    0,  318,    0,  323,  320,
        0,  324,  322,  319,    0,  321,  311,  325,  314,  323,

      326,  316,  324,  327,  317,  319,  328,  329,  325,  320,
      318,  326,  321,  330,  327,  331,  332,  328,  329,  334,
      333,    0,  335,    0,  330,    0,  331,  332,  325,  336,
      334,  333,  334,  335,  330,  325,  333,  334,  337,  338,
      336,  339,  335,  340,  343,  341,  342,  332,    0,  337,
      338,  333,  339,    0,  340,  343,  341,  342,    0,  341,
      340,  341,  344,    0,  342,  345,  339,  346,  347,  340,
      338,  348,  342,  344,  341,  349,  345,  341,  346,  347,
      341,  340,  348,  350,  351,  346,  349,  354,  353,  355,
      356,  358,    0,  357,  350,  351,  359,  360,  354,  353,

      355,  356,  358,  354,  357,  355,    0,  359,  360,    0,
        0,    0,    0,  361,  350,    0,  351,  352,  352,  352,
      353,  352,  356,  352,  361,  357,  358,  362,  352,  363,
      352,  352,  352,  364,  365,  352,  366,  367,  362,  368,
      363,  369,  352,  371,  364,  365,  370,  366,  367,  372,
      368,  373,  369,  366,  371,    0,    0,  370,  362,  371,
      372,    0,  373,    0,  374,  375,  365,  373,  376,  368,
      379,  381,  370,  369,  368,  374,  375,  380,  382,  376,
      372,  379,  381,  374,  383,  384,    0,  385,  380,  382,
      386,  387,    0,  388,  379,  383,  384,  375,  385,  389,

      383,  386,  387,  380,  388,  390,  391,  388,  392,  388,
      389,  393,  394,  384,  389,  396,  390,  391,  395,  392,
      397,  390,  393,  394,  392,  395,  396,  398,  388,  395,
        0,  397,  399,  400,  401,  402,  403,    0,  398,  406,
      404,  393,  394,  399,  400,  401,  402,  403,  397,    0,
      406,  404,    0,  405,  407,  408,    0,  409,    0,    0,
      399,    0,    0,  402,  405,  407,  408,  406,  409,  406,
      401,  404,  408,  409,  405,  410,  411,  412,  413,  414,
      415,  416,  418,  419,  417,    0,  410,  411,  412,  413,
      414,  415,  416,  418,  419,  417,  418,  420,  421,    0,

      410,    0,    0,  414,    0,  424,  423,  422,  420,  421,
      411,  415,  417,  416,  425,  422,  424,  423,  422,  426,
      427,    0,    0,  428,  421,  425,  422,  423,  429,  430,
      426,  427,  420,  422,  428,  431,  426,  432,    0,  429,
      430,    0,  425,    0,  428,  433,  431,    0,  432,  429,
      434,  427,  432,  435,  432,  436,  433,    0,  433,  437,
      438,  434,  439,  434,  435,  440,  436,    0,  432,  431,
      437,  438,  441,  439,  443,  442,  440,  444,  435,  439,
      437,  436,  445,  441,  446,  443,  442,  438,  444,  440,
      442,  447,  448,  445,  449,  446,  450,    0,  451,  452,

      441,    0,  447,  448,  453,  449,  443,  450,  445,  451,
      452,    0,  444,  454,  455,  453,  456,  453,  457,  458,
      448,  450,  448,  459,  454,  455,  447,  456,  460,  457,
      458,  461,  462,  463,  459,  464,  465,  466,    0,  460,
      467,  468,  461,  462,  463,  469,  464,  465,  466,  454,
      470,  467,  468,  466,  471,  472,  469,  473,  460,  474,
      475,  470,  476,  477,  465,  471,  472,  478,  473,  479,
      474,  475,  466,  476,  477,  480,  474,  481,  478,  468,
      479,  482,  483,    0,    0,  485,  480,  484,  481,  480,
        0,  480,  482,  483,  481,  482,  485,  482,  484,  485,

      486,  485,  487,  481,    0,    0,    0,    0,    0,    0,
      480,  486,  484,  487,  488,  481,  482,  482,  483,  487,
      485,  486,  489,  490,  491,  488,  493,    0,    0,  492,
      488,  494,  495,  489,  490,  491,  490,  493,  489,  490,
      492,  490,  494,  495,  492,  496,    0,  497,  494,  488,
      498,  499,  500,  501,  491,  502,  496,  489,  497,  503,
      504,  498,  499,  500,  501,    0,  502,  505,  506,  494,
      503,  504,  507,  508,  504,  509,  504,    0,  505,  506,
      510,  511,  513,  507,  508,  506,  509,    0,  505,  507,
        0,  510,  511,  513,    0,  504,  515,  510,  511,  512,

      512,  512,    0,  512,  514,  512,    0,  515,  516,  517,
      512,  518,  519,  512,  512,  514,  520,  512,  521,  516,
      517,  514,  518,  519,  512,  522,  523,  520,  524,  521,
      526,  514,  525,  527,  528,  529,  522,  523,  530,  524,
      523,  526,  523,  525,  527,  528,  529,  531,  532,  530,
        0,  533,    0,  534,  535,  537,    0,  536,  531,  532,
        0,  523,  533,  525,  534,  535,  537,  534,  536,  529,
      538,  536,  539,  540,  541,  542,    0,  531,  543,  544,
      545,  538,  546,  539,  540,  541,  542,  535,  547,  543,
      544,  545,  548,  546,  549,  542,  550,    0,  551,  547,

      552,  553,  554,  548,  556,  549,  555,  550,  546,  551,
      557,  552,  553,  554,  558,  556,  559,  555,  560,  561,
      562,  557,  563,    0,  564,  558,  551,  559,  565,  560,
      561,  562,  552,  563,  555,  564,  566,  568,    0,  565,
        0,  567,  558,    0,  570,  568,  559,  566,  568,  569,
      571,  561,  567,  572,  564,  570,  573,  569,  567,    0,
      569,  571,    0,  574,  572,  575,    0,  573,  576,  577,
      566,  579,  578,  567,  574,  580,  575,  573,    0,  576,
      577,  582,  579,  578,  581,  576,  580,    0,  582,  572,
      583,  584,  582,    0,  585,  581,    0,  575,  578,    0,

      586,  583,  584,  587,  577,  585,  579,  580,  588,    0,
      581,  586,  589,    0,  587,  590,  591,  584,  592,  588,
      587,  593,    0,  589,  585,  594,  590,  591,    0,  592,
      595,  596,  593,  588,  597,  598,  594,  599,    0,  589,
      601,  595,  596,  600,  602,  597,  598,    0,  599,  597,
      603,  601,  592,  604,  600,  602,  605,    0,  595,  596,
      606,  603,  600,  598,  604,  607,  608,  605,  599,  609,
      610,  606,  611,  612,  613,    0,  607,  608,  614,  615,
      609,  610,  616,  611,  612,  613,  609,  617,  618,  614,
      615,  619,    0,  616,  620,  621,    0,  622,  617,  618,

      623,  624,  619,  616,  625,  620,  621,  609,  622,    0,
      626,  623,  624,  627,  628,  625,    0,  629,  630,    0,
      620,  626,  631,  632,  627,  628,  626,  621,  629,  630,
      628,  633,  634,  631,  632,  635,  636,  637,    0,  638,
      639,  640,  633,  634,  641,  626,  635,  636,  637,  628,
      638,  639,  640,  642,  643,  641,  644,  645,  646,    0,
      647,  641,  648,  636,  642,  643,  649,  644,  645,  646,
      642,  647,  650,  648,  645,  646,  651,  649,  652,  653,
      654,  655,  656,  650,  657,  658,  659,  651,  660,  652,
      653,  654,  655,  656,  661,  657,  658,  659,  662,  660,

      657,  663,  664,  665,  666,  661,    0,  667,  668,  662,
      669,  670,  663,  664,  665,  666,  671,  662,  667,  668,
      660,  669,  670,  672,  673,  674,  675,  671,  676,  677,
      678,  665,  679,  680,  672,  673,  674,  675,  669,  676,
      677,  678,  681,  679,  680,  682,  683,  684,  685,  686,
      687,  688,  689,  681,  690,  691,  682,  683,  684,  685,
      686,  687,  688,  689,  692,  690,  691,  693,  694,    0,
        0,  696,  697,  695,    0,  692,  681,    0,  693,  694,
      695,  686,  696,  697,  695,  690,  698,  699,  696,    0,
      700,  701,  702,  703,  704,  693,  705,  698,  699,    0,

      694,  700,  701,  702,  703,  704,  706,  705,  707,  708,
      701,  709,  710,  711,  712,  713,  714,  706,  715,  707,
      708,    0,  709,  710,  711,  712,  713,  714,  700,  715,
      716,  717,  713,  718,  707,  719,  720,  721,  722,  723,
      724,  716,  717,  725,  718,  726,  719,  720,  721,  722,
      723,  724,  727,  728,  725,  729,  726,  724,    0,    0,
        0,    0,    0,  727,  728,    0,  729,    0,    0,    0,
        0,  723,  731,  731,  731,  731,  732,  732,  732,  732,
      733,  733,  733,  733,  734,  734,  734,  734,  735,  735,
      735,  735,  736,  736,  736,  737,  737,  738,  738,  730,

      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "nask.l"
/* -*- c -*- This FLex file was machine-generated by the BNF converter */
#define YY_NO_INPUT 1
/* Additional data for the lexer: a buffer for lexing string literals. */
#line 10 "nask.l"
#include "absyn.hh"
#include "bison.hh"

#define initialize_lexer nask__initialize_lexer

/* BEGIN extensible string buffer */

#include "buffer.hh"

/* The initial size of the buffer to lex string literals. */
#define LITERAL_BUFFER_INITIAL_SIZE 1024

/* The pointer to the literal buffer. */
#define literal_buffer yyextra

/* Initialize the literal buffer. */
#define LITERAL_BUFFER_CREATE() literal_buffer = newBuffer(LITERAL_BUFFER_INITIAL_SIZE)

/* Append characters at the end of the buffer. */
#define LITERAL_BUFFER_APPEND(s) bufferAppendString(literal_buffer, s)

/* Append a character at the end of the buffer. */
#define LITERAL_BUFFER_APPEND_CHAR(c) bufferAppendChar(literal_buffer, c)

/* Release the buffer, returning a pointer to its content. */
#define LITERAL_BUFFER_HARVEST() releaseBuffer(literal_buffer)

/* In exceptional cases, e.g. when reaching EOF, we have to free the buffer. */
#define LITERAL_BUFFER_FREE() freeBuffer(literal_buffer)

/* END extensible string buffer */

static void update_loc(YYLTYPE* loc, char* text)
{
  loc->first_line = loc->last_line;
  loc->first_column = loc->last_column;
  int i = 0;
  for (; text[i] != '\0'; ++i) {
      if (text[i] == '\n') {
          ++loc->last_line;
          loc->last_column = 0;
      } else {
          ++loc->last_column;
      }
  }
}
#define YY_USER_ACTION update_loc(yylloc, yytext);

#line 1493 "lexer.cc"

#line 1495 "lexer.cc"

#define INITIAL 0
#define CHAR 1
#define CHARESC 2
#define CHAREND 3
#define STRING 4
#define ESCAPED 5
#define COMMENT 6
#define COMMENT1 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE Buffer

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 67 "nask.l"


#line 1785 "lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 731 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2400 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 69 "nask.l"
return _LBRACK;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 70 "nask.l"
return _RBRACK;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 71 "nask.l"
return _COMMA;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 72 "nask.l"
return _PLUS;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 73 "nask.l"
return _MINUS;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 74 "nask.l"
return _STAR;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 75 "nask.l"
return _SLASH;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 76 "nask.l"
return _PERCENT;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 77 "nask.l"
return _COLON;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 78 "nask.l"
return _KW_AAA;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 79 "nask.l"
return _KW_AAD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 80 "nask.l"
return _KW_AAM;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 81 "nask.l"
return _KW_AAS;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 82 "nask.l"
return _KW_ABSOLUTE;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 83 "nask.l"
return _KW_ADC;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 84 "nask.l"
return _KW_ADD;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 85 "nask.l"
return _KW_ALIGN;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 86 "nask.l"
return _KW_ALIGNB;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 87 "nask.l"
return _KW_AND;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 88 "nask.l"
return _KW_ARPL;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 89 "nask.l"
return _KW_BITS;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 90 "nask.l"
return _KW_BOUND;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 91 "nask.l"
return _KW_BSF;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 92 "nask.l"
return _KW_BSR;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 93 "nask.l"
return _KW_BSWAP;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 94 "nask.l"
return _KW_BT;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 95 "nask.l"
return _KW_BTC;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 96 "nask.l"
return _KW_BTR;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 97 "nask.l"
return _KW_BTS;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 98 "nask.l"
return _KW_BYTE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 99 "nask.l"
return _KW_CALL;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 100 "nask.l"
return _KW_CBW;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 101 "nask.l"
return _KW_CDQ;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 102 "nask.l"
return _KW_CLC;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 103 "nask.l"
return _KW_CLD;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 104 "nask.l"
return _KW_CLI;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 105 "nask.l"
return _KW_CLTS;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 106 "nask.l"
return _KW_CMC;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 107 "nask.l"
return _KW_CMP;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 108 "nask.l"
return _KW_CMPSB;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 109 "nask.l"
return _KW_CMPSD;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 110 "nask.l"
return _KW_CMPSW;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 111 "nask.l"
return _KW_CMPXCHG;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 112 "nask.l"
return _KW_CPUID;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 113 "nask.l"
return _KW_CWD;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 114 "nask.l"
return _KW_CWDE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 115 "nask.l"
return _KW_DAA;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 116 "nask.l"
return _KW_DAS;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 117 "nask.l"
return _KW_DB;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 118 "nask.l"
return _KW_DD;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 119 "nask.l"
return _KW_DEC;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 120 "nask.l"
return _KW_DIV;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 121 "nask.l"
return _KW_DQ;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 122 "nask.l"
return _KW_DT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 123 "nask.l"
return _KW_DW;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 124 "nask.l"
return _KW_DWORD;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 125 "nask.l"
return _KW_END;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 126 "nask.l"
return _KW_ENTER;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 127 "nask.l"
return _KW_EQU;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 128 "nask.l"
return _KW_EXTERN;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 129 "nask.l"
return _KW_F2XM1;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 130 "nask.l"
return _KW_FABS;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 131 "nask.l"
return _KW_FADD;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 132 "nask.l"
return _KW_FADDP;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 133 "nask.l"
return _KW_FBLD;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 134 "nask.l"
return _KW_FBSTP;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 135 "nask.l"
return _KW_FCHS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 136 "nask.l"
return _KW_FCLEX;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 137 "nask.l"
return _KW_FCOM;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 138 "nask.l"
return _KW_FCOMP;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 139 "nask.l"
return _KW_FCOMPP;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 140 "nask.l"
return _KW_FCOS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 141 "nask.l"
return _KW_FDECSTP;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 142 "nask.l"
return _KW_FDISI;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 143 "nask.l"
return _KW_FDIV;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 144 "nask.l"
return _KW_FDIVP;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 145 "nask.l"
return _KW_FDIVR;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 146 "nask.l"
return _KW_FDIVRP;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 147 "nask.l"
return _KW_FENI;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 148 "nask.l"
return _KW_FFREE;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 149 "nask.l"
return _KW_FIADD;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 150 "nask.l"
return _KW_FICOM;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 151 "nask.l"
return _KW_FICOMP;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 152 "nask.l"
return _KW_FIDIV;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 153 "nask.l"
return _KW_FIDIVR;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 154 "nask.l"
return _KW_FILD;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 155 "nask.l"
return _KW_FILE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 156 "nask.l"
return _KW_FIMUL;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 157 "nask.l"
return _KW_FINCSTP;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 158 "nask.l"
return _KW_FINIT;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 159 "nask.l"
return _KW_FIST;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 160 "nask.l"
return _KW_FISTP;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 161 "nask.l"
return _KW_FISUB;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 162 "nask.l"
return _KW_FISUBR;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 163 "nask.l"
return _KW_FLD;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 164 "nask.l"
return _KW_FLD1;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 165 "nask.l"
return _KW_FLDCW;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 166 "nask.l"
return _KW_FLDENV;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 167 "nask.l"
return _KW_FLDL2E;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 168 "nask.l"
return _KW_FLDL2T;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 169 "nask.l"
return _KW_FLDLG2;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 170 "nask.l"
return _KW_FLDLN2;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 171 "nask.l"
return _KW_FLDPI;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 172 "nask.l"
return _KW_FLDZ;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 173 "nask.l"
return _KW_FMUL;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 174 "nask.l"
return _KW_FMULP;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 175 "nask.l"
return _KW_FNCLEX;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 176 "nask.l"
return _KW_FNDISI;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 177 "nask.l"
return _KW_FNENI;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 178 "nask.l"
return _KW_FNINIT;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 179 "nask.l"
return _KW_FNOP;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 180 "nask.l"
return _KW_FNSAVE;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 181 "nask.l"
return _KW_FNSTCW;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 182 "nask.l"
return _KW_FNSTENV;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 183 "nask.l"
return _KW_FNSTSW;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 184 "nask.l"
return _KW_FORMAT;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 185 "nask.l"
return _KW_FPATAN;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 186 "nask.l"
return _KW_FPREM;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 187 "nask.l"
return _KW_FPREM1;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 188 "nask.l"
return _KW_FPTAN;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 189 "nask.l"
return _KW_FRNDINT;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 190 "nask.l"
return _KW_FRSTOR;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 191 "nask.l"
return _KW_FSAVE;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 192 "nask.l"
return _KW_FSCALE;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 193 "nask.l"
return _KW_FSETPM;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 194 "nask.l"
return _KW_FSIN;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 195 "nask.l"
return _KW_FSINCOS;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 196 "nask.l"
return _KW_FSQRT;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 197 "nask.l"
return _KW_FST;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 198 "nask.l"
return _KW_FSTCW;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 199 "nask.l"
return _KW_FSTENV;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 200 "nask.l"
return _KW_FSTP;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 201 "nask.l"
return _KW_FSTSW;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 202 "nask.l"
return _KW_FSUB;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 203 "nask.l"
return _KW_FSUBP;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 204 "nask.l"
return _KW_FSUBR;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 205 "nask.l"
return _KW_FSUBRP;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 206 "nask.l"
return _KW_FTST;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 207 "nask.l"
return _KW_FUCOM;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 208 "nask.l"
return _KW_FUCOMP;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 209 "nask.l"
return _KW_FUCOMPP;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 210 "nask.l"
return _KW_FXAM;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 211 "nask.l"
return _KW_FXCH;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 212 "nask.l"
return _KW_FXTRACT;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 213 "nask.l"
return _KW_FYL2X;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 214 "nask.l"
return _KW_FYL2XP1;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 215 "nask.l"
return _KW_HLT;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 216 "nask.l"
return _KW_IDIV;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 217 "nask.l"
return _KW_IMUL;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 218 "nask.l"
return _KW_IN;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 219 "nask.l"
return _KW_INC;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 220 "nask.l"
return _KW_INCO;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 221 "nask.l"
return _KW_INSB;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 222 "nask.l"
return _KW_INSD;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 223 "nask.l"
return _KW_INSTRSET;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 224 "nask.l"
return _KW_INSW;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 225 "nask.l"
return _KW_INT;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 226 "nask.l"
return _KW_INT3;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 227 "nask.l"
return _KW_INTO;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 228 "nask.l"
return _KW_INVD;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 229 "nask.l"
return _KW_INVLPG;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 230 "nask.l"
return _KW_IRET;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 231 "nask.l"
return _KW_IRETD;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 232 "nask.l"
return _KW_IRETW;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 233 "nask.l"
return _KW_JA;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 234 "nask.l"
return _KW_JAE;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 235 "nask.l"
return _KW_JB;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 236 "nask.l"
return _KW_JBE;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 237 "nask.l"
return _KW_JC;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 238 "nask.l"
return _KW_JCXZ;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 239 "nask.l"
return _KW_JE;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 240 "nask.l"
return _KW_JECXZ;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 241 "nask.l"
return _KW_JG;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 242 "nask.l"
return _KW_JGE;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 243 "nask.l"
return _KW_JL;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 244 "nask.l"
return _KW_JLE;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 245 "nask.l"
return _KW_JMP;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 246 "nask.l"
return _KW_JNA;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 247 "nask.l"
return _KW_JNAE;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 248 "nask.l"
return _KW_JNB;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 249 "nask.l"
return _KW_JNBE;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 250 "nask.l"
return _KW_JNC;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 251 "nask.l"
return _KW_JNE;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 252 "nask.l"
return _KW_JNG;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 253 "nask.l"
return _KW_JNGE;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 254 "nask.l"
return _KW_JNL;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 255 "nask.l"
return _KW_JNLE;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 256 "nask.l"
return _KW_JNO;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 257 "nask.l"
return _KW_JNP;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 258 "nask.l"
return _KW_JNS;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 259 "nask.l"
return _KW_JNZ;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 260 "nask.l"
return _KW_JO;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 261 "nask.l"
return _KW_JP;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 262 "nask.l"
return _KW_JPE;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 263 "nask.l"
return _KW_JPO;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 264 "nask.l"
return _KW_JS;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 265 "nask.l"
return _KW_JZ;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 266 "nask.l"
return _KW_LAHF;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 267 "nask.l"
return _KW_LAR;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 268 "nask.l"
return _KW_LDS;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 269 "nask.l"
return _KW_LEA;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 270 "nask.l"
return _KW_LEAVE;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 271 "nask.l"
return _KW_LES;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 272 "nask.l"
return _KW_LFS;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 273 "nask.l"
return _KW_LGDT;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 274 "nask.l"
return _KW_LGS;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 275 "nask.l"
return _KW_LIDT;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 276 "nask.l"
return _KW_LLDT;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 277 "nask.l"
return _KW_LMSW;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 278 "nask.l"
return _KW_LOCK;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 279 "nask.l"
return _KW_LODSB;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 280 "nask.l"
return _KW_LODSD;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 281 "nask.l"
return _KW_LODSW;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 282 "nask.l"
return _KW_LOOP;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 283 "nask.l"
return _KW_LOOPE;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 284 "nask.l"
return _KW_LOOPNE;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 285 "nask.l"
return _KW_LOOPNZ;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 286 "nask.l"
return _KW_LOOPZ;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 287 "nask.l"
return _KW_LSL;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 288 "nask.l"
return _KW_LSS;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 289 "nask.l"
return _KW_LTR;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 290 "nask.l"
return _KW_MOV;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 291 "nask.l"
return _KW_MOVSB;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 292 "nask.l"
return _KW_MOVSD;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 293 "nask.l"
return _KW_MOVSW;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 294 "nask.l"
return _KW_MOVSX;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 295 "nask.l"
return _KW_MOVZX;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 296 "nask.l"
return _KW_MUL;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 297 "nask.l"
return _KW_NEG;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 298 "nask.l"
return _KW_NOP;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 299 "nask.l"
return _KW_NOT;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 300 "nask.l"
return _KW_OPTIMIZE;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 301 "nask.l"
return _KW_OR;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 302 "nask.l"
return _KW_ORG;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 303 "nask.l"
return _KW_OUT;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 304 "nask.l"
return _KW_OUTSB;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 305 "nask.l"
return _KW_OUTSD;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 306 "nask.l"
return _KW_OUTSW;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 307 "nask.l"
return _KW_PADDING;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 308 "nask.l"
return _KW_PADSET;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 309 "nask.l"
return _KW_POP;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 310 "nask.l"
return _KW_POPA;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 311 "nask.l"
return _KW_POPAD;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 312 "nask.l"
return _KW_POPAW;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 313 "nask.l"
return _KW_POPF;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 314 "nask.l"
return _KW_POPFD;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 315 "nask.l"
return _KW_POPFW;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 316 "nask.l"
return _KW_PUSH;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 317 "nask.l"
return _KW_PUSHA;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 318 "nask.l"
return _KW_PUSHAD;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 319 "nask.l"
return _KW_PUSHAW;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 320 "nask.l"
return _KW_PUSHD;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 321 "nask.l"
return _KW_PUSHF;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 322 "nask.l"
return _KW_PUSHFD;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 323 "nask.l"
return _KW_PUSHFW;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 324 "nask.l"
return _KW_RCL;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 325 "nask.l"
return _KW_RCR;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 326 "nask.l"
return _KW_RDMSR;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 327 "nask.l"
return _KW_RDPMC;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 328 "nask.l"
return _KW_REP;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 329 "nask.l"
return _KW_REPE;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 330 "nask.l"
return _KW_REPNE;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 331 "nask.l"
return _KW_REPNZ;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 332 "nask.l"
return _KW_REPZ;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 333 "nask.l"
return _KW_RESB;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 334 "nask.l"
return _KW_RESD;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 335 "nask.l"
return _KW_RESQ;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 336 "nask.l"
return _KW_REST;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 337 "nask.l"
return _KW_RESW;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 338 "nask.l"
return _KW_RET;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 339 "nask.l"
return _KW_RETF;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 340 "nask.l"
return _KW_RETN;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 341 "nask.l"
return _KW_ROL;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 342 "nask.l"
return _KW_ROR;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 343 "nask.l"
return _KW_RSM;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 344 "nask.l"
return _KW_SAHF;
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 345 "nask.l"
return _KW_SAL;
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 346 "nask.l"
return _KW_SAR;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 347 "nask.l"
return _KW_SBB;
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 348 "nask.l"
return _KW_SCASB;
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 349 "nask.l"
return _KW_SCASD;
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 350 "nask.l"
return _KW_SCASW;
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 351 "nask.l"
return _KW_SECTION;
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 352 "nask.l"
return _KW_SETA;
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 353 "nask.l"
return _KW_SETAE;
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 354 "nask.l"
return _KW_SETB;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 355 "nask.l"
return _KW_SETBE;
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 356 "nask.l"
return _KW_SETC;
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 357 "nask.l"
return _KW_SETE;
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 358 "nask.l"
return _KW_SETG;
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 359 "nask.l"
return _KW_SETGE;
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 360 "nask.l"
return _KW_SETL;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 361 "nask.l"
return _KW_SETLE;
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 362 "nask.l"
return _KW_SETNA;
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 363 "nask.l"
return _KW_SETNAE;
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 364 "nask.l"
return _KW_SETNB;
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 365 "nask.l"
return _KW_SETNBE;
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 366 "nask.l"
return _KW_SETNC;
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 367 "nask.l"
return _KW_SETNE;
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 368 "nask.l"
return _KW_SETNG;
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 369 "nask.l"
return _KW_SETNGE;
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 370 "nask.l"
return _KW_SETNL;
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 371 "nask.l"
return _KW_SETNLE;
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 372 "nask.l"
return _KW_SETNO;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 373 "nask.l"
return _KW_SETNP;
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 374 "nask.l"
return _KW_SETNS;
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 375 "nask.l"
return _KW_SETNZ;
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 376 "nask.l"
return _KW_SETO;
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 377 "nask.l"
return _KW_SETP;
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 378 "nask.l"
return _KW_SETPE;
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 379 "nask.l"
return _KW_SETPO;
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 380 "nask.l"
return _KW_SETS;
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 381 "nask.l"
return _KW_SETZ;
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 382 "nask.l"
return _KW_SGDT;
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 383 "nask.l"
return _KW_SHL;
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 384 "nask.l"
return _KW_SHLD;
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 385 "nask.l"
return _KW_SHR;
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 386 "nask.l"
return _KW_SHRD;
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 387 "nask.l"
return _KW_SIDT;
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 388 "nask.l"
return _KW_SLDT;
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 389 "nask.l"
return _KW_SMSW;
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 390 "nask.l"
return _KW_STC;
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 391 "nask.l"
return _KW_STD;
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 392 "nask.l"
return _KW_STI;
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 393 "nask.l"
return _KW_STOSB;
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 394 "nask.l"
return _KW_STOSD;
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 395 "nask.l"
return _KW_STOSW;
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 396 "nask.l"
return _KW_STR;
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 397 "nask.l"
return _KW_SUB;
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 398 "nask.l"
return _KW_TEST;
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 399 "nask.l"
return _KW_TIMES;
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 400 "nask.l"
return _KW_UD2;
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 401 "nask.l"
return _KW_VERR;
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 402 "nask.l"
return _KW_VERW;
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 403 "nask.l"
return _KW_WAIT;
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 404 "nask.l"
return _KW_WBINVD;
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 405 "nask.l"
return _KW_WORD;
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 406 "nask.l"
return _KW_WRMSR;
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 407 "nask.l"
return _KW_XADD;
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 408 "nask.l"
return _KW_XCHG;
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 409 "nask.l"
return _KW_XLATB;
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 410 "nask.l"
return _KW_XOR;
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 412 "nask.l"
BEGIN COMMENT; /* BNFC: block comment "#" "\\n" */
	YY_BREAK
case 344:
/* rule 344 can match eol */
YY_RULE_SETUP
#line 413 "nask.l"
BEGIN INITIAL;
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 414 "nask.l"
/* skip */;
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 415 "nask.l"
BEGIN COMMENT1; /* BNFC: block comment ";" "\\n" */
	YY_BREAK
case 347:
/* rule 347 can match eol */
YY_RULE_SETUP
#line 416 "nask.l"
BEGIN INITIAL;
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 417 "nask.l"
/* skip */;
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 419 "nask.l"
yylval->_string = strdup(yytext); return T_Hex;
	YY_BREAK
case 350:
/* rule 350 can match eol */
YY_RULE_SETUP
#line 420 "nask.l"
yylval->_string = strdup(yytext); return T_Label;
	YY_BREAK
case 351:
/* rule 351 can match eol */
YY_RULE_SETUP
#line 421 "nask.l"
yylval->_string = strdup(yytext); return T_NL;
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 422 "nask.l"
LITERAL_BUFFER_CREATE(); BEGIN STRING;
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 423 "nask.l"
BEGIN ESCAPED;
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 424 "nask.l"
yylval->_string = LITERAL_BUFFER_HARVEST(); BEGIN INITIAL; return _STRING_;
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 425 "nask.l"
LITERAL_BUFFER_APPEND_CHAR(yytext[0]);
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 426 "nask.l"
LITERAL_BUFFER_APPEND_CHAR('\n'); BEGIN STRING;
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 427 "nask.l"
LITERAL_BUFFER_APPEND_CHAR('"');  BEGIN STRING;
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 428 "nask.l"
LITERAL_BUFFER_APPEND_CHAR('\\'); BEGIN STRING;
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 429 "nask.l"
LITERAL_BUFFER_APPEND_CHAR('\t'); BEGIN STRING;
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 430 "nask.l"
LITERAL_BUFFER_APPEND(yytext);    BEGIN STRING;
	YY_BREAK
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(ESCAPED):
#line 431 "nask.l"
LITERAL_BUFFER_FREE(); return _ERROR_;
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 432 "nask.l"
yylval->_int = atoi(yytext); return _INTEGER_;
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 433 "nask.l"
yylval->_string = strdup(yytext); return _IDENT_;
	YY_BREAK
case 363:
/* rule 363 can match eol */
YY_RULE_SETUP
#line 434 "nask.l"
/* ignore white space. */;
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 435 "nask.l"
return _ERROR_;
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 437 "nask.l"
ECHO;
	YY_BREAK
#line 3677 "lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CHAR):
case YY_STATE_EOF(CHARESC):
case YY_STATE_EOF(CHAREND):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(COMMENT1):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 731 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 731 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 730);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 437 "nask.l"


yyscan_t initialize_lexer(FILE *inp)
{
  yyscan_t scanner;
  if (yylex_init_extra(NULL, &scanner)) return 0;
  if (inp) yyrestart(inp, scanner);
  return scanner;
}


