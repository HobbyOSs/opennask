#line 2 "lexer.cc"
#include <memory>

#line 5 "lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer nask_FlexLexer

#ifdef yyalloc
#define nask_alloc_ALREADY_DEFINED
#else
#define yyalloc nask_alloc
#endif

#ifdef yyrealloc
#define nask_realloc_ALREADY_DEFINED
#else
#define yyrealloc nask_realloc
#endif

#ifdef yyfree
#define nask_free_ALREADY_DEFINED
#else
#define yyfree nask_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 381
#define YY_END_OF_BUFFER 382
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[752] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  382,  380,  379,  379,
      358,  349,  357,    8,  369,    9,   10,    6,    4,    3,
        5,    7,  378,  378,   11,  352,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,    1,    2,
      371,  381,  370,  376,  372,  373,  374,  375,  377,  361,
      360,  359,  368,  366,  367,  362,  363,  364,  365,  351,
      350,  354,  353,  357,  357,  356,  378,    0,  357,  357,
      357,  357,  357,  357,  357,  357,  357,   28,  357,  357,

      357,  357,  357,  357,  357,  357,  357,   51,   52,  357,
      357,   55,   56,   57,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      154,  357,  169,  171,  173,  175,  177,  179,  357,  357,
      196,  197,  200,  201,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      238,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,

      357,  357,  357,  357,  357,  355,   12,   13,   14,   15,
      357,   17,   18,  357,   21,  357,  357,  357,   25,   26,
      357,   29,   30,   31,  357,  357,   34,   35,   36,   37,
       38,  357,   40,   41,  357,   47,   49,   50,   53,   54,
      357,   59,  357,   61,  357,  357,  357,  357,   67,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,   98,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  132,  357,  357,  357,  357,  357,
      357,  357,  357,  151,  357,  357,  155,  357,  161,  357,

      357,  170,  172,  357,  357,  178,  180,  181,  182,  184,
      186,  187,  188,  190,  192,  193,  194,  195,  198,  199,
      357,  203,  204,  205,  207,  208,  357,  210,  357,  357,
      357,  357,  357,  357,  223,  224,  225,  226,  232,  357,
      234,  235,  236,  357,  239,  240,  357,  246,  357,  261,
      262,  357,  357,  265,  357,  275,  278,  279,  280,  357,
      282,  283,  284,  357,  357,  357,  357,  320,  357,  323,
      357,  357,  357,  328,  329,  330,  357,  334,  335,  357,
      357,  338,  357,  357,  357,  357,  357,  357,  357,  357,
      348,  355,  355,  357,  357,   22,   23,  357,  357,   32,

       33,   39,  357,  357,  357,   48,  357,  357,  357,  357,
       64,   65,   68,  357,   70,  357,   72,   75,  357,  357,
       78,   82,  357,  357,  357,  357,   89,   90,  357,  357,
      357,   94,  357,   99,  357,  357,  357,  357,  107,  108,
      357,  357,  357,  357,  114,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  129,  357,  357,  357,
      135,  357,  137,  141,  357,  145,  146,  357,  357,  357,
      152,  153,  156,  157,  158,  357,  160,  162,  163,  164,
      357,  166,  174,  357,  183,  185,  189,  191,  202,  357,
      209,  211,  212,  213,  214,  357,  218,  357,  357,  233,

      357,  357,  357,  357,  247,  250,  253,  357,  357,  266,
      357,  269,  270,  271,  272,  273,  274,  276,  277,  281,
      357,  357,  289,  291,  293,  294,  295,  297,  357,  313,
      314,  317,  318,  319,  321,  357,  324,  325,  326,  327,
      357,  336,  357,  339,  340,  341,  357,  343,  357,  345,
      346,  357,  357,   19,   24,   27,   42,   43,   44,  357,
       46,   58,   60,  357,   63,   66,   69,   71,   73,  357,
       77,   79,   80,   83,   84,   85,   87,   91,  357,   93,
       95,   96,  100,  357,  357,  357,  357,  106,  109,  357,
      357,  112,  357,  357,  357,  357,  357,  357,  357,  121,

      123,  357,  357,  126,  357,  357,  357,  131,  133,  357,
      136,  138,  139,  142,  357,  148,  357,  357,  357,  167,
      168,  176,  206,  215,  216,  217,  219,  357,  222,  227,
      228,  229,  230,  231,  357,  241,  242,  243,  357,  357,
      248,  249,  251,  252,  254,  257,  258,  263,  264,  267,
      268,  285,  286,  287,  357,  290,  292,  296,  298,  299,
      301,  303,  304,  305,  307,  309,  310,  311,  312,  315,
      316,  322,  331,  332,  333,  337,  357,  344,  347,  357,
       20,  357,   62,   74,  357,   81,   86,   88,  357,   97,
      101,  102,  103,  104,  105,  110,  111,  113,  115,  116,

      357,  118,  119,  120,  122,  357,  125,  127,  128,  357,
      134,  140,  143,  357,  357,  150,  357,  165,  220,  221,
      357,  357,  245,  255,  256,  259,  260,  357,  300,  302,
      306,  308,  342,  357,   45,   76,   92,  117,  124,  130,
      144,  147,  149,  357,  357,  244,  288,   16,  159,  237,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    6,    7,    1,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   21,   21,   21,   21,   21,   22,   23,    1,
        1,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,    1,   53,    1,   54,   55,   56,   57,

       58,   59,   60,   60,   60,   60,   60,   60,   60,   61,
       60,   60,   60,   62,   60,   63,   60,   60,   60,   64,
       60,   60,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[65] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    1,    2,    2,    2,    2,
        2,    2,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2
    } ;

static const flex_int16_t yy_base[761] =
    {   0,
        0,    0,   57,   58,   64,   69,  105,  103,   65,   67,
       78,   83,  107,  104,   93,   86,   85, 4705, 4705, 4705,
     4705, 4705,   68, 4705, 4705, 4705, 4705, 4705, 4705, 4705,
     4705, 4705,   58,   74, 4705, 4705,  141,  137,  162,  185,
      196,  231,   82,  142,  205,  256,  282,  201,  199,  293,
      307,  321,  351,  374,   97,  385,  315,  384, 4705, 4705,
     4705, 4705, 4705, 4705, 4705, 4705, 4705, 4705, 4705, 4705,
     4705, 4705, 4705, 4705, 4705, 4705, 4705, 4705, 4705, 4705,
     4705, 4705, 4705,  166,  351,  408,   81,  445,  453,  414,
      425,  426,  428,  470,  476,  490,  509,  510,  505,  511,

      515,  534,  551,  554,  564,  569,  591,  431,  566,  583,
      596,  606,  608,  610,  623,  620,  625,  640,  645,  659,
      669,  677,  673,  691,  692,  709,  645,  757,  733,  734,
      739,  787,  751,  745,  794,  806,  802,  737,  817,  820,
      839,  838,  852,  857,  856,  871,  884,  889,  892,  922,
      910,  913,  912,  914,  947,  953,  967,  968,  970,  971,
      981,  996,  987, 1011, 1021, 1022, 1025, 1026, 1046, 1048,
     1051, 1065, 1071, 1088, 1090, 1094, 1100, 1115, 1111, 1134,
     1144, 1156, 1145, 1167, 1168, 1190, 1186, 1196, 1185, 1209,
     1238, 1239, 1240, 1211, 1253, 1250, 1251, 1264, 1263, 1274,

     1292, 1296, 1306, 1304, 1307,  100, 1309, 1319, 1324, 1329,
     1346, 1348, 1349, 1359, 1361, 1363, 1373, 1381, 1385, 1391,
     1405, 1402, 1413, 1415, 1417, 1425, 1427, 1435, 1437, 1447,
     1450, 1467, 1461, 1469, 1480, 1479, 1491, 1493, 1504, 1512,
     1515, 1523, 1525, 1533, 1536, 1537, 1555, 1557, 1560, 1565,
     1579, 1585, 1587, 1589, 1590, 1608, 1613, 1611, 1614, 1640,
     1641, 1643, 1653, 1654, 1666, 1714, 1668, 1693, 1711, 1708,
     1719, 1716, 1744, 1729, 1756, 1764, 1769, 1768, 1783, 1779,
     1796, 1797, 1801, 1819,  400, 1822, 1824, 1836, 1837, 1847,
     1842, 1865, 1876, 1864, 1870, 1887, 1882, 1899, 1910, 1922,

     1888, 1921, 1932, 1940, 1944, 1945, 1950, 1955, 1958, 1972,
     1973, 1977, 1990, 1995, 1998, 2000, 2013, 2018, 2023, 2035,
     2040, 2041, 2043, 2046, 2058, 2064, 2075, 2083, 2086, 2094,
     2097, 2098, 2100, 2118, 2108, 2119, 2140, 2143, 2148, 2153,
     2154, 2158, 2168, 2173, 2176, 2193, 2197, 2194, 2221, 2198,
     2216, 2219, 2222, 2227, 2238, 2267, 2271, 2273, 2277, 2279,
     2285, 2291, 2296, 2297, 2299, 2329, 2319, 2321, 2341, 2354,
     2355, 2369, 2373, 2374, 2377, 2387, 2391, 2395, 2399, 2410,
     2409, 2414, 2428, 2432, 2436, 2449, 2450, 2455, 2482, 2472,
     2478, 4705,   78, 2484, 2492, 2495, 2505, 2517, 2518, 2528,

     2532, 2540, 2550, 2554, 2546, 2568, 2573, 2572, 2576, 2586,
     2596, 2608, 2600, 2613, 2618, 2621, 2626, 2636, 2640, 2648,
     2661, 2663, 2666, 2669, 2684, 2689, 2702, 2703, 2706, 2721,
     2717, 2723, 2725, 2729, 2742, 2743, 2762, 2779, 2783, 2785,
     2791, 2787, 2811, 2815, 2812, 2833, 2824, 2839, 2852, 2865,
     2866, 2867, 2869, 2887, 2889, 2891, 2906, 2911, 2919, 2921,
     2923, 2931, 2941, 2933, 2945, 2946, 2951, 2963, 2973, 2985,
     2986, 2990, 2991, 2996, 3008, 3009, 3013, 3019, 3030, 3031,
     3036, 3041, 3042, 3054, 3059, 3064, 3076, 3082, 3084, 3086,
     3087, 3104, 3105, 3109, 3110, 3127, 3128, 3145, 3149, 3153,

     3163, 3168, 3188, 3202, 3182, 3207, 3221, 3217, 3225, 3227,
     3251, 3246, 3250, 3261, 3269, 3271, 3275, 3279, 3283, 3296,
     3304, 3301, 3315, 3319, 3329, 3333, 3347, 3352, 3382, 3370,
     3373, 3372, 3375, 3387, 3407, 3412, 3424, 3426, 3427, 3429,
     3432, 3430, 3447, 3452, 3466, 3469, 3480, 3481, 3486, 3484,
     3492, 3498, 3506, 3532, 3509, 3520, 3526, 3534, 3538, 3546,
     3549, 3552, 3560, 3566, 3574, 3578, 3586, 3589, 3601, 3600,
     3603, 3606, 3611, 3614, 3626, 3629, 3640, 3643, 3651, 3654,
     3655, 3665, 3668, 3669, 3683, 3680, 3694, 3695, 3697, 3709,
     3717, 3719, 3722, 3723, 3737, 3749, 3751, 3752, 3762, 3763,

     3774, 3776, 3795, 3797, 3803, 3808, 3820, 3818, 3831, 3832,
     3837, 3845, 3857, 3860, 3880, 3872, 3882, 3859, 3885, 3899,
     3912, 3914, 3917, 3922, 3925, 3935, 3936, 3949, 3939, 3947,
     3957, 3968, 3979, 3981, 3991, 3989, 3993, 4003, 4011, 4014,
     4013, 4016, 4037, 4039, 4043, 4056, 4057, 4071, 4076, 4079,
     4082, 4093, 4096, 4099, 4101, 4111, 4116, 4119, 4121, 4122,
     4145, 4141, 4155, 4156, 4173, 4170, 4174, 4175, 4185, 4196,
     4197, 4198, 4199, 4200, 4210, 4218, 4233, 4239, 4250, 4251,
     4252, 4253, 4263, 4273, 4274, 4275, 4276, 4278, 4293, 4295,
     4296, 4308, 4318, 4319, 4329, 4330, 4332, 4344, 4347, 4352,

     4358, 4362, 4364, 4372, 4384, 4386, 4387, 4392, 4398, 4404,
     4406, 4412, 4416, 4427, 4426, 4441, 4446, 4456, 4460, 4461,
     4466, 4471, 4481, 4483, 4485, 4489, 4506, 4510, 4511, 4524,
     4529, 4534, 4535, 4539, 4547, 4559, 4564, 4569, 4574, 4579,
     4584, 4587, 4589, 4592, 4619, 4604, 4609, 4614, 4624, 4637,
     4705, 4690, 4692, 4694, 4696, 4698, 4700, 4702,   78,   71
    } ;

static const flex_int16_t yy_def[761] =
    {   0,
      751,    1,  752,  752,  753,  753,  754,  754,  755,  755,
      756,  756,  757,  757,  758,  758,  751,  751,  751,  751,
      751,  751,  759,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  759,  759,   37,   37,
      759,   37,  759,  759,   37,   37,   37,  759,  759,  759,
      759,  759,   37,  759,  759,  759,   37,   37,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  759,  759,  760,  751,  751,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,

      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,   37,  759,
      759,  759,  759,  759,   37,  759,  759,  759,  759,  759,
      759,  128,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  128,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  128,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  128,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,

      759,  759,  759,  760,  760,   88,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  266,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,

      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,   40,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  150,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  751,  751,  759,  759,  759,  759,  759,  759,  759,

      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  128,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,

      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  150,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,

      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,

      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
        0,  751,  751,  751,  751,  751,  751,  751,  751,  751
    } ;

static const flex_int16_t yy_nxt[4770] =
    {   0,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   23,   32,   33,   34,   34,   34,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   23,   47,   48,   49,   50,   51,   23,
       52,   53,   54,   55,   56,   57,   58,   23,   23,   59,
       18,   60,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   62,   62,   62,   62,   71,   62,
       71,   62,  205,   84,   87,   87,   87,   87,   87,   85,
       62,   74,   84,  392,  751,   62,   74,   84,   83,   86,
       87,   87,   87,   87,   87,   83,   84,   87,   87,   87,

       87,   87,   84,   86,   88,  392,   81,   63,   63,   81,
       69,   84,   69,  393,  751,   72,  137,   72,   86,  751,
       84,   88,   65,  194,   66,   67,   68,   65,   75,   66,
       67,   68,  751,   75,   84,  751,   76,  751,   77,   78,
       79,   76,   84,   77,   78,   79,   84,   84,  751,   84,
      751,   84,  751,  751,  751,   84,   84,  751,   86,  751,
      751,  751,   86,   86,   89,   90,  751,   91,   95,  751,
      751,   84,  751,  751,   96,   92,  138,   93,   97,   98,
       84,   94,  751,  751,   99,  100,  101,   86,  102,   84,
      751,  751,  751,   84,   84,  751,  103,  104,   85,  751,

      105,   84,   85,  751,   84,  751,   84,  106,  107,  108,
       84,  109,  110,   84,  751,   84,  111,   86,   84,   85,
       86,   85,   86,  751,  112,   85,  168,  113,   85,   85,
      114,  139,  115,  751,  751,  116,  169,  751,  166,   85,
      140,  141,  117,  751,  167,  142,  751,  751,   84,  118,
      751,   84,  751,   84,  119,  120,  121,  122,  123,  124,
      751,  751,  125,  751,  751,  126,  127,  128,  129,  130,
      751,  131,  132,  133,  134,  751,  751,  135,  136,  143,
      144,  145,   85,  146,  751,  147,  751,  751,  751,  751,
      148,  149,  150,  151,  152,  751,   85,  153,   84,  751,

      751,  751,  751,  751,  154,  155,   85,   84,  156,  157,
      158,  159,   84,  160,   86,  751,  161,  162,   85,  163,
      751,   84,   85,  164,  165,  751,   84,  751,   86,  751,
      173,  170,  751,  171,  751,   84,  172,  751,  196,  197,
      751,   85,   86,  751,  174,   84,  176,  177,  178,   85,
      175,   85,  198,  751,  751,  199,   84,  751,  179,   84,
      751,  751,  180,  751,  751,   84,  751,  751,  751,  751,
      751,  751,   86,   84,  181,  182,  183,   85,  184,   84,
      185,  186,  187,  751,  751,  188,  189,   85,   84,  751,
       84,   85,  751,  190,  191,   86,  751,  751,  751,   84,

      751,  192,  751,   84,  751,  193,   86,  200,   85,  201,
       85,  751,  195,  204,  751,  751,  751,   85,  202,   84,
       85,  203,  204,  751,   85,  459,   84,  460,   84,  204,
       84,   84,  751,   84,   85,   86,   84,   84,  461,   84,
       84,  462,   84,  751,  751,   84,   86,   86,   85,   86,
      212,  213,   86,  751,  215,  211,  751,  214,   84,  751,
      204,  206,  206,  206,  206,  206,   84,   84,  206,  206,
      206,  206,  206,  206,   86,   84,  207,   84,   84,  208,
       84,   84,  751,   84,   84,  751,  751,  751,  209,  751,
       84,   86,  751,  751,  210,   84,  751,   86,  206,  206,

      206,  206,  206,  206,   84,   84,  751,  751,  216,  751,
       84,   86,  751,  751,   84,   84,   84,  751,  217,   84,
       84,  751,   84,   84,   84,   84,   86,  751,   84,   84,
       86,   86,   86,  218,  751,  222,   86,  219,  751,   84,
      751,  751,   84,  751,  751,  226,  751,  225,   84,  220,
      223,  224,  751,  751,  221,   86,   84,   84,  751,   84,
      227,   84,   84,   84,  751,   84,  751,   84,   84,   84,
      751,   84,   86,  228,   84,   86,  229,  230,   84,  233,
       84,  751,  231,   84,  751,   86,   84,   86,   84,  751,
       86,  751,  234,  232,  751,  236,   84,   84,  751,  751,

      751,   84,  751,   84,   86,   84,   84,  235,  239,  751,
       84,   84,   86,   84,  237,   84,   84,   86,   84,  751,
       84,   84,   84,  751,   84,   84,  751,   86,   84,   86,
       84,   86,  238,  751,   84,   84,  751,   84,  751,   84,
      240,   86,  751,   84,   86,   84,   86,  241,   84,  242,
       84,  751,  751,  751,   84,  751,  751,  751,   84,   84,
       84,   86,   84,  244,   84,  243,   86,  245,   85,  247,
      751,  248,   84,   84,   84,   84,  751,   84,   84,   85,
       86,   85,   84,   84,  751,  249,  246,   84,  267,  751,
       86,   84,   84,  250,   86,  751,   84,   84,   86,  252,

      251,  751,  751,  253,  255,   84,  254,  751,  256,  257,
      751,   84,   86,  751,   84,  259,   85,  260,  261,  751,
      751,   84,  751,   84,  751,   84,  262,  263,  264,   84,
       86,  258,   85,  265,  751,  266,  751,  751,   84,   84,
      751,  751,   84,   84,   84,  751,  751,   84,   84,  751,
       84,   84,  751,   84,   86,   86,   84,  275,   86,   84,
       86,   84,   84,  751,  751,   84,   86,  751,  751,  751,
      288,   84,   86,  274,  276,  278,  277,  751,   86,  294,
      279,  751,  268,  269,  270,   84,   84,  751,  271,   84,
      751,   84,  287,  751,  272,  751,  751,   84,  273,   84,

      751,  751,  751,   84,  751,  751,  751,   84,   84,   84,
      280,   84,  281,   85,  282,   86,   84,  289,  283,  290,
       84,  751,   84,   86,   85,   84,  284,   86,   85,  285,
      286,   84,  751,  751,   84,  751,  291,  751,   86,  293,
      292,   86,  751,   84,   84,  751,   84,  751,  295,  751,
      751,  751,   84,   84,   84,  751,  751,   84,   84,   86,
       86,   84,   84,  296,  297,  301,   84,  751,  751,   84,
       84,   84,   84,   86,  751,  751,   84,   86,   86,  302,
      298,  299,  751,  300,  303,   84,  751,  751,  751,   84,
       84,   84,   86,  751,   84,  751,  305,   84,   84,  751,

      751,  751,  304,   84,   84,   86,   84,  751,   84,   84,
       86,  306,  751,   86,  751,   84,  307,   84,   84,   84,
      751,  751,  751,   84,   84,  751,   84,   84,   84,  751,
      308,   86,  751,   86,   86,   86,   84,  751,  751,  751,
      319,   84,  751,  751,   84,  309,  310,  311,   85,  312,
      320,  313,   84,   85,  751,  751,  314,  751,   84,  315,
      316,   84,   84,  317,   84,   84,   84,   84,   86,  751,
      318,  751,   84,   84,   86,   84,   84,  321,  751,  751,
      751,   84,   84,  751,   84,   84,   84,  322,   86,   86,
      324,   86,   86,  751,  323,   84,  327,  329,  751,   84,

      751,   84,   86,  751,  751,   84,  751,  330,  325,  326,
       84,  328,  332,  333,   85,  751,   84,   86,   85,   84,
       84,  751,   84,   84,  334,   84,   84,   84,   85,  751,
       84,   84,   86,   84,  751,   84,   84,  331,  751,   84,
       84,  751,   86,   86,  751,  335,   86,   86,   84,  340,
      751,   84,  336,   84,  751,  341,   84,  751,  751,  339,
       84,  337,   84,   84,  751,   84,  338,   86,  751,   86,
       84,  751,   86,   84,   84,  751,   84,   84,   84,   84,
      345,  751,  751,  751,  342,   84,   86,  751,  343,  751,
      344,  751,   86,   84,  751,   84,  751,  347,   84,   84,

       84,  751,   84,   84,   84,   84,  751,  346,   84,   86,
      751,   86,  751,  751,   84,   86,   84,   84,  751,  751,
       84,   86,  751,   84,  751,   84,  348,  751,  350,   84,
      751,  349,   86,  751,  351,  352,   86,  751,  353,   84,
       84,  751,   84,  751,  751,  357,   84,  751,   84,   84,
       84,  358,   84,  354,  751,   86,  355,  356,   84,   84,
      751,   84,  751,   84,  751,   86,   86,   84,  364,  359,
       84,  751,   84,   84,  360,  751,  751,   86,  361,  751,
      363,   84,   84,  751,  362,  751,   84,  751,   86,   86,
       84,   84,  365,  751,  367,   84,   84,   84,  751,   84,

       84,   84,  751,  751,   84,  751,   86,   86,   84,  366,
       84,   86,  371,  751,  751,  751,   84,   86,  751,   84,
       84,  751,  372,  751,  368,   84,  373,  369,  751,  382,
      370,  751,   86,  751,  374,  375,   85,   84,   84,  751,
      376,  751,   84,   84,   84,   84,  377,  751,   84,  378,
       85,  751,   84,   84,   84,   84,   84,  751,   84,   86,
       86,   86,  379,   84,   84,   84,  751,   84,   84,   84,
      751,   86,   86,  751,   86,  381,  751,   84,   84,   84,
      380,  384,  385,  751,   86,   86,  751,  751,   84,  751,
       84,   84,   84,  383,  751,   86,  751,   84,  387,  751,

      388,   84,   84,   84,  386,   84,   84,  751,  751,  204,
       84,   84,  204,   86,   84,   84,   84,   86,  204,  390,
       84,  204,  389,   84,   84,  204,   84,   86,  204,   84,
       86,  751,  751,   84,   84,  751,  751,  751,   84,  751,
       86,  751,  751,   84,   84,   86,  391,  751,   84,  751,
       86,   84,  751,   84,   84,  751,  204,  751,   84,  204,
       84,   84,   84,   84,   84,  751,   84,   86,   84,   86,
       86,   84,  751,   84,  751,   84,   84,   84,   84,  751,
       86,   84,   86,  394,   86,  751,   84,   84,  395,  751,
       84,  751,  751,  751,   86,   84,   84,  396,   84,   84,

       84,   84,   86,  751,  751,   84,   86,   84,  751,  751,
       84,   84,   86,   84,  397,   84,   84,  398,   84,   84,
       84,  751,   84,   86,  751,   84,   86,   84,  399,   84,
       84,   84,   84,   84,   86,  751,   86,   84,   86,   84,
       84,   84,   84,   84,  400,  751,   86,  751,   86,   84,
      751,   84,   84,  751,   84,   84,   86,   84,   86,  401,
      751,   84,  751,  751,   84,   84,   84,   84,   86,   84,
      751,   86,   84,  751,   84,   84,  751,   84,  751,   84,
      751,   84,   86,   84,   84,   84,  751,   84,   86,   84,
       86,  751,  751,   84,   84,  751,   84,  751,   84,   84,

       86,   86,   84,  751,  751,   84,  406,   84,  402,   84,
      403,  405,   86,   84,   86,  404,  751,   84,   84,   84,
       84,   84,  751,  751,  751,   86,   84,  751,   84,   84,
       84,   84,   84,   86,  751,  751,   86,   84,   84,   84,
      751,   84,   84,   84,   86,   84,   86,   84,  751,  751,
       84,   84,  408,  751,   86,  407,   84,   86,   86,  751,
       84,  751,   84,  409,   84,   84,  751,   84,  751,   84,
       84,   84,  410,  751,   84,   84,   86,   84,   86,   84,
      751,   86,  751,  412,   84,   84,   86,  751,   84,   84,
       84,  413,   84,   84,   84,   84,  411,  751,  751,   84,

       86,   84,  751,   84,   84,  751,   86,   84,   86,   84,
       86,   86,   84,   84,  416,  419,   84,   84,   84,   84,
      751,  414,   84,  751,  417,   84,  415,   84,   84,   86,
      418,   84,   86,  751,   86,   86,  751,   84,  423,   84,
      424,   84,   84,  751,  422,   84,   84,  751,   84,  420,
      751,  751,  421,  751,   84,   84,  751,   84,   84,   84,
       84,   86,   86,   84,   86,   84,   84,   84,   84,  427,
      428,   84,  426,   84,   86,   86,  751,  425,  751,  430,
       84,  751,   84,  751,  751,  431,  751,   86,  751,   86,
      751,  751,   84,   84,  751,   84,  429,  751,   84,  751,

      751,  751,  440,  751,  751,   84,   84,   84,  432,  433,
      751,  751,  751,   84,   86,  751,   84,  751,   84,   84,
       84,   84,   84,  751,   84,   84,  751,  441,   84,   86,
       84,  434,   86,   84,   84,   86,  751,   86,  751,  435,
       86,  436,  442,   84,  443,   84,  751,  751,  437,   84,
       86,  751,  438,  751,  445,  444,  751,  751,   84,  751,
       84,   84,  439,   84,  448,   86,   84,  446,   84,   84,
       84,   84,  751,   84,   84,  751,  751,   86,   84,  751,
      751,   84,   84,   84,   84,   86,  447,  751,   84,   86,
       86,  450,  451,   84,  452,  751,   84,   84,  449,  751,

       86,   84,   84,  751,   86,  751,   84,  751,   84,  751,
       84,   84,  751,  751,  751,   84,   84,   86,   86,  455,
       84,   84,   86,  454,   84,  453,  751,   84,  751,   84,
      751,   84,  751,   84,  751,   84,   84,  457,   84,  456,
       86,   84,   84,   86,  751,   86,  463,   84,   84,   84,
       84,   84,   84,   84,  751,  751,   84,   86,   86,  458,
      751,   84,  751,   86,  751,  751,  464,  751,   86,   84,
       84,   84,  466,  465,   84,   84,   84,  467,   84,   84,
      751,   84,  468,  469,   84,   86,   86,   84,   84,   84,
       84,   86,   84,   84,   84,  751,   84,   86,  751,   84,

      470,   84,   84,   86,   84,  751,  751,  751,   86,   86,
      751,  751,  751,   84,  471,   84,   84,   84,  751,  473,
       86,  472,   84,  474,   84,  475,   84,   84,   84,  478,
      482,   86,  751,  751,   84,   84,   84,   84,  751,   84,
       84,  476,   86,   86,  477,   84,   84,  479,  480,   84,
       84,   84,  751,   86,   84,   84,  481,  751,   84,   84,
       84,   86,   84,   84,   84,   86,   86,  751,  751,   84,
      751,   86,   84,   84,   84,  751,   86,   84,   84,   86,
      751,  751,   84,  751,   84,  485,   84,   84,  483,  751,
      484,   84,   84,   86,   86,   84,   84,   84,   86,  486,

       84,  751,   84,   84,   84,   84,  751,   84,  751,   84,
       84,   86,   84,  751,   84,  751,   86,  487,   84,   86,
      751,   86,  488,   84,   84,   84,  751,   84,   84,   84,
      751,  751,   84,  751,   86,  751,  751,   84,  751,   86,
       84,  751,   84,  751,   86,   84,   84,   84,   84,   84,
       84,   84,   84,  751,   84,   84,   86,   84,  751,  751,
       84,   86,   86,   84,   86,   84,  751,   86,  489,   84,
       84,  751,   84,  751,  751,   84,  751,  751,   84,   86,
       84,  751,  751,  751,  751,   86,  751,   84,   84,   84,
      490,   84,   84,   84,  751,   84,   86,   84,   84,   84,

       84,  751,   84,   84,   86,   84,  751,   86,   84,  751,
       84,   84,   84,   84,   84,   86,   84,  491,   86,   86,
      751,   86,   84,   84,   84,  751,  751,   84,  492,   86,
      751,  495,   84,   84,  751,   84,  493,  751,   84,   86,
       86,  496,  494,  751,  751,   84,   84,  751,   84,   84,
       84,  751,   84,   84,   84,  751,  497,   84,   84,   84,
       84,   86,   84,   84,   86,  751,  751,   84,   84,   86,
       84,   84,   84,   84,   86,   86,  751,  751,   84,   86,
      751,   84,   84,  751,  498,  751,  751,   84,  751,   86,
       84,  499,   84,  500,   86,   84,  751,   86,   84,   84,

       84,  751,   84,   84,  501,   84,   84,   84,   84,  751,
       84,   84,   84,  751,   86,   86,  751,  505,   86,   86,
       84,   84,  506,  503,   84,   84,   84,   84,   84,  751,
       84,  751,   84,   84,  502,   84,   84,   86,  504,  751,
       86,   84,   86,   86,  751,   84,   84,  751,   86,   84,
       84,  507,  751,  751,  510,  751,  751,  509,  751,  751,
      508,   85,  513,  511,  514,   85,  751,  751,   84,   85,
      751,   84,   84,   84,   84,  512,   84,  515,   84,   84,
      516,   84,   84,  517,   84,   84,  751,   84,   86,  751,
       84,   84,   86,   84,   86,  518,   84,  751,   86,   84,

       86,   84,   84,  519,   84,   84,   86,  520,  751,  751,
       84,   84,   86,   84,  751,  751,  751,   86,   86,   84,
       86,  751,  751,   84,   84,   84,   84,  751,  751,   84,
      751,   84,  751,   84,  751,   84,  751,   84,  521,  751,
       86,  522,   86,   84,  751,  751,   84,  535,   84,   84,
      751,   84,  523,  524,  525,   84,  526,  751,  527,   84,
       84,  534,   86,  528,  751,  529,  530,  531,   84,   84,
      532,   84,  751,   84,   84,   86,   86,  533,   84,   84,
      537,  536,   84,   84,  751,  751,  751,   84,   84,  751,
       86,   84,   84,   84,   86,   86,   84,  538,   86,  751,

       84,   84,  751,  751,   84,   84,   84,   84,   86,   84,
      751,  539,   86,   84,   84,   84,   86,  751,  540,   84,
       86,   84,  751,   84,   84,   84,   84,  751,   84,   84,
       86,   86,  541,   84,  751,   86,  543,   84,  751,   84,
      751,   84,   84,   84,  751,  751,   84,   84,  751,   86,
       84,   84,  542,   86,   84,   84,  751,   86,  751,  751,
       84,   84,   84,   84,   84,  751,   84,  751,  544,   84,
       86,   86,  547,  545,  546,  548,   86,   84,  751,  751,
       84,  550,  751,   84,   84,  751,   84,   84,   84,   84,
      751,  549,   84,   86,  751,  751,   84,   84,   84,   86,

       84,   84,   84,   86,  751,   86,   84,   84,  751,   84,
       84,  551,  751,   86,  552,  751,   86,  751,  553,   84,
      751,  751,   84,   84,   84,  751,   86,  751,  554,  751,
       84,   84,   84,   84,   84,  751,   84,   84,   86,   86,
      751,  751,   84,  555,   84,   84,   84,   84,  751,   86,
      751,   84,  751,   86,   84,   84,  556,   84,  751,   84,
       84,   86,  751,  751,   84,  751,  751,   86,   84,   84,
       84,   86,  561,   84,  557,   86,  558,   84,   84,  560,
       84,   84,   84,  751,   84,  751,   84,   84,  751,   86,
       84,   84,   84,   86,   86,  559,  751,   86,   84,  562,

       84,   84,   84,  565,  751,   84,   84,   86,  751,  751,
       84,  751,  563,   84,   84,  751,  564,   86,   84,  751,
       84,   86,   84,   84,   84,   84,   84,   84,   84,   86,
      751,   84,   84,  751,   86,   84,  751,  751,   84,   86,
       84,   84,   86,  751,  751,   84,  566,   86,   84,  751,
       84,  567,   84,   84,   84,  751,  751,   86,  751,  751,
       84,   86,   84,  751,  569,   84,   84,  568,   84,   86,
       84,   84,  751,   84,   84,   84,  751,   84,   84,  571,
       84,  570,   86,   84,   86,  751,  751,   86,   84,   84,
       86,  751,   84,  574,   84,  575,  751,  751,   84,  572,

       84,  573,  751,   84,  751,   86,  751,   84,   84,  751,
       86,   84,  751,   84,  751,   84,   84,   84,   84,  576,
       84,   84,   84,   86,   86,  751,   84,   86,   84,  751,
       84,   84,  751,  577,   84,   84,   84,   84,   86,   84,
      578,   84,   86,   84,   86,  751,   86,   84,   84,  582,
       86,  751,  751,  751,   84,   84,   84,   84,   84,  580,
      751,  581,  579,   86,   86,  751,  751,   84,  751,   84,
      751,  751,  751,   84,  751,   84,   84,   84,  751,  584,
      585,   84,  751,   86,   84,  751,  751,  583,   84,  751,
       84,  586,   84,   84,   84,   84,   84,   84,  587,   84,

       86,   84,  751,  751,   86,   84,   86,  751,   86,  751,
      588,  751,   86,  751,   84,  751,   84,   84,  590,  751,
       84,  751,  751,  589,  751,   84,   84,  751,  591,   84,
      751,   84,   86,   86,  751,   84,   86,   84,   84,   84,
      751,  751,  592,   84,   84,  751,  593,   84,  751,  595,
       85,  596,  751,   84,   86,   85,  751,   84,  751,  751,
       86,   85,  598,   84,   84,  597,   84,   84,  751,  751,
       84,   84,   84,   86,   84,  599,  751,  594,  751,   84,
       84,   84,  751,   84,  751,   84,   86,   86,   86,  751,
       86,   84,   84,  751,   84,  751,   84,  751,  602,  751,

      600,   84,  601,   84,   84,   84,  603,  751,   86,  751,
       86,   84,   86,  751,  604,  751,   84,   84,   84,   84,
       84,   84,  751,  605,   84,   84,   84,   86,   84,  606,
      751,  607,   86,   84,  751,   84,   84,   84,   84,   84,
       86,   84,   86,   84,   86,   84,   84,   84,  751,  751,
       84,   84,   86,  608,   86,   84,   84,  610,   84,   84,
       84,  751,   86,   84,  609,   84,   86,   86,   84,  751,
      751,   84,   86,   84,  751,   84,  611,   84,   84,  612,
      614,  613,  751,   84,   86,   84,  615,   84,  751,  751,
       84,   84,  751,   84,   86,   84,   84,   84,   84,   84,

       84,   84,  751,   84,   84,   84,   86,   86,  617,  751,
       84,   86,   86,   84,   84,   84,  751,   86,   84,  616,
      751,  751,   84,   84,   84,   84,  751,   84,  751,   86,
       86,  751,  751,   84,   86,   84,   84,   84,   84,  751,
       86,   84,   84,   84,   84,   84,   84,   84,   84,  618,
       84,   86,   86,  751,  751,   84,   84,   86,  751,   84,
       84,   84,   86,   86,   84,   84,  751,  620,   84,   84,
      751,   84,  751,   84,  619,   86,  751,  751,   84,  751,
       86,   84,   84,   84,  751,   86,  621,   84,   84,   84,
       84,   84,   84,   84,   84,  751,   84,   86,   84,  751,

       84,   84,  622,   86,  751,   86,   84,   86,   86,   84,
       84,   84,  751,  623,   84,   84,   84,  751,   84,   84,
      751,  751,  751,   84,   84,   86,   86,  751,   84,  751,
       86,   86,   84,   84,   84,  751,   84,  751,   84,   84,
      751,   84,   84,  751,  751,  751,  751,  751,   86,   86,
       84,  624,  751,  625,   84,  627,   84,   84,   84,   84,
      751,   84,   84,   84,  628,  751,   86,   84,   84,  630,
       86,  631,  626,   84,   86,  751,  629,   84,  751,   84,
       84,  751,   84,  751,   86,  751,  751,   84,  751,   86,
      632,  633,  636,   84,  637,  634,   84,   84,  635,  751,

      751,   84,   84,   86,  751,   84,  751,   84,  641,   86,
      751,  751,   84,  638,  751,   84,   84,  751,  751,  639,
       84,   84,   84,   86,  751,  751,   84,  642,   86,  640,
       84,   84,   84,  643,   84,   84,  751,  751,   86,   84,
       84,   84,   86,  751,  645,  751,   86,  646,   86,  647,
      649,   84,  644,  751,   84,   84,   84,  648,  751,   84,
       84,  751,  751,  751,   84,   84,   84,   86,  751,   84,
      751,   86,   86,   84,   84,   84,   84,   84,  650,   84,
       84,  751,   86,   84,   84,   84,  751,  751,   84,   84,
       86,  751,   86,   84,  751,  751,   86,   84,   84,  651,

       86,   84,   84,   84,   86,  751,   84,  751,  751,   84,
       84,  751,  751,   84,  751,   84,  751,   86,   84,  751,
       84,   84,   86,   84,   84,   86,  751,   84,  652,   84,
      653,   84,  655,   84,   84,   84,   86,  751,   84,  751,
       86,  751,  656,   84,  751,  751,  657,   84,   84,  654,
       86,  751,   84,   84,   86,  751,   84,   84,  751,  751,
      751,   84,  751,  751,  751,  751,   84,   84,   86,  751,
      751,   84,  751,   86,  658,   84,  751,   84,   84,  659,
       84,   84,  751,  751,   84,   84,   84,   84,  751,   84,
      751,   86,   84,   86,   86,  751,   86,  751,  751,   84,

      670,   84,  751,  751,   84,  660,  661,  662,   86,  663,
      671,  664,   84,  751,  751,  751,  665,   84,  751,  666,
      667,   84,   84,  668,   84,   84,   84,   84,   86,   84,
      669,   84,   84,   86,   84,   84,  751,   84,   84,   84,
       84,   84,  751,   84,   84,   86,   84,   86,   86,  751,
       86,   86,   84,   86,  672,  751,  673,   84,  674,   84,
      751,   84,  751,  751,   84,  751,   84,  751,   86,  751,
      751,   84,  751,   86,   84,  751,   84,  675,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   86,  676,   84,
       86,   84,  751,  751,   84,   84,  751,   84,   84,   84,

       84,   86,   86,   84,   84,   86,   84,   86,  751,  751,
      751,   84,   84,   86,   84,  751,  751,  751,   84,   86,
       84,   84,  679,   84,  677,   84,  678,   86,  751,  751,
       86,   84,   84,   84,   84,  751,   84,   84,   84,   84,
       84,   86,  751,   84,   84,  751,   84,   86,   84,  680,
       84,   84,   84,   86,   84,   86,  681,   84,   84,   86,
       84,   84,  751,   84,  751,   84,   84,   86,  751,  751,
       86,   84,   84,   86,   84,  751,  682,  751,   84,   84,
       84,   86,  751,   84,   84,  751,   84,   86,   84,  751,
       84,   84,   84,  751,   84,   86,  751,  751,   84,   86,

       84,   84,  683,   84,   84,   84,   84,   86,   84,  751,
       86,   84,   84,  751,   84,   84,   84,   84,   84,   84,
       84,   86,   86,  751,   86,   84,   84,   86,   84,  751,
       84,   84,   86,  751,   84,   86,  751,  751,   84,  684,
       84,   84,  685,   84,  751,   84,  751,   86,   84,  686,
       86,  751,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   86,  751,   84,   86,   84,   84,  687,   84,   84,
       84,  751,   86,   84,   84,   86,   86,  751,   84,   84,
      688,   84,   84,   84,  751,   84,   86,  751,   84,   86,
       86,  751,   84,  689,   84,   84,  751,   84,  694,   84,

       84,   86,   84,   84,   86,  690,   84,   84,   84,   84,
      692,   84,  695,  691,   84,   86,   86,   84,   86,  751,
       84,   84,   84,   84,   84,  693,  751,   84,   84,  751,
       86,   84,   84,   84,  751,   84,   84,   84,   86,  751,
       86,  751,   84,   86,   86,  751,   84,   84,  697,   84,
      699,   84,  751,  751,   84,  696,   84,   84,   86,  751,
      751,   84,  751,   84,  698,   84,   84,   84,   84,   84,
       86,   84,   86,   86,   84,   84,   84,   84,  751,   84,
      705,   84,  700,   86,   86,  701,  751,  751,   84,   84,
       84,  751,  751,  751,  703,   86,  702,   86,  704,  751,

       84,   84,   84,   84,   84,  751,  751,  751,   84,   84,
      751,   84,  706,   84,   84,   84,   86,   84,   86,  751,
      751,  751,   84,   84,   86,   84,   84,  751,   84,   86,
      708,  751,   84,  751,   84,  707,   84,   84,  751,   86,
      751,   86,   84,  709,  751,   84,   84,   84,  751,   84,
       84,   84,   86,   86,  751,   84,  751,  710,   86,   84,
       84,  751,   84,  751,   84,   84,   86,  751,  751,  751,
       84,   84,   84,   84,   84,  751,  711,   84,   86,  751,
       86,   86,  751,   84,   84,   84,   84,   84,  751,   84,
       84,  751,  751,   86,   84,  712,   84,   84,  713,   84,

      717,   86,  751,   86,   84,  714,   86,  751,  751,   84,
      715,   84,   84,   84,  718,  751,  716,   84,  751,   84,
       86,  751,   84,  751,   84,  751,   84,   84,   84,  751,
       84,   84,   84,   86,   84,   86,   84,   84,   86,   84,
       84,   84,  751,   86,   84,  751,   86,  751,  751,   84,
       84,   84,   84,   84,   84,  751,   86,   86,  751,  751,
       86,   84,   84,   84,   84,  751,   84,  751,   86,   84,
       86,   84,  751,   84,   84,  751,  719,   84,   86,  751,
      751,  751,   84,  751,   84,  751,   84,   84,   84,   86,
      751,   84,  751,   84,   84,   84,   84,  720,   84,   84,

       86,   84,   86,   84,  751,   84,  751,   84,   84,   84,
       86,  751,   86,  751,   86,  751,   84,   84,   84,   84,
       84,   84,  721,  751,   86,   84,  751,   84,   84,  751,
       84,   84,   86,   84,   86,   86,  751,   86,  751,  751,
      751,   84,   84,   84,   84,   84,  751,  722,   84,  751,
      751,   84,  751,   84,  751,   84,  723,   84,   86,  751,
       86,   84,   84,   84,   86,   84,   84,  751,   84,  724,
       84,   84,  751,  751,  751,  751,   84,   86,   86,  751,
      751,   84,  751,  726,   84,   84,  751,   84,  725,   84,
       84,   84,   86,   84,  751,   84,   84,   86,   84,  751,

       86,   84,  727,   86,   84,  751,   84,   84,   84,   84,
       84,  751,  751,   84,   86,   84,   84,   86,  751,  751,
       86,   84,   86,   84,   84,   84,   84,   84,   84,  751,
       84,   84,   86,   84,   84,   84,   84,   86,  728,  751,
       86,  751,   86,   86,  751,   84,   84,  751,   84,  729,
       84,   84,  751,   84,  751,   84,  751,  751,  751,   84,
       84,   84,   86,   84,  751,  751,   86,  751,   84,   84,
       84,   84,  730,   84,   84,   84,   86,   86,   84,   84,
       84,  751,  751,  731,   84,  751,  751,   84,   84,   84,
       84,   86,  751,   84,   86,   86,   86,   84,  751,   84,

      732,   84,   84,   84,   84,   84,   86,   84,   84,  751,
       84,   84,   84,   84,   84,   84,  751,   86,   86,   86,
       86,   86,   84,   84,   84,   84,   84,   84,  751,  751,
      751,   86,   84,  751,  751,  751,  751,   84,   84,   86,
      751,  751,  751,  751,   84,  751,  751,   84,   84,   84,
       84,   84,   84,   84,   86,   84,   84,   84,   84,  733,
       86,  751,   84,  751,   84,   84,   84,   84,   84,  751,
       84,   86,   86,   86,   86,  751,  751,   84,   84,   84,
       84,   84,  735,   84,   86,   84,  751,   84,   84,   84,
       84,   84,   84,  734,   86,   86,   86,   86,   84,   86,

       84,   84,   84,   84,   84,   84,  751,   84,  751,   84,
       84,  751,  736,   84,   86,   84,   86,   86,  751,  751,
      751,  751,   84,   84,   84,   84,   84,   84,   84,   86,
       84,  737,   84,   84,   84,   84,  751,   84,  751,   86,
       86,  751,  751,   84,   84,   84,   84,   84,   84,   84,
       86,   86,   84,   86,  751,  751,  751,   84,   84,  751,
       84,   84,  751,   84,  751,   86,   84,   84,   86,   84,
       84,   84,   84,   86,  751,  751,   84,   84,   84,   86,
      751,   84,   84,   86,   84,   86,   84,  751,  751,   84,
      751,   84,   84,   86,  751,  751,   84,   84,   84,   84,

       84,   84,  738,   84,   84,   86,   84,   86,   86,   84,
       84,   84,   84,   86,   84,  751,   84,   84,   84,   86,
       84,   84,  751,  751,   84,   86,   84,   86,  739,  751,
       84,   84,   84,   86,  751,  751,   84,   86,   84,   84,
       84,   84,  751,  743,   84,  740,   84,   86,   86,  751,
       84,   84,  751,  751,  741,   84,   84,  751,   84,  751,
       84,   84,   86,  751,   84,   84,   84,   86,   84,  742,
       84,   84,  751,  744,   84,   84,   84,   86,   84,   84,
       84,   86,   86,  751,  751,   84,   84,   86,   84,  751,
       84,  751,   86,   84,   84,   84,  751,   84,   84,   84,

      746,  751,   86,   84,   86,  751,   86,  751,   84,  751,
       86,   84,   84,   84,  745,   84,   84,  751,   84,  751,
       84,  751,  751,   84,   84,   84,  751,   86,  751,   84,
      751,   86,   86,   84,   84,   84,  751,   84,   84,   84,
       84,   84,  751,   84,   84,   86,  747,  751,   84,   84,
       86,  751,   84,   84,  751,   86,   86,  751,   84,  751,
       86,   84,   84,   84,   84,  751,  748,  751,   86,   84,
      751,  751,  751,   84,   84,  751,   84,  751,   84,   84,
       86,   84,  751,   84,   84,   86,   84,   84,   84,   84,
       86,   84,   84,   84,   84,   86,  751,   84,   84,   84,

       86,   84,  751,   84,  751,   86,   84,  751,   86,   84,
       86,   84,  751,   86,   84,  751,   84,  751,   84,   84,
      751,   84,  751,   84,   84,   86,   84,  751,   84,   84,
       86,   84,  751,   84,  749,   86,   84,  751,   84,   84,
       86,   84,   84,  751,   84,   86,  750,  751,  751,  751,
      751,   84,  751,  751,  751,  751,   84,  751,   86,  751,
      751,   84,  751,  751,  751,  751,   84,  751,  751,  751,
      751,   84,  751,  751,  751,  751,   84,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,   84,
       61,   61,   64,   64,   62,   62,   70,   70,   73,   73,

       80,   80,   82,   82,   17,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751
    } ;

static const flex_int16_t yy_chk[4770] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    4,    5,    9,    9,   10,
       10,    6,  760,   23,   33,   33,   33,   33,   33,  759,
       11,   11,   23,  393,   17,   12,   12,   43,   16,   23,
       34,   34,   34,   34,   34,   15,   43,   87,   87,   87,

       87,   87,   55,   43,   33,  206,   14,    3,    4,   13,
        8,   55,    7,  206,    0,    9,   43,   10,   55,    0,
       23,   33,    5,   55,    5,    5,    5,    6,   11,    6,
        6,    6,    0,   12,   43,    0,   11,    0,   11,   11,
       11,   12,   38,   12,   12,   12,   37,   44,    0,   55,
        0,   38,    0,    0,    0,   37,   44,    0,   38,    0,
        0,    0,   37,   44,   37,   37,    0,   37,   38,    0,
        0,   84,    0,    0,   38,   37,   44,   37,   38,   38,
       84,   37,    0,    0,   38,   39,   39,   84,   39,   38,
        0,    0,    0,   37,   44,    0,   39,   39,   39,    0,

       39,   41,   39,    0,   49,    0,   48,   39,   40,   40,
       41,   40,   40,   49,    0,   48,   40,   41,   84,   40,
       49,   40,   48,    0,   40,   40,   49,   40,   45,   45,
       40,   45,   41,    0,    0,   41,   49,    0,   48,   45,
       45,   45,   41,    0,   48,   45,    0,    0,   41,   42,
        0,   49,    0,   48,   42,   42,   42,   42,   42,   42,
        0,    0,   42,    0,    0,   42,   42,   42,   42,   42,
        0,   42,   42,   42,   42,    0,    0,   42,   42,   46,
       46,   46,   46,   46,    0,   46,    0,    0,    0,    0,
       46,   46,   46,   46,   46,    0,   46,   46,   50,    0,

        0,    0,    0,    0,   46,   47,   47,   50,   47,   47,
       47,   47,   51,   47,   50,    0,   47,   47,   47,   47,
        0,   51,   47,   47,   47,    0,   52,    0,   51,    0,
       51,   50,    0,   50,    0,   52,   50,    0,   57,   57,
        0,   57,   52,    0,   51,   50,   52,   52,   52,   57,
       51,   57,   57,    0,    0,   57,   85,    0,   52,   51,
        0,    0,   52,    0,    0,   85,    0,    0,    0,    0,
        0,    0,   85,   52,   53,   53,   53,   53,   53,   54,
       53,   53,   53,    0,    0,   53,   53,   53,   54,    0,
       56,   53,    0,   53,   53,   54,    0,    0,    0,   56,

        0,   54,    0,   85,    0,   54,   56,   58,   58,   58,
       58,    0,   56,   86,    0,    0,    0,  285,   58,   90,
       58,   58,   86,    0,   58,  285,   54,  285,   90,   86,
       91,   92,    0,   93,  285,   90,  108,   56,  285,   91,
       92,  285,   93,    0,    0,  108,   91,   92,  285,   93,
       91,   91,  108,    0,   93,   90,    0,   92,   89,    0,
       86,   88,   88,   88,   88,   88,   90,   89,   88,   88,
       88,   88,   88,   88,   89,   94,   89,   91,   92,   89,
       93,   95,    0,  108,   94,    0,    0,    0,   89,    0,
       95,   94,    0,    0,   89,   96,    0,   95,   88,   88,

       88,   88,   88,   88,   96,   89,    0,    0,   94,    0,
       99,   96,    0,    0,   97,   98,  100,    0,   95,   99,
      101,    0,   94,   97,   98,  100,   99,    0,   95,  101,
       97,   98,  100,   96,    0,   98,  101,   97,    0,  102,
        0,    0,   96,    0,    0,  100,    0,   99,  102,   97,
       98,   98,    0,    0,   97,  102,  103,   99,    0,  104,
      101,   97,   98,  100,    0,  103,    0,  101,  104,  105,
        0,  109,  103,  102,  106,  104,  103,  103,  105,  104,
      109,    0,  103,  106,    0,  105,  102,  109,  110,    0,
      106,    0,  104,  103,    0,  106,  107,  110,    0,    0,

        0,  111,    0,  103,  110,  107,  104,  105,  110,    0,
      111,  112,  107,  113,  107,  114,  105,  111,  109,    0,
      112,  106,  113,    0,  114,  116,    0,  112,  115,  113,
      117,  114,  107,    0,  116,  110,    0,  115,    0,  117,
      111,  116,    0,  107,  115,  118,  117,  114,  111,  115,
      127,    0,    0,    0,  118,    0,    0,    0,  112,  127,
      113,  118,  114,  116,  120,  115,  127,  117,  119,  119,
        0,  119,  116,  120,  121,  115,    0,  117,  123,  119,
      120,  119,  122,  121,    0,  119,  118,  123,  127,    0,
      121,  122,  118,  120,  123,    0,  124,  127,  122,  121,

      120,    0,    0,  121,  122,  124,  121,    0,  122,  123,
        0,  120,  124,    0,  126,  125,  125,  125,  125,    0,
        0,  121,    0,  126,    0,  123,  125,  125,  125,  122,
      126,  124,  125,  125,    0,  126,    0,    0,  129,  130,
        0,    0,  138,  124,  131,    0,    0,  129,  130,    0,
      134,  138,    0,  131,  129,  130,  133,  130,  138,  134,
      131,  126,  128,    0,    0,  133,  134,    0,    0,    0,
      134,  128,  133,  129,  130,  131,  130,    0,  128,  138,
      131,    0,  128,  128,  128,  129,  130,    0,  128,  138,
        0,  131,  133,    0,  128,    0,    0,  134,  128,  135,

        0,    0,    0,  133,    0,    0,    0,  137,  135,  128,
      132,  136,  132,  132,  132,  135,  137,  135,  132,  135,
      136,    0,  139,  137,  132,  140,  132,  136,  132,  132,
      132,  139,    0,    0,  140,    0,  135,    0,  139,  137,
      136,  140,    0,  142,  141,    0,  135,    0,  139,    0,
        0,    0,  142,  141,  137,    0,    0,  143,  136,  142,
      141,  145,  144,  140,  141,  142,  143,    0,    0,  139,
      145,  144,  140,  143,    0,    0,  146,  145,  144,  143,
      141,  141,    0,  141,  144,  146,    0,    0,    0,  147,
      142,  141,  146,    0,  148,    0,  146,  149,  147,    0,

        0,    0,  145,  148,  143,  147,  149,    0,  145,  144,
      148,  147,    0,  149,    0,  151,  148,  153,  152,  154,
        0,    0,    0,  146,  151,    0,  153,  152,  154,    0,
      149,  151,    0,  153,  152,  154,  147,    0,    0,    0,
      152,  148,    0,    0,  149,  150,  150,  150,  150,  150,
      152,  150,  155,  150,    0,    0,  150,    0,  156,  150,
      150,  155,  151,  150,  153,  152,  154,  156,  155,    0,
      150,    0,  157,  158,  156,  159,  160,  155,    0,    0,
        0,  157,  158,    0,  159,  160,  161,  155,  157,  158,
      157,  159,  160,    0,  156,  161,  159,  160,    0,  155,

        0,  162,  161,    0,    0,  156,    0,  161,  157,  158,
      162,  159,  163,  163,  163,    0,  164,  162,  163,  157,
      158,    0,  159,  160,  163,  164,  165,  166,  163,    0,
      167,  168,  164,  161,    0,  165,  166,  162,    0,  167,
      168,    0,  165,  166,    0,  164,  167,  168,  162,  168,
        0,  169,  164,  170,    0,  168,  171,    0,    0,  167,
      169,  165,  170,  164,    0,  171,  166,  169,    0,  170,
      172,    0,  171,  165,  166,    0,  173,  167,  168,  172,
      171,    0,    0,    0,  169,  173,  172,    0,  169,    0,
      170,    0,  173,  174,    0,  175,    0,  173,  169,  176,

      170,    0,  174,  171,  175,  177,    0,  172,  176,  174,
        0,  175,    0,    0,  177,  176,  179,  172,    0,    0,
      178,  177,    0,  173,    0,  179,  174,    0,  176,  178,
        0,  175,  179,    0,  176,  177,  178,    0,  177,  180,
      174,    0,  175,    0,    0,  179,  176,    0,  180,  181,
      183,  179,  177,  178,    0,  180,  178,  178,  181,  183,
        0,  182,    0,  179,    0,  181,  183,  178,  183,  180,
      182,    0,  184,  185,  181,    0,    0,  182,  181,    0,
      182,  184,  185,    0,  181,    0,  180,    0,  184,  185,
      189,  187,  184,    0,  185,  186,  181,  183,    0,  189,

      187,  188,    0,    0,  186,    0,  189,  187,  182,  184,
      188,  186,  187,    0,    0,    0,  194,  188,    0,  184,
      185,    0,  188,    0,  186,  194,  189,  186,    0,  194,
      186,    0,  194,    0,  190,  190,  190,  189,  187,    0,
      190,    0,  186,  191,  192,  193,  190,    0,  188,  190,
      190,    0,  191,  192,  193,  196,  197,    0,  195,  191,
      192,  193,  191,  194,  196,  197,    0,  195,  199,  198,
        0,  196,  197,    0,  195,  193,    0,  199,  198,  200,
      192,  196,  197,    0,  199,  198,    0,    0,  200,    0,
      191,  192,  193,  195,    0,  200,    0,  201,  199,    0,

      200,  202,  196,  197,  198,  195,  201,    0,    0,  204,
      202,  203,  205,  201,  207,  199,  198,  202,  204,  202,
      203,  205,  201,  207,  208,  204,  200,  203,  205,  209,
      207,    0,    0,  208,  210,    0,    0,    0,  209,    0,
      208,    0,    0,  210,  201,  209,  203,    0,  202,    0,
      210,  211,    0,  212,  213,    0,  204,    0,  203,  205,
      211,  207,  212,  213,  214,    0,  215,  211,  216,  212,
      213,  208,    0,  214,    0,  215,  209,  216,  217,    0,
      214,  210,  215,  211,  216,    0,  218,  217,  214,    0,
      219,    0,    0,    0,  217,  218,  220,  216,  211,  219,

      212,  213,  218,    0,    0,  220,  219,  222,    0,    0,
      221,  214,  220,  215,  217,  216,  222,  218,  223,  221,
      224,    0,  225,  222,    0,  217,  221,  223,  221,  224,
      226,  225,  227,  218,  223,    0,  224,  219,  225,  226,
      228,  227,  229,  220,  225,    0,  226,    0,  227,  228,
        0,  229,  230,    0,  222,  231,  228,  221,  229,  226,
        0,  230,    0,    0,  231,  223,  233,  224,  230,  225,
        0,  231,  232,    0,  234,  233,    0,  226,    0,  227,
        0,  232,  233,  234,  236,  235,    0,  228,  232,  229,
      234,    0,    0,  236,  235,    0,  237,    0,  238,  230,

      236,  235,  231,    0,    0,  237,  236,  238,  232,  239,
      234,  235,  237,  233,  238,  234,    0,  240,  239,  232,
      241,  234,    0,    0,    0,  239,  240,    0,  242,  241,
      243,  236,  235,  240,    0,    0,  241,  242,  244,  243,
        0,  245,  246,  237,  242,  238,  243,  244,    0,    0,
      245,  246,  243,    0,  244,  241,  239,  245,  246,    0,
      247,    0,  248,  245,  240,  249,    0,  241,    0,  247,
      250,  248,  246,    0,  249,  242,  247,  243,  248,  250,
        0,  249,    0,  248,  251,  244,  250,    0,  245,  246,
      252,  250,  253,  251,  254,  255,  247,    0,    0,  252,

      251,  253,    0,  254,  255,    0,  252,  247,  253,  248,
      254,  255,  249,  256,  253,  255,  258,  250,  257,  259,
        0,  251,  256,    0,  254,  258,  252,  257,  259,  256,
      254,  251,  258,    0,  257,  259,    0,  252,  258,  253,
      259,  254,  255,    0,  257,  260,  261,    0,  262,  256,
        0,    0,  256,    0,  260,  261,    0,  262,  263,  264,
      256,  260,  261,  258,  262,  257,  259,  263,  264,  262,
      262,  265,  261,  267,  263,  264,    0,  260,    0,  264,
      265,    0,  267,    0,    0,  264,    0,  265,    0,  267,
        0,    0,  260,  261,    0,  262,  263,    0,  268,    0,

        0,    0,  267,    0,    0,  263,  264,  268,  265,  265,
        0,    0,    0,  270,  268,    0,  269,    0,  265,  266,
      267,  272,  270,    0,  271,  269,    0,  268,  266,  270,
      272,  266,  269,  271,  274,  266,    0,  272,    0,  266,
      271,  266,  269,  274,  270,  268,    0,    0,  266,  273,
      274,    0,  266,    0,  272,  271,    0,    0,  273,    0,
      270,  275,  266,  269,  274,  273,  266,  273,  272,  276,
      275,  271,    0,  278,  277,    0,    0,  275,  276,    0,
        0,  274,  278,  277,  280,  276,  273,    0,  279,  278,
      277,  276,  277,  280,  278,    0,  273,  279,  275,    0,

      280,  281,  282,    0,  279,    0,  283,    0,  275,    0,
      281,  282,    0,    0,    0,  283,  276,  281,  282,  281,
      278,  277,  283,  280,  284,  279,    0,  286,    0,  287,
        0,  280,    0,  284,    0,  279,  286,  283,  287,  282,
      284,  288,  289,  286,    0,  287,  286,  291,  281,  282,
      288,  289,  290,  283,    0,    0,  291,  288,  289,  284,
        0,  290,    0,  291,    0,    0,  287,    0,  290,  294,
      292,  284,  289,  288,  286,  295,  287,  290,  294,  292,
        0,  293,  291,  292,  295,  294,  292,  297,  288,  289,
      293,  295,  296,  301,  291,    0,  297,  293,    0,  290,

      293,  296,  301,  297,  298,    0,    0,    0,  296,  301,
        0,    0,    0,  298,  295,  299,  294,  292,    0,  297,
      298,  296,  295,  298,  299,  298,  302,  300,  293,  299,
      301,  299,    0,    0,  297,  302,  300,  303,    0,  296,
      301,  298,  302,  300,  298,  304,  303,  299,  300,  305,
      306,  298,    0,  303,  304,  307,  300,    0,  305,  306,
      308,  304,  299,  309,  307,  305,  306,    0,    0,  308,
        0,  307,  309,  302,  300,    0,  308,  310,  311,  309,
        0,    0,  312,    0,  303,  309,  310,  311,  304,    0,
      305,  312,  304,  310,  311,  313,  305,  306,  312,  310,

      314,    0,  307,  315,  313,  316,    0,  308,    0,  314,
      309,  313,  315,    0,  316,    0,  314,  313,  317,  315,
        0,  316,  314,  318,  310,  311,    0,  317,  319,  312,
        0,    0,  318,    0,  317,    0,    0,  319,    0,  318,
      320,    0,  313,    0,  319,  321,  322,  314,  323,  320,
      315,  324,  316,    0,  321,  322,  320,  323,    0,    0,
      324,  321,  322,  325,  323,  317,    0,  324,  321,  326,
      318,    0,  325,    0,    0,  319,    0,    0,  326,  325,
      327,    0,    0,    0,    0,  326,    0,  320,  328,  327,
      324,  329,  321,  322,    0,  323,  327,  328,  324,  330,

      329,    0,  331,  332,  328,  333,    0,  329,  330,    0,
      325,  331,  332,  335,  333,  330,  326,  327,  331,  332,
        0,  333,  335,  334,  336,    0,    0,  327,  329,  335,
        0,  332,  334,  336,    0,  328,  330,    0,  329,  334,
      336,  333,  331,    0,    0,  337,  330,    0,  338,  331,
      332,    0,  333,  339,  337,    0,  334,  338,  340,  341,
      335,  337,  339,  342,  338,    0,    0,  340,  341,  339,
      334,  336,  342,  343,  340,  341,    0,    0,  344,  342,
        0,  345,  343,    0,  338,    0,    0,  344,    0,  343,
      345,  338,  337,  340,  344,  338,    0,  345,  346,  348,

      339,    0,  347,  350,  344,  340,  341,  346,  348,    0,
      342,  347,  350,    0,  346,  348,    0,  348,  347,  350,
      343,  351,  348,  347,  352,  344,  349,  353,  345,    0,
      351,    0,  354,  352,  346,  349,  353,  351,  347,    0,
      352,  354,  349,  353,    0,  346,  348,    0,  354,  347,
      350,  349,    0,    0,  354,    0,    0,  353,    0,    0,
      352,  355,  355,  354,  355,  355,    0,    0,  351,  355,
        0,  352,  356,  349,  353,  354,  357,  355,  358,  354,
      355,  356,  359,  355,  360,  357,    0,  358,  356,    0,
      361,  359,  357,  360,  358,  356,  362,    0,  359,  361,

      360,  363,  364,  356,  365,  362,  361,  360,    0,    0,
      363,  364,  362,  365,    0,    0,    0,  363,  364,  356,
      365,    0,    0,  357,  367,  358,  368,    0,    0,  359,
        0,  360,    0,  367,    0,  368,    0,  361,  364,    0,
      367,  365,  368,  362,    0,    0,  369,  368,  363,  364,
        0,  365,  366,  366,  366,  369,  366,    0,  366,  370,
      371,  367,  369,  366,    0,  366,  366,  366,  370,  371,
      366,  367,    0,  368,  372,  370,  371,  366,  373,  374,
      370,  369,  375,  372,    0,    0,    0,  373,  374,    0,
      372,  375,  376,  369,  373,  374,  377,  371,  375,    0,

      378,  376,    0,    0,  379,  377,  370,  371,  376,  378,
        0,  372,  377,  379,  381,  380,  378,    0,  373,  382,
      379,  372,    0,  381,  380,  373,  374,    0,  382,  375,
      381,  380,  377,  383,    0,  382,  381,  384,    0,  376,
        0,  385,  383,  377,    0,    0,  384,  378,    0,  383,
      385,  379,  380,  384,  386,  387,    0,  385,    0,    0,
      388,  381,  380,  386,  387,    0,  382,    0,  383,  388,
      386,  387,  385,  383,  384,  386,  388,  390,    0,    0,
      383,  388,    0,  391,  384,    0,  390,  389,  385,  394,
        0,  387,  391,  390,    0,    0,  389,  395,  394,  391,

      396,  386,  387,  389,    0,  394,  395,  388,    0,  396,
      397,  389,    0,  395,  390,    0,  396,    0,  394,  397,
        0,    0,  398,  399,  390,    0,  397,    0,  395,    0,
      391,  398,  399,  400,  389,    0,  394,  401,  398,  399,
        0,    0,  400,  398,  395,  402,  401,  396,    0,  400,
        0,  405,    0,  401,  402,  403,  399,  397,    0,  404,
      405,  402,    0,    0,  403,    0,    0,  405,  404,  398,
      399,  403,  405,  406,  403,  404,  403,  408,  407,  404,
      400,  409,  406,    0,  401,    0,  408,  407,    0,  406,
      409,  410,  402,  408,  407,  403,    0,  409,  405,  407,

      410,  411,  403,  410,    0,  413,  404,  410,    0,    0,
      411,    0,  408,  412,  413,    0,  409,  411,  414,    0,
      406,  413,  412,  415,  408,  407,  416,  414,  409,  412,
        0,  417,  415,    0,  414,  416,    0,    0,  410,  415,
      417,  418,  416,    0,    0,  419,  412,  417,  411,    0,
      418,  414,  413,  420,  419,    0,    0,  418,    0,    0,
      412,  419,  420,    0,  417,  414,  421,  416,  422,  420,
      415,  423,    0,  416,  424,  421,    0,  422,  417,  420,
      423,  419,  421,  424,  422,    0,    0,  423,  418,  425,
      424,    0,  419,  423,  426,  424,    0,    0,  425,  421,

      420,  421,    0,  426,    0,  425,    0,  427,  428,    0,
      426,  429,    0,  421,    0,  422,  427,  428,  423,  425,
      429,  424,  431,  427,  428,    0,  430,  429,  432,    0,
      433,  431,    0,  426,  434,  430,  425,  432,  431,  433,
      429,  426,  430,  434,  432,    0,  433,  435,  436,  433,
      434,    0,    0,    0,  427,  428,  435,  436,  429,  431,
        0,  432,  430,  435,  436,    0,    0,  437,    0,  431,
        0,    0,    0,  430,    0,  432,  437,  433,    0,  436,
      437,  434,    0,  437,  438,    0,    0,  435,  439,    0,
      440,  437,  442,  438,  435,  436,  441,  439,  437,  440,

      438,  442,    0,    0,  439,  441,  440,    0,  442,    0,
      438,    0,  441,    0,  437,    0,  443,  445,  441,    0,
      444,    0,    0,  440,    0,  443,  445,    0,  442,  444,
        0,  438,  443,  445,    0,  439,  444,  440,  446,  442,
        0,    0,  443,  441,  448,    0,  444,  446,    0,  447,
      447,  447,    0,  448,  446,  447,    0,  449,    0,    0,
      448,  447,  448,  443,  445,  447,  449,  444,    0,    0,
      450,  451,  452,  449,  453,  449,    0,  446,    0,  450,
      451,  452,    0,  453,    0,  446,  450,  451,  452,    0,
      453,  448,  454,    0,  455,    0,  456,    0,  452,    0,

      450,  454,  451,  455,  449,  456,  453,    0,  454,    0,
      455,  457,  456,    0,  454,    0,  458,  450,  451,  452,
      457,  453,    0,  455,  459,  458,  460,  457,  461,  456,
        0,  457,  458,  459,    0,  460,  462,  461,  464,  454,
      459,  455,  460,  456,  461,  462,  463,  464,    0,    0,
      465,  466,  462,  458,  464,  463,  467,  460,  457,  465,
      466,    0,  463,  458,  459,  467,  465,  466,  468,    0,
        0,  459,  467,  460,    0,  461,  462,  468,  469,  463,
      465,  463,    0,  462,  468,  464,  468,  469,    0,    0,
      470,  471,    0,  463,  469,  472,  473,  465,  466,  470,

      471,  474,    0,  467,  472,  473,  470,  471,  470,    0,
      474,  472,  473,  475,  476,  468,    0,  474,  477,  469,
        0,    0,  475,  476,  478,  469,    0,  477,    0,  475,
      476,    0,    0,  478,  477,  479,  480,  470,  471,    0,
      478,  481,  472,  473,  479,  480,  482,  483,  474,  476,
      481,  479,  480,    0,    0,  482,  483,  481,    0,  484,
      475,  476,  482,  483,  485,  477,    0,  482,  484,  486,
        0,  478,    0,  485,  481,  484,    0,    0,  486,    0,
      485,  487,  479,  480,    0,  486,  482,  488,  481,  489,
      487,  490,  491,  482,  483,    0,  488,  487,  489,    0,

      490,  491,  484,  488,    0,  489,  484,  490,  491,  492,
      493,  485,    0,  490,  494,  495,  486,    0,  492,  493,
        0,    0,    0,  494,  495,  492,  493,    0,  487,    0,
      494,  495,  496,  497,  488,    0,  489,    0,  490,  491,
        0,  496,  497,    0,    0,    0,    0,    0,  496,  497,
      498,  496,    0,  496,  499,  497,  492,  493,  500,  498,
        0,  494,  495,  499,  497,    0,  498,  500,  501,  498,
      499,  498,  496,  502,  500,    0,  497,  501,    0,  496,
      497,    0,  502,    0,  501,    0,    0,  505,    0,  502,
      498,  498,  502,  503,  502,  499,  505,  498,  501,    0,

        0,  499,  503,  505,    0,  500,    0,  504,  505,  503,
        0,    0,  506,  502,    0,  501,  504,    0,    0,  503,
      502,  506,  508,  504,    0,    0,  507,  505,  506,  504,
      509,  508,  510,  506,  505,  507,    0,    0,  508,  509,
      503,  510,  507,    0,  507,    0,  509,  507,  510,  507,
      509,  512,  506,    0,  504,  513,  511,  508,    0,  506,
      512,    0,    0,    0,  513,  511,  514,  512,    0,  508,
        0,  513,  511,  507,  515,  514,  516,  509,  511,  510,
      517,    0,  514,  515,  518,  516,    0,    0,  519,  517,
      515,    0,  516,  518,    0,    0,  517,  519,  512,  511,

      518,  520,  513,  511,  519,    0,  522,    0,    0,  521,
      520,    0,    0,  514,    0,  522,    0,  520,  521,    0,
      523,  515,  522,  516,  524,  521,    0,  517,  521,  523,
      521,  518,  522,  524,  525,  519,  523,    0,  526,    0,
      524,    0,  523,  525,    0,    0,  524,  526,  520,  521,
      525,    0,  527,  522,  526,    0,  521,  528,    0,    0,
        0,  527,    0,    0,    0,    0,  528,  523,  527,    0,
        0,  524,    0,  528,  527,  530,    0,  532,  531,  528,
      533,  525,    0,    0,  530,  526,  532,  531,    0,  533,
        0,  530,  534,  532,  531,    0,  533,    0,    0,  527,

      531,  534,    0,    0,  528,  529,  529,  529,  534,  529,
      531,  529,  535,    0,    0,    0,  529,  536,    0,  529,
      529,  535,  530,  529,  532,  531,  536,  533,  535,  537,
      529,  538,  539,  536,  540,  542,    0,  541,  537,  534,
      538,  539,    0,  540,  542,  537,  541,  538,  539,    0,
      540,  542,  543,  541,  536,    0,  541,  544,  541,  535,
        0,  543,    0,    0,  536,    0,  544,    0,  543,    0,
        0,  545,    0,  544,  546,    0,  537,  541,  538,  539,
      545,  540,  542,  546,  541,  547,  548,  545,  543,  550,
      546,  549,    0,    0,  547,  548,    0,  551,  550,  543,

      549,  547,  548,  552,  544,  550,  551,  549,    0,    0,
        0,  553,  552,  551,  555,    0,    0,    0,  545,  552,
      553,  546,  552,  555,  547,  556,  549,  553,    0,    0,
      555,  557,  547,  548,  556,    0,  550,  554,  549,  558,
      557,  556,    0,  559,  551,    0,  554,  557,  558,  553,
      552,  560,  559,  554,  561,  558,  554,  562,  553,  559,
      560,  555,    0,  561,    0,  563,  562,  560,    0,    0,
      561,  564,  556,  562,  563,    0,  560,    0,  557,  565,
      564,  563,    0,  566,  554,    0,  558,  564,  565,    0,
      559,  567,  566,    0,  568,  565,    0,    0,  560,  566,

      567,  561,  564,  568,  562,  570,  569,  567,  571,    0,
      568,  572,  563,    0,  570,  569,  573,  571,  564,  574,
      572,  570,  569,    0,  571,  573,  565,  572,  574,    0,
      566,  575,  573,    0,  576,  574,    0,    0,  567,  569,
      575,  568,  570,  576,    0,  577,    0,  575,  578,  573,
      576,    0,  570,  569,  577,  571,  579,  578,  572,  580,
      581,  577,    0,  573,  578,  579,  574,  576,  580,  581,
      582,    0,  579,  583,  584,  580,  581,    0,  575,  582,
      577,  576,  583,  584,    0,  586,  582,    0,  585,  583,
      584,    0,  577,  579,  586,  578,    0,  585,  586,  587,

      588,  586,  589,  579,  585,  582,  580,  581,  587,  588,
      585,  589,  587,  584,  590,  587,  588,  582,  589,    0,
      583,  584,  591,  590,  592,  585,    0,  593,  594,    0,
      590,  591,  586,  592,    0,  585,  593,  594,  591,    0,
      592,    0,  595,  593,  594,    0,  587,  588,  591,  589,
      594,  595,    0,    0,  596,  590,  597,  598,  595,    0,
        0,  590,    0,  596,  593,  597,  598,  599,  600,  591,
      596,  592,  597,  598,  593,  594,  599,  600,    0,  601,
      600,  602,  595,  599,  600,  596,    0,    0,  601,  595,
      602,    0,    0,    0,  598,  601,  597,  602,  599,    0,

      603,  596,  604,  597,  598,    0,    0,    0,  605,  603,
        0,  604,  602,  606,  599,  600,  603,  605,  604,    0,
        0,    0,  606,  608,  605,  607,  601,    0,  602,  606,
      605,    0,  608,    0,  607,  603,  609,  610,    0,  608,
        0,  607,  611,  606,    0,  609,  610,  603,    0,  604,
      612,  611,  609,  610,    0,  605,    0,  607,  611,  612,
      606,    0,  613,    0,  618,  614,  612,    0,    0,    0,
      608,  613,  607,  618,  614,    0,  610,  616,  613,    0,
      618,  614,    0,  609,  610,  615,  616,  617,    0,  611,
      619,    0,    0,  616,  615,  613,  617,  612,  614,  619,

      618,  615,    0,  617,  620,  615,  619,    0,    0,  613,
      616,  618,  614,  620,  619,    0,  617,  621,    0,  622,
      620,    0,  623,    0,  616,    0,  621,  624,  622,    0,
      625,  623,  615,  621,  617,  622,  624,  619,  623,  625,
      626,  627,    0,  624,  629,    0,  625,    0,    0,  626,
      627,  620,  630,  629,  628,    0,  626,  627,    0,    0,
      629,  630,  631,  628,  621,    0,  622,    0,  630,  623,
      628,  631,    0,  632,  624,    0,  628,  625,  631,    0,
        0,    0,  632,    0,  633,    0,  634,  626,  627,  632,
        0,  629,    0,  633,  636,  634,  635,  628,  637,  630,

      633,  628,  634,  636,    0,  635,    0,  637,  638,  631,
      636,    0,  635,    0,  637,    0,  639,  638,  641,  640,
      632,  642,  635,    0,  638,  639,    0,  641,  640,    0,
      642,  633,  639,  634,  641,  640,    0,  642,    0,    0,
        0,  636,  643,  635,  644,  637,    0,  639,  645,    0,
        0,  643,    0,  644,    0,  638,  640,  645,  643,    0,
      644,  646,  647,  639,  645,  641,  640,    0,  642,  645,
      646,  647,    0,    0,    0,    0,  648,  646,  647,    0,
        0,  649,    0,  647,  650,  648,    0,  651,  645,  643,
      649,  644,  648,  650,    0,  645,  651,  649,  652,    0,

      650,  653,  647,  651,  654,    0,  655,  652,  646,  647,
      653,    0,    0,  654,  652,  655,  656,  653,    0,    0,
      654,  657,  655,  648,  658,  656,  659,  660,  649,    0,
      657,  650,  656,  658,  651,  659,  660,  657,  655,    0,
      658,    0,  659,  660,    0,  652,  662,    0,  653,  660,
      661,  654,    0,  655,    0,  662,    0,    0,    0,  661,
      663,  664,  662,  656,    0,    0,  661,    0,  657,  663,
      664,  658,  661,  659,  660,  666,  663,  664,  665,  667,
      668,    0,    0,  664,  666,    0,    0,  665,  667,  668,
      669,  666,    0,  662,  665,  667,  668,  661,    0,  669,

      665,  670,  671,  672,  673,  674,  669,  663,  664,    0,
      670,  671,  672,  673,  674,  675,    0,  670,  671,  672,
      673,  674,  666,  676,  675,  665,  667,  668,    0,    0,
        0,  675,  676,    0,    0,    0,    0,  669,  677,  676,
        0,    0,    0,    0,  678,    0,    0,  677,  670,  671,
      672,  673,  674,  678,  677,  679,  680,  681,  682,  677,
      678,    0,  675,    0,  679,  680,  681,  682,  683,    0,
      676,  679,  680,  681,  682,    0,    0,  683,  684,  685,
      686,  687,  682,  688,  683,  677,    0,  684,  685,  686,
      687,  678,  688,  680,  684,  685,  686,  687,  689,  688,

      690,  691,  679,  680,  681,  682,    0,  689,    0,  690,
      691,    0,  685,  692,  689,  683,  690,  691,    0,    0,
        0,    0,  692,  693,  694,  684,  685,  686,  687,  692,
      688,  689,  693,  694,  695,  696,    0,  697,    0,  693,
      694,    0,    0,  695,  696,  689,  697,  690,  691,  698,
      695,  696,  699,  697,    0,    0,    0,  700,  698,    0,
      692,  699,    0,  701,    0,  698,  700,  702,  699,  703,
      693,  694,  701,  700,    0,    0,  702,  704,  703,  701,
        0,  695,  696,  702,  697,  703,  704,    0,    0,  705,
        0,  706,  707,  704,    0,    0,  698,  708,  705,  699,

      706,  707,  701,  709,  700,  705,  708,  706,  707,  710,
      701,  711,  709,  708,  702,    0,  703,  712,  710,  709,
      711,  713,    0,    0,  704,  710,  712,  711,  706,    0,
      713,  715,  714,  712,    0,    0,  705,  713,  706,  707,
      715,  714,    0,  715,  708,  710,  716,  715,  714,    0,
      709,  717,    0,    0,  713,  716,  710,    0,  711,    0,
      717,  718,  716,    0,  712,  719,  720,  717,  713,  714,
      718,  721,    0,  717,  719,  720,  722,  718,  715,  714,
      721,  719,  720,    0,    0,  722,  723,  721,  724,    0,
      725,    0,  722,  716,  726,  723,    0,  724,  717,  725,

      722,    0,  723,  726,  724,    0,  725,    0,  718,    0,
      726,  727,  719,  720,  721,  728,  729,    0,  721,    0,
      727,    0,    0,  722,  728,  729,    0,  727,    0,  730,
        0,  728,  729,  723,  731,  724,    0,  725,  730,  732,
      733,  726,    0,  731,  734,  730,  728,    0,  732,  733,
      731,    0,  735,  734,    0,  732,  733,    0,  727,    0,
      734,  735,  728,  729,  736,    0,  734,    0,  735,  737,
        0,    0,    0,  736,  738,    0,  730,    0,  737,  739,
      736,  731,    0,  738,  740,  737,  732,  733,  739,  741,
      738,  734,  742,  740,  743,  739,    0,  744,  741,  735,

      740,  742,    0,  743,    0,  741,  744,    0,  742,  746,
      743,  736,    0,  744,  747,    0,  737,    0,  746,  748,
        0,  738,    0,  747,  745,  746,  739,    0,  748,  749,
      747,  740,    0,  745,  744,  748,  741,    0,  749,  742,
      745,  743,  750,    0,  744,  749,  745,    0,    0,    0,
        0,  750,    0,    0,    0,    0,  746,    0,  750,    0,
        0,  747,    0,    0,    0,    0,  748,    0,    0,    0,
        0,  745,    0,    0,    0,    0,  749,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  750,
      752,  752,  753,  753,  754,  754,  755,  755,  756,  756,

      757,  757,  758,  758,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "nask.ll"
/* -*- c++ -*- File generated by the BNF Converter (bnfc 2.9.5). */
/* Lexer definition for use with FLex */
/* Additional data for the lexer: a buffer for lexing string literals. */

#line 14 "nask.ll"
#include "scanner.hh"

/* using "token" to make the returns for the tokens shorter to type */
using token = nask_::NaskParser::token;


#include "absyn.hh"
#include "bison.hh"

#define initialize_lexer nask__initialize_lexer

/* BEGIN extensible string buffer */

#include "buffer.hh"

/* The initial size of the buffer to lex string literals. */
#define LITERAL_BUFFER_INITIAL_SIZE 1024

/* The pointer to the literal buffer. */
Buffer literal_buffer = nullptr;

/* Initialize the literal buffer. */
#define LITERAL_BUFFER_CREATE() literal_buffer = newBuffer(LITERAL_BUFFER_INITIAL_SIZE)

/* Append characters at the end of the buffer. */
#define LITERAL_BUFFER_APPEND(s) bufferAppendString(literal_buffer, s)

/* Append a character at the end of the buffer. */
#define LITERAL_BUFFER_APPEND_CHAR(c) bufferAppendChar(literal_buffer, c)

/* Release the buffer, returning a pointer to its content. */
#define LITERAL_BUFFER_HARVEST() releaseBuffer(literal_buffer)

/* In exceptional cases, e.g. when reaching EOF, we have to free the buffer. */
#define LITERAL_BUFFER_FREE() freeBuffer(literal_buffer)

/* END extensible string buffer */

/* update location on matching */
#define YY_USER_ACTION \
loc->begin.line   = loc->end.line; \
loc->begin.column = loc->end.column; \
for(int i = 0; yytext[i] != '\0'; i++) { \
    if(yytext[i] == '\n') { \
        loc->end.line++; \
        loc->end.column = 0; \
    } \
    else { \
        loc->end.column++; \
    } \
}
#line 1770 "lexer.cc"

#line 1772 "lexer.cc"

#define INITIAL 0
#define CHAR 1
#define CHARESC 2
#define CHAREND 3
#define STRING 4
#define ESCAPED 5
#define COMMENT 6
#define COMMENT1 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE Buffer

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 74 "nask.ll"


#line 1912 "lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 752 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4705 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 76 "nask.ll"
return token::_LBRACK;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 77 "nask.ll"
return token::_RBRACK;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 78 "nask.ll"
return token::_COMMA;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 79 "nask.ll"
return token::_PLUS;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 80 "nask.ll"
return token::_MINUS;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 81 "nask.ll"
return token::_STAR;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 82 "nask.ll"
return token::_SLASH;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 83 "nask.ll"
return token::_PERCENT;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 84 "nask.ll"
return token::_LPAREN;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 85 "nask.ll"
return token::_RPAREN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 86 "nask.ll"
return token::_COLON;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 87 "nask.ll"
return token::_KW_AAA;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 88 "nask.ll"
return token::_KW_AAD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 89 "nask.ll"
return token::_KW_AAM;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 90 "nask.ll"
return token::_KW_AAS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 91 "nask.ll"
return token::_KW_ABSOLUTE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 92 "nask.ll"
return token::_KW_ADC;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 93 "nask.ll"
return token::_KW_ADD;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 94 "nask.ll"
return token::_KW_ALIGN;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 95 "nask.ll"
return token::_KW_ALIGNB;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 96 "nask.ll"
return token::_KW_AND;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 97 "nask.ll"
return token::_KW_ARPL;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 98 "nask.ll"
return token::_KW_BITS;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 99 "nask.ll"
return token::_KW_BOUND;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 100 "nask.ll"
return token::_KW_BSF;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 101 "nask.ll"
return token::_KW_BSR;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 102 "nask.ll"
return token::_KW_BSWAP;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 103 "nask.ll"
return token::_KW_BT;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 104 "nask.ll"
return token::_KW_BTC;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 105 "nask.ll"
return token::_KW_BTR;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 106 "nask.ll"
return token::_KW_BTS;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 107 "nask.ll"
return token::_KW_BYTE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 108 "nask.ll"
return token::_KW_CALL;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 109 "nask.ll"
return token::_KW_CBW;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 110 "nask.ll"
return token::_KW_CDQ;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 111 "nask.ll"
return token::_KW_CLC;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 112 "nask.ll"
return token::_KW_CLD;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 113 "nask.ll"
return token::_KW_CLI;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 114 "nask.ll"
return token::_KW_CLTS;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 115 "nask.ll"
return token::_KW_CMC;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 116 "nask.ll"
return token::_KW_CMP;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 117 "nask.ll"
return token::_KW_CMPSB;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 118 "nask.ll"
return token::_KW_CMPSD;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 119 "nask.ll"
return token::_KW_CMPSW;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "nask.ll"
return token::_KW_CMPXCHG;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "nask.ll"
return token::_KW_CPUID;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "nask.ll"
return token::_KW_CWD;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "nask.ll"
return token::_KW_CWDE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "nask.ll"
return token::_KW_DAA;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "nask.ll"
return token::_KW_DAS;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "nask.ll"
return token::_KW_DB;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "nask.ll"
return token::_KW_DD;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "nask.ll"
return token::_KW_DEC;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "nask.ll"
return token::_KW_DIV;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "nask.ll"
return token::_KW_DQ;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "nask.ll"
return token::_KW_DT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 132 "nask.ll"
return token::_KW_DW;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "nask.ll"
return token::_KW_DWORD;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 134 "nask.ll"
return token::_KW_END;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "nask.ll"
return token::_KW_ENTER;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 136 "nask.ll"
return token::_KW_EQU;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 137 "nask.ll"
return token::_KW_EXTERN;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 138 "nask.ll"
return token::_KW_F2XM1;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 139 "nask.ll"
return token::_KW_FABS;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 140 "nask.ll"
return token::_KW_FADD;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 141 "nask.ll"
return token::_KW_FADDP;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 142 "nask.ll"
return token::_KW_FAR;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 143 "nask.ll"
return token::_KW_FBLD;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 144 "nask.ll"
return token::_KW_FBSTP;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 145 "nask.ll"
return token::_KW_FCHS;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 146 "nask.ll"
return token::_KW_FCLEX;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 147 "nask.ll"
return token::_KW_FCOM;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 148 "nask.ll"
return token::_KW_FCOMP;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 149 "nask.ll"
return token::_KW_FCOMPP;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 150 "nask.ll"
return token::_KW_FCOS;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 151 "nask.ll"
return token::_KW_FDECSTP;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 152 "nask.ll"
return token::_KW_FDISI;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 153 "nask.ll"
return token::_KW_FDIV;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 154 "nask.ll"
return token::_KW_FDIVP;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 155 "nask.ll"
return token::_KW_FDIVR;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 156 "nask.ll"
return token::_KW_FDIVRP;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 157 "nask.ll"
return token::_KW_FENI;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 158 "nask.ll"
return token::_KW_FFREE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 159 "nask.ll"
return token::_KW_FIADD;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 160 "nask.ll"
return token::_KW_FICOM;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 161 "nask.ll"
return token::_KW_FICOMP;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 162 "nask.ll"
return token::_KW_FIDIV;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 163 "nask.ll"
return token::_KW_FIDIVR;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 164 "nask.ll"
return token::_KW_FILD;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 165 "nask.ll"
return token::_KW_FILE;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 166 "nask.ll"
return token::_KW_FIMUL;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 167 "nask.ll"
return token::_KW_FINCSTP;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 168 "nask.ll"
return token::_KW_FINIT;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 169 "nask.ll"
return token::_KW_FIST;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 170 "nask.ll"
return token::_KW_FISTP;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 171 "nask.ll"
return token::_KW_FISUB;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 172 "nask.ll"
return token::_KW_FISUBR;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 173 "nask.ll"
return token::_KW_FLD;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 174 "nask.ll"
return token::_KW_FLD1;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 175 "nask.ll"
return token::_KW_FLDCW;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 176 "nask.ll"
return token::_KW_FLDENV;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 177 "nask.ll"
return token::_KW_FLDL2E;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 178 "nask.ll"
return token::_KW_FLDL2T;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 179 "nask.ll"
return token::_KW_FLDLG2;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 180 "nask.ll"
return token::_KW_FLDLN2;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 181 "nask.ll"
return token::_KW_FLDPI;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 182 "nask.ll"
return token::_KW_FLDZ;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 183 "nask.ll"
return token::_KW_FMUL;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 184 "nask.ll"
return token::_KW_FMULP;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 185 "nask.ll"
return token::_KW_FNCLEX;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 186 "nask.ll"
return token::_KW_FNDISI;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 187 "nask.ll"
return token::_KW_FNENI;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 188 "nask.ll"
return token::_KW_FNINIT;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 189 "nask.ll"
return token::_KW_FNOP;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 190 "nask.ll"
return token::_KW_FNSAVE;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 191 "nask.ll"
return token::_KW_FNSTCW;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 192 "nask.ll"
return token::_KW_FNSTENV;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 193 "nask.ll"
return token::_KW_FNSTSW;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 194 "nask.ll"
return token::_KW_FORMAT;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 195 "nask.ll"
return token::_KW_FPATAN;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 196 "nask.ll"
return token::_KW_FPREM;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 197 "nask.ll"
return token::_KW_FPREM1;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 198 "nask.ll"
return token::_KW_FPTAN;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 199 "nask.ll"
return token::_KW_FRNDINT;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 200 "nask.ll"
return token::_KW_FRSTOR;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 201 "nask.ll"
return token::_KW_FSAVE;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 202 "nask.ll"
return token::_KW_FSCALE;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 203 "nask.ll"
return token::_KW_FSETPM;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 204 "nask.ll"
return token::_KW_FSIN;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 205 "nask.ll"
return token::_KW_FSINCOS;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 206 "nask.ll"
return token::_KW_FSQRT;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 207 "nask.ll"
return token::_KW_FST;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 208 "nask.ll"
return token::_KW_FSTCW;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 209 "nask.ll"
return token::_KW_FSTENV;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 210 "nask.ll"
return token::_KW_FSTP;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 211 "nask.ll"
return token::_KW_FSTSW;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 212 "nask.ll"
return token::_KW_FSUB;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 213 "nask.ll"
return token::_KW_FSUBP;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 214 "nask.ll"
return token::_KW_FSUBR;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 215 "nask.ll"
return token::_KW_FSUBRP;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 216 "nask.ll"
return token::_KW_FTST;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 217 "nask.ll"
return token::_KW_FUCOM;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 218 "nask.ll"
return token::_KW_FUCOMP;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 219 "nask.ll"
return token::_KW_FUCOMPP;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 220 "nask.ll"
return token::_KW_FXAM;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 221 "nask.ll"
return token::_KW_FXCH;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 222 "nask.ll"
return token::_KW_FXTRACT;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 223 "nask.ll"
return token::_KW_FYL2X;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 224 "nask.ll"
return token::_KW_FYL2XP1;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 225 "nask.ll"
return token::_KW_GLOBAL;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 226 "nask.ll"
return token::_KW_HLT;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 227 "nask.ll"
return token::_KW_IDIV;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 228 "nask.ll"
return token::_KW_IMUL;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 229 "nask.ll"
return token::_KW_IN;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 230 "nask.ll"
return token::_KW_INC;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 231 "nask.ll"
return token::_KW_INCO;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 232 "nask.ll"
return token::_KW_INSB;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 233 "nask.ll"
return token::_KW_INSD;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 234 "nask.ll"
return token::_KW_INSTRSET;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 235 "nask.ll"
return token::_KW_INSW;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 236 "nask.ll"
return token::_KW_INT;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 237 "nask.ll"
return token::_KW_INT3;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 238 "nask.ll"
return token::_KW_INTO;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 239 "nask.ll"
return token::_KW_INVD;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 240 "nask.ll"
return token::_KW_INVLPG;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 241 "nask.ll"
return token::_KW_IRET;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 242 "nask.ll"
return token::_KW_IRETD;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 243 "nask.ll"
return token::_KW_IRETW;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 244 "nask.ll"
return token::_KW_JA;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 245 "nask.ll"
return token::_KW_JAE;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 246 "nask.ll"
return token::_KW_JB;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 247 "nask.ll"
return token::_KW_JBE;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 248 "nask.ll"
return token::_KW_JC;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 249 "nask.ll"
return token::_KW_JCXZ;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 250 "nask.ll"
return token::_KW_JE;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 251 "nask.ll"
return token::_KW_JECXZ;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 252 "nask.ll"
return token::_KW_JG;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 253 "nask.ll"
return token::_KW_JGE;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 254 "nask.ll"
return token::_KW_JL;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 255 "nask.ll"
return token::_KW_JLE;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 256 "nask.ll"
return token::_KW_JMP;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 257 "nask.ll"
return token::_KW_JNA;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 258 "nask.ll"
return token::_KW_JNAE;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 259 "nask.ll"
return token::_KW_JNB;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 260 "nask.ll"
return token::_KW_JNBE;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 261 "nask.ll"
return token::_KW_JNC;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 262 "nask.ll"
return token::_KW_JNE;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 263 "nask.ll"
return token::_KW_JNG;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 264 "nask.ll"
return token::_KW_JNGE;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 265 "nask.ll"
return token::_KW_JNL;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 266 "nask.ll"
return token::_KW_JNLE;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 267 "nask.ll"
return token::_KW_JNO;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 268 "nask.ll"
return token::_KW_JNP;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 269 "nask.ll"
return token::_KW_JNS;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 270 "nask.ll"
return token::_KW_JNZ;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 271 "nask.ll"
return token::_KW_JO;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 272 "nask.ll"
return token::_KW_JP;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 273 "nask.ll"
return token::_KW_JPE;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 274 "nask.ll"
return token::_KW_JPO;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 275 "nask.ll"
return token::_KW_JS;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 276 "nask.ll"
return token::_KW_JZ;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 277 "nask.ll"
return token::_KW_LAHF;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 278 "nask.ll"
return token::_KW_LAR;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 279 "nask.ll"
return token::_KW_LDS;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 280 "nask.ll"
return token::_KW_LEA;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 281 "nask.ll"
return token::_KW_LEAVE;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 282 "nask.ll"
return token::_KW_LES;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 283 "nask.ll"
return token::_KW_LFS;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 284 "nask.ll"
return token::_KW_LGDT;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 285 "nask.ll"
return token::_KW_LGS;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 286 "nask.ll"
return token::_KW_LIDT;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 287 "nask.ll"
return token::_KW_LLDT;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 288 "nask.ll"
return token::_KW_LMSW;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 289 "nask.ll"
return token::_KW_LOCK;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 290 "nask.ll"
return token::_KW_LODSB;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 291 "nask.ll"
return token::_KW_LODSD;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 292 "nask.ll"
return token::_KW_LODSW;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 293 "nask.ll"
return token::_KW_LOOP;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 294 "nask.ll"
return token::_KW_LOOPE;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 295 "nask.ll"
return token::_KW_LOOPNE;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 296 "nask.ll"
return token::_KW_LOOPNZ;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 297 "nask.ll"
return token::_KW_LOOPZ;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 298 "nask.ll"
return token::_KW_LSL;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 299 "nask.ll"
return token::_KW_LSS;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 300 "nask.ll"
return token::_KW_LTR;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 301 "nask.ll"
return token::_KW_MOV;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 302 "nask.ll"
return token::_KW_MOVSB;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 303 "nask.ll"
return token::_KW_MOVSD;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 304 "nask.ll"
return token::_KW_MOVSW;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 305 "nask.ll"
return token::_KW_MOVSX;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 306 "nask.ll"
return token::_KW_MOVZX;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 307 "nask.ll"
return token::_KW_MUL;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 308 "nask.ll"
return token::_KW_NEAR;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 309 "nask.ll"
return token::_KW_NEG;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 310 "nask.ll"
return token::_KW_NOP;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 311 "nask.ll"
return token::_KW_NOT;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 312 "nask.ll"
return token::_KW_OPTIMIZE;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 313 "nask.ll"
return token::_KW_OR;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 314 "nask.ll"
return token::_KW_ORG;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 315 "nask.ll"
return token::_KW_OUT;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 316 "nask.ll"
return token::_KW_OUTSB;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 317 "nask.ll"
return token::_KW_OUTSD;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 318 "nask.ll"
return token::_KW_OUTSW;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 319 "nask.ll"
return token::_KW_PADDING;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 320 "nask.ll"
return token::_KW_PADSET;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 321 "nask.ll"
return token::_KW_POP;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 322 "nask.ll"
return token::_KW_POPA;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 323 "nask.ll"
return token::_KW_POPAD;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 324 "nask.ll"
return token::_KW_POPAW;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 325 "nask.ll"
return token::_KW_POPF;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 326 "nask.ll"
return token::_KW_POPFD;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 327 "nask.ll"
return token::_KW_POPFW;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 328 "nask.ll"
return token::_KW_PUSH;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 329 "nask.ll"
return token::_KW_PUSHA;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 330 "nask.ll"
return token::_KW_PUSHAD;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 331 "nask.ll"
return token::_KW_PUSHAW;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 332 "nask.ll"
return token::_KW_PUSHD;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 333 "nask.ll"
return token::_KW_PUSHF;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 334 "nask.ll"
return token::_KW_PUSHFD;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 335 "nask.ll"
return token::_KW_PUSHFW;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 336 "nask.ll"
return token::_KW_RCL;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 337 "nask.ll"
return token::_KW_RCR;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 338 "nask.ll"
return token::_KW_RDMSR;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 339 "nask.ll"
return token::_KW_RDPMC;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 340 "nask.ll"
return token::_KW_REP;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 341 "nask.ll"
return token::_KW_REPE;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 342 "nask.ll"
return token::_KW_REPNE;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 343 "nask.ll"
return token::_KW_REPNZ;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 344 "nask.ll"
return token::_KW_REPZ;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 345 "nask.ll"
return token::_KW_RESB;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 346 "nask.ll"
return token::_KW_RESD;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 347 "nask.ll"
return token::_KW_RESQ;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 348 "nask.ll"
return token::_KW_REST;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 349 "nask.ll"
return token::_KW_RESW;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 350 "nask.ll"
return token::_KW_RET;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 351 "nask.ll"
return token::_KW_RETF;
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 352 "nask.ll"
return token::_KW_RETN;
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 353 "nask.ll"
return token::_KW_ROL;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 354 "nask.ll"
return token::_KW_ROR;
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 355 "nask.ll"
return token::_KW_RSM;
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 356 "nask.ll"
return token::_KW_SAHF;
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 357 "nask.ll"
return token::_KW_SAL;
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 358 "nask.ll"
return token::_KW_SAR;
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 359 "nask.ll"
return token::_KW_SBB;
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 360 "nask.ll"
return token::_KW_SCASB;
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 361 "nask.ll"
return token::_KW_SCASD;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 362 "nask.ll"
return token::_KW_SCASW;
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 363 "nask.ll"
return token::_KW_SECTION;
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 364 "nask.ll"
return token::_KW_SETA;
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 365 "nask.ll"
return token::_KW_SETAE;
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 366 "nask.ll"
return token::_KW_SETB;
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 367 "nask.ll"
return token::_KW_SETBE;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 368 "nask.ll"
return token::_KW_SETC;
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 369 "nask.ll"
return token::_KW_SETE;
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 370 "nask.ll"
return token::_KW_SETG;
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 371 "nask.ll"
return token::_KW_SETGE;
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 372 "nask.ll"
return token::_KW_SETL;
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 373 "nask.ll"
return token::_KW_SETLE;
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 374 "nask.ll"
return token::_KW_SETNA;
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 375 "nask.ll"
return token::_KW_SETNAE;
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 376 "nask.ll"
return token::_KW_SETNB;
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 377 "nask.ll"
return token::_KW_SETNBE;
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 378 "nask.ll"
return token::_KW_SETNC;
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 379 "nask.ll"
return token::_KW_SETNE;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 380 "nask.ll"
return token::_KW_SETNG;
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 381 "nask.ll"
return token::_KW_SETNGE;
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 382 "nask.ll"
return token::_KW_SETNL;
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 383 "nask.ll"
return token::_KW_SETNLE;
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 384 "nask.ll"
return token::_KW_SETNO;
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 385 "nask.ll"
return token::_KW_SETNP;
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 386 "nask.ll"
return token::_KW_SETNS;
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 387 "nask.ll"
return token::_KW_SETNZ;
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 388 "nask.ll"
return token::_KW_SETO;
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 389 "nask.ll"
return token::_KW_SETP;
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 390 "nask.ll"
return token::_KW_SETPE;
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 391 "nask.ll"
return token::_KW_SETPO;
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 392 "nask.ll"
return token::_KW_SETS;
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 393 "nask.ll"
return token::_KW_SETZ;
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 394 "nask.ll"
return token::_KW_SGDT;
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 395 "nask.ll"
return token::_KW_SHL;
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 396 "nask.ll"
return token::_KW_SHLD;
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 397 "nask.ll"
return token::_KW_SHORT;
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 398 "nask.ll"
return token::_KW_SHR;
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 399 "nask.ll"
return token::_KW_SHRD;
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 400 "nask.ll"
return token::_KW_SIDT;
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 401 "nask.ll"
return token::_KW_SLDT;
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 402 "nask.ll"
return token::_KW_SMSW;
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 403 "nask.ll"
return token::_KW_STC;
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 404 "nask.ll"
return token::_KW_STD;
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 405 "nask.ll"
return token::_KW_STI;
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 406 "nask.ll"
return token::_KW_STOSB;
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 407 "nask.ll"
return token::_KW_STOSD;
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 408 "nask.ll"
return token::_KW_STOSW;
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 409 "nask.ll"
return token::_KW_STR;
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 410 "nask.ll"
return token::_KW_SUB;
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 411 "nask.ll"
return token::_KW_TEST;
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 412 "nask.ll"
return token::_KW_TIMES;
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 413 "nask.ll"
return token::_KW_UD2;
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 414 "nask.ll"
return token::_KW_VERR;
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 415 "nask.ll"
return token::_KW_VERW;
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 416 "nask.ll"
return token::_KW_WAIT;
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 417 "nask.ll"
return token::_KW_WBINVD;
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 418 "nask.ll"
return token::_KW_WORD;
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 419 "nask.ll"
return token::_KW_WRMSR;
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 420 "nask.ll"
return token::_KW_XADD;
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 421 "nask.ll"
return token::_KW_XCHG;
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 422 "nask.ll"
return token::_KW_XLATB;
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 423 "nask.ll"
return token::_KW_XOR;
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 425 "nask.ll"
BEGIN COMMENT; /* BNFC: block comment "#" "\\n" */
	YY_BREAK
case 350:
/* rule 350 can match eol */
YY_RULE_SETUP
#line 426 "nask.ll"
BEGIN INITIAL;
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 427 "nask.ll"
/* skip */;
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 428 "nask.ll"
BEGIN COMMENT1; /* BNFC: block comment ";" "\\n" */
	YY_BREAK
case 353:
/* rule 353 can match eol */
YY_RULE_SETUP
#line 429 "nask.ll"
BEGIN INITIAL;
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 430 "nask.ll"
/* skip */;
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 432 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_Hex;
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 433 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_Label;
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 434 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_Id;
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 435 "nask.ll"
LITERAL_BUFFER_CREATE(); BEGIN STRING;
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 436 "nask.ll"
BEGIN ESCAPED;
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 437 "nask.ll"
yylval->emplace<std::string>(LITERAL_BUFFER_HARVEST()); BEGIN INITIAL; return token::_STRING_;
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 438 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR(yytext[0]);
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 439 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\f'); BEGIN STRING;
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 440 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\n'); BEGIN STRING;
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 441 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\r'); BEGIN STRING;
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 442 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\t'); BEGIN STRING;
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 443 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('"');  BEGIN STRING;
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 444 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\\'); BEGIN STRING;
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 445 "nask.ll"
LITERAL_BUFFER_APPEND(yytext);    BEGIN STRING;
	YY_BREAK
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(ESCAPED):
#line 446 "nask.ll"
LITERAL_BUFFER_FREE(); return token::_ERROR_;
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 447 "nask.ll"
BEGIN CHAR;
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 448 "nask.ll"
BEGIN CHARESC;
	YY_BREAK
case 371:
/* rule 371 can match eol */
YY_RULE_SETUP
#line 449 "nask.ll"
BEGIN CHAREND; yylval->emplace<char>(yytext[0]); return token::_CHAR_;
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 450 "nask.ll"
BEGIN CHAREND; yylval->emplace<char>('\f');     return token::_CHAR_;
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 451 "nask.ll"
BEGIN CHAREND; yylval->emplace<char>('\n');     return token::_CHAR_;
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 452 "nask.ll"
BEGIN CHAREND; yylval->emplace<char>('\r');     return token::_CHAR_;
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 453 "nask.ll"
BEGIN CHAREND; yylval->emplace<char>('\t');     return token::_CHAR_;
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 454 "nask.ll"
BEGIN CHAREND; yylval->emplace<char>(yytext[0]); return token::_CHAR_;
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 455 "nask.ll"
BEGIN INITIAL;
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 456 "nask.ll"
yylval->emplace<int>(atoi(yytext)); return token::_INTEGER_;
	YY_BREAK
case 379:
/* rule 379 can match eol */
YY_RULE_SETUP
#line 457 "nask.ll"
/* ignore white space. */;
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 458 "nask.ll"
return token::_ERROR_;
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 460 "nask.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3883 "lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CHAR):
case YY_STATE_EOF(CHARESC):
case YY_STATE_EOF(CHAREND):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(COMMENT1):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 752 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 752 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 751);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 460 "nask.ll"



NaskScanner::NaskScanner(std::istream *in)
    : yyFlexLexer(in)
{
    loc = new nask_::NaskParser::location_type();
}

NaskScanner::~NaskScanner()
{
    delete loc;
    delete yylval;
}

/* This implementation of NaskFlexLexer::yylex() is required to fill the
 * vtable of the class NaskFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */



#ifdef yylex
#undef yylex
#endif

int yyFlexLexer::yylex()
{
    std::cerr << "in yyFlexLexer::yylex() !" << std::endl;
    return 0;
}



