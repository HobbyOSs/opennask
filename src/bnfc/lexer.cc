#line 2 "lexer.cc"
#include <memory>

#line 5 "lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer nask_FlexLexer

#ifdef yyalloc
#define nask_alloc_ALREADY_DEFINED
#else
#define yyalloc nask_alloc
#endif

#ifdef yyrealloc
#define nask_realloc_ALREADY_DEFINED
#else
#define yyrealloc nask_realloc
#endif

#ifdef yyfree
#define nask_free_ALREADY_DEFINED
#else
#define yyfree nask_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 369
#define YY_END_OF_BUFFER 370
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[735] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  370,  368,  367,  367,
      355,  346,  354,    8,    9,   10,    6,    4,    3,    5,
        7,  366,  366,   11,  349,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,    1,    2,  369,
      358,  357,  356,  365,  363,  364,  359,  360,  361,  362,
      348,  347,  351,  350,  354,  354,  353,  366,    0,  354,
      354,  354,  354,  354,  354,  354,  354,  354,   28,  354,
      354,  354,  354,  354,  354,  354,  354,  354,   51,   52,

      354,  354,   55,   56,   57,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  153,  354,  168,  170,  172,  174,  176,  178,  354,
      354,  195,  196,  199,  200,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  236,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  352,   12,   13,   14,   15,  354,

       17,   18,  354,   21,  354,  354,  354,   25,   26,  354,
       29,   30,   31,  354,  354,   34,   35,   36,   37,   38,
      354,   40,   41,  354,   47,   49,   50,   53,   54,  354,
       59,  354,   61,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,   97,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  131,  354,  354,  354,  354,  354,  354,  354,
      354,  150,  354,  354,  154,  354,  160,  354,  354,  169,
      171,  354,  354,  177,  179,  180,  181,  183,  185,  186,

      187,  189,  191,  192,  193,  194,  197,  198,  354,  202,
      203,  204,  206,  207,  354,  209,  354,  354,  354,  354,
      354,  354,  222,  223,  224,  225,  231,  232,  233,  234,
      354,  237,  238,  354,  244,  354,  259,  260,  354,  354,
      263,  354,  273,  276,  277,  278,  354,  280,  281,  282,
      354,  354,  354,  354,  318,  320,  354,  354,  354,  325,
      326,  327,  354,  331,  332,  354,  354,  335,  354,  354,
      354,  354,  354,  354,  354,  354,  345,  352,  352,  354,
      354,   22,   23,  354,  354,   32,   33,   39,  354,  354,
      354,   48,  354,  354,  354,  354,   64,   65,   67,  354,

       69,  354,   71,   74,  354,  354,   77,   81,  354,  354,
      354,  354,   88,   89,  354,  354,  354,   93,  354,   98,
      354,  354,  354,  354,  106,  107,  354,  354,  354,  354,
      113,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  128,  354,  354,  354,  134,  354,  136,  140,
      354,  144,  145,  354,  354,  354,  151,  152,  155,  156,
      157,  354,  159,  161,  162,  163,  354,  165,  173,  354,
      182,  184,  188,  190,  201,  354,  208,  210,  211,  212,
      213,  354,  217,  354,  354,  354,  354,  354,  354,  245,
      248,  251,  354,  354,  264,  354,  267,  268,  269,  270,

      271,  272,  274,  275,  279,  354,  354,  287,  289,  291,
      292,  293,  295,  354,  311,  312,  315,  316,  317,  319,
      321,  322,  323,  324,  354,  333,  354,  336,  337,  338,
      354,  340,  354,  342,  343,  354,  354,   19,   24,   27,
       42,   43,   44,  354,   46,   58,   60,  354,   63,   66,
       68,   70,   72,  354,   76,   78,   79,   82,   83,   84,
       86,   90,  354,   92,   94,   95,   99,  354,  354,  354,
      354,  105,  108,  354,  354,  111,  354,  354,  354,  354,
      354,  354,  354,  120,  122,  354,  354,  125,  354,  354,
      354,  130,  132,  354,  135,  137,  138,  141,  354,  147,

      354,  354,  354,  166,  167,  175,  205,  214,  215,  216,
      218,  354,  221,  226,  227,  228,  229,  230,  354,  239,
      240,  241,  354,  354,  246,  247,  249,  250,  252,  255,
      256,  261,  262,  265,  266,  283,  284,  285,  354,  288,
      290,  294,  296,  297,  299,  301,  302,  303,  305,  307,
      308,  309,  310,  313,  314,  328,  329,  330,  334,  354,
      341,  344,  354,   20,  354,   62,   73,  354,   80,   85,
       87,  354,   96,  100,  101,  102,  103,  104,  109,  110,
      112,  114,  115,  354,  117,  118,  119,  121,  354,  124,
      126,  127,  354,  133,  139,  142,  354,  354,  149,  354,

      164,  219,  220,  354,  354,  243,  253,  254,  257,  258,
      354,  298,  300,  304,  306,  339,  354,   45,   75,   91,
      116,  123,  129,  143,  146,  148,  354,  354,  242,  286,
       16,  158,  235,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    6,    7,    1,    1,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   20,   20,   20,   20,   20,   20,   21,   22,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   51,    1,   52,    1,   53,   54,   55,   56,

       57,   58,   59,   59,   59,   59,   59,   59,   59,   60,
       59,   59,   59,   61,   59,   62,   59,   59,   59,   63,
       59,   59,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[64] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    1,    1,
        1,    1,    1,    2,    1,    2,    2,    2,    2,    2,
        2,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    1,    1,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2
    } ;

static const flex_int16_t yy_base[741] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   61,   63,
       65,   70,   98,   91,   83,   73,   75, 4563, 4563, 4563,
     4563, 4563,   64, 4563, 4563, 4563, 4563, 4563, 4563, 4563,
     4563,   71,   63, 4563, 4563,  129,  130,   69,  160,  174,
      209,  164,  187,  122,  234,  260,  271,  201,  284,  297,
      325,  355,  311,  307,  347,  370,  377, 4563, 4563, 4563,
     4563, 4563, 4563, 4563, 4563, 4563, 4563, 4563, 4563, 4563,
     4563, 4563, 4563, 4563,  154,  323, 4563,   80,  402,  410,
      426,  428,  455,  458,  460,  469,  471,  485,  494,  503,
      522,  481,  526,  538,  547,  536,  556,  552,  570,  575,

      580,  581,  586,  592,  597,  603,  609,  614,  625,  636,
      653,  659,  664,  662,  678,  697,  676,  658,  733,  694,
      703,  721,  763,  730,  747,  770,  735,  795,  698,  797,
      809,  813,  815,  819,  829,  839,  845,  862,  863,  858,
      893,  874,  886,  880,  915,  919,  929,  931,  941,  947,
      963,  980,  981,  982,  984,  990, 1006, 1010, 1020, 1031,
     1032, 1034, 1033, 1045, 1073, 1074, 1084, 1075, 1093, 1098,
     1087, 1123, 1127, 1141, 1140, 1146, 1160, 1162, 1163, 1164,
     1170, 1185, 1207, 1211, 1212, 1213, 1229, 1230, 1217, 1233,
     1252, 1256, 1266, 1269,   71, 1270, 1282, 1286, 1291, 1292,

     1296, 1305, 1310, 1309, 1319, 1314, 1331, 1335, 1344, 1354,
     1358, 1364, 1367, 1368, 1370, 1380, 1384, 1386, 1397, 1403,
     1407, 1409, 1419, 1420, 1423, 1421, 1425, 1448, 1460, 1462,
     1464, 1474, 1473, 1476, 1478, 1490, 1501, 1503, 1526, 1529,
     1527, 1530, 1531, 1543, 1555, 1553, 1571, 1552, 1582, 1585,
     1587, 1596, 1608, 1655, 1610, 1612, 1614, 1635, 1649, 1653,
     1667, 1678, 1626, 1690, 1700, 1694, 1712, 1718, 1722, 1723,
     1735, 1745, 1752, 1767, 1747, 1788, 1789, 1790, 1792, 1808,
     1809, 1822, 1825, 1831, 1841, 1842, 1861, 1865, 1843, 1867,
     1883, 1886, 1895, 1897, 1900, 1906, 1909, 1918, 1919, 1923,

     1936, 1945, 1948, 1959, 1962, 1968, 1971, 1972, 1973, 1984,
     1985, 1989, 1998, 2001, 2007, 2021, 2024, 2025, 2026, 2037,
     2042, 2048, 2051, 2054, 2074, 2076, 2078, 2087, 2090, 2099,
     2101, 2104, 2113, 2117, 2127, 2115, 2138, 2143, 2156, 2154,
     2157, 2176, 2160, 2177, 2180, 2205, 2210, 2214, 2216, 2219,
     2228, 2230, 2260, 2239, 2253, 2286, 2272, 2289, 2305, 2307,
     2309, 2311, 2321, 2323, 2333, 2334, 2337, 2339, 2360, 2366,
     2363, 2376, 2382, 2395, 2408, 2411, 2392, 4563,   66, 2405,
     2429, 2424, 2427, 2440, 2450, 2453, 2456, 2466, 2469, 2485,
     2483, 2480, 2501, 2505, 2510, 2519, 2528, 2537, 2533, 2538,

     2542, 2558, 2560, 2563, 2572, 2585, 2581, 2582, 2608, 2617,
     2611, 2630, 2633, 2634, 2636, 2635, 2647, 2652, 2677, 2658,
     2686, 2688, 2697, 2691, 2700, 2713, 2714, 2733, 2711, 2739,
     2750, 2755, 2752, 2761, 2767, 2766, 2789, 2790, 2791, 2802,
     2803, 2824, 2825, 2826, 2830, 2843, 2842, 2846, 2852, 2866,
     2875, 2879, 2891, 2893, 2903, 2905, 2909, 2915, 2919, 2932,
     2933, 2938, 2942, 2944, 2954, 2956, 2960, 2966, 2983, 2989,
     2993, 2995, 2999, 3009, 3011, 3013, 3015, 3025, 3036, 3038,
     3048, 3050, 3072, 3077, 3066, 3054, 3090, 3107, 3113, 3111,
     3125, 3127, 3143, 3146, 3148, 3160, 3170, 3172, 3176, 3182,

     3188, 3193, 3199, 3204, 3205, 3209, 3215, 3238, 3241, 3252,
     3257, 3258, 3268, 3298, 3263, 3291, 3277, 3282, 3286, 3305,
     3310, 3327, 3331, 3344, 3345, 3347, 3361, 3349, 3366, 3367,
     3370, 3371, 3372, 3389, 3394, 3411, 3415, 3424, 3428, 3433,
     3438, 3447, 3450, 3451, 3456, 3468, 3472, 3473, 3477, 3486,
     3490, 3491, 3507, 3509, 3512, 3513, 3525, 3526, 3535, 3546,
     3548, 3552, 3565, 3562, 3568, 3585, 3587, 3588, 3589, 3605,
     3615, 3591, 3621, 3624, 3638, 3640, 3641, 3644, 3642, 3668,
     3654, 3658, 3691, 3674, 3695, 3697, 3701, 3707, 3711, 3723,
     3725, 3734, 3736, 3746, 3750, 3755, 3759, 3768, 3778, 3779,

     3795, 3773, 3798, 3807, 3812, 3818, 3828, 3830, 3831, 3832,
     3834, 3848, 3851, 3852, 3857, 3871, 3873, 3884, 3885, 3887,
     3896, 3901, 3905, 3907, 3906, 3924, 3926, 3929, 3940, 3946,
     3949, 3950, 3959, 3963, 3968, 3982, 3985, 3991, 4002, 4003,
     4004, 4007, 4008, 4021, 4024, 4026, 4043, 4044, 4047, 4056,
     4061, 4066, 4077, 4079, 4080, 4083, 4096, 4100, 4101, 4113,
     4119, 4122, 4124, 4135, 4140, 4136, 4141, 4158, 4154, 4164,
     4176, 4177, 4180, 4193, 4197, 4198, 4199, 4203, 4216, 4217,
     4219, 4220, 4221, 4233, 4238, 4242, 4260, 4261, 4272, 4270,
     4274, 4283, 4286, 4295, 4296, 4315, 4297, 4337, 4309, 4319,

     4331, 4336, 4349, 4354, 4358, 4359, 4360, 4363, 4372, 4376,
     4386, 4399, 4402, 4411, 4412, 4413, 4415, 4425, 4429, 4431,
     4434, 4435, 4447, 4452, 4464, 4468, 4470, 4474, 4484, 4486,
     4488, 4497, 4500, 4563, 4552, 4554, 4556, 4558, 4560,   69
    } ;

static const flex_int16_t yy_def[741] =
    {   0,
      734,    1,  735,  735,  735,  735,  735,  735,  736,  736,
      737,  737,  738,  738,  739,  739,  734,  734,  734,  734,
      734,  734,  740,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  740,  740,   36,   36,  740,
       36,  740,  740,   36,   36,   36,  740,  740,  740,  740,
      740,   36,  740,  740,  740,   36,   36,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  740,  740,  734,  734,  734,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,   36,  740,  740,  740,  740,
      740,  740,  119,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      119,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  119,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      119,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,   79,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  254,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,   39,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  141,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  734,  734,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  119,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  141,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,    0,  734,  734,  734,  734,  734,  734
    } ;

static const flex_int16_t yy_nxt[4627] =
    {   0,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   23,   31,   32,   33,   33,   33,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   23,   46,   47,   48,   49,   50,   23,   51,
       52,   53,   54,   55,   56,   57,   23,   23,   58,   18,
       59,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   60,   62,   60,   62,   60,   65,   75,
       76,  378,   60,   65,  734,   74,  378,   75,   78,   78,
       78,   78,   78,  379,   77,   74,   78,   78,   78,   78,
       78,   91,   92,   72,   93,   78,   78,   78,   78,   78,

       72,  734,   94,   95,   76,  734,   96,  734,   76,  734,
       63,  734,   63,   97,   66,   75,   79,  734,  734,   66,
      734,  734,   67,  734,   68,   69,   70,   67,  734,   68,
       69,   70,  734,   79,   75,   75,  734,  734,  734,  734,
      734,  734,   75,   75,   76,   76,  734,  130,  734,   77,
       77,   80,   81,  734,   82,   76,  131,  132,  734,   75,
       86,  133,   83,  734,   84,  734,   87,   75,   85,   75,
       88,   89,  734,  734,   77,  734,   90,   75,  734,   75,
       75,   75,   98,   99,   77,  100,  101,   75,  734,  734,
      102,  734,   75,   76,   77,   76,  734,  128,  103,   76,

       75,  104,  734,  734,  105,   75,   75,   77,  734,  106,
      734,  734,  107,  734,   75,   75,  734,  734,  734,  108,
      129,   77,  734,  734,  734,   75,  109,  159,  734,  734,
      734,  110,  111,  112,  113,  114,  115,  160,   75,  116,
      734,  734,  117,  118,  119,  120,  121,  734,  122,  123,
      124,  125,   75,  734,  126,  127,  134,  135,  136,   76,
      137,  734,  138,  734,  734,  734,  734,  139,  140,  141,
      142,  143,  734,   76,  144,  734,   75,  734,  734,  734,
      734,  145,  146,   76,   75,  147,  148,  149,  150,   75,
      151,   77,  734,  152,  153,   76,  154,   75,  734,   76,

      155,  156,   75,  734,   77,  734,  734,  157,  734,  734,
       75,  734,   75,  158,  734,  734,   75,   77,  734,  164,
       75,  161,   75,  162,   75,  734,  163,   77,   75,  734,
       75,   77,  185,  165,  734,   75,   75,  183,   75,  166,
      734,  184,  734,   77,  734,   77,  734,  734,   75,  167,
      168,  169,   75,  734,  734,  734,  734,  734,   75,  734,
       75,  170,   75,  734,  734,  171,  734,   77,  734,  734,
      734,  734,  734,  186,   75,  734,   75,  172,  173,  174,
       76,  175,  734,  176,  177,  178,  734,  734,  179,  180,
       76,  734,  187,  188,   76,   76,  181,  182,   75,  191,

       76,  192,   76,   76,  734,   76,  189,  734,  734,  190,
      193,  734,   76,  194,  734,   75,   76,  195,  195,  195,
      195,  195,  734,   75,  195,  195,  195,  195,  195,  195,
       77,   75,  196,   75,  734,  197,  734,  734,  734,   75,
      734,   75,  734,  734,  198,  734,   77,  734,   77,  734,
      199,  734,  201,  202,  195,  195,  195,  195,  195,  195,
       75,   75,  734,   75,  734,   75,  200,  734,   75,  734,
      734,   75,  734,   75,   75,   77,   75,   75,   77,   75,
       77,  734,   75,  204,   75,  203,   75,  734,  734,   77,
       75,   77,  734,  734,   75,  734,  734,  205,   75,   75,

      734,   77,  734,  734,  734,   77,   75,   75,   75,   75,
      206,   75,  208,  207,   77,  734,   75,  734,  211,  734,
       75,  734,   75,   77,  209,  216,  734,   75,  734,  210,
      734,   75,   75,  212,  213,   75,   75,  734,  734,   75,
      734,   75,   77,   75,  214,   75,   77,  734,  734,   75,
      734,   75,   75,  734,   75,  215,   77,   75,   77,  734,
       75,   75,  218,  219,  217,   75,  734,   77,  220,   75,
      734,  222,   77,   75,  226,   75,   77,   75,  224,  221,
       75,  225,  734,   75,  223,   75,   75,   75,   75,   75,
       77,   75,  227,   75,   75,   77,  734,   75,   75,   75,

       77,   77,   75,   75,  228,   75,   77,   75,   75,  734,
       75,  734,   77,  734,   75,  734,   75,   77,  734,   75,
      734,   75,   75,   77,  229,  734,   75,   75,  231,   77,
       75,   75,   75,  230,   77,  734,  734,   75,   75,  734,
      734,   75,  734,   75,  232,   77,  734,  734,   75,   75,
      734,  233,  734,  734,   75,  234,   77,  734,   75,  236,
       75,  237,  734,   75,   75,   75,   75,   75,  734,   75,
      235,   75,   75,   77,  734,   75,   75,   75,   77,   77,
      734,   75,   77,   75,   77,  734,  238,   75,  240,   75,
      243,   75,  241,  239,  244,  242,   77,  245,   77,   75,

      255,  254,  734,   75,   75,  734,  734,   75,   75,   75,
       75,   75,  734,   75,   77,   75,   75,  246,   77,  247,
       76,  248,  249,   77,  734,  263,   75,   75,  734,   75,
      250,  251,  252,  262,   75,   75,   76,  253,   75,  282,
       75,   77,  264,   75,  265,   75,   75,  734,   75,   75,
       77,  734,   75,   77,   75,   77,  266,  256,  257,  258,
       75,  267,  734,  259,  734,  734,  734,   77,  280,  260,
      275,  276,   75,  261,  734,   75,  734,  734,  734,  734,
      734,   75,  734,   75,   75,  268,   75,  269,   76,  270,
       77,  734,  277,  271,  278,  734,  734,  734,   75,   76,

       75,  272,   75,   76,  273,  274,  734,  734,   75,  734,
       75,  279,  734,  734,   75,   77,  734,   77,   75,  734,
       75,   75,   75,  734,   75,  734,   75,  283,   75,   77,
      734,  281,   75,   77,   75,   77,  734,  285,  734,   77,
      734,  289,   75,  734,   75,  290,   75,  734,   75,   77,
       75,  284,   75,  286,  287,  291,  288,  734,   75,   77,
       75,  734,  734,   75,   75,   77,   75,   75,   75,  293,
       75,   75,  734,  734,  734,   75,   75,  734,   77,   75,
       75,  734,   77,   77,  292,   75,  734,   75,  294,  295,
       75,   75,  734,   75,   77,  296,   75,  734,  734,   75,

       77,  734,  734,  734,  734,  734,   77,  734,  734,   75,
      734,  734,  307,   75,   75,  297,  298,  299,   76,  300,
       75,  301,  308,   76,   75,   75,  302,  734,   75,  303,
      304,   75,   75,  305,   75,   77,   75,   75,  734,   77,
      306,  734,   75,  734,   75,  734,   75,  734,  309,   77,
      734,   77,   75,  312,   75,  734,  734,  734,  310,  734,
       75,   77,  734,  734,  734,  734,   75,   77,   75,  311,
       75,  313,  315,  734,  734,  734,   75,  734,  734,  734,
       75,  314,   75,   77,  734,   75,   75,  316,  317,   75,
      734,  734,   75,   75,   75,   75,  734,   75,   75,  734,

       77,   77,  734,   75,   77,  318,  320,  321,   76,  734,
       77,   75,   76,  734,   75,   75,  734,  323,  322,   75,
      734,  319,   76,   75,  324,   75,   77,  734,  734,  325,
       77,   75,   75,   75,  734,   75,   75,   75,   75,   75,
       77,   75,  734,  327,   75,   75,   75,   75,  328,  326,
       75,   77,   77,   77,   77,  734,  734,   75,   75,  734,
      734,   75,  332,  734,  734,   77,  734,  734,  329,  734,
      334,   75,  330,  331,  333,  734,  734,  734,   75,   75,
       75,  734,   75,   75,   75,   75,   75,   75,   75,   75,
      734,  734,   75,   77,   77,   77,   75,   75,   75,  734,

       75,  734,  734,   75,   77,  734,   75,   77,  734,  339,
      335,   75,  340,   77,  336,  734,  734,  337,   77,  734,
      734,  346,  734,  338,   75,   75,   75,  734,   75,  734,
      341,  344,   75,  342,  343,   75,   75,  345,   75,  734,
       75,  734,  734,   77,   75,   75,   75,   77,  734,   75,
      350,   75,  347,   75,   75,  734,  348,  734,  734,   75,
       77,   77,  349,  351,  352,   75,   77,   75,   75,   75,
      734,  354,  734,   75,   75,   75,   75,   75,   75,  734,
       77,  353,   77,   77,   77,  734,  734,  357,  358,  734,
       75,   75,   75,  355,  360,  361,   76,   75,   75,  356,

      362,  734,  734,  734,  359,   77,  363,  734,  365,  364,
       76,   75,   75,   75,   75,   75,   75,   75,   75,  734,
       75,  734,   75,  734,   75,   75,   75,   77,  734,  368,
       75,   77,   77,   77,   75,   75,   75,   77,   75,  734,
      734,  734,   75,   75,  734,  367,   75,  366,  734,   77,
       77,  734,  369,   77,  734,  734,  372,   75,   75,  370,
      371,   75,   75,   75,   75,   75,  734,  373,   75,   75,
      734,   75,   77,  734,   75,   75,   77,  374,  734,   75,
       75,   75,   75,   75,   75,  375,   77,   75,  376,   77,
       77,   75,  734,  734,  734,   75,   75,   75,  734,   75,

      734,   75,   77,   75,   75,   75,   77,   75,  377,   75,
       75,   77,   77,  734,   75,   75,   77,   75,   75,   75,
       75,   75,   75,   75,   75,   77,  734,   75,  380,   77,
       77,  734,   75,   75,   77,  734,   75,   75,  381,   77,
       75,  734,   75,   75,   75,  734,  734,   75,   75,   75,
      734,   77,  382,  734,  383,   77,   75,   75,  734,   75,
       75,   75,  734,   75,   77,   75,  384,   75,  734,   75,
       75,   75,   75,   75,   77,   75,  385,   75,   77,  734,
       75,   75,   75,   75,   77,   75,   75,   77,   77,   75,
       77,   75,  734,   75,  386,   75,  734,   75,  734,   75,

       77,  734,   75,  387,   77,   75,   77,  734,   75,   75,
       75,  734,   75,  734,   75,   75,   75,   77,   75,   75,
       75,   75,   75,   77,   75,   75,   75,   77,   75,   77,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   77,
       77,   77,  734,   77,  734,   77,  734,  388,   75,  392,
      391,  734,  734,   75,   75,  734,  734,  734,   75,  389,
       75,   75,  734,  734,  390,   75,  734,   75,   77,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       77,   75,   77,   75,   77,  734,   75,   75,  734,   75,
      734,   75,  734,   77,   77,   75,   77,  734,   77,   75,

      394,  393,  395,   75,  734,  734,   75,  734,   75,  734,
       77,   75,  396,   75,   75,   75,   75,  734,  734,  734,
      734,   77,  734,   77,   75,   75,  398,   75,  399,   75,
      397,   75,   75,  734,   75,   75,   75,  734,  734,   75,
       75,   75,   75,   75,   75,  734,   77,   77,   75,   77,
       77,   77,   75,  402,   75,  405,   75,   75,   75,  734,
       75,  734,  734,   77,  403,   75,   75,  400,   75,  401,
      404,  734,   77,   77,  734,   77,   75,   75,   75,  409,
       75,   75,   75,  406,   75,  408,  407,   75,  411,  734,
       75,   77,   75,  734,   75,   75,  410,  734,   75,  734,

       75,   75,   77,   75,   75,   77,   75,   77,  734,   75,
      413,  414,  412,   75,  734,   75,   77,   75,  734,   75,
      416,   75,   75,   75,  734,   75,  417,   75,   77,  415,
       77,   75,   77,   75,   77,  734,   75,  734,   75,   75,
       75,  734,  734,  426,  428,  427,   77,   75,   75,  418,
      419,  734,  734,  734,   75,   77,  734,  734,   75,   75,
       75,   75,   75,   75,  734,   75,   75,  435,   75,   77,
      429,  420,   75,   77,  734,   77,  734,   75,  734,  421,
       75,  422,  734,   75,  430,  734,   75,   77,  423,  432,
      431,   75,  424,  734,  734,   75,  734,  734,   77,   75,

       75,  734,  425,   75,   75,   75,   75,   75,  433,  734,
       77,  734,  434,   75,   77,  734,  436,   75,   75,  438,
       77,  734,  437,   75,  734,   75,  734,   75,   75,   75,
      734,   75,   77,  734,  734,   75,   75,  734,   77,  734,
       75,   75,   77,   77,  441,   75,  734,  734,   75,  734,
       75,   75,   75,  439,  734,   77,  734,  734,   75,  734,
       75,  440,  734,   75,  442,   77,  734,   77,   76,   75,
      443,  734,   75,   75,   75,  734,  445,  734,  446,  734,
       75,  734,  734,  734,  444,   76,   75,   77,  450,  447,
      449,  734,  448,   75,   75,   75,   75,   75,   75,   76,

      734,   75,   75,   75,  734,   75,  734,  734,   77,   77,
       77,  734,   77,   75,   75,  734,  734,  734,   75,  453,
      734,   75,   75,  452,  451,  455,  734,   75,   77,   77,
       75,  454,  456,  734,  734,   75,   75,  734,   75,   75,
       75,   75,   77,   75,   75,   77,   75,   75,   75,  734,
      734,   77,  734,  734,   75,   75,   75,  734,  734,   75,
       75,   77,   77,   77,  458,  460,   75,  461,  457,  734,
       75,  734,   75,   75,   75,  734,   75,  459,   75,  464,
       75,   77,   75,  462,  468,   77,  463,   77,   75,  734,
      466,   75,   75,   75,   75,  734,   75,  465,  467,   75,

       75,  734,   75,   77,  734,   75,   77,  734,   75,  734,
       75,   75,   75,   75,   75,   77,   75,   77,   75,   75,
       77,  734,   75,   75,   75,  734,   77,  734,   75,   77,
      734,   75,   75,  469,   75,  471,   75,   75,   77,   77,
      470,   75,  734,   77,  472,  734,   75,  734,   75,   75,
       75,   75,  734,   75,  734,  734,   77,   75,   75,  734,
       75,   75,  473,  734,   75,   77,  734,   75,   77,   75,
       75,  474,   75,   75,   75,   75,   75,   75,   75,   77,
      734,   75,   77,  734,   75,   75,   75,   75,   77,   75,
       75,   77,   77,   77,   75,  734,   75,   75,   75,   75,

      475,  734,   75,   75,   77,   77,   75,  734,  734,   77,
       75,   75,   75,   75,   75,  734,  734,  734,   77,   75,
       75,   77,   75,   75,   75,  734,   75,   77,  734,   75,
       75,   75,  476,  734,   75,   75,   75,   75,   75,   75,
       75,   77,   75,  734,   77,   77,   77,   75,  477,   75,
       75,  734,   75,   75,  734,   75,   75,   77,   75,   75,
      734,   75,   77,  734,   75,  478,  479,   75,   77,  481,
      480,   77,   75,  734,   77,   75,   75,   75,  734,   75,
      734,   75,  482,   75,  734,  483,  734,   75,   75,   75,
      734,   75,   75,   75,   77,   75,   77,  734,   77,   75,

       75,  734,   75,   75,   75,   75,   75,   77,  734,   75,
       77,  734,   75,  734,   75,  734,  484,   75,   75,   77,
       75,   77,   75,  485,   77,   75,   75,   75,   75,   75,
       75,  486,   75,   77,  734,   77,  734,   77,   75,  734,
       75,   75,  488,   75,  492,  734,  734,   77,   75,  490,
       75,   75,   75,  487,  491,   75,   75,  489,   77,   75,
      734,   75,   75,   77,   75,   75,   75,   75,   75,   75,
       75,  734,  734,   75,   77,  734,   77,   77,   75,  734,
       77,  734,   75,  495,  734,   75,  734,  503,  494,   75,
       75,  734,  496,   75,   75,  504,  493,   77,   76,  498,

       77,  499,   76,  734,  497,   75,   76,   75,   75,  734,
       75,   75,  734,  734,  500,   75,  734,  501,   75,   75,
      502,   75,  734,   75,   75,   77,  734,   75,   75,   75,
       77,   75,   75,   75,   77,   75,   77,  505,  734,   77,
      734,   75,  734,   75,   75,  734,  734,  734,   77,  734,
       77,  734,   75,  734,  734,  734,   75,  734,   75,   77,
      734,   75,  734,  734,  734,   75,   75,   75,  506,  734,
       75,  507,  734,   77,  734,  734,  734,   75,  520,   75,
      519,   75,  508,  509,  510,   75,  511,  734,  512,  734,
       75,   75,   77,  513,   75,  514,  515,  516,  734,   75,

      517,  734,   75,  734,   75,  734,   77,  518,  734,   77,
       75,  521,   75,  522,   75,  734,   75,  734,   75,  734,
       75,  734,   75,   75,   75,   77,   75,   77,   75,   77,
      523,   77,  734,  734,   75,  734,   75,   75,   75,   75,
       75,   77,   75,   77,   75,  734,   75,   75,  734,  524,
       75,  734,   75,   77,   77,  734,   75,   77,   75,   77,
       75,  525,   75,  527,  734,   75,  734,  734,   75,  734,
      734,   75,   75,   75,   75,  526,   75,  734,  734,   75,
       77,   75,  734,   77,   75,   75,   77,   75,   75,   75,
       75,  734,  734,  734,  734,   75,   77,   75,  531,  528,

       75,  532,   77,  734,  529,   75,  734,  530,   75,  734,
       75,   75,   77,   75,   75,   77,   75,   75,   75,  734,
      534,   75,  533,  734,   75,   77,  734,   75,   77,   75,
      734,   77,   75,   75,   75,  734,  535,   75,  537,  734,
       75,  734,   75,   75,   77,   75,   75,   77,  734,   77,
      734,  734,  536,   75,  734,   75,   75,  734,   75,   75,
       77,   75,   75,   75,  538,  539,   75,  734,  734,   75,
       77,   75,  734,   77,   75,   75,   77,  734,   75,   75,
       75,  734,   75,  734,  734,   75,   77,  540,   75,   77,
       75,   75,  541,   75,  542,  734,   75,  734,   75,  734,

       77,   75,  734,   77,   75,   77,   75,   75,  545,  544,
       75,  734,  734,  543,   75,   75,  734,   75,   75,  734,
       75,   77,  734,   75,   75,   77,  546,  734,  734,  734,
       77,   75,   75,   75,   75,  549,   75,  734,   75,   77,
      734,   75,   75,   75,  547,  734,   75,   75,   77,  548,
       75,   75,   75,   77,  734,   75,   75,   77,   77,  734,
      734,   75,   77,   75,  734,   75,  734,  734,   75,  734,
       75,   75,  734,   75,  550,  551,   75,   75,   77,   75,
       77,  734,  734,   77,   75,   75,   75,   75,   75,   75,
       75,  734,   77,   75,   75,   75,  734,  553,   75,  734,

      734,   77,   77,  552,  734,   77,  734,  734,  734,   75,
      734,   75,  554,   75,   75,  555,   75,  734,  556,  734,
      557,   75,   75,   75,   75,  734,  734,  734,   77,  734,
       75,   77,   75,   75,  558,   75,   75,   77,   75,   75,
       75,   75,  559,   75,  734,  560,   75,   75,   75,   75,
       77,  734,   75,   77,   77,   77,   77,   75,  734,   75,
       75,  734,   75,   75,  734,   75,  734,   77,   75,  562,
      734,   75,   77,  561,  734,  563,  734,  734,   77,  734,
      734,   75,   75,  734,   75,   75,   75,   75,  564,  565,
       75,   75,  734,   75,  734,  734,   75,   77,   75,   75,

      566,   75,   75,   75,   75,   75,   77,  734,   77,   75,
       75,   77,  734,   75,  569,  734,   75,   77,   75,   75,
       77,  572,  734,  568,   75,  570,   75,   75,   75,  734,
      567,   77,  571,   77,   77,  734,  734,   75,   75,   75,
      574,  576,   75,  734,   75,  734,   75,  734,   75,  734,
      573,   75,   75,   77,  734,   75,  734,  734,  734,   77,
       75,  734,   75,   75,   75,   75,   75,  734,   75,  577,
       77,   75,   75,  575,   75,   77,  579,   76,  580,   75,
       75,   77,   76,  582,   75,  734,   77,   77,   76,  583,
       75,  734,  581,  734,   75,   75,   75,  734,  578,  734,

      584,   75,   75,   75,   75,  734,   75,   75,   75,   77,
       77,   77,   75,  734,  734,   75,   75,   75,   75,  734,
      586,  734,   77,   77,  585,  734,  734,  587,  588,   75,
       75,   75,  734,  734,  734,   75,  589,   75,   75,   75,
       75,   75,   75,   75,   77,   77,   77,   75,   75,  591,
       77,   75,  734,   75,   75,   75,   75,   75,  734,   75,
      734,  590,   77,   77,  734,   75,   77,  592,  734,  734,
      734,   75,   77,  734,  593,   75,   75,   75,  594,   75,
       75,   75,  734,  734,   75,  734,   77,  734,   75,  596,
      595,  597,   75,   75,   75,   77,   75,   75,   75,   77,

      734,  734,  734,   75,   75,  734,   75,  734,   75,  598,
       75,   77,  734,   77,   75,  599,   75,   75,   75,  734,
       75,  734,   75,   77,   75,   77,   75,  601,   75,   77,
       75,  734,   75,  734,  734,   77,  734,   75,   75,   77,
      734,  734,   75,   75,   75,   75,   75,   75,  600,   75,
      734,   75,   77,   77,   75,   75,   75,   75,   77,   75,
       75,   75,   77,  734,   77,   75,   75,   75,  734,   75,
       75,   75,  734,   75,   77,  734,   77,  602,  734,   75,
       77,  734,  734,   75,   75,  734,   77,  734,   75,   75,
      734,  604,  734,   75,   75,   75,   75,  603,   75,  734,

       75,  734,   75,   77,   75,   75,   75,   75,   75,   77,
      605,   75,   75,   77,   75,   77,   75,   75,   75,   77,
       75,  734,   75,  734,   75,  734,   75,  734,   75,   77,
       75,   77,  734,   77,   75,   77,  606,  734,   75,  607,
       75,   75,  734,   75,   75,   77,   75,  734,  734,   75,
       75,   75,  734,   75,  734,   75,   77,  734,   77,   75,
       75,   75,   75,   75,   75,  734,   75,   75,   77,  734,
       77,   75,  734,  608,   77,  609,   75,   75,  734,   75,
      734,  734,   75,  734,  734,   75,   77,   75,  619,   75,
       75,  734,   77,  734,  610,   75,  734,   77,  611,   75,

      614,   75,  615,   75,  734,   75,  734,  612,  734,  734,
       77,  618,   75,  620,  734,  621,   75,   75,   75,  613,
       75,  616,  617,   75,   75,  734,   75,   77,   75,  734,
       75,   77,   75,   77,  622,  734,  625,  623,   75,  624,
       75,   75,  734,  734,  734,   77,  734,   77,   75,  629,
      627,   75,  630,   75,  631,  626,   75,  734,   75,   75,
      734,   75,   75,   77,   75,   75,   77,  734,   77,  628,
      633,  734,  734,   75,  734,   75,   75,   75,   75,  734,
       77,   75,  632,   75,  734,   75,  634,   75,  734,   75,
       77,  734,   77,   75,   75,   75,   77,   75,   75,   75,

      734,   75,   77,  734,   75,  734,   75,  635,   77,   75,
       75,   75,   75,   77,   75,  734,  734,   75,   75,   77,
       75,   75,   75,   75,   77,   77,  734,   75,   75,   77,
      734,  734,  636,   75,  637,   77,  734,  734,  734,   75,
      734,  734,  734,   75,   75,  639,   75,  734,  734,  734,
       75,   75,  734,  638,   75,   75,   75,   75,   77,  734,
       75,   77,   75,   75,  640,   75,   75,  641,   75,  734,
       75,   75,   77,   75,  734,  734,   75,   77,   77,  734,
      734,   75,   75,   77,  642,  734,  734,   75,   77,   75,
       75,   75,   75,  734,  643,   75,   75,   77,  734,   75,

      734,  734,   77,   75,   75,  734,   77,  734,   75,   75,
       75,   77,  734,  734,   75,   75,  734,  654,   75,   75,
      644,  645,  646,   75,  647,   77,  648,  655,   75,  734,
       77,  649,   75,   75,  650,  651,   75,   75,  652,  734,
       75,  734,   75,  734,   75,  653,  734,   77,  734,   75,
       75,   77,   75,  734,   75,  734,   75,   75,   75,  734,
       75,   75,   75,  734,   77,   77,   75,   77,  656,   77,
      657,   75,   75,  734,   75,   75,   75,   75,   75,   75,
       75,   77,   75,   75,   75,   75,   77,   77,  734,  658,
       77,   77,   77,  734,   75,   75,   75,  734,   75,   75,

       75,  659,   75,  734,  734,  734,  734,   75,  734,   77,
      734,  661,   75,  660,   77,  734,   75,   75,   75,  734,
       75,   75,   75,   75,   75,  734,  734,  734,   75,   75,
      734,   77,  734,   75,  662,   77,  734,   75,   75,  734,
       75,   75,  734,   75,   77,   75,   75,  664,   77,  734,
      734,   75,   75,   77,  734,   75,   75,  663,   77,  734,
       75,   75,   75,   75,   75,  734,   75,   77,  734,   75,
       77,   77,  734,   75,  734,   75,   77,   75,   75,   75,
      665,   75,   75,  734,   75,   75,   75,  734,   77,   75,
       75,   75,   77,   77,  734,   75,   75,   77,   75,   75,

      734,   75,   75,   75,   75,  734,   77,   75,  666,  734,
       77,   77,   75,  734,   75,  734,  734,   75,   75,   75,
       75,  734,   75,   75,   75,   75,   75,   77,   75,   77,
       75,   75,   77,   77,  734,  734,  734,   75,   75,   75,
       75,   75,   75,  734,  667,   77,   77,  734,   75,  734,
      668,   75,  734,   75,  734,   77,  734,   75,   75,   75,
       75,   75,  669,   75,   75,   75,   77,   75,   77,  734,
       75,  734,   77,   75,  734,   75,   75,   75,   75,  734,
      734,   75,   77,  670,  734,   77,   75,  671,   77,  734,
       75,  734,   75,   75,   75,  734,   75,   75,   75,   75,

       75,   75,   75,   75,   75,   77,  672,   77,   77,   77,
       75,   77,  734,   75,  734,  675,   75,  734,   75,   75,
       75,  734,  677,  734,  673,   77,   75,  734,   75,   75,
      676,  674,  678,  734,   75,   77,   75,   75,   75,   75,
       75,   77,   75,   75,   77,   75,   75,   75,  734,   75,
      734,   75,  734,   75,   75,   75,   75,   75,   77,   75,
       77,   77,   77,   75,   77,  734,   75,   75,  680,  679,
      682,   75,   75,   75,   77,   75,  734,  734,   77,   75,
      734,   75,  681,  734,  734,  734,  683,   75,   77,   75,
      688,   75,   75,   75,   77,   75,   75,  734,  685,  686,

       75,  734,   75,  684,   75,   75,   75,  734,   75,   75,
       75,   77,   75,  734,   75,   77,   75,   77,  734,   75,
       75,   77,  734,  734,   75,   75,  687,   77,   75,  734,
       75,   77,  689,  734,  734,  734,   75,  691,   75,   75,
      690,   75,   75,   77,  734,   77,   75,   75,   75,   75,
      734,   75,   75,  734,   77,   75,   77,  692,   75,   75,
       75,  693,   75,   75,   75,  734,   77,  734,   75,  734,
       77,  734,   75,   75,   75,   77,   75,  734,   75,   77,
      734,   75,  734,   75,   75,   75,   75,   75,   77,  694,
      734,   75,   75,   77,  734,  734,  695,   75,   77,   77,

       75,   75,  697,   75,  734,  696,   75,  734,   75,  734,
       75,   75,   75,  700,  734,   77,  698,   75,   77,   75,
       75,  734,  734,   75,   75,   75,  701,   77,  699,   75,
       75,   75,   77,   75,  734,   75,   75,   75,   77,   75,
      734,   75,  734,   75,   75,   75,   75,   75,   77,   75,
       77,   77,   77,   75,   77,  734,   75,   75,   75,  734,
      734,   75,   75,   75,   75,   75,  734,  734,   77,   75,
       75,   77,   77,  734,  702,  734,   75,   77,   75,   75,
      734,   75,   75,   75,   75,   75,   75,  734,  734,   75,
       75,   77,   75,   77,  734,  703,  734,   75,   75,   75,

       75,   75,   75,   75,   77,   77,   75,   77,   75,   75,
       75,   75,   75,  734,   75,  704,   77,  734,   75,   75,
       75,   77,   75,  734,   75,   77,   77,   77,  734,   75,
      734,   75,  734,  734,   75,   75,   75,   75,   75,   75,
      705,  734,   75,  734,   77,   75,   77,   75,  706,   77,
      734,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       77,  734,   75,   75,   75,  707,   77,  734,   75,   77,
       77,  734,   75,   75,  709,   75,   75,   75,  734,   77,
       75,   75,  734,   77,  708,  734,  734,   75,   77,  734,
       75,   75,  734,  710,  734,   75,   75,   75,   75,  734,

       75,   75,   77,  734,   75,   77,  734,   75,   75,   75,
       75,   77,   75,   75,   75,   75,   75,   75,  734,   75,
       75,   75,   77,   77,   77,  734,   75,   77,   77,   75,
      734,   75,  734,   75,   75,  734,   75,   75,  711,   75,
      734,   77,   75,  734,   77,  734,   77,  712,   75,   75,
      713,  734,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,  734,   77,   77,  734,   75,   77,  734,   75,
      714,   75,   75,  715,   75,   75,   77,   75,  734,   75,
      734,   77,   75,  734,   75,   75,   77,  734,   75,  734,
       75,  734,   75,   75,   75,   75,   75,   77,   75,   77,

       77,   75,  734,   77,  734,   75,   75,   75,  734,   75,
      734,  734,   75,   75,   75,  734,   77,   75,   75,  734,
       77,   77,  734,  734,   75,  734,   75,   75,   75,   75,
       75,   75,   75,   77,   75,   75,  734,   75,  716,   77,
       75,   75,   77,  734,   77,   75,   75,   75,   75,   75,
      734,   75,   75,   75,   75,   77,   77,  734,  734,   75,
       77,   77,  734,   75,   75,  717,  734,   75,  718,   75,
       75,   75,  734,   75,   77,   75,  734,   75,   77,  734,
      734,   75,   75,  734,   77,   75,   75,   75,  734,   75,
       75,   75,   75,   75,  734,  719,   77,   77,   75,  734,

       77,  734,   75,   75,   75,   75,   75,  734,   75,   75,
       75,   75,   75,   77,  720,   75,   75,   77,   77,   77,
      734,   75,   75,   77,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,  734,   77,   77,   75,   77,
       77,   77,  734,   75,   75,  734,   75,   75,   75,   75,
       75,   75,  734,   77,   75,   75,  734,  734,   77,  734,
      734,  734,   77,  734,  734,   75,   75,   75,   75,  734,
       75,   75,   75,   75,   75,   75,  721,   75,  734,   75,
       77,   77,  734,   75,   75,   75,  734,   75,   75,   75,
       77,   75,   77,   75,   77,  734,   75,  734,  734,   75,

       75,   75,   75,   77,  734,  734,   77,  734,   75,   75,
       75,   75,   75,  722,   75,   77,   77,   77,  734,  734,
       75,   75,   75,   75,   75,   75,  723,  734,   75,   77,
      734,  734,   75,  734,   75,   77,   75,   75,  725,   77,
      734,   75,   75,  734,   75,  727,   75,   75,   75,   75,
       75,   77,  724,  726,   75,  734,   77,   77,  734,   75,
       75,  734,   75,   75,   75,   75,   75,   75,   75,   77,
       75,   75,   75,   75,   77,  734,   75,   75,   77,   77,
       77,   75,   75,   77,  734,   75,  729,   75,   75,   75,
      734,   75,   77,  734,  734,  734,   77,  734,  734,   75,

       75,  728,  734,  734,   75,   75,   77,   75,  734,   75,
       75,   75,   75,  734,   75,   75,   75,   75,   75,   77,
       75,  730,   77,   75,   75,   75,   75,   75,   75,  734,
       75,   77,   77,   77,   75,   77,   75,   75,   75,   75,
       75,  731,   75,  734,   75,   77,  734,   75,   75,   77,
       75,   77,   75,   75,   77,   77,  734,   75,  734,  734,
       75,  734,   75,   75,   75,   75,   75,   77,  734,   75,
      734,  734,   77,   75,  734,   75,   75,   75,  734,   75,
       75,   75,   75,   75,   77,   75,   75,   75,   77,   75,
       77,   75,  734,   75,   77,  734,  734,   75,   75,   75,

      733,   75,   75,   75,   77,   75,   77,  734,   77,  734,
       75,  732,  734,   75,  734,   75,  734,   77,  734,   75,
       77,   75,  734,  734,  734,   75,  734,  734,  734,  734,
      734,  734,  734,  734,  734,   75,  734,   75,  734,   75,
      734,  734,  734,  734,  734,  734,  734,  734,   75,  734,
      734,   75,   60,   60,   61,   61,   64,   64,   71,   71,
       73,   73,   17,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,

      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734
    } ;

static const flex_int16_t yy_chk[4627] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    9,    9,   10,   10,   11,   11,   23,
      740,  379,   12,   12,   17,   16,  195,   23,   33,   33,
       33,   33,   33,  195,   23,   15,   32,   32,   32,   32,
       32,   38,   38,   14,   38,   78,   78,   78,   78,   78,

       13,    0,   38,   38,   38,    0,   38,    0,   38,    0,
        9,    0,   10,   38,   11,   23,   32,    0,    0,   12,
        0,    0,   11,    0,   11,   11,   11,   12,    0,   12,
       12,   12,    0,   32,   36,   37,    0,    0,    0,    0,
        0,    0,   36,   37,   44,   44,    0,   44,    0,   36,
       37,   36,   36,    0,   36,   44,   44,   44,    0,   75,
       37,   44,   36,    0,   36,    0,   37,   75,   36,   42,
       37,   37,    0,    0,   75,    0,   37,   42,    0,   40,
       36,   37,   39,   39,   42,   39,   39,   40,    0,    0,
       39,    0,   43,   39,   40,   39,    0,   42,   39,   39,

       43,   39,    0,    0,   39,   75,   48,   43,    0,   40,
        0,    0,   40,    0,   48,   42,    0,    0,    0,   40,
       43,   48,    0,    0,    0,   40,   41,   48,    0,    0,
        0,   41,   41,   41,   41,   41,   41,   48,   43,   41,
        0,    0,   41,   41,   41,   41,   41,    0,   41,   41,
       41,   41,   48,    0,   41,   41,   45,   45,   45,   45,
       45,    0,   45,    0,    0,    0,    0,   45,   45,   45,
       45,   45,    0,   45,   45,    0,   47,    0,    0,    0,
        0,   45,   46,   46,   47,   46,   46,   46,   46,   49,
       46,   47,    0,   46,   46,   46,   46,   49,    0,   46,

       46,   46,   50,    0,   49,    0,    0,   47,    0,    0,
       50,    0,   54,   47,    0,    0,   53,   50,    0,   50,
       54,   49,   47,   49,   53,    0,   49,   54,   76,    0,
       51,   53,   54,   50,    0,   49,   76,   53,   51,   50,
        0,   53,    0,   76,    0,   51,    0,    0,   50,   51,
       51,   51,   55,    0,    0,    0,    0,    0,   54,    0,
       55,   51,   53,    0,    0,   51,    0,   55,    0,    0,
        0,    0,    0,   55,   76,    0,   51,   52,   52,   52,
       52,   52,    0,   52,   52,   52,    0,    0,   52,   52,
       52,    0,   56,   56,   52,   56,   52,   52,   55,   57,

       57,   57,   57,   56,    0,   56,   56,    0,    0,   56,
       57,    0,   57,   57,    0,   80,   57,   79,   79,   79,
       79,   79,    0,   80,   79,   79,   79,   79,   79,   79,
       80,   81,   80,   82,    0,   80,    0,    0,    0,   81,
        0,   82,    0,    0,   80,    0,   81,    0,   82,    0,
       80,    0,   82,   82,   79,   79,   79,   79,   79,   79,
       83,   80,    0,   84,    0,   85,   81,    0,   83,    0,
        0,   84,    0,   85,   86,   83,   87,   81,   84,   82,
       85,    0,   86,   84,   87,   83,   92,    0,    0,   86,
       88,   87,    0,    0,   92,    0,    0,   85,   88,   89,

        0,   92,    0,    0,    0,   88,   83,   89,   90,   84,
       86,   85,   88,   87,   89,    0,   90,    0,   89,    0,
       86,    0,   87,   90,   88,   92,    0,   91,    0,   88,
        0,   93,   92,   89,   89,   91,   88,    0,    0,   93,
        0,   96,   91,   94,   90,   89,   93,    0,    0,   96,
        0,   94,   95,    0,   90,   91,   96,   98,   94,    0,
       95,   97,   94,   94,   93,   98,    0,   95,   94,   97,
        0,   95,   98,   91,   98,   99,   97,   93,   96,   94,
      100,   97,    0,   99,   95,  101,  102,   96,  100,   94,
       99,  103,   98,  101,  102,  100,    0,  104,   95,  103,

      101,  102,  105,   98,  101,  104,  103,   97,  106,    0,
      105,    0,  104,    0,  107,    0,  106,  105,    0,  108,
        0,   99,  107,  106,  102,    0,  100,  108,  106,  107,
      109,  101,  102,  105,  108,    0,    0,  103,  109,    0,
        0,  110,    0,  104,  106,  109,    0,    0,  105,  110,
        0,  107,    0,    0,  106,  108,  110,    0,  111,  110,
      107,  110,    0,  118,  112,  108,  111,  114,    0,  113,
      109,  118,  112,  111,    0,  114,  109,  113,  118,  112,
        0,  117,  114,  115,  113,    0,  111,  110,  112,  117,
      113,  115,  112,  111,  113,  112,  117,  114,  115,  120,

      118,  117,    0,  129,  111,    0,    0,  120,  121,  118,
      112,  129,    0,  114,  120,  113,  121,  115,  129,  116,
      116,  116,  116,  121,    0,  121,  122,  117,    0,  115,
      116,  116,  116,  120,  122,  124,  116,  116,  119,  129,
      127,  122,  121,  124,  121,  120,  119,    0,  127,  129,
      124,    0,  125,  119,  121,  127,  122,  119,  119,  119,
      125,  122,    0,  119,    0,    0,    0,  125,  127,  119,
      124,  125,  122,  119,    0,  126,    0,    0,    0,    0,
        0,  124,    0,  126,  119,  123,  127,  123,  123,  123,
      126,    0,  126,  123,  126,    0,    0,    0,  125,  123,

      128,  123,  130,  123,  123,  123,    0,    0,  128,    0,
      130,  126,    0,    0,  131,  128,    0,  130,  132,    0,
      133,  126,  131,    0,  134,    0,  132,  130,  133,  131,
        0,  128,  134,  132,  135,  133,    0,  132,    0,  134,
        0,  133,  135,    0,  136,  134,  128,    0,  130,  135,
      137,  131,  136,  132,  132,  135,  132,    0,  137,  136,
      131,    0,    0,  140,  132,  137,  133,  138,  139,  137,
      134,  140,    0,    0,    0,  138,  139,    0,  140,  142,
      135,    0,  138,  139,  136,  144,    0,  142,  138,  139,
      136,  143,    0,  144,  142,  140,  137,    0,    0,  143,

      144,    0,    0,    0,    0,    0,  143,    0,    0,  140,
        0,    0,  143,  138,  139,  141,  141,  141,  141,  141,
      145,  141,  143,  141,  146,  142,  141,    0,  145,  141,
      141,  144,  146,  141,  147,  145,  148,  143,    0,  146,
      141,    0,  147,    0,  148,    0,  149,    0,  146,  147,
        0,  148,  150,  148,  149,    0,    0,    0,  146,    0,
      150,  149,    0,    0,    0,    0,  145,  150,  151,  147,
      146,  148,  150,    0,    0,    0,  151,    0,    0,    0,
      147,  149,  148,  151,    0,  152,  153,  150,  151,  155,
        0,    0,  149,  152,  153,  156,    0,  155,  150,    0,

      152,  153,    0,  156,  155,  152,  154,  154,  154,    0,
      156,  157,  154,    0,  151,  158,    0,  155,  154,  157,
        0,  153,  154,  158,  155,  159,  157,    0,    0,  156,
      158,  152,  153,  159,    0,  155,  160,  161,  163,  162,
      159,  156,    0,  158,  160,  161,  163,  162,  159,  157,
      164,  160,  161,  163,  162,    0,    0,  157,  164,    0,
        0,  158,  162,    0,    0,  164,    0,    0,  160,    0,
      164,  159,  160,  161,  163,    0,    0,    0,  165,  166,
      168,    0,  160,  161,  163,  162,  165,  166,  168,  167,
        0,    0,  171,  165,  166,  168,  164,  167,  169,    0,

      171,    0,    0,  170,  167,    0,  169,  171,    0,  168,
      165,  170,  168,  169,  166,    0,    0,  167,  170,    0,
        0,  171,    0,  167,  165,  166,  168,    0,  172,    0,
      169,  170,  173,  169,  169,  167,  172,  170,  171,    0,
      173,    0,    0,  172,  169,  175,  174,  173,    0,  170,
      173,  176,  172,  175,  174,    0,  172,    0,    0,  176,
      175,  174,  172,  174,  175,  177,  176,  178,  179,  180,
        0,  176,    0,  177,  172,  178,  179,  180,  173,    0,
      177,  175,  178,  179,  180,    0,    0,  178,  179,    0,
      182,  175,  174,  177,  181,  181,  181,  176,  182,  177,

      181,    0,    0,    0,  180,  182,  181,    0,  182,  181,
      181,  177,  183,  178,  179,  180,  184,  185,  186,    0,
      183,    0,  189,    0,  184,  185,  186,  183,    0,  185,
      189,  184,  185,  186,  187,  188,  182,  189,  190,    0,
        0,    0,  187,  188,    0,  184,  190,  183,    0,  187,
      188,    0,  186,  190,    0,    0,  189,  191,  183,  187,
      188,  192,  184,  185,  186,  191,    0,  190,  189,  192,
        0,  193,  191,    0,  194,  196,  192,  191,    0,  193,
      187,  188,  194,  196,  190,  192,  193,  197,  193,  194,
      196,  198,    0,    0,    0,  197,  199,  200,    0,  198,

        0,  201,  197,  191,  199,  200,  198,  192,  194,  201,
      202,  199,  200,    0,  204,  203,  201,  193,  202,  206,
      194,  196,  204,  203,  205,  202,    0,  206,  200,  204,
      203,    0,  205,  197,  206,    0,  207,  198,  203,  205,
      208,    0,  199,  200,  207,    0,    0,  201,  208,  209,
        0,  207,  205,    0,  206,  208,  202,  209,    0,  210,
      204,  203,    0,  211,  209,  206,  207,  210,    0,  212,
      205,  211,  213,  214,  210,  215,  210,  212,  211,    0,
      213,  214,  207,  215,  212,  216,  208,  213,  214,  217,
      215,  218,    0,  216,  214,  209,    0,  217,    0,  218,

      216,    0,  219,  215,  217,  210,  218,    0,  220,  211,
      219,    0,  221,    0,  222,  212,  220,  219,  213,  214,
      221,  215,  222,  220,  223,  224,  226,  221,  225,  222,
      227,  216,  223,  224,  226,  217,  225,  218,  227,  223,
      224,  226,    0,  225,    0,  227,    0,  221,  219,  225,
      224,    0,    0,  228,  220,    0,    0,    0,  221,  223,
      222,  228,    0,    0,  223,  229,    0,  230,  228,  231,
      223,  224,  226,  229,  225,  230,  227,  231,  233,  232,
      229,  234,  230,  235,  231,    0,  233,  232,    0,  234,
        0,  235,    0,  233,  232,  236,  234,    0,  235,  228,

      232,  230,  234,  236,    0,    0,  237,    0,  238,    0,
      236,  229,  235,  230,  237,  231,  238,    0,    0,    0,
        0,  237,    0,  238,  233,  232,  237,  234,  238,  235,
      236,  239,  241,    0,  240,  242,  243,    0,    0,  239,
      241,  236,  240,  242,  243,    0,  239,  241,  244,  240,
      242,  243,  237,  241,  238,  243,  244,  248,  246,    0,
      245,    0,    0,  244,  242,  248,  246,  239,  245,  240,
      242,    0,  248,  246,    0,  245,  247,  239,  241,  246,
      240,  242,  243,  244,  247,  245,  244,  249,  248,    0,
      250,  247,  251,    0,  244,  249,  247,    0,  250,    0,

      251,  252,  249,  248,  246,  250,  245,  251,    0,  252,
      250,  250,  249,  253,    0,  255,  252,  256,    0,  257,
      252,  253,  247,  255,    0,  256,  252,  257,  253,  251,
      255,  263,  256,  249,  257,    0,  250,    0,  251,  263,
      258,    0,    0,  255,  257,  256,  263,  252,  258,  253,
      253,    0,    0,    0,  259,  258,    0,    0,  260,  253,
      254,  255,  259,  256,    0,  257,  260,  263,  254,  259,
      258,  254,  261,  260,    0,  254,    0,  263,    0,  254,
      261,  254,    0,  262,  259,    0,  258,  261,  254,  261,
      260,  262,  254,    0,    0,  264,    0,    0,  262,  266,

      259,    0,  254,  264,  260,  265,  254,  266,  261,    0,
      264,    0,  262,  265,  266,    0,  264,  267,  261,  266,
      265,    0,  265,  268,    0,  267,    0,  269,  270,  262,
        0,  268,  267,    0,    0,  269,  270,    0,  268,    0,
      271,  264,  269,  270,  269,  266,    0,    0,  271,    0,
      272,  265,  275,  267,    0,  271,    0,    0,  272,    0,
      275,  268,    0,  267,  270,  272,    0,  275,  273,  268,
      271,    0,  274,  269,  270,    0,  273,    0,  273,    0,
      274,    0,    0,    0,  272,  273,  271,  274,  275,  273,
      274,    0,  273,  276,  277,  278,  272,  279,  275,  273,

        0,  276,  277,  278,    0,  279,    0,    0,  276,  277,
      278,    0,  279,  280,  281,    0,    0,    0,  274,  278,
        0,  280,  281,  277,  276,  280,    0,  282,  280,  281,
      283,  279,  281,    0,    0,  282,  284,    0,  283,  276,
      277,  278,  282,  279,  284,  283,  285,  286,  289,    0,
        0,  284,    0,    0,  285,  286,  289,    0,    0,  280,
      281,  285,  286,  289,  284,  286,  287,  286,  283,    0,
      288,    0,  290,  282,  287,    0,  283,  285,  288,  287,
      290,  287,  284,  286,  289,  288,  286,  290,  291,    0,
      288,  292,  285,  286,  289,    0,  291,  287,  288,  292,

      293,    0,  294,  291,    0,  295,  292,    0,  293,    0,
      294,  296,  287,  295,  297,  293,  288,  294,  290,  296,
      295,    0,  297,  298,  299,    0,  296,    0,  300,  297,
        0,  298,  299,  292,  291,  297,  300,  292,  298,  299,
      293,  301,    0,  300,  298,    0,  293,    0,  294,  301,
      302,  295,    0,  303,    0,    0,  301,  296,  302,    0,
      297,  303,  301,    0,  304,  302,    0,  305,  303,  298,
      299,  302,  304,  306,  300,  305,  307,  308,  309,  304,
        0,  306,  305,    0,  307,  308,  309,  301,  306,  310,
      311,  307,  308,  309,  312,    0,  302,  310,  311,  303,

      309,    0,  312,  313,  310,  311,  314,    0,    0,  312,
      304,  313,  315,  305,  314,    0,    0,    0,  313,  306,
      315,  314,  307,  308,  309,    0,  316,  315,    0,  317,
      318,  319,  312,    0,  316,  310,  311,  317,  318,  319,
      312,  316,  320,    0,  317,  318,  319,  321,  315,  313,
      320,    0,  314,  322,    0,  321,  323,  320,  315,  324,
        0,  322,  321,    0,  323,  317,  318,  324,  322,  320,
      319,  323,  316,    0,  324,  317,  318,  319,    0,  325,
        0,  326,  321,  327,    0,  322,    0,  325,  320,  326,
        0,  327,  328,  321,  325,  329,  326,    0,  327,  322,

      328,    0,  323,  329,  330,  324,  331,  328,    0,  332,
      329,    0,  330,    0,  331,    0,  326,  332,  333,  330,
      336,  331,  334,  326,  332,  325,  333,  326,  336,  327,
      334,  331,  335,  333,    0,  336,    0,  334,  328,    0,
      335,  329,  334,  337,  336,    0,    0,  335,  338,  335,
      330,  337,  331,  333,  335,  332,  338,  334,  337,  340,
        0,  339,  341,  338,  333,  343,  336,  340,  334,  339,
      341,    0,    0,  343,  340,    0,  339,  341,  335,    0,
      343,    0,  344,  341,    0,  345,    0,  343,  340,  337,
      344,    0,  341,  345,  338,  343,  339,  344,  342,  342,

      345,  342,  342,    0,  341,  340,  342,  339,  341,    0,
      346,  343,    0,    0,  342,  347,    0,  342,  346,  348,
      342,  349,    0,  347,  350,  346,    0,  348,  344,  349,
      347,  345,  350,  351,  348,  352,  349,  347,    0,  350,
        0,  351,    0,  352,  354,    0,    0,    0,  351,    0,
      352,    0,  354,    0,    0,    0,  346,    0,  355,  354,
        0,  347,    0,    0,    0,  348,  355,  349,  351,    0,
      350,  352,    0,  355,    0,    0,    0,  357,  355,  351,
      354,  352,  353,  353,  353,  357,  353,    0,  353,    0,
      354,  356,  357,  353,  358,  353,  353,  353,    0,  356,

      353,    0,  358,    0,  355,    0,  356,  353,    0,  358,
      359,  356,  360,  357,  361,    0,  362,    0,  359,    0,
      360,    0,  361,  357,  362,  359,  363,  360,  364,  361,
      358,  362,    0,    0,  363,    0,  364,  356,  365,  366,
      358,  363,  367,  364,  368,    0,  365,  366,    0,  359,
      367,    0,  368,  365,  366,    0,  359,  367,  360,  368,
      361,  363,  362,  367,    0,  369,    0,    0,  371,    0,
        0,  370,  363,  369,  364,  366,  371,    0,    0,  370,
      369,  372,    0,  371,  365,  366,  370,  373,  367,  372,
      368,    0,    0,    0,    0,  373,  372,  377,  371,  369,

      374,  372,  373,    0,  369,  377,    0,  370,  374,    0,
      380,  369,  377,  375,  371,  374,  376,  370,  380,    0,
      374,  375,  373,    0,  376,  380,    0,  372,  375,  382,
        0,  376,  383,  373,  381,    0,  375,  382,  380,    0,
      383,    0,  381,  377,  382,  384,  374,  383,    0,  381,
        0,    0,  376,  384,    0,  385,  380,    0,  386,  375,
      384,  387,  376,  385,  381,  384,  386,    0,    0,  387,
      385,  388,    0,  386,  389,  382,  387,    0,  383,  388,
      381,    0,  389,    0,    0,  392,  388,  385,  391,  389,
      390,  384,  389,  392,  389,    0,  391,    0,  390,    0,

      392,  385,    0,  391,  386,  390,  393,  387,  391,  390,
      394,    0,    0,  389,  393,  395,    0,  388,  394,    0,
      389,  393,    0,  395,  396,  394,  393,    0,    0,    0,
      395,  392,  396,  397,  391,  396,  390,    0,  399,  396,
        0,  397,  398,  400,  394,    0,  399,  401,  397,  395,
      398,  400,  393,  399,    0,  401,  394,  398,  400,    0,
        0,  395,  401,  402,    0,  403,    0,    0,  404,    0,
      396,  402,    0,  403,  398,  400,  404,  405,  402,  397,
      403,    0,    0,  404,  399,  405,  407,  408,  398,  400,
      406,    0,  405,  401,  407,  408,    0,  403,  406,    0,

        0,  407,  408,  402,    0,  406,    0,    0,    0,  402,
        0,  403,  405,  409,  404,  406,  411,    0,  407,    0,
      407,  409,  410,  405,  411,    0,    0,    0,  409,    0,
      410,  411,  407,  408,  409,  412,  406,  410,  413,  414,
      416,  415,  410,  412,    0,  411,  413,  414,  416,  415,
      412,    0,  417,  413,  414,  416,  415,  418,    0,  409,
      417,    0,  411,  420,    0,  418,    0,  417,  410,  415,
        0,  420,  418,  412,    0,  416,    0,    0,  420,    0,
        0,  412,  419,    0,  413,  414,  416,  415,  417,  418,
      419,  421,    0,  422,    0,    0,  424,  419,  417,  421,

      419,  422,  423,  418,  424,  425,  421,    0,  422,  420,
      423,  424,    0,  425,  423,    0,  429,  423,  426,  427,
      425,  424,    0,  422,  429,  423,  426,  427,  419,    0,
      421,  429,  423,  426,  427,    0,    0,  421,  428,  422,
      427,  429,  424,    0,  430,    0,  428,    0,  423,    0,
      426,  425,  430,  428,    0,  431,    0,    0,    0,  430,
      432,    0,  429,  431,  426,  427,  434,    0,  432,  430,
      431,  436,  435,  428,  434,  432,  433,  433,  433,  436,
      435,  434,  433,  434,  428,    0,  436,  435,  433,  435,
      430,    0,  433,    0,  437,  438,  439,    0,  432,    0,

      436,  431,  437,  438,  439,    0,  432,  440,  441,  437,
      438,  439,  434,    0,    0,  440,  441,  436,  435,    0,
      438,    0,  440,  441,  437,    0,    0,  439,  440,  442,
      443,  444,    0,    0,    0,  445,  441,  442,  443,  444,
      437,  438,  439,  445,  442,  443,  444,  447,  446,  443,
      445,  448,    0,  440,  441,  447,  446,  449,    0,  448,
        0,  442,  447,  446,    0,  449,  448,  444,    0,    0,
        0,  450,  449,    0,  445,  442,  443,  444,  446,  450,
      451,  445,    0,    0,  452,    0,  450,    0,  451,  449,
      448,  449,  452,  447,  446,  451,  453,  448,  454,  452,

        0,    0,    0,  449,  453,    0,  454,    0,  455,  451,
      456,  453,    0,  454,  457,  454,  455,  450,  456,    0,
      458,    0,  457,  455,  459,  456,  451,  456,  458,  457,
      452,    0,  459,    0,    0,  458,    0,  460,  461,  459,
        0,    0,  453,  462,  454,  460,  461,  463,  455,  464,
        0,  462,  460,  461,  455,  463,  456,  464,  462,  465,
      457,  466,  463,    0,  464,  467,  458,  465,    0,  466,
      459,  468,    0,  467,  465,    0,  466,  462,    0,  468,
      467,    0,    0,  460,  461,    0,  468,    0,  469,  462,
        0,  468,    0,  463,  470,  464,  469,  467,  471,    0,

      472,    0,  470,  469,  473,  465,  471,  466,  472,  470,
      468,  467,  473,  471,  474,  472,  475,  468,  476,  473,
      477,    0,  474,    0,  475,    0,  476,    0,  477,  474,
      478,  475,    0,  476,  469,  477,  470,    0,  478,  476,
      470,  479,    0,  480,  471,  478,  472,    0,    0,  479,
      473,  480,    0,  481,    0,  482,  479,    0,  480,  486,
      474,  481,  475,  482,  476,    0,  477,  486,  481,    0,
      482,  485,    0,  482,  486,  482,  478,  483,    0,  485,
        0,    0,  484,    0,    0,  483,  485,  479,  486,  480,
      484,    0,  483,    0,  482,  487,    0,  484,  483,  481,

      484,  482,  484,  487,    0,  486,    0,  483,    0,    0,
      487,  485,  488,  487,    0,  487,  490,  485,  489,  483,
      488,  484,  484,  483,  490,    0,  489,  488,  484,    0,
      491,  490,  492,  489,  487,    0,  490,  488,  491,  489,
      492,  487,    0,    0,    0,  491,    0,  492,  493,  492,
      491,  494,  492,  495,  492,  490,  493,    0,  488,  494,
        0,  495,  490,  493,  489,  496,  494,    0,  495,  491,
      494,    0,    0,  496,    0,  497,  491,  498,  492,    0,
      496,  499,  493,  497,    0,  498,  496,  500,    0,  499,
      497,    0,  498,  501,  493,  500,  499,  494,  502,  495,

        0,  501,  500,    0,  503,    0,  502,  496,  501,  504,
      505,  496,  503,  502,  506,    0,    0,  504,  505,  503,
      507,  497,  506,  498,  504,  505,    0,  499,  507,  506,
        0,    0,  506,  500,  506,  507,    0,    0,    0,  501,
        0,    0,    0,  508,  502,  507,  509,    0,    0,    0,
      503,  508,    0,  506,  509,  504,  505,  510,  508,    0,
      506,  509,  511,  512,  508,  510,  507,  509,  515,    0,
      511,  512,  510,  513,    0,    0,  515,  511,  512,    0,
        0,  513,  517,  515,  512,    0,    0,  518,  513,  508,
      517,  519,  509,    0,  513,  518,  516,  517,    0,  519,

        0,    0,  518,  510,  516,    0,  519,    0,  511,  512,
      520,  516,    0,    0,  515,  521,    0,  516,  520,  513,
      514,  514,  514,  521,  514,  520,  514,  516,  517,    0,
      521,  514,  522,  518,  514,  514,  523,  519,  514,    0,
      522,    0,  516,    0,  523,  514,    0,  522,    0,  524,
      525,  523,  526,    0,  528,    0,  520,  524,  525,    0,
      526,  521,  528,    0,  524,  525,  527,  526,  525,  528,
      525,  529,  530,    0,  527,  531,  532,  533,  522,  529,
      530,  527,  523,  531,  532,  533,  529,  530,    0,  525,
      531,  532,  533,    0,  534,  524,  525,    0,  526,  535,

      528,  527,  534,    0,    0,    0,    0,  535,    0,  534,
        0,  533,  527,  531,  535,    0,  536,  529,  530,    0,
      537,  531,  532,  533,  536,    0,    0,    0,  537,  538,
        0,  536,    0,  539,  536,  537,    0,  538,  540,    0,
      534,  539,    0,  541,  538,  535,  540,  538,  539,    0,
        0,  541,  542,  540,    0,  543,  544,  537,  541,    0,
      542,  545,  536,  543,  544,    0,  537,  542,    0,  545,
      543,  544,    0,  546,    0,  538,  545,  547,  548,  539,
      544,  546,  549,    0,  540,  547,  548,    0,  546,  541,
      549,  550,  547,  548,    0,  551,  552,  549,  542,  550,

        0,  543,  544,  551,  552,    0,  550,  545,  548,    0,
      551,  552,  553,    0,  554,    0,    0,  555,  556,  546,
      553,    0,  554,  547,  548,  555,  556,  553,  549,  554,
      557,  558,  555,  556,    0,    0,    0,  550,  557,  558,
      559,  551,  552,    0,  553,  557,  558,    0,  559,    0,
      554,  560,    0,  561,    0,  559,    0,  562,  553,  560,
      554,  561,  557,  555,  556,  562,  560,  564,  561,    0,
      563,    0,  562,  565,    0,  564,  557,  558,  563,    0,
        0,  565,  564,  560,    0,  563,  559,  561,  565,    0,
      566,    0,  567,  568,  569,    0,  572,  560,  566,  561,

      567,  568,  569,  562,  572,  566,  563,  567,  568,  569,
      570,  572,    0,  564,    0,  569,  563,    0,  570,  565,
      571,    0,  570,    0,  566,  570,  573,    0,  571,  574,
      569,  568,  571,    0,  573,  571,  566,  574,  567,  568,
      569,  573,  572,  575,  574,  576,  577,  579,    0,  578,
        0,  575,    0,  576,  577,  579,  570,  578,  575,  581,
      576,  577,  579,  582,  578,    0,  571,  581,  575,  574,
      578,  582,  573,  580,  581,  574,    0,    0,  582,  584,
        0,  580,  577,    0,    0,    0,  579,  584,  580,  575,
      584,  576,  577,  579,  584,  578,  583,    0,  581,  582,

      585,    0,  586,  580,  583,  581,  587,    0,  585,  582,
      586,  583,  588,    0,  587,  585,  589,  586,    0,  580,
      588,  587,    0,    0,  589,  584,  583,  588,  590,    0,
      591,  589,  586,    0,    0,    0,  590,  589,  591,  592,
      587,  593,  583,  590,    0,  591,  585,  592,  586,  593,
        0,  594,  587,    0,  592,  595,  593,  590,  588,  594,
      596,  591,  589,  595,  597,    0,  594,    0,  596,    0,
      595,    0,  597,  598,  590,  596,  591,    0,  602,  597,
        0,  598,    0,  599,  600,  592,  602,  593,  598,  594,
        0,  599,  600,  602,    0,    0,  597,  594,  599,  600,

      601,  595,  599,  603,    0,  598,  596,    0,  601,    0,
      597,  603,  604,  602,    0,  601,  600,  605,  603,  598,
      604,    0,    0,  606,  602,  605,  603,  604,  601,  599,
      600,  606,  605,  607,    0,  608,  609,  610,  606,  611,
        0,  607,    0,  608,  609,  610,  601,  611,  607,  603,
      608,  609,  610,  612,  611,    0,  613,  614,  604,    0,
        0,  612,  615,  605,  613,  614,    0,    0,  612,  606,
      615,  613,  614,    0,  612,    0,  616,  615,  617,  607,
        0,  608,  609,  610,  616,  611,  617,    0,    0,  618,
      619,  616,  620,  617,    0,  612,    0,  618,  619,  612,

      620,  621,  613,  614,  618,  619,  622,  620,  615,  621,
      623,  625,  624,    0,  622,  619,  621,    0,  623,  625,
      624,  622,  616,    0,  617,  623,  625,  624,    0,  626,
        0,  627,    0,    0,  628,  618,  619,  626,  620,  627,
      623,    0,  628,    0,  626,  629,  627,  621,  624,  628,
        0,  630,  622,  629,  631,  632,  623,  625,  624,  630,
      629,    0,  631,  632,  633,  629,  630,    0,  634,  631,
      632,    0,  633,  635,  631,  626,  634,  627,    0,  633,
      628,  635,    0,  634,  629,    0,    0,  636,  635,    0,
      637,  629,    0,  631,    0,  636,  638,  630,  637,    0,

      631,  632,  636,    0,  638,  637,    0,  639,  640,  641,
      633,  638,  642,  643,  634,  639,  640,  641,    0,  635,
      642,  643,  639,  640,  641,    0,  644,  642,  643,  645,
        0,  646,    0,  636,  644,    0,  637,  645,  639,  646,
        0,  644,  638,    0,  645,    0,  646,  644,  647,  648,
      645,    0,  649,  639,  640,  641,  647,  648,  642,  643,
      649,  650,    0,  647,  648,    0,  651,  649,    0,  650,
      648,  652,  644,  649,  651,  645,  650,  646,    0,  652,
        0,  651,  653,    0,  654,  655,  652,    0,  656,    0,
      653,    0,  654,  655,  647,  648,  656,  653,  649,  654,

      655,  657,    0,  656,    0,  658,  659,  650,    0,  657,
        0,    0,  651,  658,  659,    0,  657,  652,  660,    0,
      658,  659,    0,    0,  661,    0,  660,  662,  653,  663,
      654,  655,  661,  660,  656,  662,    0,  663,  660,  661,
      664,  666,  662,    0,  663,  665,  667,  657,  664,  666,
        0,  658,  659,  665,  667,  664,  666,    0,    0,  669,
      665,  667,    0,  668,  660,  663,    0,  669,  665,  670,
      661,  668,    0,  662,  669,  663,    0,  670,  668,    0,
        0,  671,  672,    0,  670,  673,  664,  666,    0,  671,
      672,  665,  667,  673,    0,  668,  671,  672,  674,    0,

      673,    0,  675,  676,  677,  669,  674,    0,  678,  668,
      675,  676,  677,  674,  672,  670,  678,  675,  676,  677,
        0,  679,  680,  678,  681,  682,  683,  671,  672,  679,
      680,  673,  681,  682,  683,    0,  679,  680,  684,  681,
      682,  683,    0,  685,  674,    0,  684,  686,  675,  676,
      677,  685,    0,  684,  678,  686,    0,    0,  685,    0,
        0,    0,  686,    0,    0,  687,  688,  679,  680,    0,
      681,  682,  683,  687,  688,  690,  684,  689,    0,  691,
      687,  688,    0,  690,  684,  689,    0,  691,  692,  685,
      690,  693,  689,  686,  691,    0,  692,    0,    0,  693,

      694,  695,  697,  692,    0,    0,  693,    0,  694,  695,
      697,  687,  688,  689,  699,  694,  695,  697,    0,    0,
      696,  690,  699,  689,  700,  691,  693,    0,  696,  699,
        0,    0,  700,    0,  692,  696,  701,  693,  697,  700,
        0,  702,  698,    0,  701,  700,  694,  695,  697,  702,
      698,  701,  696,  698,  703,    0,  702,  698,    0,  704,
      699,    0,  703,  705,  706,  707,  696,  704,  708,  703,
      700,  705,  706,  707,  704,    0,  708,  709,  705,  706,
      707,  710,  701,  708,    0,  709,  705,  702,  698,  710,
        0,  711,  709,    0,    0,    0,  710,    0,    0,  711,

      703,  704,    0,    0,  712,  704,  711,  713,    0,  705,
      706,  707,  712,    0,  708,  713,  714,  715,  716,  712,
      717,  711,  713,  709,  714,  715,  716,  710,  717,    0,
      718,  714,  715,  716,  719,  717,  720,  711,  718,  721,
      722,  717,  719,    0,  720,  718,    0,  721,  722,  719,
      712,  720,  723,  713,  721,  722,    0,  724,    0,    0,
      723,    0,  714,  715,  716,  724,  717,  723,    0,  725,
        0,    0,  724,  726,    0,  727,  718,  725,    0,  728,
      719,  726,  720,  727,  725,  721,  722,  728,  726,  729,
      727,  730,    0,  731,  728,    0,    0,  729,  723,  730,

      728,  731,  732,  724,  729,  733,  730,    0,  731,    0,
      732,  727,    0,  733,    0,  725,    0,  732,    0,  726,
      733,  727,    0,    0,    0,  728,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  729,    0,  730,    0,  731,
        0,    0,    0,    0,    0,    0,    0,    0,  732,    0,
        0,  733,  735,  735,  736,  736,  737,  737,  738,  738,
      739,  739,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,

      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "nask.ll"
/* -*- c++ -*- File generated by the BNF Converter (bnfc 2.9.5). */
/* Lexer definition for use with FLex */
/* Additional data for the lexer: a buffer for lexing string literals. */

#line 14 "nask.ll"
#include "scanner.hh"

/* using "token" to make the returns for the tokens shorter to type */
using token = nask_::NaskParser::token;


#include "absyn.hh"
#include "bison.hh"

#define initialize_lexer nask__initialize_lexer

/* BEGIN extensible string buffer */

#include "buffer.hh"

/* The initial size of the buffer to lex string literals. */
#define LITERAL_BUFFER_INITIAL_SIZE 1024

/* The pointer to the literal buffer. */
Buffer literal_buffer = nullptr;

/* Initialize the literal buffer. */
#define LITERAL_BUFFER_CREATE() literal_buffer = newBuffer(LITERAL_BUFFER_INITIAL_SIZE)

/* Append characters at the end of the buffer. */
#define LITERAL_BUFFER_APPEND(s) bufferAppendString(literal_buffer, s)

/* Append a character at the end of the buffer. */
#define LITERAL_BUFFER_APPEND_CHAR(c) bufferAppendChar(literal_buffer, c)

/* Release the buffer, returning a pointer to its content. */
#define LITERAL_BUFFER_HARVEST() releaseBuffer(literal_buffer)

/* In exceptional cases, e.g. when reaching EOF, we have to free the buffer. */
#define LITERAL_BUFFER_FREE() freeBuffer(literal_buffer)

/* END extensible string buffer */

/* update location on matching */
#define YY_USER_ACTION \
loc->begin.line   = loc->end.line; \
loc->begin.column = loc->end.column; \
for(int i = 0; yytext[i] != '\0'; i++) { \
    if(yytext[i] == '\n') { \
        loc->end.line++; \
        loc->end.column = 0; \
    } \
    else { \
        loc->end.column++; \
    } \
}
#line 1734 "lexer.cc"

#line 1736 "lexer.cc"

#define INITIAL 0
#define CHAR 1
#define CHARESC 2
#define CHAREND 3
#define STRING 4
#define ESCAPED 5
#define COMMENT 6
#define COMMENT1 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE Buffer

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 74 "nask.ll"


#line 1876 "lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 735 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4563 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 76 "nask.ll"
return token::_LBRACK;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 77 "nask.ll"
return token::_RBRACK;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 78 "nask.ll"
return token::_COMMA;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 79 "nask.ll"
return token::_PLUS;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 80 "nask.ll"
return token::_MINUS;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 81 "nask.ll"
return token::_STAR;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 82 "nask.ll"
return token::_SLASH;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 83 "nask.ll"
return token::_PERCENT;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 84 "nask.ll"
return token::_LPAREN;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 85 "nask.ll"
return token::_RPAREN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 86 "nask.ll"
return token::_COLON;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 87 "nask.ll"
return token::_KW_AAA;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 88 "nask.ll"
return token::_KW_AAD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 89 "nask.ll"
return token::_KW_AAM;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 90 "nask.ll"
return token::_KW_AAS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 91 "nask.ll"
return token::_KW_ABSOLUTE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 92 "nask.ll"
return token::_KW_ADC;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 93 "nask.ll"
return token::_KW_ADD;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 94 "nask.ll"
return token::_KW_ALIGN;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 95 "nask.ll"
return token::_KW_ALIGNB;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 96 "nask.ll"
return token::_KW_AND;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 97 "nask.ll"
return token::_KW_ARPL;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 98 "nask.ll"
return token::_KW_BITS;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 99 "nask.ll"
return token::_KW_BOUND;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 100 "nask.ll"
return token::_KW_BSF;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 101 "nask.ll"
return token::_KW_BSR;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 102 "nask.ll"
return token::_KW_BSWAP;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 103 "nask.ll"
return token::_KW_BT;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 104 "nask.ll"
return token::_KW_BTC;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 105 "nask.ll"
return token::_KW_BTR;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 106 "nask.ll"
return token::_KW_BTS;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 107 "nask.ll"
return token::_KW_BYTE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 108 "nask.ll"
return token::_KW_CALL;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 109 "nask.ll"
return token::_KW_CBW;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 110 "nask.ll"
return token::_KW_CDQ;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 111 "nask.ll"
return token::_KW_CLC;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 112 "nask.ll"
return token::_KW_CLD;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 113 "nask.ll"
return token::_KW_CLI;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 114 "nask.ll"
return token::_KW_CLTS;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 115 "nask.ll"
return token::_KW_CMC;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 116 "nask.ll"
return token::_KW_CMP;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 117 "nask.ll"
return token::_KW_CMPSB;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 118 "nask.ll"
return token::_KW_CMPSD;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 119 "nask.ll"
return token::_KW_CMPSW;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "nask.ll"
return token::_KW_CMPXCHG;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "nask.ll"
return token::_KW_CPUID;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "nask.ll"
return token::_KW_CWD;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "nask.ll"
return token::_KW_CWDE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "nask.ll"
return token::_KW_DAA;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "nask.ll"
return token::_KW_DAS;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "nask.ll"
return token::_KW_DB;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "nask.ll"
return token::_KW_DD;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "nask.ll"
return token::_KW_DEC;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "nask.ll"
return token::_KW_DIV;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "nask.ll"
return token::_KW_DQ;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "nask.ll"
return token::_KW_DT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 132 "nask.ll"
return token::_KW_DW;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "nask.ll"
return token::_KW_DWORD;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 134 "nask.ll"
return token::_KW_END;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "nask.ll"
return token::_KW_ENTER;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 136 "nask.ll"
return token::_KW_EQU;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 137 "nask.ll"
return token::_KW_EXTERN;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 138 "nask.ll"
return token::_KW_F2XM1;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 139 "nask.ll"
return token::_KW_FABS;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 140 "nask.ll"
return token::_KW_FADD;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 141 "nask.ll"
return token::_KW_FADDP;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 142 "nask.ll"
return token::_KW_FBLD;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 143 "nask.ll"
return token::_KW_FBSTP;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 144 "nask.ll"
return token::_KW_FCHS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 145 "nask.ll"
return token::_KW_FCLEX;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 146 "nask.ll"
return token::_KW_FCOM;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 147 "nask.ll"
return token::_KW_FCOMP;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 148 "nask.ll"
return token::_KW_FCOMPP;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 149 "nask.ll"
return token::_KW_FCOS;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 150 "nask.ll"
return token::_KW_FDECSTP;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 151 "nask.ll"
return token::_KW_FDISI;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 152 "nask.ll"
return token::_KW_FDIV;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 153 "nask.ll"
return token::_KW_FDIVP;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 154 "nask.ll"
return token::_KW_FDIVR;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 155 "nask.ll"
return token::_KW_FDIVRP;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 156 "nask.ll"
return token::_KW_FENI;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 157 "nask.ll"
return token::_KW_FFREE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 158 "nask.ll"
return token::_KW_FIADD;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 159 "nask.ll"
return token::_KW_FICOM;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 160 "nask.ll"
return token::_KW_FICOMP;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 161 "nask.ll"
return token::_KW_FIDIV;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 162 "nask.ll"
return token::_KW_FIDIVR;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 163 "nask.ll"
return token::_KW_FILD;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 164 "nask.ll"
return token::_KW_FILE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 165 "nask.ll"
return token::_KW_FIMUL;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 166 "nask.ll"
return token::_KW_FINCSTP;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 167 "nask.ll"
return token::_KW_FINIT;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 168 "nask.ll"
return token::_KW_FIST;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 169 "nask.ll"
return token::_KW_FISTP;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 170 "nask.ll"
return token::_KW_FISUB;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 171 "nask.ll"
return token::_KW_FISUBR;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 172 "nask.ll"
return token::_KW_FLD;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 173 "nask.ll"
return token::_KW_FLD1;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 174 "nask.ll"
return token::_KW_FLDCW;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 175 "nask.ll"
return token::_KW_FLDENV;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 176 "nask.ll"
return token::_KW_FLDL2E;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 177 "nask.ll"
return token::_KW_FLDL2T;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 178 "nask.ll"
return token::_KW_FLDLG2;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 179 "nask.ll"
return token::_KW_FLDLN2;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 180 "nask.ll"
return token::_KW_FLDPI;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 181 "nask.ll"
return token::_KW_FLDZ;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 182 "nask.ll"
return token::_KW_FMUL;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 183 "nask.ll"
return token::_KW_FMULP;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 184 "nask.ll"
return token::_KW_FNCLEX;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 185 "nask.ll"
return token::_KW_FNDISI;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 186 "nask.ll"
return token::_KW_FNENI;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 187 "nask.ll"
return token::_KW_FNINIT;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 188 "nask.ll"
return token::_KW_FNOP;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 189 "nask.ll"
return token::_KW_FNSAVE;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 190 "nask.ll"
return token::_KW_FNSTCW;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 191 "nask.ll"
return token::_KW_FNSTENV;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 192 "nask.ll"
return token::_KW_FNSTSW;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 193 "nask.ll"
return token::_KW_FORMAT;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 194 "nask.ll"
return token::_KW_FPATAN;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 195 "nask.ll"
return token::_KW_FPREM;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 196 "nask.ll"
return token::_KW_FPREM1;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 197 "nask.ll"
return token::_KW_FPTAN;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 198 "nask.ll"
return token::_KW_FRNDINT;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 199 "nask.ll"
return token::_KW_FRSTOR;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 200 "nask.ll"
return token::_KW_FSAVE;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 201 "nask.ll"
return token::_KW_FSCALE;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 202 "nask.ll"
return token::_KW_FSETPM;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 203 "nask.ll"
return token::_KW_FSIN;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 204 "nask.ll"
return token::_KW_FSINCOS;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 205 "nask.ll"
return token::_KW_FSQRT;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 206 "nask.ll"
return token::_KW_FST;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 207 "nask.ll"
return token::_KW_FSTCW;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 208 "nask.ll"
return token::_KW_FSTENV;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 209 "nask.ll"
return token::_KW_FSTP;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 210 "nask.ll"
return token::_KW_FSTSW;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 211 "nask.ll"
return token::_KW_FSUB;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 212 "nask.ll"
return token::_KW_FSUBP;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 213 "nask.ll"
return token::_KW_FSUBR;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 214 "nask.ll"
return token::_KW_FSUBRP;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 215 "nask.ll"
return token::_KW_FTST;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 216 "nask.ll"
return token::_KW_FUCOM;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 217 "nask.ll"
return token::_KW_FUCOMP;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 218 "nask.ll"
return token::_KW_FUCOMPP;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 219 "nask.ll"
return token::_KW_FXAM;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 220 "nask.ll"
return token::_KW_FXCH;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 221 "nask.ll"
return token::_KW_FXTRACT;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 222 "nask.ll"
return token::_KW_FYL2X;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 223 "nask.ll"
return token::_KW_FYL2XP1;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 224 "nask.ll"
return token::_KW_GLOBAL;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 225 "nask.ll"
return token::_KW_HLT;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 226 "nask.ll"
return token::_KW_IDIV;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 227 "nask.ll"
return token::_KW_IMUL;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 228 "nask.ll"
return token::_KW_IN;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 229 "nask.ll"
return token::_KW_INC;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 230 "nask.ll"
return token::_KW_INCO;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 231 "nask.ll"
return token::_KW_INSB;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 232 "nask.ll"
return token::_KW_INSD;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 233 "nask.ll"
return token::_KW_INSTRSET;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 234 "nask.ll"
return token::_KW_INSW;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 235 "nask.ll"
return token::_KW_INT;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 236 "nask.ll"
return token::_KW_INT3;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 237 "nask.ll"
return token::_KW_INTO;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 238 "nask.ll"
return token::_KW_INVD;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 239 "nask.ll"
return token::_KW_INVLPG;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 240 "nask.ll"
return token::_KW_IRET;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 241 "nask.ll"
return token::_KW_IRETD;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 242 "nask.ll"
return token::_KW_IRETW;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 243 "nask.ll"
return token::_KW_JA;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 244 "nask.ll"
return token::_KW_JAE;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 245 "nask.ll"
return token::_KW_JB;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 246 "nask.ll"
return token::_KW_JBE;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 247 "nask.ll"
return token::_KW_JC;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 248 "nask.ll"
return token::_KW_JCXZ;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 249 "nask.ll"
return token::_KW_JE;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 250 "nask.ll"
return token::_KW_JECXZ;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 251 "nask.ll"
return token::_KW_JG;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 252 "nask.ll"
return token::_KW_JGE;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 253 "nask.ll"
return token::_KW_JL;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 254 "nask.ll"
return token::_KW_JLE;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 255 "nask.ll"
return token::_KW_JMP;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 256 "nask.ll"
return token::_KW_JNA;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 257 "nask.ll"
return token::_KW_JNAE;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 258 "nask.ll"
return token::_KW_JNB;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 259 "nask.ll"
return token::_KW_JNBE;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 260 "nask.ll"
return token::_KW_JNC;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 261 "nask.ll"
return token::_KW_JNE;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 262 "nask.ll"
return token::_KW_JNG;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 263 "nask.ll"
return token::_KW_JNGE;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 264 "nask.ll"
return token::_KW_JNL;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 265 "nask.ll"
return token::_KW_JNLE;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 266 "nask.ll"
return token::_KW_JNO;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 267 "nask.ll"
return token::_KW_JNP;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 268 "nask.ll"
return token::_KW_JNS;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 269 "nask.ll"
return token::_KW_JNZ;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 270 "nask.ll"
return token::_KW_JO;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 271 "nask.ll"
return token::_KW_JP;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 272 "nask.ll"
return token::_KW_JPE;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 273 "nask.ll"
return token::_KW_JPO;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 274 "nask.ll"
return token::_KW_JS;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 275 "nask.ll"
return token::_KW_JZ;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 276 "nask.ll"
return token::_KW_LAHF;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 277 "nask.ll"
return token::_KW_LAR;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 278 "nask.ll"
return token::_KW_LDS;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 279 "nask.ll"
return token::_KW_LEA;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 280 "nask.ll"
return token::_KW_LEAVE;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 281 "nask.ll"
return token::_KW_LES;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 282 "nask.ll"
return token::_KW_LFS;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 283 "nask.ll"
return token::_KW_LGDT;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 284 "nask.ll"
return token::_KW_LGS;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 285 "nask.ll"
return token::_KW_LIDT;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 286 "nask.ll"
return token::_KW_LLDT;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 287 "nask.ll"
return token::_KW_LMSW;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 288 "nask.ll"
return token::_KW_LOCK;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 289 "nask.ll"
return token::_KW_LODSB;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 290 "nask.ll"
return token::_KW_LODSD;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 291 "nask.ll"
return token::_KW_LODSW;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 292 "nask.ll"
return token::_KW_LOOP;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 293 "nask.ll"
return token::_KW_LOOPE;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 294 "nask.ll"
return token::_KW_LOOPNE;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 295 "nask.ll"
return token::_KW_LOOPNZ;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 296 "nask.ll"
return token::_KW_LOOPZ;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 297 "nask.ll"
return token::_KW_LSL;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 298 "nask.ll"
return token::_KW_LSS;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 299 "nask.ll"
return token::_KW_LTR;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 300 "nask.ll"
return token::_KW_MOV;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 301 "nask.ll"
return token::_KW_MOVSB;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 302 "nask.ll"
return token::_KW_MOVSD;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 303 "nask.ll"
return token::_KW_MOVSW;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 304 "nask.ll"
return token::_KW_MOVSX;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 305 "nask.ll"
return token::_KW_MOVZX;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 306 "nask.ll"
return token::_KW_MUL;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 307 "nask.ll"
return token::_KW_NEG;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 308 "nask.ll"
return token::_KW_NOP;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 309 "nask.ll"
return token::_KW_NOT;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 310 "nask.ll"
return token::_KW_OPTIMIZE;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 311 "nask.ll"
return token::_KW_OR;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 312 "nask.ll"
return token::_KW_ORG;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 313 "nask.ll"
return token::_KW_OUT;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 314 "nask.ll"
return token::_KW_OUTSB;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 315 "nask.ll"
return token::_KW_OUTSD;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 316 "nask.ll"
return token::_KW_OUTSW;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 317 "nask.ll"
return token::_KW_PADDING;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 318 "nask.ll"
return token::_KW_PADSET;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 319 "nask.ll"
return token::_KW_POP;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 320 "nask.ll"
return token::_KW_POPA;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 321 "nask.ll"
return token::_KW_POPAD;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 322 "nask.ll"
return token::_KW_POPAW;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 323 "nask.ll"
return token::_KW_POPF;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 324 "nask.ll"
return token::_KW_POPFD;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 325 "nask.ll"
return token::_KW_POPFW;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 326 "nask.ll"
return token::_KW_PUSH;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 327 "nask.ll"
return token::_KW_PUSHA;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 328 "nask.ll"
return token::_KW_PUSHAD;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 329 "nask.ll"
return token::_KW_PUSHAW;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 330 "nask.ll"
return token::_KW_PUSHD;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 331 "nask.ll"
return token::_KW_PUSHF;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 332 "nask.ll"
return token::_KW_PUSHFD;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 333 "nask.ll"
return token::_KW_PUSHFW;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 334 "nask.ll"
return token::_KW_RCL;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 335 "nask.ll"
return token::_KW_RCR;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 336 "nask.ll"
return token::_KW_RDMSR;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 337 "nask.ll"
return token::_KW_RDPMC;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 338 "nask.ll"
return token::_KW_REP;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 339 "nask.ll"
return token::_KW_REPE;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 340 "nask.ll"
return token::_KW_REPNE;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 341 "nask.ll"
return token::_KW_REPNZ;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 342 "nask.ll"
return token::_KW_REPZ;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 343 "nask.ll"
return token::_KW_RESB;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 344 "nask.ll"
return token::_KW_RESD;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 345 "nask.ll"
return token::_KW_RESQ;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 346 "nask.ll"
return token::_KW_REST;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 347 "nask.ll"
return token::_KW_RESW;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 348 "nask.ll"
return token::_KW_RET;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 349 "nask.ll"
return token::_KW_RETF;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 350 "nask.ll"
return token::_KW_RETN;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 351 "nask.ll"
return token::_KW_ROL;
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 352 "nask.ll"
return token::_KW_ROR;
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 353 "nask.ll"
return token::_KW_RSM;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 354 "nask.ll"
return token::_KW_SAHF;
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 355 "nask.ll"
return token::_KW_SAL;
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 356 "nask.ll"
return token::_KW_SAR;
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 357 "nask.ll"
return token::_KW_SBB;
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 358 "nask.ll"
return token::_KW_SCASB;
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 359 "nask.ll"
return token::_KW_SCASD;
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 360 "nask.ll"
return token::_KW_SCASW;
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 361 "nask.ll"
return token::_KW_SECTION;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 362 "nask.ll"
return token::_KW_SETA;
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 363 "nask.ll"
return token::_KW_SETAE;
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 364 "nask.ll"
return token::_KW_SETB;
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 365 "nask.ll"
return token::_KW_SETBE;
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 366 "nask.ll"
return token::_KW_SETC;
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 367 "nask.ll"
return token::_KW_SETE;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 368 "nask.ll"
return token::_KW_SETG;
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 369 "nask.ll"
return token::_KW_SETGE;
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 370 "nask.ll"
return token::_KW_SETL;
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 371 "nask.ll"
return token::_KW_SETLE;
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 372 "nask.ll"
return token::_KW_SETNA;
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 373 "nask.ll"
return token::_KW_SETNAE;
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 374 "nask.ll"
return token::_KW_SETNB;
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 375 "nask.ll"
return token::_KW_SETNBE;
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 376 "nask.ll"
return token::_KW_SETNC;
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 377 "nask.ll"
return token::_KW_SETNE;
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 378 "nask.ll"
return token::_KW_SETNG;
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 379 "nask.ll"
return token::_KW_SETNGE;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 380 "nask.ll"
return token::_KW_SETNL;
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 381 "nask.ll"
return token::_KW_SETNLE;
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 382 "nask.ll"
return token::_KW_SETNO;
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 383 "nask.ll"
return token::_KW_SETNP;
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 384 "nask.ll"
return token::_KW_SETNS;
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 385 "nask.ll"
return token::_KW_SETNZ;
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 386 "nask.ll"
return token::_KW_SETO;
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 387 "nask.ll"
return token::_KW_SETP;
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 388 "nask.ll"
return token::_KW_SETPE;
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 389 "nask.ll"
return token::_KW_SETPO;
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 390 "nask.ll"
return token::_KW_SETS;
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 391 "nask.ll"
return token::_KW_SETZ;
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 392 "nask.ll"
return token::_KW_SGDT;
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 393 "nask.ll"
return token::_KW_SHL;
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 394 "nask.ll"
return token::_KW_SHLD;
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 395 "nask.ll"
return token::_KW_SHR;
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 396 "nask.ll"
return token::_KW_SHRD;
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 397 "nask.ll"
return token::_KW_SIDT;
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 398 "nask.ll"
return token::_KW_SLDT;
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 399 "nask.ll"
return token::_KW_SMSW;
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 400 "nask.ll"
return token::_KW_STC;
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 401 "nask.ll"
return token::_KW_STD;
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 402 "nask.ll"
return token::_KW_STI;
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 403 "nask.ll"
return token::_KW_STOSB;
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 404 "nask.ll"
return token::_KW_STOSD;
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 405 "nask.ll"
return token::_KW_STOSW;
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 406 "nask.ll"
return token::_KW_STR;
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 407 "nask.ll"
return token::_KW_SUB;
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 408 "nask.ll"
return token::_KW_TEST;
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 409 "nask.ll"
return token::_KW_TIMES;
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 410 "nask.ll"
return token::_KW_UD2;
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 411 "nask.ll"
return token::_KW_VERR;
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 412 "nask.ll"
return token::_KW_VERW;
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 413 "nask.ll"
return token::_KW_WAIT;
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 414 "nask.ll"
return token::_KW_WBINVD;
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 415 "nask.ll"
return token::_KW_WORD;
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 416 "nask.ll"
return token::_KW_WRMSR;
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 417 "nask.ll"
return token::_KW_XADD;
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 418 "nask.ll"
return token::_KW_XCHG;
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 419 "nask.ll"
return token::_KW_XLATB;
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 420 "nask.ll"
return token::_KW_XOR;
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 422 "nask.ll"
BEGIN COMMENT; /* BNFC: block comment "#" "\\n" */
	YY_BREAK
case 347:
/* rule 347 can match eol */
YY_RULE_SETUP
#line 423 "nask.ll"
BEGIN INITIAL;
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 424 "nask.ll"
/* skip */;
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 425 "nask.ll"
BEGIN COMMENT1; /* BNFC: block comment ";" "\\n" */
	YY_BREAK
case 350:
/* rule 350 can match eol */
YY_RULE_SETUP
#line 426 "nask.ll"
BEGIN INITIAL;
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 427 "nask.ll"
/* skip */;
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 429 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_Hex;
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 430 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_Label;
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 431 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_Id;
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 432 "nask.ll"
LITERAL_BUFFER_CREATE(); BEGIN STRING;
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 433 "nask.ll"
BEGIN ESCAPED;
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 434 "nask.ll"
yylval->emplace<std::string>(LITERAL_BUFFER_HARVEST()); BEGIN INITIAL; return token::_STRING_;
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 435 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR(yytext[0]);
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 436 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\f'); BEGIN STRING;
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 437 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\n'); BEGIN STRING;
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 438 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\r'); BEGIN STRING;
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 439 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\t'); BEGIN STRING;
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 440 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('"');  BEGIN STRING;
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 441 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\\'); BEGIN STRING;
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 442 "nask.ll"
LITERAL_BUFFER_APPEND(yytext);    BEGIN STRING;
	YY_BREAK
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(ESCAPED):
#line 443 "nask.ll"
LITERAL_BUFFER_FREE(); return token::_ERROR_;
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 444 "nask.ll"
yylval->emplace<int>(atoi(yytext)); return token::_INTEGER_;
	YY_BREAK
case 367:
/* rule 367 can match eol */
YY_RULE_SETUP
#line 445 "nask.ll"
/* ignore white space. */;
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 446 "nask.ll"
return token::_ERROR_;
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 448 "nask.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3786 "lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CHAR):
case YY_STATE_EOF(CHARESC):
case YY_STATE_EOF(CHAREND):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(COMMENT1):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 735 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 735 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 734);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 448 "nask.ll"



NaskScanner::NaskScanner(std::istream *in)
    : yyFlexLexer(in)
{
    loc = new nask_::NaskParser::location_type();
}

NaskScanner::~NaskScanner()
{
    delete loc;
    delete yylval;
}

/* This implementation of NaskFlexLexer::yylex() is required to fill the
 * vtable of the class NaskFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */



#ifdef yylex
#undef yylex
#endif

int yyFlexLexer::yylex()
{
    std::cerr << "in yyFlexLexer::yylex() !" << std::endl;
    return 0;
}



