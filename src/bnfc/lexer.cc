#line 2 "lexer.cc"
#include <memory>

#line 5 "lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer nask_FlexLexer

#ifdef yyalloc
#define nask_alloc_ALREADY_DEFINED
#else
#define yyalloc nask_alloc
#endif

#ifdef yyrealloc
#define nask_realloc_ALREADY_DEFINED
#else
#define yyrealloc nask_realloc
#endif

#ifdef yyfree
#define nask_free_ALREADY_DEFINED
#else
#define yyfree nask_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 366
#define YY_END_OF_BUFFER 367
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[731] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  367,  365,  364,  364,
      351,  343,    8,    6,    4,    3,    5,    7,  362,  362,
        9,  346,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,    1,    2,  365,  366,  354,  353,
      352,  361,  359,  360,  355,  356,  357,  358,  345,  344,
      348,  347,  362,    0,  363,  363,    0,  363,  363,  363,
      363,  363,  363,  363,  363,  363,   26,  363,  363,  363,
      363,  363,  363,  363,  363,  363,   49,   50,  363,  363,

       53,   54,   55,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  150,  363,
      165,  167,  169,  171,  173,  175,  363,  363,  192,  193,
      196,  197,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  233,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,    0,  349,  350,    0,   10,   11,   12,   13,  363,

       15,   16,  363,   19,  363,  363,  363,   23,   24,  363,
       27,   28,   29,  363,  363,   32,   33,   34,   35,   36,
      363,   38,   39,  363,   45,   47,   48,   51,   52,  363,
       57,  363,   59,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,   95,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  129,  363,  363,  363,  363,  363,  363,  363,
      147,  363,  363,  151,  363,  157,  363,  363,  166,  168,
      363,  363,  174,  176,  177,  178,  180,  182,  183,  184,

      186,  188,  189,  190,  191,  194,  195,  363,  199,  200,
      201,  203,  204,  363,  206,  363,  363,  363,  363,  363,
      363,  219,  220,  221,  222,  228,  229,  230,  231,  363,
      234,  235,  363,  241,  363,  256,  257,  363,  363,  260,
      363,  270,  273,  274,  275,  363,  277,  278,  279,  363,
      363,  363,  363,  315,  317,  363,  363,  363,  322,  323,
      324,  363,  328,  329,  363,  363,  332,  363,  363,  363,
      363,  363,  363,  363,  363,  342,  349,  349,  363,  363,
       20,   21,  363,  363,   30,   31,   37,  363,  363,  363,
       46,  363,  363,  363,  363,   62,   63,   65,  363,   67,

      363,   69,   72,  363,  363,   75,   79,  363,  363,  363,
      363,   86,   87,  363,  363,  363,   91,  363,   96,  363,
      363,  363,  363,  104,  105,  363,  363,  363,  363,  111,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  126,  363,  363,  363,  132,  363,  134,  138,  363,
      142,  143,  363,  363,  148,  149,  152,  153,  154,  363,
      156,  158,  159,  160,  363,  162,  170,  363,  179,  181,
      185,  187,  198,  363,  205,  207,  208,  209,  210,  363,
      214,  363,  363,  363,  363,  363,  363,  242,  245,  248,
      363,  363,  261,  363,  264,  265,  266,  267,  268,  269,

      271,  272,  276,  363,  363,  284,  286,  288,  289,  290,
      292,  363,  308,  309,  312,  313,  314,  316,  318,  319,
      320,  321,  363,  330,  363,  333,  334,  335,  363,  337,
      363,  339,  340,  363,  363,   17,   22,   25,   40,   41,
       42,  363,   44,   56,   58,  363,   61,   64,   66,   68,
       70,  363,   74,   76,   77,   80,   81,   82,   84,   88,
      363,   90,   92,   93,   97,  363,  363,  363,  363,  103,
      106,  363,  363,  109,  363,  363,  363,  363,  363,  363,
      363,  118,  120,  363,  363,  123,  363,  363,  363,  128,
      130,  363,  133,  135,  136,  139,  363,  145,  363,  363,

      163,  164,  172,  202,  211,  212,  213,  215,  363,  218,
      223,  224,  225,  226,  227,  363,  236,  237,  238,  363,
      363,  243,  244,  246,  247,  249,  252,  253,  258,  259,
      262,  263,  280,  281,  282,  363,  285,  287,  291,  293,
      294,  296,  298,  299,  300,  302,  304,  305,  306,  307,
      310,  311,  325,  326,  327,  331,  363,  338,  341,  363,
       18,  363,   60,   71,  363,   78,   83,   85,  363,   94,
       98,   99,  100,  101,  102,  107,  108,  110,  112,  113,
      363,  115,  116,  117,  119,  363,  122,  124,  125,  363,
      131,  137,  140,  363,  363,  363,  161,  216,  217,  363,

      363,  240,  250,  251,  254,  255,  363,  295,  297,  301,
      303,  336,  363,   43,   73,   89,  114,  121,  127,  141,
      144,  146,  363,  363,  239,  283,   14,  155,  232,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    7,    8,    1,    9,    1,
        1,   10,   11,   12,   13,    1,   14,   15,   16,   17,
       18,   19,   19,   19,   19,   19,   19,   20,   21,    1,
        1,    1,    1,    1,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,    1,   51,    1,   52,   53,   54,   55,

       56,   57,   58,   58,   58,   58,   58,   58,   58,   59,
       58,   58,   58,   60,   58,   61,   58,   58,   58,   62,
       58,   58,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[63] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    1,
        1,    1,    1,    1,    3,    3,    3,    3,    3,    4,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3
    } ;

static const flex_int16_t yy_base[739] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   60,   61,
       64,   69,  142,  138,  133,  130,  115, 2390, 2390, 2390,
     2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390,   60,   65,
     2390, 2390,   81,  118,  140,  176,   99,  204,   76,   78,
      122,  242,  281,  130,  161,  166,  158,  233,  314,  162,
       77,  126,  263,  296, 2390, 2390,   92, 2390, 2390, 2390,
     2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390,
     2390, 2390,   76,  342,    0,   79,   67,  353,  170,  198,
      123,  184,   80,  215,  251,  361,  362,  243,  271,  310,
      131,  383,  304,  330,  272,  395,  216,  278,  365,  371,

      326,  343,  370,  400,  401,  403,  402,  407,  409,  417,
      425,  419,  439,  447,  443,  453,  466,  465,  479,  474,
      491,  457,  499,  515,  456,  507,  516,  521,  525,  531,
      533,  534,  535,  538,  541,  555,  562,  591,  563,  565,
      564,  567,  568,  569,  570,  585,  609,  612,  621,  586,
      627,  624,  584,  630,  633,  634,  639,  636,  651,  649,
      658,  652,  661,  665,  666,  673,  679,  675,  682,  685,
      697,  707,  713,  687,  714,  715,  716,  721,  735,  723,
      733,  745,  741,  755,  757,  750,  759,  763,  762,  764,
      772,   87,  176, 2390,   70,  781,  785,  786,  787,  788,

      789,  790,  793,  794,  795,  803,  807,  809,  810,  811,
      816,  817,  825,  826,  829,  830,  831,  835,  838,  839,
      844,  845,  847,  848,  851,  852,  854,  860,  861,  866,
      870,  873,  874,  876,  880,  886,  888,  892,  889,  895,
      898,  902,  901,  907,  911,  914,  919,  923,  928,  929,
      936,  937,  942,  944,  943,  960,  962,  965,  966,  970,
      986,  978,  979,  985,  993,  994, 1001, 1008, 1009, 1013,
     1014, 1016, 1021, 1015, 1023, 1017, 1037, 1030, 1043, 1053,
     1047, 1056, 1057, 1059, 1060, 1066, 1072, 1069, 1078, 1087,
     1091, 1094, 1097, 1099, 1100, 1103, 1104, 1106, 1107, 1116,

     1123, 1113, 1125, 1126, 1128, 1131, 1132, 1135, 1138, 1141,
     1144, 1145, 1147, 1148, 1150, 1151, 1154, 1157, 1164, 1160,
     1166, 1163, 1170, 1173, 1179, 1182, 1185, 1188, 1189, 1195,
     1197, 1198, 1202, 1201, 1204, 1211, 1220, 1221, 1223, 1225,
     1227, 1228, 1226, 1244, 1247, 1249, 1250, 1253, 1257, 1265,
     1266, 1286, 1270, 1269, 1271, 1272, 1275, 1273, 1278, 1279,
     1295, 1309, 1311, 1315, 1316, 1318, 1319, 1321, 1323, 1328,
     1325, 1331, 1333, 1346, 1347, 1350, 2390,   61, 1352, 1359,
     1353, 1360, 1366, 1367, 1369, 1372, 1373, 1375, 1381, 1387,
     1388, 1390, 1393, 1394, 1400, 1397, 1402, 1409, 1414, 1415,

     1416, 1417, 1418, 1422, 1435, 1421, 1436, 1437, 1439, 1457,
     1458, 1459, 1460, 1461, 1462, 1463, 1466, 1464, 1465, 1479,
     1480, 1489, 1488, 1487, 1496, 1501, 1502, 1505, 1510, 1511,
     1517, 1519, 1527, 1532, 1535, 1537, 1541, 1542, 1544, 1547,
     1554, 1557, 1556, 1559, 1564, 1566, 1573, 1574, 1576, 1578,
     1580, 1581, 1586, 1595, 1596, 1598, 1600, 1601, 1605, 1610,
     1613, 1614, 1615, 1617, 1618, 1619, 1622, 1623, 1627, 1632,
     1636, 1637, 1639, 1641, 1642, 1644, 1645, 1649, 1651, 1657,
     1659, 1663, 1664, 1669, 1667, 1682, 1684, 1696, 1704, 1705,
     1706, 1711, 1708, 1713, 1714, 1727, 1729, 1732, 1733, 1734,

     1735, 1737, 1741, 1742, 1749, 1750, 1754, 1755, 1757, 1762,
     1763, 1768, 1764, 1786, 1778, 1790, 1791, 1793, 1794, 1798,
     1800, 1807, 1808, 1810, 1814, 1812, 1815, 1816, 1817, 1820,
     1829, 1830, 1833, 1835, 1836, 1839, 1837, 1852, 1854, 1855,
     1856, 1857, 1860, 1861, 1862, 1864, 1870, 1874, 1876, 1878,
     1880, 1882, 1883, 1884, 1888, 1886, 1892, 1896, 1898, 1900,
     1901, 1902, 1904, 1906, 1910, 1918, 1923, 1919, 1931, 1926,
     1932, 1935, 1938, 1945, 1947, 1950, 1951, 1954, 1953, 1957,
     1966, 1963, 1972, 1973, 1976, 1982, 1985, 1990, 1994, 1997,
     1998, 2000, 2003, 2007, 2012, 2013, 2016, 2017, 2019, 2025,

     2022, 2026, 2032, 2035, 2038, 2042, 2047, 2048, 2051, 2052,
     2054, 2055, 2056, 2060, 2061, 2064, 2069, 2070, 2073, 2076,
     2077, 2079, 2082, 2083, 2086, 2092, 2095, 2096, 2099, 2100,
     2104, 2105, 2113, 2114, 2117, 2118, 2119, 2121, 2122, 2123,
     2126, 2135, 2136, 2138, 2139, 2140, 2142, 2144, 2148, 2154,
     2158, 2160, 2161, 2162, 2163, 2164, 2166, 2167, 2168, 2170,
     2176, 2180, 2183, 2184, 2185, 2186, 2189, 2190, 2192, 2193,
     2198, 2205, 2206, 2207, 2208, 2210, 2211, 2212, 2214, 2215,
     2224, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2236,
     2237, 2246, 2249, 2250, 2255, 2253, 2254, 2268, 2269, 2272,

     2273, 2274, 2275, 2276, 2278, 2288, 2290, 2291, 2293, 2294,
     2295, 2296, 2297, 2298, 2300, 2312, 2313, 2315, 2317, 2318,
     2319, 2320, 2321, 2322, 2325, 2327, 2334, 2335, 2337, 2390,
     2362, 2366, 2370, 2374, 2378, 2381, 2383, 2386
    } ;

static const flex_int16_t yy_def[739] =
    {   0,
      730,    1,  731,  731,  731,  731,  731,  731,  732,  732,
      733,  733,  734,  734,  735,  735,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  736,  736,  736,  736,  736,   35,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  730,  730,  737,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  738,  736,  730,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  737,   74,  730,  730,  736,  736,  736,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  138,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  730,  730,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  138,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,    0,
      730,  730,  730,  730,  730,  730,  730,  730
    } ;

static const flex_int16_t yy_nxt[2453] =
    {   0,
       18,   19,   20,   19,   21,   22,   18,   23,   18,   24,
       25,   26,   27,   28,   29,   30,   30,   30,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   39,   43,   44,   45,   46,   47,   39,   48,   49,
       50,   51,   52,   53,   54,   39,   39,   55,   18,   56,
       57,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   58,   58,   60,   60,   58,  377,   63,  194,
      195,   58,  194,   63,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   75,   75,   75,   75,   75,   75,
       73,   73,   73,   73,   73,   77,   77,   77,   77,   77,

       77,  182,   78,   79,   74,   80,   77,   75,   61,   61,
      126,   77,   64,   81,  730,   82,  205,   64,   77,   83,
       65,   74,   66,   67,   68,   65,   75,   66,   67,   68,
       75,   75,   72,  104,   75,   72,  105,   77,   75,   75,
       70,   77,   77,  106,   70,   77,  127,   84,   75,   77,
       77,  183,  203,   85,  730,  128,  129,   86,   87,   77,
      130,   89,   90,   88,   91,  154,   75,  730,  217,   75,
       75,  155,   92,   93,   75,  730,   94,   77,   75,  161,
       77,   77,  377,   95,   75,   77,  156,  180,  378,   77,
      730,  181,   75,  162,  730,   77,  157,   96,   97,  163,

       98,   99,  158,   77,  159,  100,   75,  160,  204,  200,
      730,  730,  730,  101,  730,  730,  102,   77,  730,  103,
      107,  201,  202,   75,   75,  108,  109,  110,  111,  112,
      113,  730,  730,  114,   77,   77,  115,  116,  117,  118,
      119,   75,  120,  121,  122,  123,  730,   76,  124,  125,
       75,   75,   77,  730,  730,  206,  164,  165,  166,   75,
      730,   77,   77,  131,  132,  133,  730,  134,  167,  135,
       77,   75,  168,  730,  136,  137,  138,  139,  140,   75,
       75,  141,   77,  214,  184,  185,   75,  730,  142,   75,
       77,   77,  207,  730,  730,  730,  225,   77,  186,  730,

       77,  187,  143,  215,   75,  144,  145,  146,  147,  730,
      148,  730,   75,  149,  150,   77,  151,  188,   75,  189,
      152,  153,   75,   77,  730,  730,  730,  222,  190,   77,
      730,  191,  730,   77,   75,  169,  170,  171,   75,  172,
      223,  173,  174,  175,  730,   77,  176,  177,  730,   77,
      730,   75,  730,  216,  178,  179,  193,  193,  193,  193,
      193,   75,   77,  193,  193,  193,  193,  193,  193,   75,
       75,  224,   77,   75,  196,  730,  730,  197,   75,   75,
       77,   77,  730,  730,   77,  211,  198,  208,  228,   77,
       77,   75,  199,  193,  193,  193,  193,  193,  193,  209,

      212,  213,   77,   75,  210,  230,  218,  219,   75,   75,
       75,   75,  220,  229,   77,   75,  226,   75,  730,   77,
       77,   77,   77,  221,  231,   75,   77,   75,   77,  236,
      730,  237,  730,   75,  227,  730,   77,  730,   77,  730,
      232,  238,  233,  234,   77,  240,  235,   75,  239,  241,
      243,   75,  242,  245,  244,   75,  730,  730,   77,  730,
      730,   75,   77,  730,   75,   75,   77,  254,  247,  730,
      248,  249,   77,   75,   75,   77,   77,  246,  730,  250,
      251,  252,   75,  730,   77,   77,  253,   75,  280,  256,
      257,  258,  730,   77,  255,  259,  275,  730,   77,   75,

      263,  260,  730,  262,  730,  261,  730,   75,  266,  730,
       77,  730,  268,  267,  269,   75,  270,  264,   77,  265,
      271,  730,  276,   75,   75,  730,   77,  730,  272,   75,
      730,  273,  274,   75,   77,   77,  277,  730,  278,   75,
       77,   75,   75,   75,   77,  282,   75,  281,  284,   75,
       77,  730,   77,   77,   77,  279,  288,   77,  289,  290,
       77,  292,  283,   75,  285,  286,  293,  287,  730,  730,
       75,   75,   75,   75,   77,   75,   75,   75,   75,  291,
      294,   77,   77,   77,   77,  730,   77,   77,   77,   77,
      306,  311,   75,   75,   75,  730,  308,  730,  295,   75,

      307,  730,  730,   77,   77,   77,  309,  730,  310,  312,
       77,  730,  296,  297,  298,  730,  299,   75,  300,  730,
       75,  730,  324,  301,  313,  318,  302,  303,   77,   75,
      304,   77,   75,  314,  730,   75,  316,  305,   75,  730,
       77,   75,   75,   77,   75,  317,   77,   75,  315,   77,
      319,  320,   77,   77,  730,   77,  322,   75,   77,   75,
       75,  327,  321,  323,  730,  326,   75,  730,   77,   75,
       77,   77,  325,   75,   75,  328,  330,   77,  331,  329,
       77,   75,  333,   75,   77,   77,  730,   75,  334,  332,
       75,  730,   77,   75,   77,   75,  730,  336,   77,  338,

      335,   77,  339,  337,   77,   75,   77,  349,  345,  340,
      346,  343,  341,  342,  347,   75,   77,  344,  350,  354,
      348,   75,   75,   75,   75,  355,   77,  730,  730,   75,
      351,   75,   77,   77,   77,   77,  730,  353,  356,  357,
       77,   75,   77,   75,  359,  360,  730,  352,  730,   75,
      361,  730,   77,   75,   77,  358,  362,  364,   75,  363,
       77,  367,  365,   75,   77,   75,  366,   75,  730,   77,
       75,   75,   75,  730,   77,  730,   77,  730,   77,  368,
       75,   77,   77,   77,  369,  375,  370,  373,  371,   75,
      374,   77,  372,   75,   75,   75,   75,   75,   75,  730,

       77,   75,   75,   75,   77,   77,   77,   77,   77,   77,
      376,   75,   77,   77,   77,   75,  730,   75,   75,   75,
      380,  730,   77,  379,   75,   75,   77,  381,   77,   77,
       77,  730,  384,   75,   75,   77,   77,   75,   75,   75,
      730,  383,  382,   75,   77,   77,   75,   75,   77,   77,
       77,  385,   75,   75,   77,   75,   75,   77,   77,   75,
       75,  386,   75,   77,   77,  730,   77,   77,   75,   75,
       77,   77,  730,   77,   75,  730,  391,  390,   75,   77,
       77,   75,   75,  387,   75,   77,  388,  730,   75,   77,
      730,  389,   77,   77,   75,   77,   75,   75,  393,   77,

       75,  394,  730,   75,  392,   77,   75,   77,   77,   75,
       75,   77,  397,  395,   77,   75,  398,   77,  730,   75,
       77,   77,   75,  401,  404,  396,   77,   75,  730,  399,
       77,   75,  730,   77,  400,  402,   75,   75,   77,  408,
      407,  403,   77,  409,   75,   75,  405,   77,   77,  406,
       75,   75,   75,  412,  413,   77,   77,  411,  410,  419,
      415,   77,   77,   77,  730,  730,  416,  420,   75,  421,
       75,  730,  730,   75,   75,  425,  422,  414,   75,   77,
      423,   77,  417,  418,   77,   77,   75,   75,  730,   77,
      424,  427,  426,   75,   75,  730,  730,   77,   77,  428,

      429,   75,   75,  730,   77,   77,  430,  431,  730,   75,
      435,  433,   77,   77,  436,  730,   75,   75,  437,  434,
       77,   75,   75,   75,   75,   75,  432,   77,   77,   75,
      440,   75,   77,   77,   77,   77,   77,  448,   75,  730,
       77,  438,   77,  730,  444,   75,  445,  730,  442,   77,
      439,   75,  450,  441,  443,   75,   77,  446,  452,  730,
      447,   75,   77,  449,   75,   75,   77,   75,   75,  454,
      451,  730,   77,  730,   75,   77,   77,   75,   77,   77,
       75,  453,  458,  462,  459,   77,   75,  730,   77,  456,
      730,   77,  730,  730,  457,   75,  464,   77,  455,   75,

      460,  463,   75,  461,  465,   75,   77,   75,   75,  466,
       77,   75,   75,   77,   75,   75,   77,  730,   77,   77,
      730,   75,   77,   77,   75,   77,   77,  730,  469,  470,
      730,   75,   77,   75,   75,   77,   75,  467,  468,   75,
       75,  471,   77,   75,   77,   77,   75,   77,  472,   75,
       77,   77,   75,   75,   77,   75,   75,   77,   75,   75,
       77,  473,   75,   77,   77,   75,   77,   77,   75,   77,
       77,   75,   75,   77,   75,  730,   77,  730,   75,   77,
      730,   75,   77,   77,  730,   77,  474,   75,  475,   77,
       75,  476,   77,   75,  477,  479,   75,   75,   77,  480,

      478,   77,  481,   75,   77,   75,   75,   77,   77,   75,
       75,  730,   75,  730,   77,  730,   77,   77,  482,   75,
       77,   77,  488,   77,  484,  483,  486,  489,   75,   75,
       77,   75,  490,   75,   75,   75,   75,  485,  730,   77,
       77,  487,   77,  730,   77,   77,   77,   77,  730,  496,
      493,  497,   75,  730,  501,   75,  492,   75,   75,  494,
      491,   75,  502,   77,  498,   75,   77,  499,   77,   77,
      500,  495,   77,   75,   75,  503,   77,   75,   75,   75,
       75,   75,  730,   75,   77,   77,   75,   75,   77,   77,
       77,   77,   77,  518,   77,  519,  730,   77,   77,  730,

      730,  730,  730,   75,  504,  730,  505,  506,  507,  508,
      517,  509,  520,  510,   77,  521,  522,   75,  511,   75,
      512,  513,  514,   75,   75,  515,   75,   75,   77,   75,
       77,   75,  516,   75,   77,   77,   75,   77,   77,   75,
       77,   75,   77,  525,   77,  730,  730,   77,  523,  530,
       77,  730,   77,  730,   75,   75,  524,  532,   75,  526,
       75,   75,  529,  528,  527,   77,   77,   75,   75,   77,
      531,   77,   77,  533,   75,   75,  730,   75,   77,   77,
       75,   75,  730,   75,  535,   77,   77,  534,   77,   75,
      537,   77,   77,  536,   77,   75,   75,  539,   75,  540,

       77,   75,   75,  538,  542,   75,   77,   77,   75,   77,
       75,  543,   77,   77,  544,  547,   77,   75,  541,   77,
      730,   77,   75,   75,   75,   75,   75,  730,   77,   75,
       75,  545,  546,   77,   77,   77,   77,   77,  548,  730,
       77,   77,  730,   75,   75,   75,  730,   75,  730,  730,
      549,  730,  730,  551,   77,   77,   77,  554,   77,  555,
      550,  552,  556,  557,  553,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,  730,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,  564,   75,   75,  730,
      558,  730,  730,  560,  730,   75,   75,   75,   77,   77,

      559,  561,  563,  562,   75,  567,   77,   77,   77,   75,
       75,  730,  730,   75,  566,   77,  568,  570,   75,   75,
       77,   77,  565,  569,   77,   75,  572,   75,  730,   77,
       77,  730,  571,  730,  574,   75,   77,  730,   77,  575,
       75,  573,  577,   75,  578,   75,   77,  730,  580,   75,
       75,   77,   75,  581,   77,   75,   77,  730,  579,  576,
       77,   77,   75,   77,   75,   75,   77,   75,  582,  586,
      584,  583,   75,   77,   75,   77,   77,  585,   77,  587,
      589,   75,   75,   77,   75,   77,   75,  730,   75,   75,
      588,  730,   77,   77,   75,   77,  590,   77,  592,   77,

       77,  730,  591,   75,   75,   77,   75,  597,   75,   75,
      594,  596,  595,   75,   77,   77,  593,   77,   75,   77,
       77,   75,   75,   75,   77,   75,   75,   75,  730,   77,
       75,   75,   77,   77,   77,   75,   77,   77,   77,  598,
       75,   77,   77,  601,   75,   75,   77,   75,  599,   75,
       75,   77,   75,   75,  600,   77,   77,   75,   77,   75,
       77,   77,  602,   77,   77,   75,  604,   75,   77,  603,
       77,   75,   75,  730,  730,   75,   77,   75,   77,  605,
      730,  606,   77,   77,  608,  611,   77,  612,   77,  617,
       75,  618,   75,  609,  730,  730,  730,  730,  730,  730,

      607,   77,  616,   77,   75,  610,  613,  614,  615,  621,
      619,  620,   75,   75,   75,   77,   75,  730,  730,   75,
      622,   75,   75,   77,   77,   77,  626,   77,  624,  627,
       77,  628,   77,   77,  630,   75,  730,   75,  631,  623,
       75,   75,   75,   75,  629,   75,   77,  625,   77,   75,
       75,   77,   77,   77,   77,  730,   77,   75,   75,  632,
       77,   77,   75,   75,  633,   75,  634,  730,   77,   77,
       75,   75,   75,   77,   77,  637,   77,  730,  636,  638,
      730,   77,   77,   77,  730,  635,   75,  639,  640,  641,
      642,  643,  730,  644,   75,  645,  730,   77,   75,   75,

      646,   75,   75,  647,  648,   77,   75,  649,   75,   77,
       77,  651,   77,   77,  650,   75,   75,   77,   75,   77,
       75,  652,   75,   75,   75,   75,   77,   77,   75,   77,
      653,   77,  654,   77,   77,   77,   77,   75,   75,   77,
      730,   75,  730,   75,   75,   75,  730,   75,   77,   77,
      730,  655,   77,  656,   77,   77,   77,  659,   77,  657,
       75,  661,   75,   75,   75,   75,  730,  658,   75,   75,
       75,   77,   75,   77,   77,   77,   77,  660,   75,   77,
       77,   77,   75,   77,   75,  662,   75,  730,   75,   77,
       75,   75,   75,   77,   75,   77,   75,   77,  663,   77,

       75,   77,   77,   77,   75,   77,   75,   77,   75,   75,
       75,   77,   75,  730,   75,   77,  664,   77,   75,   77,
       77,   77,  665,   77,  666,   77,   75,   75,  730,   77,
      730,   75,  667,  730,   75,  674,  668,   77,   77,   75,
       75,  669,   77,   75,  670,   77,   75,  675,  672,  730,
       77,   77,  730,   75,   77,   75,  730,   77,   75,   75,
      671,   75,   75,  673,   77,   75,   77,  677,  730,   77,
       77,   75,   77,   77,   75,  679,   77,  730,  685,  676,
       75,   75,   77,  730,   75,   77,  730,  678,  681,  730,
       75,   77,   77,   75,  680,   77,  682,  683,   75,  730,

      684,   77,   75,  730,   77,   75,   75,  686,   75,   77,
      688,   75,  730,   77,  687,   75,   77,   77,  730,   77,
       75,   75,   77,  689,   75,   75,   77,   75,  730,  690,
       75,   77,   77,   75,   75,   77,   77,  730,   77,  694,
       75,   77,  691,   75,   77,   77,   75,  730,  692,  693,
       75,   77,  697,  695,   77,   75,   75,   77,  696,   75,
       75,   77,   75,   75,   75,  730,   77,   77,   75,   75,
       77,   77,   75,   77,   77,   77,  698,   75,   75,   77,
       77,   75,  730,   77,   75,   75,  730,   75,   77,   77,
       75,   75,   77,  700,   75,   77,   77,  699,   77,  730,

       75,   77,   77,   75,   75,   77,  730,   75,   75,  730,
      701,   77,   75,   75,   77,   77,  703,  702,   77,   77,
      705,   75,   75,   77,   77,   75,   75,   75,  730,   75,
       75,   75,   77,   77,   75,  704,   77,   77,   77,  706,
       77,   77,   77,   75,   75,   77,   75,   75,   75,  730,
       75,  708,   75,  707,   77,   77,   75,   77,   77,   77,
      709,   77,   75,   77,  710,  711,   75,   77,   75,   75,
       75,   75,   75,   77,   75,   75,   75,   77,   75,   77,
       77,   77,   77,   77,   75,   77,   77,   77,   75,   77,
      712,   75,   75,   75,   75,   77,  730,   75,   75,   77,

       75,   75,   77,   77,   77,   77,   75,  714,   77,   77,
      713,   77,   77,   75,   75,   75,   75,   77,   75,   75,
       75,  715,   75,   75,   77,   77,   77,   77,  716,   77,
       77,   77,   75,   77,   77,   75,   75,   75,   75,   75,
       75,   75,   75,   77,   75,   75,   77,   77,   77,   77,
       77,   77,   77,   77,   75,   77,   77,   75,   75,  730,
      730,   75,   75,   75,  730,   77,  717,  730,   77,   77,
      722,  718,   77,   77,   77,  719,   75,   75,  723,  730,
       75,   75,   75,   75,   75,  720,   75,   77,   77,  730,
      721,   77,   77,   77,   77,   77,   75,   77,   75,   75,

      725,   75,   75,   75,   75,   75,   75,   77,   75,   77,
       77,  730,   77,   77,   77,   77,   77,   77,  724,   77,
       75,   75,  727,   75,  726,   75,   75,   75,   75,   75,
       75,   77,   77,   75,   77,   75,   77,   77,   77,   77,
       77,   77,   75,   75,   77,   75,   77,  729,  730,  730,
      730,  730,  730,   77,   77,  730,   77,  730,  730,  730,
      730,  728,   58,   58,   58,   58,   59,   59,   59,   59,
       62,   62,   62,   62,   69,   69,   69,   69,   71,   71,
       71,   71,   76,   76,   76,  192,  192,   75,   75,   17,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,

      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730
    } ;

static const flex_int16_t yy_chk[2453] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    9,   10,    9,   10,   11,  378,   11,   77,
       77,   12,  195,   12,   29,   29,   29,   29,   29,   30,
       30,   30,   30,   30,   39,   51,   40,   76,   83,   33,
       73,   73,   73,   73,   73,   39,   51,   40,   76,   83,

       33,   51,   33,   33,   29,   33,  192,   37,    9,   10,
       40,   57,   11,   33,   17,   33,   83,   12,   37,   33,
       11,   29,   11,   11,   11,   12,   34,   12,   12,   12,
       41,   81,   16,   37,   52,   15,   37,   34,   44,   91,
       14,   41,   81,   37,   13,   52,   41,   34,   35,   44,
       91,   52,   81,   34,    0,   41,   41,   34,   34,   35,
       41,   35,   35,   34,   35,   44,   47,    0,   91,   45,
       50,   44,   35,   35,   46,    0,   35,   47,   79,   47,
       45,   50,  193,   35,   36,   46,   45,   50,  193,   79,
        0,   50,   82,   47,    0,   36,   45,   36,   36,   47,

       36,   36,   46,   82,   46,   36,   80,   46,   82,   79,
        0,    0,    0,   36,    0,    0,   36,   80,    0,   36,
       38,   80,   80,   84,   97,   38,   38,   38,   38,   38,
       38,    0,    0,   38,   84,   97,   38,   38,   38,   38,
       38,   48,   38,   38,   38,   38,    0,   38,   38,   38,
       42,   88,   48,    0,    0,   84,   48,   48,   48,   85,
        0,   42,   88,   42,   42,   42,    0,   42,   48,   42,
       85,   53,   48,    0,   42,   42,   42,   42,   42,   89,
       95,   42,   53,   88,   53,   53,   98,    0,   42,   43,
       89,   95,   85,    0,    0,    0,   95,   98,   53,    0,

       43,   53,   43,   89,   54,   43,   43,   43,   43,    0,
       43,    0,   93,   43,   43,   54,   43,   54,   90,   54,
       43,   43,   49,   93,    0,    0,    0,   93,   54,   90,
        0,   54,    0,   49,  101,   49,   49,   49,   94,   49,
       93,   49,   49,   49,    0,  101,   49,   49,    0,   94,
        0,  102,    0,   90,   49,   49,   74,   74,   74,   74,
       74,   78,  102,   74,   74,   74,   74,   74,   74,   86,
       87,   94,   78,   99,   78,    0,    0,   78,  103,  100,
       86,   87,    0,    0,   99,   87,   78,   86,   99,  103,
      100,   92,   78,   74,   74,   74,   74,   74,   74,   86,

       87,   87,   92,   96,   86,  103,   92,   92,  104,  105,
      107,  106,   92,  100,   96,  108,   96,  109,    0,  104,
      105,  107,  106,   92,  104,  110,  108,  112,  109,  108,
        0,  108,    0,  111,   96,    0,  110,    0,  112,    0,
      104,  109,  105,  106,  111,  110,  107,  113,  109,  110,
      111,  115,  110,  112,  111,  114,    0,    0,  113,    0,
        0,  116,  115,    0,  125,  122,  114,  115,  114,    0,
      114,  114,  116,  118,  117,  125,  122,  113,    0,  114,
      114,  114,  120,    0,  118,  117,  114,  119,  125,  117,
      117,  117,    0,  120,  116,  117,  122,    0,  119,  121,

      119,  117,    0,  118,    0,  117,    0,  123,  120,    0,
      121,    0,  121,  120,  121,  126,  121,  119,  123,  119,
      121,    0,  123,  124,  127,    0,  126,    0,  121,  128,
        0,  121,  121,  129,  124,  127,  124,    0,  124,  130,
      128,  131,  132,  133,  129,  127,  134,  126,  129,  135,
      130,    0,  131,  132,  133,  124,  130,  134,  131,  132,
      135,  134,  128,  136,  129,  129,  135,  129,    0,    0,
      137,  139,  141,  140,  136,  142,  143,  144,  145,  133,
      136,  137,  139,  141,  140,    0,  142,  143,  144,  145,
      140,  145,  153,  146,  150,    0,  143,    0,  137,  138,

      140,    0,    0,  153,  146,  150,  143,    0,  144,  145,
      138,    0,  138,  138,  138,    0,  138,  147,  138,    0,
      148,    0,  153,  138,  146,  150,  138,  138,  147,  149,
      138,  148,  152,  147,    0,  151,  148,  138,  154,    0,
      149,  155,  156,  152,  158,  149,  151,  157,  147,  154,
      151,  151,  155,  156,    0,  158,  152,  160,  157,  159,
      162,  156,  151,  152,    0,  155,  161,    0,  160,  163,
      159,  162,  154,  164,  165,  157,  158,  161,  159,  157,
      163,  166,  161,  168,  164,  165,    0,  167,  162,  160,
      169,    0,  166,  170,  168,  174,    0,  164,  167,  165,

      163,  169,  165,  164,  170,  171,  174,  170,  168,  166,
      169,  167,  166,  166,  169,  172,  171,  167,  171,  174,
      169,  173,  175,  176,  177,  174,  172,    0,    0,  178,
      172,  180,  173,  175,  176,  177,    0,  173,  175,  176,
      178,  181,  180,  179,  178,  178,    0,  172,    0,  183,
      178,    0,  181,  182,  179,  177,  178,  179,  186,  178,
      183,  182,  180,  184,  182,  185,  181,  187,    0,  186,
      189,  188,  190,    0,  184,    0,  185,    0,  187,  183,
      191,  189,  188,  190,  184,  190,  185,  188,  186,  196,
      189,  191,  187,  197,  198,  199,  200,  201,  202,    0,

      196,  203,  204,  205,  197,  198,  199,  200,  201,  202,
      191,  206,  203,  204,  205,  207,    0,  208,  209,  210,
      203,    0,  206,  200,  211,  212,  207,  205,  208,  209,
      210,    0,  210,  213,  214,  211,  212,  215,  216,  217,
        0,  207,  206,  218,  213,  214,  219,  220,  215,  216,
      217,  214,  221,  222,  218,  223,  224,  219,  220,  225,
      226,  215,  227,  221,  222,    0,  223,  224,  228,  229,
      225,  226,    0,  227,  230,    0,  225,  224,  231,  228,
      229,  232,  233,  221,  234,  230,  223,    0,  235,  231,
        0,  223,  232,  233,  236,  234,  237,  239,  232,  235,

      238,  234,    0,  240,  230,  236,  241,  237,  239,  243,
      242,  238,  237,  235,  240,  244,  238,  241,    0,  245,
      243,  242,  246,  241,  243,  236,  244,  247,    0,  239,
      245,  248,    0,  246,  240,  242,  249,  250,  247,  246,
      245,  242,  248,  247,  251,  252,  244,  249,  250,  244,
      253,  255,  254,  250,  250,  251,  252,  249,  248,  254,
      252,  253,  255,  254,    0,    0,  252,  254,  256,  254,
      257,    0,    0,  258,  259,  255,  254,  251,  260,  256,
      254,  257,  253,  253,  258,  259,  262,  263,    0,  260,
      254,  257,  256,  264,  261,    0,    0,  262,  263,  258,

      259,  265,  266,    0,  264,  261,  260,  261,    0,  267,
      264,  262,  265,  266,  265,    0,  268,  269,  266,  263,
      267,  270,  271,  274,  272,  276,  261,  268,  269,  273,
      269,  275,  270,  271,  274,  272,  276,  274,  278,    0,
      273,  267,  275,    0,  273,  277,  273,    0,  271,  278,
      268,  279,  276,  270,  272,  281,  277,  273,  278,    0,
      273,  280,  279,  275,  282,  283,  281,  284,  285,  280,
      277,    0,  280,    0,  286,  282,  283,  288,  284,  285,
      287,  279,  285,  286,  285,  286,  289,    0,  288,  283,
        0,  287,    0,    0,  284,  290,  287,  289,  282,  291,

      285,  286,  292,  285,  287,  293,  290,  294,  295,  288,
      291,  296,  297,  292,  298,  299,  293,    0,  294,  295,
        0,  302,  296,  297,  300,  298,  299,    0,  296,  297,
        0,  301,  302,  303,  304,  300,  305,  291,  292,  306,
      307,  300,  301,  308,  303,  304,  309,  305,  301,  310,
      306,  307,  311,  312,  308,  313,  314,  309,  315,  316,
      310,  308,  317,  311,  312,  318,  313,  314,  320,  315,
      316,  322,  319,  317,  321,    0,  318,    0,  323,  320,
        0,  324,  322,  319,    0,  321,  311,  325,  314,  323,
      326,  316,  324,  327,  317,  319,  328,  329,  325,  320,

      318,  326,  321,  330,  327,  331,  332,  328,  329,  334,
      333,    0,  335,    0,  330,    0,  331,  332,  325,  336,
      334,  333,  334,  335,  330,  325,  333,  334,  337,  338,
      336,  339,  335,  340,  343,  341,  342,  332,    0,  337,
      338,  333,  339,    0,  340,  343,  341,  342,    0,  341,
      340,  341,  344,    0,  342,  345,  339,  346,  347,  340,
      338,  348,  342,  344,  341,  349,  345,  341,  346,  347,
      341,  340,  348,  350,  351,  346,  349,  354,  353,  355,
      356,  358,    0,  357,  350,  351,  359,  360,  354,  353,
      355,  356,  358,  354,  357,  355,    0,  359,  360,    0,

        0,    0,    0,  361,  350,    0,  351,  352,  352,  352,
      353,  352,  356,  352,  361,  357,  358,  362,  352,  363,
      352,  352,  352,  364,  365,  352,  366,  367,  362,  368,
      363,  369,  352,  371,  364,  365,  370,  366,  367,  372,
      368,  373,  369,  366,  371,    0,    0,  370,  362,  371,
      372,    0,  373,    0,  374,  375,  365,  373,  376,  368,
      379,  381,  370,  369,  368,  374,  375,  380,  382,  376,
      372,  379,  381,  374,  383,  384,    0,  385,  380,  382,
      386,  387,    0,  388,  379,  383,  384,  375,  385,  389,
      383,  386,  387,  380,  388,  390,  391,  388,  392,  388,

      389,  393,  394,  384,  389,  396,  390,  391,  395,  392,
      397,  390,  393,  394,  392,  395,  396,  398,  388,  395,
        0,  397,  399,  400,  401,  402,  403,    0,  398,  406,
      404,  393,  394,  399,  400,  401,  402,  403,  397,    0,
      406,  404,    0,  405,  407,  408,    0,  409,    0,    0,
      399,    0,    0,  402,  405,  407,  408,  406,  409,  406,
      401,  404,  408,  409,  405,  410,  411,  412,  413,  414,
      415,  416,  418,  419,  417,    0,  410,  411,  412,  413,
      414,  415,  416,  418,  419,  417,  418,  420,  421,    0,
      410,    0,    0,  414,    0,  424,  423,  422,  420,  421,

      411,  415,  417,  416,  425,  422,  424,  423,  422,  426,
      427,    0,    0,  428,  421,  425,  422,  423,  429,  430,
      426,  427,  420,  422,  428,  431,  426,  432,    0,  429,
      430,    0,  425,    0,  428,  433,  431,    0,  432,  429,
      434,  427,  432,  435,  432,  436,  433,    0,  433,  437,
      438,  434,  439,  434,  435,  440,  436,    0,  432,  431,
      437,  438,  441,  439,  443,  442,  440,  444,  435,  439,
      437,  436,  445,  441,  446,  443,  442,  438,  444,  440,
      442,  447,  448,  445,  449,  446,  450,    0,  451,  452,
      441,    0,  447,  448,  453,  449,  443,  450,  445,  451,

      452,    0,  444,  454,  455,  453,  456,  453,  457,  458,
      448,  450,  448,  459,  454,  455,  447,  456,  460,  457,
      458,  461,  462,  463,  459,  464,  465,  466,    0,  460,
      467,  468,  461,  462,  463,  469,  464,  465,  466,  454,
      470,  467,  468,  466,  471,  472,  469,  473,  460,  474,
      475,  470,  476,  477,  465,  471,  472,  478,  473,  479,
      474,  475,  466,  476,  477,  480,  474,  481,  478,  468,
      479,  482,  483,    0,    0,  485,  480,  484,  481,  480,
        0,  480,  482,  483,  481,  482,  485,  482,  484,  485,
      486,  485,  487,  481,    0,    0,    0,    0,    0,    0,

      480,  486,  484,  487,  488,  481,  482,  482,  483,  487,
      485,  486,  489,  490,  491,  488,  493,    0,    0,  492,
      488,  494,  495,  489,  490,  491,  490,  493,  489,  490,
      492,  490,  494,  495,  492,  496,    0,  497,  494,  488,
      498,  499,  500,  501,  491,  502,  496,  489,  497,  503,
      504,  498,  499,  500,  501,    0,  502,  505,  506,  494,
      503,  504,  507,  508,  504,  509,  504,    0,  505,  506,
      510,  511,  513,  507,  508,  506,  509,    0,  505,  507,
        0,  510,  511,  513,    0,  504,  515,  510,  511,  512,
      512,  512,    0,  512,  514,  512,    0,  515,  516,  517,

      512,  518,  519,  512,  512,  514,  520,  512,  521,  516,
      517,  514,  518,  519,  512,  522,  523,  520,  524,  521,
      526,  514,  525,  527,  528,  529,  522,  523,  530,  524,
      523,  526,  523,  525,  527,  528,  529,  531,  532,  530,
        0,  533,    0,  534,  535,  537,    0,  536,  531,  532,
        0,  523,  533,  525,  534,  535,  537,  534,  536,  529,
      538,  536,  539,  540,  541,  542,    0,  531,  543,  544,
      545,  538,  546,  539,  540,  541,  542,  535,  547,  543,
      544,  545,  548,  546,  549,  542,  550,    0,  551,  547,
      552,  553,  554,  548,  556,  549,  555,  550,  546,  551,

      557,  552,  553,  554,  558,  556,  559,  555,  560,  561,
      562,  557,  563,    0,  564,  558,  551,  559,  565,  560,
      561,  562,  552,  563,  555,  564,  566,  568,    0,  565,
        0,  567,  558,    0,  570,  568,  559,  566,  568,  569,
      571,  561,  567,  572,  564,  570,  573,  569,  567,    0,
      569,  571,    0,  574,  572,  575,    0,  573,  576,  577,
      566,  579,  578,  567,  574,  580,  575,  573,    0,  576,
      577,  582,  579,  578,  581,  576,  580,    0,  582,  572,
      583,  584,  582,    0,  585,  581,    0,  575,  578,    0,
      586,  583,  584,  587,  577,  585,  579,  580,  588,    0,

      581,  586,  589,    0,  587,  590,  591,  584,  592,  588,
      587,  593,    0,  589,  585,  594,  590,  591,    0,  592,
      595,  596,  593,  588,  597,  598,  594,  599,    0,  589,
      601,  595,  596,  600,  602,  597,  598,    0,  599,  597,
      603,  601,  592,  604,  600,  602,  605,    0,  595,  596,
      606,  603,  600,  598,  604,  607,  608,  605,  599,  609,
      610,  606,  611,  612,  613,    0,  607,  608,  614,  615,
      609,  610,  616,  611,  612,  613,  609,  617,  618,  614,
      615,  619,    0,  616,  620,  621,    0,  622,  617,  618,
      623,  624,  619,  616,  625,  620,  621,  609,  622,    0,

      626,  623,  624,  627,  628,  625,    0,  629,  630,    0,
      620,  626,  631,  632,  627,  628,  626,  621,  629,  630,
      628,  633,  634,  631,  632,  635,  636,  637,    0,  638,
      639,  640,  633,  634,  641,  626,  635,  636,  637,  628,
      638,  639,  640,  642,  643,  641,  644,  645,  646,    0,
      647,  641,  648,  636,  642,  643,  649,  644,  645,  646,
      642,  647,  650,  648,  645,  646,  651,  649,  652,  653,
      654,  655,  656,  650,  657,  658,  659,  651,  660,  652,
      653,  654,  655,  656,  661,  657,  658,  659,  662,  660,
      657,  663,  664,  665,  666,  661,    0,  667,  668,  662,

      669,  670,  663,  664,  665,  666,  671,  662,  667,  668,
      660,  669,  670,  672,  673,  674,  675,  671,  676,  677,
      678,  665,  679,  680,  672,  673,  674,  675,  669,  676,
      677,  678,  681,  679,  680,  682,  683,  684,  685,  686,
      687,  688,  689,  681,  690,  691,  682,  683,  684,  685,
      686,  687,  688,  689,  692,  690,  691,  693,  694,    0,
        0,  696,  697,  695,    0,  692,  681,    0,  693,  694,
      695,  686,  696,  697,  695,  690,  698,  699,  696,    0,
      700,  701,  702,  703,  704,  693,  705,  698,  699,    0,
      694,  700,  701,  702,  703,  704,  706,  705,  707,  708,

      701,  709,  710,  711,  712,  713,  714,  706,  715,  707,
      708,    0,  709,  710,  711,  712,  713,  714,  700,  715,
      716,  717,  713,  718,  707,  719,  720,  721,  722,  723,
      724,  716,  717,  725,  718,  726,  719,  720,  721,  722,
      723,  724,  727,  728,  725,  729,  726,  724,    0,    0,
        0,    0,    0,  727,  728,    0,  729,    0,    0,    0,
        0,  723,  731,  731,  731,  731,  732,  732,  732,  732,
      733,  733,  733,  733,  734,  734,  734,  734,  735,  735,
      735,  735,  736,  736,  736,  737,  737,  738,  738,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,

      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "nask.ll"
/* -*- c++ -*- File generated by the BNF Converter (bnfc 2.9.5). */
/* Lexer definition for use with FLex */
/* Additional data for the lexer: a buffer for lexing string literals. */

#line 14 "nask.ll"
#include "scanner.hh"

/* using "token" to make the returns for the tokens shorter to type */
using token = nask_::NaskParser::token;


#include "absyn.hh"
#include "bison.hh"

#define initialize_lexer nask__initialize_lexer

/* BEGIN extensible string buffer */

#include "buffer.hh"

/* The initial size of the buffer to lex string literals. */
#define LITERAL_BUFFER_INITIAL_SIZE 1024

/* The pointer to the literal buffer. */
Buffer literal_buffer = nullptr;

/* Initialize the literal buffer. */
#define LITERAL_BUFFER_CREATE() literal_buffer = newBuffer(LITERAL_BUFFER_INITIAL_SIZE)

/* Append characters at the end of the buffer. */
#define LITERAL_BUFFER_APPEND(s) bufferAppendString(literal_buffer, s)

/* Append a character at the end of the buffer. */
#define LITERAL_BUFFER_APPEND_CHAR(c) bufferAppendChar(literal_buffer, c)

/* Release the buffer, returning a pointer to its content. */
#define LITERAL_BUFFER_HARVEST() releaseBuffer(literal_buffer)

/* In exceptional cases, e.g. when reaching EOF, we have to free the buffer. */
#define LITERAL_BUFFER_FREE() freeBuffer(literal_buffer)

/* END extensible string buffer */

/* update location on matching */
#define YY_USER_ACTION \
loc->begin.line   = loc->end.line; \
loc->begin.column = loc->end.column; \
for(int i = 0; yytext[i] != '\0'; i++) { \
    if(yytext[i] == '\n') { \
        loc->end.line++; \
        loc->end.column = 0; \
    } \
    else { \
        loc->end.column++; \
    } \
}
#line 1255 "lexer.cc"

#line 1257 "lexer.cc"

#define INITIAL 0
#define CHAR 1
#define CHARESC 2
#define CHAREND 3
#define STRING 4
#define ESCAPED 5
#define COMMENT 6
#define COMMENT1 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE Buffer

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 74 "nask.ll"


#line 1397 "lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 731 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2390 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 76 "nask.ll"
return token::_LBRACK;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 77 "nask.ll"
return token::_RBRACK;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 78 "nask.ll"
return token::_COMMA;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 79 "nask.ll"
return token::_PLUS;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 80 "nask.ll"
return token::_MINUS;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 81 "nask.ll"
return token::_STAR;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 82 "nask.ll"
return token::_SLASH;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 83 "nask.ll"
return token::_PERCENT;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 84 "nask.ll"
return token::_COLON;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 85 "nask.ll"
return token::_KW_AAA;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 86 "nask.ll"
return token::_KW_AAD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 87 "nask.ll"
return token::_KW_AAM;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 88 "nask.ll"
return token::_KW_AAS;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 89 "nask.ll"
return token::_KW_ABSOLUTE;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 90 "nask.ll"
return token::_KW_ADC;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 91 "nask.ll"
return token::_KW_ADD;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 92 "nask.ll"
return token::_KW_ALIGN;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 93 "nask.ll"
return token::_KW_ALIGNB;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 94 "nask.ll"
return token::_KW_AND;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 95 "nask.ll"
return token::_KW_ARPL;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 96 "nask.ll"
return token::_KW_BITS;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 97 "nask.ll"
return token::_KW_BOUND;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 98 "nask.ll"
return token::_KW_BSF;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 99 "nask.ll"
return token::_KW_BSR;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 100 "nask.ll"
return token::_KW_BSWAP;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 101 "nask.ll"
return token::_KW_BT;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 102 "nask.ll"
return token::_KW_BTC;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 103 "nask.ll"
return token::_KW_BTR;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 104 "nask.ll"
return token::_KW_BTS;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 105 "nask.ll"
return token::_KW_BYTE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 106 "nask.ll"
return token::_KW_CALL;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 107 "nask.ll"
return token::_KW_CBW;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 108 "nask.ll"
return token::_KW_CDQ;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 109 "nask.ll"
return token::_KW_CLC;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 110 "nask.ll"
return token::_KW_CLD;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 111 "nask.ll"
return token::_KW_CLI;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 112 "nask.ll"
return token::_KW_CLTS;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 113 "nask.ll"
return token::_KW_CMC;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 114 "nask.ll"
return token::_KW_CMP;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 115 "nask.ll"
return token::_KW_CMPSB;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 116 "nask.ll"
return token::_KW_CMPSD;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 117 "nask.ll"
return token::_KW_CMPSW;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 118 "nask.ll"
return token::_KW_CMPXCHG;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 119 "nask.ll"
return token::_KW_CPUID;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "nask.ll"
return token::_KW_CWD;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "nask.ll"
return token::_KW_CWDE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "nask.ll"
return token::_KW_DAA;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "nask.ll"
return token::_KW_DAS;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "nask.ll"
return token::_KW_DB;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "nask.ll"
return token::_KW_DD;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "nask.ll"
return token::_KW_DEC;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "nask.ll"
return token::_KW_DIV;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "nask.ll"
return token::_KW_DQ;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "nask.ll"
return token::_KW_DT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "nask.ll"
return token::_KW_DW;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "nask.ll"
return token::_KW_DWORD;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 132 "nask.ll"
return token::_KW_END;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "nask.ll"
return token::_KW_ENTER;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 134 "nask.ll"
return token::_KW_EQU;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "nask.ll"
return token::_KW_EXTERN;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 136 "nask.ll"
return token::_KW_F2XM1;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 137 "nask.ll"
return token::_KW_FABS;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 138 "nask.ll"
return token::_KW_FADD;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 139 "nask.ll"
return token::_KW_FADDP;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 140 "nask.ll"
return token::_KW_FBLD;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 141 "nask.ll"
return token::_KW_FBSTP;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 142 "nask.ll"
return token::_KW_FCHS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 143 "nask.ll"
return token::_KW_FCLEX;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 144 "nask.ll"
return token::_KW_FCOM;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 145 "nask.ll"
return token::_KW_FCOMP;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 146 "nask.ll"
return token::_KW_FCOMPP;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 147 "nask.ll"
return token::_KW_FCOS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 148 "nask.ll"
return token::_KW_FDECSTP;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 149 "nask.ll"
return token::_KW_FDISI;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 150 "nask.ll"
return token::_KW_FDIV;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 151 "nask.ll"
return token::_KW_FDIVP;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 152 "nask.ll"
return token::_KW_FDIVR;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 153 "nask.ll"
return token::_KW_FDIVRP;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 154 "nask.ll"
return token::_KW_FENI;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 155 "nask.ll"
return token::_KW_FFREE;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 156 "nask.ll"
return token::_KW_FIADD;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 157 "nask.ll"
return token::_KW_FICOM;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 158 "nask.ll"
return token::_KW_FICOMP;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 159 "nask.ll"
return token::_KW_FIDIV;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 160 "nask.ll"
return token::_KW_FIDIVR;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 161 "nask.ll"
return token::_KW_FILD;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 162 "nask.ll"
return token::_KW_FILE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 163 "nask.ll"
return token::_KW_FIMUL;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 164 "nask.ll"
return token::_KW_FINCSTP;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 165 "nask.ll"
return token::_KW_FINIT;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 166 "nask.ll"
return token::_KW_FIST;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 167 "nask.ll"
return token::_KW_FISTP;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 168 "nask.ll"
return token::_KW_FISUB;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 169 "nask.ll"
return token::_KW_FISUBR;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 170 "nask.ll"
return token::_KW_FLD;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 171 "nask.ll"
return token::_KW_FLD1;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 172 "nask.ll"
return token::_KW_FLDCW;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 173 "nask.ll"
return token::_KW_FLDENV;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 174 "nask.ll"
return token::_KW_FLDL2E;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 175 "nask.ll"
return token::_KW_FLDL2T;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 176 "nask.ll"
return token::_KW_FLDLG2;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 177 "nask.ll"
return token::_KW_FLDLN2;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 178 "nask.ll"
return token::_KW_FLDPI;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 179 "nask.ll"
return token::_KW_FLDZ;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 180 "nask.ll"
return token::_KW_FMUL;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 181 "nask.ll"
return token::_KW_FMULP;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 182 "nask.ll"
return token::_KW_FNCLEX;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 183 "nask.ll"
return token::_KW_FNDISI;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 184 "nask.ll"
return token::_KW_FNENI;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 185 "nask.ll"
return token::_KW_FNINIT;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 186 "nask.ll"
return token::_KW_FNOP;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 187 "nask.ll"
return token::_KW_FNSAVE;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 188 "nask.ll"
return token::_KW_FNSTCW;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 189 "nask.ll"
return token::_KW_FNSTENV;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 190 "nask.ll"
return token::_KW_FNSTSW;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 191 "nask.ll"
return token::_KW_FORMAT;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 192 "nask.ll"
return token::_KW_FPATAN;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 193 "nask.ll"
return token::_KW_FPREM;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 194 "nask.ll"
return token::_KW_FPREM1;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 195 "nask.ll"
return token::_KW_FPTAN;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 196 "nask.ll"
return token::_KW_FRNDINT;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 197 "nask.ll"
return token::_KW_FRSTOR;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 198 "nask.ll"
return token::_KW_FSAVE;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 199 "nask.ll"
return token::_KW_FSCALE;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 200 "nask.ll"
return token::_KW_FSETPM;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 201 "nask.ll"
return token::_KW_FSIN;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 202 "nask.ll"
return token::_KW_FSINCOS;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 203 "nask.ll"
return token::_KW_FSQRT;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 204 "nask.ll"
return token::_KW_FST;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 205 "nask.ll"
return token::_KW_FSTCW;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 206 "nask.ll"
return token::_KW_FSTENV;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 207 "nask.ll"
return token::_KW_FSTP;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 208 "nask.ll"
return token::_KW_FSTSW;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 209 "nask.ll"
return token::_KW_FSUB;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 210 "nask.ll"
return token::_KW_FSUBP;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 211 "nask.ll"
return token::_KW_FSUBR;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 212 "nask.ll"
return token::_KW_FSUBRP;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 213 "nask.ll"
return token::_KW_FTST;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 214 "nask.ll"
return token::_KW_FUCOM;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 215 "nask.ll"
return token::_KW_FUCOMP;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 216 "nask.ll"
return token::_KW_FUCOMPP;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 217 "nask.ll"
return token::_KW_FXAM;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 218 "nask.ll"
return token::_KW_FXCH;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 219 "nask.ll"
return token::_KW_FXTRACT;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 220 "nask.ll"
return token::_KW_FYL2X;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 221 "nask.ll"
return token::_KW_FYL2XP1;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 222 "nask.ll"
return token::_KW_HLT;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 223 "nask.ll"
return token::_KW_IDIV;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 224 "nask.ll"
return token::_KW_IMUL;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 225 "nask.ll"
return token::_KW_IN;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 226 "nask.ll"
return token::_KW_INC;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 227 "nask.ll"
return token::_KW_INCO;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 228 "nask.ll"
return token::_KW_INSB;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 229 "nask.ll"
return token::_KW_INSD;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 230 "nask.ll"
return token::_KW_INSTRSET;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 231 "nask.ll"
return token::_KW_INSW;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 232 "nask.ll"
return token::_KW_INT;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 233 "nask.ll"
return token::_KW_INT3;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 234 "nask.ll"
return token::_KW_INTO;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 235 "nask.ll"
return token::_KW_INVD;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 236 "nask.ll"
return token::_KW_INVLPG;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 237 "nask.ll"
return token::_KW_IRET;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 238 "nask.ll"
return token::_KW_IRETD;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 239 "nask.ll"
return token::_KW_IRETW;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 240 "nask.ll"
return token::_KW_JA;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 241 "nask.ll"
return token::_KW_JAE;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 242 "nask.ll"
return token::_KW_JB;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 243 "nask.ll"
return token::_KW_JBE;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 244 "nask.ll"
return token::_KW_JC;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 245 "nask.ll"
return token::_KW_JCXZ;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 246 "nask.ll"
return token::_KW_JE;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 247 "nask.ll"
return token::_KW_JECXZ;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 248 "nask.ll"
return token::_KW_JG;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 249 "nask.ll"
return token::_KW_JGE;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 250 "nask.ll"
return token::_KW_JL;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 251 "nask.ll"
return token::_KW_JLE;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 252 "nask.ll"
return token::_KW_JMP;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 253 "nask.ll"
return token::_KW_JNA;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 254 "nask.ll"
return token::_KW_JNAE;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 255 "nask.ll"
return token::_KW_JNB;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 256 "nask.ll"
return token::_KW_JNBE;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 257 "nask.ll"
return token::_KW_JNC;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 258 "nask.ll"
return token::_KW_JNE;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 259 "nask.ll"
return token::_KW_JNG;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 260 "nask.ll"
return token::_KW_JNGE;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 261 "nask.ll"
return token::_KW_JNL;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 262 "nask.ll"
return token::_KW_JNLE;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 263 "nask.ll"
return token::_KW_JNO;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 264 "nask.ll"
return token::_KW_JNP;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 265 "nask.ll"
return token::_KW_JNS;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 266 "nask.ll"
return token::_KW_JNZ;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 267 "nask.ll"
return token::_KW_JO;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 268 "nask.ll"
return token::_KW_JP;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 269 "nask.ll"
return token::_KW_JPE;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 270 "nask.ll"
return token::_KW_JPO;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 271 "nask.ll"
return token::_KW_JS;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 272 "nask.ll"
return token::_KW_JZ;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 273 "nask.ll"
return token::_KW_LAHF;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 274 "nask.ll"
return token::_KW_LAR;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 275 "nask.ll"
return token::_KW_LDS;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 276 "nask.ll"
return token::_KW_LEA;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 277 "nask.ll"
return token::_KW_LEAVE;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 278 "nask.ll"
return token::_KW_LES;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 279 "nask.ll"
return token::_KW_LFS;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 280 "nask.ll"
return token::_KW_LGDT;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 281 "nask.ll"
return token::_KW_LGS;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 282 "nask.ll"
return token::_KW_LIDT;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 283 "nask.ll"
return token::_KW_LLDT;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 284 "nask.ll"
return token::_KW_LMSW;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 285 "nask.ll"
return token::_KW_LOCK;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 286 "nask.ll"
return token::_KW_LODSB;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 287 "nask.ll"
return token::_KW_LODSD;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 288 "nask.ll"
return token::_KW_LODSW;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 289 "nask.ll"
return token::_KW_LOOP;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 290 "nask.ll"
return token::_KW_LOOPE;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 291 "nask.ll"
return token::_KW_LOOPNE;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 292 "nask.ll"
return token::_KW_LOOPNZ;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 293 "nask.ll"
return token::_KW_LOOPZ;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 294 "nask.ll"
return token::_KW_LSL;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 295 "nask.ll"
return token::_KW_LSS;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 296 "nask.ll"
return token::_KW_LTR;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 297 "nask.ll"
return token::_KW_MOV;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 298 "nask.ll"
return token::_KW_MOVSB;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 299 "nask.ll"
return token::_KW_MOVSD;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 300 "nask.ll"
return token::_KW_MOVSW;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 301 "nask.ll"
return token::_KW_MOVSX;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 302 "nask.ll"
return token::_KW_MOVZX;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 303 "nask.ll"
return token::_KW_MUL;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 304 "nask.ll"
return token::_KW_NEG;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 305 "nask.ll"
return token::_KW_NOP;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 306 "nask.ll"
return token::_KW_NOT;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 307 "nask.ll"
return token::_KW_OPTIMIZE;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 308 "nask.ll"
return token::_KW_OR;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 309 "nask.ll"
return token::_KW_ORG;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 310 "nask.ll"
return token::_KW_OUT;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 311 "nask.ll"
return token::_KW_OUTSB;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 312 "nask.ll"
return token::_KW_OUTSD;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 313 "nask.ll"
return token::_KW_OUTSW;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 314 "nask.ll"
return token::_KW_PADDING;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 315 "nask.ll"
return token::_KW_PADSET;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 316 "nask.ll"
return token::_KW_POP;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 317 "nask.ll"
return token::_KW_POPA;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 318 "nask.ll"
return token::_KW_POPAD;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 319 "nask.ll"
return token::_KW_POPAW;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 320 "nask.ll"
return token::_KW_POPF;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 321 "nask.ll"
return token::_KW_POPFD;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 322 "nask.ll"
return token::_KW_POPFW;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 323 "nask.ll"
return token::_KW_PUSH;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 324 "nask.ll"
return token::_KW_PUSHA;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 325 "nask.ll"
return token::_KW_PUSHAD;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 326 "nask.ll"
return token::_KW_PUSHAW;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 327 "nask.ll"
return token::_KW_PUSHD;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 328 "nask.ll"
return token::_KW_PUSHF;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 329 "nask.ll"
return token::_KW_PUSHFD;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 330 "nask.ll"
return token::_KW_PUSHFW;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 331 "nask.ll"
return token::_KW_RCL;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 332 "nask.ll"
return token::_KW_RCR;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 333 "nask.ll"
return token::_KW_RDMSR;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 334 "nask.ll"
return token::_KW_RDPMC;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 335 "nask.ll"
return token::_KW_REP;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 336 "nask.ll"
return token::_KW_REPE;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 337 "nask.ll"
return token::_KW_REPNE;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 338 "nask.ll"
return token::_KW_REPNZ;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 339 "nask.ll"
return token::_KW_REPZ;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 340 "nask.ll"
return token::_KW_RESB;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 341 "nask.ll"
return token::_KW_RESD;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 342 "nask.ll"
return token::_KW_RESQ;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 343 "nask.ll"
return token::_KW_REST;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 344 "nask.ll"
return token::_KW_RESW;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 345 "nask.ll"
return token::_KW_RET;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 346 "nask.ll"
return token::_KW_RETF;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 347 "nask.ll"
return token::_KW_RETN;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 348 "nask.ll"
return token::_KW_ROL;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 349 "nask.ll"
return token::_KW_ROR;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 350 "nask.ll"
return token::_KW_RSM;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 351 "nask.ll"
return token::_KW_SAHF;
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 352 "nask.ll"
return token::_KW_SAL;
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 353 "nask.ll"
return token::_KW_SAR;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 354 "nask.ll"
return token::_KW_SBB;
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 355 "nask.ll"
return token::_KW_SCASB;
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 356 "nask.ll"
return token::_KW_SCASD;
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 357 "nask.ll"
return token::_KW_SCASW;
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 358 "nask.ll"
return token::_KW_SECTION;
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 359 "nask.ll"
return token::_KW_SETA;
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 360 "nask.ll"
return token::_KW_SETAE;
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 361 "nask.ll"
return token::_KW_SETB;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 362 "nask.ll"
return token::_KW_SETBE;
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 363 "nask.ll"
return token::_KW_SETC;
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 364 "nask.ll"
return token::_KW_SETE;
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 365 "nask.ll"
return token::_KW_SETG;
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 366 "nask.ll"
return token::_KW_SETGE;
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 367 "nask.ll"
return token::_KW_SETL;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 368 "nask.ll"
return token::_KW_SETLE;
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 369 "nask.ll"
return token::_KW_SETNA;
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 370 "nask.ll"
return token::_KW_SETNAE;
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 371 "nask.ll"
return token::_KW_SETNB;
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 372 "nask.ll"
return token::_KW_SETNBE;
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 373 "nask.ll"
return token::_KW_SETNC;
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 374 "nask.ll"
return token::_KW_SETNE;
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 375 "nask.ll"
return token::_KW_SETNG;
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 376 "nask.ll"
return token::_KW_SETNGE;
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 377 "nask.ll"
return token::_KW_SETNL;
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 378 "nask.ll"
return token::_KW_SETNLE;
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 379 "nask.ll"
return token::_KW_SETNO;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 380 "nask.ll"
return token::_KW_SETNP;
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 381 "nask.ll"
return token::_KW_SETNS;
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 382 "nask.ll"
return token::_KW_SETNZ;
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 383 "nask.ll"
return token::_KW_SETO;
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 384 "nask.ll"
return token::_KW_SETP;
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 385 "nask.ll"
return token::_KW_SETPE;
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 386 "nask.ll"
return token::_KW_SETPO;
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 387 "nask.ll"
return token::_KW_SETS;
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 388 "nask.ll"
return token::_KW_SETZ;
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 389 "nask.ll"
return token::_KW_SGDT;
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 390 "nask.ll"
return token::_KW_SHL;
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 391 "nask.ll"
return token::_KW_SHLD;
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 392 "nask.ll"
return token::_KW_SHR;
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 393 "nask.ll"
return token::_KW_SHRD;
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 394 "nask.ll"
return token::_KW_SIDT;
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 395 "nask.ll"
return token::_KW_SLDT;
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 396 "nask.ll"
return token::_KW_SMSW;
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 397 "nask.ll"
return token::_KW_STC;
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 398 "nask.ll"
return token::_KW_STD;
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 399 "nask.ll"
return token::_KW_STI;
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 400 "nask.ll"
return token::_KW_STOSB;
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 401 "nask.ll"
return token::_KW_STOSD;
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 402 "nask.ll"
return token::_KW_STOSW;
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 403 "nask.ll"
return token::_KW_STR;
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 404 "nask.ll"
return token::_KW_SUB;
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 405 "nask.ll"
return token::_KW_TEST;
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 406 "nask.ll"
return token::_KW_TIMES;
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 407 "nask.ll"
return token::_KW_UD2;
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 408 "nask.ll"
return token::_KW_VERR;
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 409 "nask.ll"
return token::_KW_VERW;
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 410 "nask.ll"
return token::_KW_WAIT;
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 411 "nask.ll"
return token::_KW_WBINVD;
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 412 "nask.ll"
return token::_KW_WORD;
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 413 "nask.ll"
return token::_KW_WRMSR;
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 414 "nask.ll"
return token::_KW_XADD;
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 415 "nask.ll"
return token::_KW_XCHG;
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 416 "nask.ll"
return token::_KW_XLATB;
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 417 "nask.ll"
return token::_KW_XOR;
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 419 "nask.ll"
BEGIN COMMENT; /* BNFC: block comment "#" "\\n" */
	YY_BREAK
case 344:
/* rule 344 can match eol */
YY_RULE_SETUP
#line 420 "nask.ll"
BEGIN INITIAL;
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 421 "nask.ll"
/* skip */;
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 422 "nask.ll"
BEGIN COMMENT1; /* BNFC: block comment ";" "\\n" */
	YY_BREAK
case 347:
/* rule 347 can match eol */
YY_RULE_SETUP
#line 423 "nask.ll"
BEGIN INITIAL;
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 424 "nask.ll"
/* skip */;
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 426 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_Hex;
	YY_BREAK
case 350:
/* rule 350 can match eol */
YY_RULE_SETUP
#line 427 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_Label;
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 428 "nask.ll"
LITERAL_BUFFER_CREATE(); BEGIN STRING;
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 429 "nask.ll"
BEGIN ESCAPED;
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 430 "nask.ll"
yylval->emplace<std::string>(LITERAL_BUFFER_HARVEST()); BEGIN INITIAL; return token::_STRING_;
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 431 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR(yytext[0]);
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 432 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\f'); BEGIN STRING;
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 433 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\n'); BEGIN STRING;
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 434 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\r'); BEGIN STRING;
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 435 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\t'); BEGIN STRING;
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 436 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('"');  BEGIN STRING;
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 437 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\\'); BEGIN STRING;
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 438 "nask.ll"
LITERAL_BUFFER_APPEND(yytext);    BEGIN STRING;
	YY_BREAK
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(ESCAPED):
#line 439 "nask.ll"
LITERAL_BUFFER_FREE(); return token::_ERROR_;
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 440 "nask.ll"
yylval->emplace<int>(atoi(yytext)); return token::_INTEGER_;
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 441 "nask.ll"
yylval->emplace<std::string>(yytext); return token::_IDENT_;
	YY_BREAK
case 364:
/* rule 364 can match eol */
YY_RULE_SETUP
#line 442 "nask.ll"
/* ignore white space. */;
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 443 "nask.ll"
return token::_ERROR_;
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 445 "nask.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3293 "lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CHAR):
case YY_STATE_EOF(CHARESC):
case YY_STATE_EOF(CHAREND):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(COMMENT1):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 731 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 731 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 730);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 445 "nask.ll"



NaskScanner::NaskScanner(std::istream *in)
    : yyFlexLexer(in)
{
    loc = new nask_::NaskParser::location_type();
}

NaskScanner::~NaskScanner()
{
}

/* This implementation of NaskFlexLexer::yylex() is required to fill the
 * vtable of the class NaskFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */



#ifdef yylex
#undef yylex
#endif

int yyFlexLexer::yylex()
{
    std::cerr << "in yyFlexLexer::yylex() !" << std::endl;
    return 0;
}



