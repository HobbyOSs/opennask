#line 2 "lexer.cc"
#include <memory>

#line 5 "lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer nask_FlexLexer

#ifdef yyalloc
#define nask_alloc_ALREADY_DEFINED
#else
#define yyalloc nask_alloc
#endif

#ifdef yyrealloc
#define nask_realloc_ALREADY_DEFINED
#else
#define yyrealloc nask_realloc
#endif

#ifdef yyfree
#define nask_free_ALREADY_DEFINED
#else
#define yyfree nask_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 380
#define YY_END_OF_BUFFER 381
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[749] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  381,  379,  378,  378,
      357,  349,  356,    9,  368,   10,   11,    7,    5,    4,
        6,    8,  377,  377,    3,  352,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,    1,    2,
      370,  380,  369,  375,  371,  372,  373,  374,  376,  360,
      359,  358,  367,  365,  366,  361,  362,  363,  364,  351,
      350,  354,  353,  356,  356,  377,    0,  356,  356,  356,
      356,  356,  356,  356,  356,  356,   28,  356,  356,  356,

      356,  356,  356,  356,  356,  356,   51,   52,  356,  356,
       55,   56,   57,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  154,
      356,  169,  171,  173,  175,  177,  179,  356,  356,  196,
      197,  200,  201,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  238,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,

      356,  356,  355,   12,   13,   14,   15,  356,   17,   18,
      356,   21,  356,  356,  356,   25,   26,  356,   29,   30,
       31,  356,  356,   34,   35,   36,   37,   38,  356,   40,
       41,  356,   47,   49,   50,   53,   54,  356,   59,  356,
       61,  356,  356,  356,  356,   67,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,   98,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  132,  356,  356,  356,  356,  356,  356,  356,  356,
      151,  356,  356,  155,  356,  161,  356,  356,  170,  172,

      356,  356,  178,  180,  181,  182,  184,  186,  187,  188,
      190,  192,  193,  194,  195,  198,  199,  356,  203,  204,
      205,  207,  208,  356,  210,  356,  356,  356,  356,  356,
      356,  223,  224,  225,  226,  232,  356,  234,  235,  236,
      356,  239,  240,  356,  246,  356,  261,  262,  356,  356,
      265,  356,  275,  278,  279,  280,  356,  282,  283,  284,
      356,  356,  356,  356,  320,  356,  323,  356,  356,  356,
      328,  329,  330,  356,  334,  335,  356,  356,  338,  356,
      356,  356,  356,  356,  356,  356,  356,  348,  355,  355,
      356,  356,   22,   23,  356,  356,   32,   33,   39,  356,

      356,  356,   48,  356,  356,  356,  356,   64,   65,   68,
      356,   70,  356,   72,   75,  356,  356,   78,   82,  356,
      356,  356,  356,   89,   90,  356,  356,  356,   94,  356,
       99,  356,  356,  356,  356,  107,  108,  356,  356,  356,
      356,  114,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  129,  356,  356,  356,  135,  356,  137,
      141,  356,  145,  146,  356,  356,  356,  152,  153,  156,
      157,  158,  356,  160,  162,  163,  164,  356,  166,  174,
      356,  183,  185,  189,  191,  202,  356,  209,  211,  212,
      213,  214,  356,  218,  356,  356,  233,  356,  356,  356,

      356,  247,  250,  253,  356,  356,  266,  356,  269,  270,
      271,  272,  273,  274,  276,  277,  281,  356,  356,  289,
      291,  293,  294,  295,  297,  356,  313,  314,  317,  318,
      319,  321,  356,  324,  325,  326,  327,  356,  336,  356,
      339,  340,  341,  356,  343,  356,  345,  346,  356,  356,
       19,   24,   27,   42,   43,   44,  356,   46,   58,   60,
      356,   63,   66,   69,   71,   73,  356,   77,   79,   80,
       83,   84,   85,   87,   91,  356,   93,   95,   96,  100,
      356,  356,  356,  356,  106,  109,  356,  356,  112,  356,
      356,  356,  356,  356,  356,  356,  121,  123,  356,  356,

      126,  356,  356,  356,  131,  133,  356,  136,  138,  139,
      142,  356,  148,  356,  356,  356,  167,  168,  176,  206,
      215,  216,  217,  219,  356,  222,  227,  228,  229,  230,
      231,  356,  241,  242,  243,  356,  356,  248,  249,  251,
      252,  254,  257,  258,  263,  264,  267,  268,  285,  286,
      287,  356,  290,  292,  296,  298,  299,  301,  303,  304,
      305,  307,  309,  310,  311,  312,  315,  316,  322,  331,
      332,  333,  337,  356,  344,  347,  356,   20,  356,   62,
       74,  356,   81,   86,   88,  356,   97,  101,  102,  103,
      104,  105,  110,  111,  113,  115,  116,  356,  118,  119,

      120,  122,  356,  125,  127,  128,  356,  134,  140,  143,
      356,  356,  150,  356,  165,  220,  221,  356,  356,  245,
      255,  256,  259,  260,  356,  300,  302,  306,  308,  342,
      356,   45,   76,   92,  117,  124,  130,  144,  147,  149,
      356,  356,  244,  288,   16,  159,  237,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    6,    7,    1,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   21,   21,   21,   21,   21,   22,   23,    1,
        1,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,    1,   53,    1,   54,   55,   56,   57,

       58,   59,   60,   60,   60,   60,   60,   60,   60,   61,
       60,   60,   60,   62,   60,   63,   60,   60,   60,   64,
       60,   60,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[65] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    1,    2,    2,    2,    2,
        2,    1,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2
    } ;

static const flex_int16_t yy_base[757] =
    {   0,
        0,    0,   57,   58,   64,   69,  106,  105,   65,   67,
       78,   83,  101,   97,   95,   82,   84, 3466, 3466, 3466,
     3466, 3466,   68, 3466, 3466, 3466, 3466, 3466, 3466, 3466,
     3466, 3466,   58,   71, 3466, 3466,  132,  145,  155,  178,
       96,  206,  100,  146,  231,  261,  287,  221,  169,  251,
      303,  325,  373,  327,   97,  211,  320,  376, 3466, 3466,
     3466, 3466, 3466, 3466, 3466, 3466, 3466, 3466, 3466, 3466,
     3466, 3466, 3466, 3466, 3466, 3466, 3466, 3466, 3466, 3466,
     3466, 3466, 3466,   95,  156,   76,  413,  333,  328,  254,
      208,  159,  267,  331,  362,  406,  438,  370,  413,  412,

      445,  430,  448,  440,  475,  471,  482,  488,  490,  493,
      494,  500,  504,  505,  506,  508,  516,  539,  556,  550,
      561,  562,  519,  570,  595,  534,  598,  567,  613,  623,
      671,  617,  564,  629,  627,  635,  628,  568,  643,  663,
      679,  685,  695,  678,  703,  706,  711,  713,  743,  677,
      727,  721,  731,  745,  735,  748,  747,  781,  787,  788,
      789,  791,  801,  804,  805,  818,  822,  820,  824,  832,
      845,  849,  850,  855,  866,  876,  878,  881,  877,  908,
      880,  894,  884,  926,  929,  930,  936,  944,  946,  940,
      954,  956,  962,  960,  970,  984,  985,  988, 1002,  989,

     1004,  999,   93, 1006, 1012, 1016, 1019, 1024, 1029, 1030,
     1041, 1043, 1045, 1048, 1055, 1058, 1060, 1061, 1072, 1073,
     1078, 1089, 1085, 1091, 1097, 1101, 1103, 1104, 1109, 1115,
     1117, 1121, 1133, 1122, 1128, 1134, 1140, 1154, 1152, 1157,
     1165, 1173, 1167, 1177, 1184, 1183, 1185, 1191, 1198, 1217,
     1210, 1202, 1216, 1209, 1244, 1227, 1233, 1241, 1251, 1259,
     1261, 1262, 1283, 1275, 1285, 1293, 1311, 1315, 1301, 1318,
     1329, 1335, 1328, 1343, 1345, 1347, 1360, 1368, 1364, 1371,
     1370, 1388, 1387, 1389, 1391, 1395, 1403, 1413, 1420, 1430,
     1431, 1432, 1437, 1443, 1455, 1454, 1444, 1461, 1447, 1472,

     1480, 1487, 1488, 1500, 1503, 1504, 1507, 1505, 1506, 1511,
     1521, 1522, 1532, 1536, 1537, 1539, 1540, 1555, 1556, 1557,
     1561, 1562, 1563, 1576, 1573, 1580, 1581, 1592, 1588, 1598,
     1596, 1606, 1612, 1622, 1624, 1637, 1638, 1640, 1641, 1642,
     1648, 1652, 1654, 1655, 1694, 1668, 1666, 1672, 1696, 1697,
     1707, 1721, 1700, 1724, 1725, 1726, 1728, 1736, 1739, 1753,
     1756, 1757, 1787, 1778, 1767, 1782, 1780, 1784, 1799, 1813,
     1781, 1824, 1826, 1832, 1834, 1838, 1839, 1840, 1842, 1855,
     1845, 1852, 1856, 1857, 1863, 1850, 1869, 1858, 3466,   74,
     1891, 1898, 1908, 1909, 1912, 1913, 1914, 1915, 1919, 1930,

     1927, 1931, 1925, 1932, 1948, 1954, 1964, 1935, 1958, 1971,
     1975, 1981, 1985, 1987, 1988, 1993, 1998, 2003, 2000, 2021,
     2004, 2014, 2010, 2006, 2033, 2037, 2039, 2054, 2055, 2058,
     2056, 2060, 2062, 2095, 2070, 2073, 2078, 2076, 2074, 2090,
     2106, 2113, 2118, 2130, 2129, 2131, 2124, 2136, 2135, 2155,
     2134, 2159, 2163, 2170, 2175, 2180, 2185, 2186, 2191, 2204,
     2198, 2199, 2205, 2209, 2225, 2219, 2226, 2215, 2221, 2240,
     2241, 2248, 2254, 2255, 2258, 2261, 2265, 2271, 2269, 2275,
     2276, 2277, 2282, 2283, 2294, 2297, 2298, 2317, 2325, 2327,
     2328, 2331, 2333, 2338, 2346, 2348, 2349, 2353, 2382, 2350,

     2368, 2398, 2399, 2405, 2402, 2404, 2370, 2412, 2409, 2416,
     2427, 2431, 2432, 2433, 2435, 2448, 2453, 2464, 2458, 2466,
     2468, 2460, 2461, 2472, 2487, 2517, 2493, 2501, 2497, 2512,
     2516, 2517, 2518, 2520, 2522, 2538, 2542, 2552, 2557, 2570,
     2568, 2572, 2574, 2575, 2578, 2588, 2582, 2586, 2593, 2594,
     2601, 2596, 2598, 2600, 2618, 2628, 2630, 2642, 2644, 2649,
     2650, 2652, 2654, 2657, 2660, 2662, 2673, 2667, 2670, 2678,
     2674, 2684, 2685, 2703, 2706, 2719, 2713, 2724, 2726, 2727,
     2730, 2742, 2734, 2745, 2737, 2740, 2759, 2767, 2748, 2782,
     2763, 2788, 2790, 2794, 2796, 2807, 2808, 2802, 2809, 2804,

     2815, 2822, 2823, 2827, 2848, 2852, 2858, 2863, 2864, 2868,
     2871, 2866, 2876, 2878, 2881, 2879, 2882, 2883, 2884, 2889,
     2912, 2924, 2932, 2934, 2935, 2937, 2938, 2939, 2940, 2942,
     2945, 2964, 2952, 2953, 2956, 2960, 2958, 2963, 2966, 2968,
     2974, 2988, 2993, 3008, 3014, 3016, 3018, 3022, 3024, 3030,
     3032, 3034, 3036, 3037, 3038, 3042, 3050, 3053, 3049, 3064,
     3082, 3086, 3067, 3078, 3090, 3092, 3093, 3094, 3098, 3106,
     3109, 3110, 3112, 3113, 3117, 3123, 3135, 3127, 3138, 3142,
     3143, 3146, 3149, 3154, 3166, 3167, 3168, 3169, 3171, 3183,
     3186, 3188, 3194, 3198, 3199, 3202, 3210, 3212, 3217, 3220,

     3222, 3223, 3225, 3227, 3228, 3238, 3243, 3239, 3244, 3254,
     3256, 3268, 3273, 3283, 3288, 3289, 3295, 3300, 3299, 3302,
     3307, 3310, 3312, 3313, 3317, 3318, 3324, 3325, 3328, 3329,
     3331, 3332, 3352, 3358, 3368, 3373, 3374, 3380, 3381, 3384,
     3385, 3386, 3387, 3388, 3391, 3392, 3398, 3466, 3451, 3453,
     3455, 3457, 3459, 3461, 3463,   71
    } ;

static const flex_int16_t yy_def[757] =
    {   0,
      748,    1,  749,  749,  750,  750,  751,  751,  752,  752,
      753,  753,  754,  754,  755,  755,  748,  748,  748,  748,
      748,  748,  756,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  756,  756,   37,   37,
      756,   37,  756,  756,  756,   37,   37,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  756,  756,  748,  748,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,

      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,   37,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  127,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  127,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,

      756,  756,   87,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,

      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  149,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  748,  748,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,

      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,

      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  149,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,

      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,

      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,    0,  748,  748,
      748,  748,  748,  748,  748,  748
    } ;

static const flex_int16_t yy_nxt[3531] =
    {   0,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   23,   32,   33,   34,   34,   34,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   23,   47,   48,   49,   50,   51,   23,
       52,   53,   54,   55,   56,   57,   58,   23,   23,   59,
       18,   60,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   62,   62,   62,   62,   71,   62,
       71,   62,   85,   84,   86,   86,   86,   86,   86,  389,
       62,   74,   84,  748,   83,   62,   74,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   83,  389,   81,

       84,   84,   84,   81,   87,   84,  390,   63,   63,   84,
       84,   84,   69,   69,   84,   72,  748,   72,  748,  748,
       84,   87,   65,  193,   66,   67,   68,   65,   75,   66,
       67,   68,  114,   75,  136,  115,   76,   84,   77,   78,
       79,   76,  116,   77,   78,   79,   84,   84,   84,   84,
       84,   84,   84,  748,  748,   88,   89,  748,   90,   84,
       84,   84,  748,  748,   84,  748,   91,  748,   92,  748,
       84,  748,   93,   84,   84,  748,   94,  748,   99,  100,
      137,  101,   95,   84,   84,  212,   96,   97,  748,  102,
      103,   85,   98,  104,  748,   85,  167,   84,   84,  748,

      105,  106,  107,  748,  108,  109,  168,  748,   84,  110,
      748,   84,   85,   84,   85,  748,   84,  111,   85,  748,
      112,   84,   84,  113,  117,   84,   84,  748,  748,  118,
      119,  120,  121,  122,  123,   84,   84,  124,  194,  211,
      125,  126,  127,  128,  129,   84,  130,  131,  132,  133,
      748,  748,  134,  135,  748,  748,   84,  138,  165,   84,
       84,  748,  748,   84,  166,   84,  139,  140,   84,  748,
      748,  141,   84,   84,  748,  748,  748,  748,  748,  209,
      210,   84,  748,   84,  142,  143,  144,   85,  145,  169,
      146,  170,  748,  748,  171,  147,  148,  149,  150,  151,

      748,   85,  152,   84,  748,  213,   84,  748,   84,  153,
      154,   85,  748,  155,  156,  157,  158,   84,  159,   84,
      748,  160,  161,   85,  162,   84,  172,   85,  163,  164,
       84,  748,   84,   84,   84,  748,   84,  748,   84,   84,
      173,   84,   84,  195,  196,   84,  174,   84,  748,  748,
      175,  176,  177,  748,  191,   84,  204,  197,  192,  205,
      198,  748,  178,  748,  748,  748,  179,   84,  206,  208,
      748,  748,   84,  214,  207,   84,   84,   84,   84,   84,
       84,   84,  748,   84,   84,   84,  748,   84,  748,  748,
       84,  748,  748,  748,  748,  748,  180,  181,  182,  199,

      183,  200,  184,  185,  186,  215,  748,  187,  188,  748,
      201,   84,  222,  202,   84,  189,  190,   84,   84,  748,
       84,  748,   84,  748,  748,   84,   84,   84,   84,  203,
      203,  203,  203,  203,  216,   84,  203,  203,  203,  203,
      203,  203,  748,   84,   84,   84,  217,  223,  748,  748,
       84,  218,   84,   84,   84,  226,  227,  224,   84,   84,
      748,  228,   84,  219,   84,   84,  203,  203,  203,  203,
      203,  203,  229,  230,  748,  748,   84,  748,  220,  221,
       84,  748,   84,  232,  225,   84,  231,   84,  748,   84,
       84,  748,   84,   84,  234,   84,   84,   84,   84,   84,

       84,  233,   84,  748,   84,   84,  748,   84,   84,   84,
       84,   84,  235,   84,   84,  236,  748,  748,   84,   84,
       84,   84,   84,   84,   84,  748,  748,   84,  748,  748,
       84,  239,  748,   84,   84,  748,  748,  237,  748,   84,
       84,  238,   84,  748,   84,   84,   84,  240,   84,  241,
      242,  748,   84,   84,  748,   84,   84,   84,   84,  255,
       84,   84,  243,  244,   84,  245,   84,   84,   84,   84,
       84,   84,   84,   84,  748,   84,   84,  264,   84,  246,
      249,   84,   84,  748,  250,  748,   84,  251,  252,  285,
      247,   84,  253,  256,   85,  257,  258,  248,  254,  292,

       84,  748,   84,   84,  259,  260,  261,  271,   84,   84,
       85,  262,   84,   84,   84,  748,   84,  748,   84,   84,
       84,  263,   84,  265,  266,  267,  748,   84,   84,  268,
      748,   84,   84,   84,   84,  269,  272,   84,  748,  270,
       84,   84,   84,   84,  748,  748,  748,   84,   84,   84,
       84,  748,  286,  273,  287,  274,  748,   84,  284,  275,
      748,  289,  748,  748,  276,   84,  748,  748,   84,   84,
      291,  288,  290,  748,  748,   84,   84,   84,  748,   84,
       84,   84,   84,   84,   84,   84,  293,   84,  294,  748,
       84,   84,   84,   84,  277,   84,  278,  748,  279,   84,

       84,  748,  280,  748,  295,  296,  298,  297,   84,   84,
      281,   84,  299,  282,  283,   84,   84,   84,   84,  748,
       84,  748,  300,   84,  301,   84,   84,   84,  302,   84,
       84,   84,   84,  303,  748,   84,   84,   84,  304,  748,
       84,   84,  748,  748,  748,   84,  748,   84,  748,   84,
       84,  305,   84,   84,  316,   84,  748,  748,   84,   84,
      748,   84,   84,   84,  317,   84,  306,  307,  308,   85,
      309,  321,  310,   84,   85,  318,  320,  311,  748,   84,
      312,  313,  748,   84,  314,  319,   84,   84,  323,  322,
      748,  315,   84,   84,   84,   84,   84,   84,  748,   84,

       84,   84,   84,   84,  748,   84,   84,  324,  748,   84,
       84,  748,  748,  326,  327,   84,  329,  330,   84,   84,
      748,  748,  325,   84,  748,   84,  748,   84,  331,   84,
      328,  748,   84,   84,   84,  332,   84,   84,   84,   84,
       84,   84,  333,   84,  334,  337,   84,  748,  748,  335,
       84,  338,  336,   84,   84,   84,   84,   84,  339,   84,
       84,  342,  340,   84,   84,  748,  341,  748,  748,   84,
       84,   84,   84,  748,   84,  344,   84,  748,  748,  748,
       84,   84,   84,   84,   84,   84,   84,  343,  345,   84,
       84,   84,   84,  748,   84,   84,  346,   84,   84,   84,

      347,   84,   84,  748,  360,  748,  348,   84,   84,  362,
      748,  349,  356,   84,  350,  354,  351,  361,   84,  352,
      353,  355,   84,  748,  748,  748,  363,  748,   84,   84,
       84,   84,   84,   84,   84,   84,   84,  748,  357,  748,
       84,   84,  358,   84,   84,   84,   84,  748,  359,   84,
       84,  748,  364,  748,   84,  748,  368,  748,   84,   84,
       84,   84,  369,  365,  376,   84,  366,   84,   84,  367,
       84,  371,  372,   85,   84,   84,   84,  373,   84,  748,
      379,   84,   84,  374,   84,  370,  375,   85,   84,   84,
       84,  378,   84,   84,   84,  377,   84,  748,   84,   84,

      380,  381,   84,   84,   84,  748,   84,   84,   84,   84,
      748,   84,   84,   84,   84,  382,   84,   84,   84,  386,
       84,   84,   84,  384,   84,  383,   84,  387,  385,   84,
       84,  748,  748,   84,   84,   84,   84,   84,   84,  388,
       84,   84,  748,   84,   84,  748,   84,  748,   84,  748,
       84,   84,  748,   84,   84,   84,   84,   84,   84,   84,
       84,  391,   84,   84,   84,   84,   84,  748,   84,   84,
      392,   84,   84,  748,   84,   84,   84,   84,   84,  393,
      748,   84,   84,   84,  396,  748,   84,   84,  748,  394,
       84,  395,   84,   84,   84,   84,   84,   84,  748,   84,

       84,  748,   84,   84,  748,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,  397,   84,   84,  398,
       84,  748,   84,   84,   84,   84,   84,   84,  748,   84,
       84,   84,  748,   84,  748,   84,   84,   84,   84,   84,
      748,   84,   84,   84,  748,   84,  748,   84,   84,   84,
      399,  748,  402,   84,   84,   84,   84,   84,  400,   84,
      403,   84,   84,  401,  748,  748,   84,   84,   84,   84,
       84,   84,   84,   84,   84,  748,  748,  748,   84,   84,
       84,   84,   84,  748,  405,   84,   84,   84,   84,   84,
       84,   84,   84,  748,  404,  748,   84,   84,   84,   84,

      406,  748,  407,   84,   84,   84,   84,   84,  748,   84,
      409,  410,   84,  748,   84,   84,   84,   84,  408,   84,
      748,   84,   84,   84,   84,   84,  748,  416,  748,   84,
       84,   84,   84,  411,  748,   84,   84,   84,   84,  412,
      419,   84,  748,   84,  413,  414,   84,   84,  748,   84,
       84,  415,  748,  421,   84,   84,   84,  417,   84,  748,
      418,   84,   84,  748,   84,   84,   84,   84,   84,   84,
      422,  420,  423,   84,  748,   84,   84,  424,  425,   84,
       84,  748,  748,  748,  748,   84,  427,  748,   84,   84,
       84,  748,  428,   84,  748,  748,   84,   84,   84,   84,

      431,  748,  426,   84,  429,  430,   84,   84,  432,  437,
      433,   84,  748,   84,   84,   84,   84,  434,  748,  438,
       84,  435,  748,   84,  439,   84,  748,   84,  748,   84,
      748,  436,   84,   84,   84,   84,  748,   84,  748,  442,
       84,  443,   84,   84,  748,   84,  748,  440,   84,   84,
       84,  441,   84,   84,  748,  447,  748,   84,  748,   84,
      444,   84,  748,   84,  445,   84,  448,   84,  748,   84,
       84,  449,  748,   84,   84,   84,   84,  446,   84,  748,
       84,   84,   84,  748,   84,   84,  748,   84,  748,  450,
      748,  452,   84,   84,   84,   84,   84,   84,  748,   84,

       84,   84,   84,   84,  451,   84,  453,  454,   84,   84,
      455,  460,   84,  456,  748,  457,   84,   84,   84,  748,
       84,  748,   84,   84,  748,   84,  458,   84,  462,  459,
      463,  461,  748,  464,   84,   84,   84,   84,  466,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
      748,   84,   84,  465,  467,   84,  748,   84,   84,   84,
       84,   84,  748,  748,  748,   84,   84,  748,   84,   84,
      477,  469,   84,  475,  748,   84,  468,   84,  478,  471,
      470,  472,   84,   84,   84,   84,   84,  748,  748,   84,
      748,  476,   84,   84,   84,   84,   84,  473,  748,   84,

      474,   84,   84,  479,  748,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,  748,   84,   84,   84,   84,
       84,   84,  748,  748,   84,   84,   84,   84,  480,  748,
      748,  482,   84,  481,  483,   84,   84,   84,  484,   84,
       84,   84,   84,  748,   84,   84,   84,  748,  485,  748,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,  748,  748,   84,   84,   84,   84,
       84,   84,  748,   84,   84,   84,   84,   84,   84,  748,
      748,   84,  748,  486,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,  748,   84,  748,  748,

      748,   84,   84,   84,  748,  487,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,  748,   84,  488,  748,
       84,  492,  489,  490,  748,   84,   84,   84,   84,   84,
      748,  748,   84,   84,  494,  748,   84,  491,   84,  493,
       84,  748,   84,   84,   84,   84,   84,   84,   84,  748,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,  748,   84,  748,   84,  495,   84,  748,   84,   84,
      748,   84,  496,   84,   84,  748,   84,   84,  497,  498,
       84,  500,   84,  748,  748,  748,   84,  748,  748,   84,
       84,  748,   84,   84,   84,  499,  501,  748,  504,   84,

       84,   84,   84,  748,   84,   84,   84,   84,   84,  748,
       84,   84,   84,  748,   84,  748,  748,  502,   84,  748,
       84,   84,  503,  748,   84,  748,   84,  748,  515,   84,
       84,   84,  506,   84,  507,   84,  516,  505,   84,   84,
       84,   84,   84,  508,   84,  510,   84,  511,   84,   84,
       84,  748,   84,   84,  748,  509,  517,  748,   84,   84,
      512,   84,   84,  513,  748,  748,  514,   84,  748,  748,
       84,   84,   84,   84,  748,  748,   84,   84,   84,  748,
       84,   84,  748,   84,  748,   84,   84,   84,   84,   84,
      748,   84,   84,  532,   84,   84,   84,  518,   84,  519,

      748,  748,  748,  748,   84,   84,  534,  748,   84,   84,
      520,  521,  522,   84,  523,  748,  524,  748,   84,   84,
      531,  525,  533,  526,  527,  528,  535,   84,  529,   84,
       84,   84,   84,   84,   84,  530,   84,   84,   84,   84,
       84,  536,  748,   84,   84,   84,   84,   84,   84,  748,
       84,   84,   84,   84,   84,   84,   84,   84,  537,   84,
       84,   84,   84,   84,   84,   84,   84,  540,   84,   84,
       84,   84,   84,  538,   84,  748,   84,   84,   84,  548,
      748,  539,  545,   84,   84,  748,   84,  543,  544,  547,
       84,   84,   84,  748,   84,  541,   84,   84,  546,  748,

      542,  748,   84,   84,   84,   84,  748,   84,   84,   84,
       84,  549,   84,   84,   84,   84,  748,   84,   84,   84,
       84,   84,   84,   84,   84,  550,   84,   84,   84,   84,
       84,  748,   84,   84,  551,   84,   84,   84,  552,   84,
       84,   84,  748,   84,   84,   84,   84,  748,  748,   84,
       84,  553,  557,   84,  554,  748,  555,  558,  559,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
      748,   84,   84,  748,  748,  556,   84,   84,   84,   84,
       84,  562,   84,   84,   84,   84,   84,   84,  560,   84,
       84,  748,   84,   84,  561,   84,  563,  748,   84,   84,

       84,   84,   84,   84,  748,   84,   84,   84,   84,   84,
       84,   84,   84,  564,   84,   84,   84,   84,   84,   84,
       84,  748,  748,   84,   84,  566,   84,   84,   84,  568,
      572,  565,  748,   84,  567,   84,  748,   84,   84,   84,
       84,  569,   84,  570,   84,   84,  748,   84,  571,  573,
       84,   84,   84,   84,  574,   84,   84,  748,   84,   84,
       84,   84,   84,   84,  748,   84,   84,   84,   84,   84,
       84,  575,   84,   84,   84,   84,   84,  748,   84,   84,
      576,   84,  579,   84,   84,   84,  748,   84,   84,   84,
       84,   84,   84,  578,  748,   84,  577,  748,  581,  748,

       84,  585,  748,  587,   84,  580,   84,   84,   84,   84,
       84,   84,   84,  582,   84,  588,  586,  748,   84,  748,
       84,  589,   84,   84,  583,   84,   84,   84,   84,   84,
       84,  584,   84,  748,   84,   84,   84,  590,   84,   84,
       84,   84,   84,   84,   84,   84,  748,   84,   84,   84,
       84,  748,  595,  748,  596,  592,  748,  593,   84,  597,
       84,  601,  591,  748,   84,   84,  599,  748,   84,   84,
       84,  594,  598,   84,  748,   84,   84,   84,  748,  748,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,  600,  602,   84,  604,   84,  748,  748,   84,

       84,  603,  748,   84,   84,   84,  748,   84,  748,   84,
       84,   84,   84,   84,   84,   84,  748,  605,   84,   84,
       84,  607,   84,   84,   84,  606,   84,   84,  748,   84,
       84,   84,   84,   84,  611,   84,  608,   84,   84,   84,
       84,  748,  609,   84,  610,   84,   84,  748,  612,  614,
       84,   84,  748,   84,   84,   84,   84,   84,  748,   84,
       84,   84,   84,   84,  748,  613,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,  748,   84,  748,   84,   84,   84,
       84,   84,   84,   84,  615,  617,   84,   84,  748,   84,

       84,  748,   84,   84,  748,  748,   84,   84,   84,  616,
       84,   84,   84,   84,  618,  748,  748,   84,  748,  748,
      748,   84,   84,   84,  619,  620,  748,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,  748,   84,   84,
      748,   84,   84,   84,  748,   84,   84,   84,  748,   84,
       84,   84,   84,   84,   84,   84,  748,  621,   84,  622,
       84,  748,   84,   84,   84,  624,  748,   84,  748,   84,
      627,  748,  628,   84,  625,   84,  748,   84,  623,   84,
       84,  636,   84,   84,   84,   84,  626,   84,  632,  748,
       84,  629,  630,  748,  631,  637,   84,  748,   84,  748,

       84,   84,   84,   84,   84,   84,  633,   84,  634,   84,
       84,  748,   84,   84,   84,  748,   84,   84,   84,   84,
       84,   84,   84,   84,  638,  640,   84,  635,  642,  646,
       84,  643,   84,  644,   84,  748,   84,   84,   84,  647,
       84,   84,  645,  639,  641,   84,   84,   84,  748,   84,
       84,   84,  748,   84,   84,  748,   84,   84,   84,  748,
      648,   84,   84,   84,   84,   84,   84,   84,   84,   84,
      748,   84,   84,   84,   84,   84,  748,   84,   84,   84,
       84,  748,   84,   84,   84,   84,   84,   84,  649,  652,
      650,  748,   84,  653,  748,  654,  748,  748,   84,  655,

       84,   84,   84,  748,  748,   84,   84,   84,  748,  651,
       84,   84,   84,   84,  656,   84,   84,   84,   84,  748,
       84,   84,   84,   84,   84,   84,   84,   84,  667,  748,
       84,   84,   84,  748,   84,  748,   84,  748,  668,   84,
      657,  658,  659,   84,  660,   84,  661,   84,  748,   84,
      748,  662,   84,   84,  663,  664,   84,   84,  665,  748,
      669,  748,   84,  748,   84,  666,   84,  748,   84,   84,
       84,   84,   84,   84,   84,   84,  670,   84,  671,   84,
       84,  748,   84,   84,   84,  748,   84,   84,   84,   84,
       84,   84,   84,   84,   84,  748,   84,  672,   84,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,  673,   84,  748,   84,   84,  748,  676,  748,  674,
       84,  748,   84,   84,   84,  678,   84,   84,  675,  748,
       84,  748,   84,   84,   84,   84,  748,  677,   84,  748,
       84,  748,   84,  748,   84,   84,   84,   84,   84,   84,
       84,  748,   84,   84,   84,   84,   84,   84,   84,   84,
      679,  748,   84,   84,   84,   84,   84,   84,   84,  748,
       84,   84,   84,  748,   84,   84,   84,  748,   84,   84,
       84,   84,   84,   84,   84,  748,  680,   84,   84,   84,
       84,  748,   84,  748,   84,  748,   84,  748,   84,   84,

      681,   84,   84,  748,   84,  748,   84,  748,   84,   84,
      748,   84,   84,  748,   84,  682,  683,   84,   84,   84,
       84,  748,   84,  684,   84,   84,   84,   84,  748,   84,
       84,   84,   84,   84,  748,   84,   84,   84,   84,   84,
       84,   84,   84,  685,   84,   84,  748,   84,   84,  748,
       84,   84,  691,   84,   84,   84,   84,  748,   84,   84,
      748,  686,   84,  692,   84,   84,  687,  748,   84,  689,
      748,   84,   84,   84,  688,  748,   84,   84,   84,   84,
      748,   84,   84,  748,  690,  748,   84,   84,  748,   84,
      696,  748,   84,   84,   84,   84,   84,   84,  694,   84,

       84,   84,   84,  748,   84,  693,  748,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,  748,   84,   84,
       84,   84,   84,   84,  695,  702,  698,   84,   84,   84,
      748,  748,   84,  697,   84,  748,   84,   84,  700,  699,
       84,   84,   84,  701,  704,  703,   84,  748,   84,  705,
      748,  748,  748,   84,   84,  748,   84,   84,  706,   84,
       84,   84,   84,   84,  707,  748,   84,   84,   84,   84,
      748,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,  711,   84,   84,   84,   84,   84,   84,   84,  748,

       84,  748,  708,   84,   84,  748,  709,  748,  715,  710,
       84,  748,  713,  748,  712,   84,   84,   84,   84,  748,
       84,  748,  714,   84,  748,  748,   84,  748,   84,   84,
       84,   84,  748,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,  748,   84,   84,   84,   84,
      748,   84,  716,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,  748,   84,   84,   84,   84,
       84,  748,   84,  717,   84,  748,   84,   84,   84,   84,
       84,   84,   84,   84,   84,  718,  719,   84,   84,  748,

      720,  748,   84,  748,   84,   84,  748,   84,   84,  748,
       84,  748,   84,   84,  721,   84,   84,  748,   84,   84,
       84,   84,   84,   84,  748,  748,   84,   84,   84,   84,
       84,  748,   84,  722,  723,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,  748,
       84,   84,   84,  724,   84,   84,   84,  748,   84,  748,
       84,  748,  748,   84,   84,  748,   84,   84,   84,   84,
       84,  725,   84,  748,   84,  748,   84,  726,   84,  748,
      727,   84,   84,   84,   84,  748,   84,   84,   84,   84,
       84,   84,   84,  748,   84,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,  728,
      748,   84,   84,  729,   84,   84,   84,   84,   84,   84,
       84,  748,   84,   84,   84,  748,   84,   84,   84,  748,
       84,   84,   84,  748,   84,  748,  748,   84,   84,  730,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,  748,   84,  748,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,  748,  732,   84,   84,
      748,   84,   84,   84,   84,   84,   84,  731,  748,   84,
       84,   84,   84,   84,  733,   84,  748,   84,   84,  748,
       84,   84,  748,   84,   84,   84,  748,   84,   84,   84,

       84,   84,   84,   84,   84,  734,   84,   84,   84,  748,
      748,  748,   84,   84,  748,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,  748,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,  748,   84,  748,   84,   84,
       84,   84,   84,   84,   84,  748,  735,   84,   84,   84,
      748,   84,   84,  748,   84,  748,  748,  736,   84,   84,
       84,  748,   84,   84,   84,   84,  748,   84,   84,   84,
       84,  748,   84,  748,  737,  740,  748,   84,   84,  748,
       84,   84,  738,   84,   84,   84,   84,   84,  739,  748,

       84,  748,   84,   84,   84,   84,   84,   84,   84,   84,
      741,  748,   84,   84,   84,   84,   84,   84,   84,  748,
       84,   84,   84,   84,   84,   84,   84,   84,  743,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,  748,   84,   84,   84,  742,  748,
      748,   84,   84,  744,   84,  748,  748,   84,  745,   84,
      748,  748,   84,   84,   84,   84,   84,  748,  748,   84,
       84,  748,   84,   84,  748,  748,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   84,   84,  748,  748,  748,
       84,  748,   84,  747,  748,  748,  748,  748,  748,  748,
       84,  748,  748,  748,  748,   84,   84,  746,  748,  748,
      748,  748,   84,   84,  748,  748,   84,   84,   84,   84,
       84,  748,  748,   84,   84,  748,  748,  748,  748,  748,
       84,   61,   61,   64,   64,   62,   62,   70,   70,   73,
       73,   80,   80,   82,   82,   17,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,

      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748
    } ;

static const flex_int16_t yy_chk[3531] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    4,    5,    9,    9,   10,
       10,    6,  756,   23,   33,   33,   33,   33,   33,  390,
       11,   11,   23,   17,   16,   12,   12,   34,   34,   34,
       34,   34,   86,   86,   86,   86,   86,   15,  203,   14,

       84,   41,   55,   13,   33,   43,  203,    3,    4,   84,
       41,   55,    8,    7,   43,    9,    0,   10,    0,    0,
       23,   33,    5,   55,    5,    5,    5,    6,   11,    6,
        6,    6,   41,   12,   43,   41,   11,   37,   11,   11,
       11,   12,   41,   12,   12,   12,   37,   84,   41,   55,
       38,   44,   43,    0,    0,   37,   37,    0,   37,   38,
       44,   85,    0,    0,   92,    0,   37,    0,   37,    0,
       85,    0,   37,   92,   49,    0,   38,    0,   39,   39,
       44,   39,   38,   49,   37,   92,   38,   38,    0,   39,
       39,   39,   38,   39,    0,   39,   49,   38,   44,    0,

       39,   40,   40,    0,   40,   40,   49,    0,   85,   40,
        0,   92,   40,   91,   40,    0,   56,   40,   40,    0,
       40,   49,   91,   40,   42,   56,   48,    0,    0,   42,
       42,   42,   42,   42,   42,   48,   45,   42,   56,   91,
       42,   42,   42,   42,   42,   45,   42,   42,   42,   42,
        0,    0,   42,   42,    0,    0,   50,   45,   48,   90,
       91,    0,    0,   56,   48,   50,   45,   45,   90,    0,
        0,   45,   93,   48,    0,    0,    0,    0,    0,   90,
       90,   93,    0,   45,   46,   46,   46,   46,   46,   50,
       46,   50,    0,    0,   50,   46,   46,   46,   46,   46,

        0,   46,   46,   50,    0,   93,   90,    0,   51,   46,
       47,   47,    0,   47,   47,   47,   47,   51,   47,   93,
        0,   47,   47,   47,   47,   57,   51,   47,   47,   47,
       52,    0,   54,   89,   57,    0,   94,    0,   88,   52,
       51,   54,   89,   57,   57,   94,   51,   88,    0,    0,
       52,   52,   52,    0,   54,   51,   88,   57,   54,   88,
       57,    0,   52,    0,    0,    0,   52,   95,   88,   89,
        0,    0,   57,   94,   88,   98,   95,   52,   53,   54,
       89,   58,    0,   94,   98,   88,    0,   53,    0,    0,
       58,    0,    0,    0,    0,    0,   53,   53,   53,   58,

       53,   58,   53,   53,   53,   95,    0,   53,   53,    0,
       58,   96,   98,   58,   95,   53,   53,  100,   99,    0,
       96,    0,   98,    0,    0,   53,  100,   99,   58,   87,
       87,   87,   87,   87,   96,  102,   87,   87,   87,   87,
       87,   87,    0,   97,  102,  104,   96,   99,    0,    0,
      101,   96,   97,  103,  104,  102,  102,  100,   96,  101,
        0,  102,  103,   97,  100,   99,   87,   87,   87,   87,
       87,   87,  102,  103,    0,    0,  106,    0,   97,   97,
      105,    0,  102,  104,  101,  106,  103,  107,    0,  105,
       97,    0,  104,  108,  106,  109,  107,  101,  110,  111,

      103,  105,  108,    0,  109,  112,    0,  110,  111,  113,
      114,  115,  106,  116,  112,  109,    0,    0,  113,  114,
      115,  117,  116,  106,  123,    0,    0,  105,    0,    0,
      117,  114,    0,  123,  107,    0,    0,  110,    0,  126,
      108,  113,  109,    0,  118,  110,  111,  114,  126,  115,
      116,    0,  112,  118,    0,  120,  113,  114,  115,  123,
      116,  119,  117,  118,  120,  118,  121,  122,  117,  133,
      119,  123,  128,  138,    0,  121,  122,  126,  133,  118,
      120,  128,  138,    0,  120,    0,  126,  120,  121,  133,
      119,  118,  121,  124,  124,  124,  124,  119,  122,  138,

      125,    0,  120,  127,  124,  124,  124,  128,  119,  125,
      124,  124,  127,  121,  122,    0,  133,    0,  129,  128,
      138,  125,  132,  127,  127,  127,    0,  129,  130,  127,
        0,  132,  135,  137,  134,  127,  129,  130,    0,  127,
      136,  135,  137,  134,    0,    0,    0,  125,  139,  136,
      127,    0,  134,  129,  134,  129,    0,  139,  132,  130,
        0,  135,    0,    0,  130,  129,    0,    0,  140,  132,
      137,  134,  136,    0,    0,  130,  131,  140,    0,  135,
      137,  134,  150,  144,  141,  131,  139,  136,  140,    0,
      142,  150,  144,  141,  131,  139,  131,    0,  131,  142,

      143,    0,  131,    0,  140,  140,  141,  140,  145,  143,
      131,  146,  142,  131,  131,  140,  147,  145,  148,    0,
      146,    0,  143,  131,  144,  147,  152,  148,  145,  150,
      144,  141,  151,  146,    0,  152,  153,  142,  147,    0,
      155,  151,    0,    0,    0,  153,    0,  143,    0,  155,
      154,  148,  157,  156,  151,  145,    0,    0,  146,  154,
        0,  157,  156,  147,  151,  148,  149,  149,  149,  149,
      149,  156,  149,  152,  149,  154,  155,  149,    0,  151,
      149,  149,    0,  153,  149,  154,  158,  155,  157,  156,
        0,  149,  159,  160,  161,  158,  162,  154,    0,  157,

      156,  159,  160,  161,    0,  162,  163,  158,    0,  164,
      165,    0,    0,  159,  160,  163,  162,  162,  164,  165,
        0,    0,  158,  166,    0,  168,    0,  167,  162,  169,
      161,    0,  166,  158,  168,  163,  167,  170,  169,  159,
      160,  161,  163,  162,  164,  167,  170,    0,    0,  165,
      171,  167,  166,  163,  172,  173,  164,  165,  168,  171,
      174,  170,  168,  172,  173,    0,  169,    0,    0,  174,
      166,  175,  168,    0,  167,  172,  169,    0,    0,    0,
      175,  176,  179,  177,  170,  181,  178,  171,  173,  183,
      176,  179,  177,    0,  181,  178,  174,  171,  183,  182,

      175,  172,  173,    0,  181,    0,  175,  174,  182,  183,
        0,  176,  179,  180,  176,  178,  177,  182,  175,  177,
      177,  178,  180,    0,    0,    0,  183,    0,  176,  179,
      177,  184,  181,  178,  185,  186,  183,    0,  180,    0,
      184,  187,  180,  185,  186,  190,  182,    0,  180,  188,
      187,    0,  184,    0,  190,    0,  186,    0,  188,  191,
      180,  192,  187,  185,  190,  194,  185,  193,  191,  185,
      192,  189,  189,  189,  194,  195,  193,  189,  184,    0,
      193,  185,  186,  189,  195,  188,  189,  189,  187,  196,
      197,  192,  190,  198,  200,  191,  188,    0,  196,  197,

      194,  195,  198,  200,  202,    0,  191,  199,  192,  201,
        0,  204,  194,  202,  193,  196,  199,  205,  201,  200,
      204,  206,  195,  198,  207,  197,  205,  201,  199,  208,
      206,    0,    0,  207,  209,  210,  196,  197,  208,  202,
      198,  200,    0,  209,  210,    0,  211,    0,  212,    0,
      213,  202,    0,  214,  199,  211,  201,  212,  204,  213,
      215,  208,  214,  216,  205,  217,  218,    0,  206,  215,
      211,  207,  216,    0,  217,  218,  208,  219,  220,  213,
        0,  209,  210,  221,  218,    0,  219,  220,    0,  214,
      223,  215,  221,  211,  222,  212,  224,  213,    0,  223,

      214,    0,  225,  222,    0,  224,  226,  215,  227,  228,
      216,  225,  217,  218,  229,  226,  222,  227,  228,  223,
      230,    0,  231,  229,  219,  220,  232,  234,    0,  230,
      221,  231,    0,  235,    0,  232,  234,  223,  233,  236,
        0,  222,  235,  224,    0,  237,    0,  233,  236,  225,
      229,    0,  232,  226,  237,  227,  228,  239,  231,  238,
      233,  229,  240,  231,    0,    0,  239,  230,  238,  231,
      241,  240,  243,  232,  234,    0,    0,    0,  242,  241,
      235,  243,  244,    0,  240,  233,  236,  242,  246,  245,
      247,  244,  237,    0,  238,    0,  248,  246,  245,  247,

      242,    0,  243,  249,  239,  248,  238,  252,    0,  240,
      245,  247,  249,    0,  254,  251,  252,  241,  244,  243,
        0,  253,  250,  254,  251,  242,    0,  252,    0,  244,
      253,  250,  256,  248,    0,  246,  245,  247,  257,  249,
      254,  256,    0,  248,  250,  251,  258,  257,    0,  255,
      249,  251,    0,  256,  252,  258,  259,  253,  255,    0,
      253,  254,  251,    0,  260,  259,  261,  262,  253,  250,
      257,  255,  258,  260,    0,  261,  262,  259,  259,  256,
      264,    0,    0,    0,    0,  257,  261,    0,  263,  264,
      265,    0,  261,  258,    0,    0,  255,  263,  266,  265,

      263,    0,  260,  259,  262,  262,  269,  266,  263,  264,
      263,  260,    0,  261,  262,  269,  267,  263,    0,  265,
      268,  263,    0,  270,  266,  267,    0,  264,    0,  268,
        0,  263,  270,  273,  271,  263,    0,  265,    0,  269,
      272,  270,  273,  271,    0,  266,    0,  267,  274,  272,
      275,  268,  276,  269,    0,  273,    0,  274,    0,  275,
      270,  276,    0,  267,  271,  277,  274,  268,    0,  279,
      270,  275,    0,  278,  277,  281,  280,  272,  279,    0,
      273,  271,  278,    0,  281,  280,    0,  272,    0,  276,
        0,  278,  283,  282,  284,  274,  285,  275,    0,  276,

      286,  283,  282,  284,  277,  285,  279,  280,  287,  286,
      281,  283,  277,  282,    0,  282,  279,  287,  288,    0,
      278,    0,  281,  280,    0,  289,  282,  288,  285,  282,
      286,  284,    0,  287,  289,  290,  291,  292,  289,  283,
      282,  284,  293,  285,  290,  291,  292,  286,  294,  297,
        0,  293,  299,  288,  290,  287,    0,  294,  297,  296,
      295,  299,    0,    0,    0,  288,  298,    0,  296,  295,
      297,  293,  289,  296,    0,  298,  292,  300,  297,  295,
      294,  295,  290,  291,  292,  301,  300,    0,    0,  293,
        0,  296,  302,  303,  301,  294,  297,  295,    0,  299,

      295,  302,  303,  298,    0,  304,  296,  295,  305,  306,
      308,  309,  307,  298,  304,    0,  310,  305,  306,  308,
      309,  307,    0,    0,  300,  310,  311,  312,  301,    0,
        0,  306,  301,  302,  307,  311,  312,  313,  310,  302,
      303,  314,  315,    0,  316,  317,  313,    0,  311,    0,
      314,  315,  304,  316,  317,  305,  306,  308,  309,  307,
      318,  319,  320,  310,    0,    0,  321,  322,  323,  318,
      319,  320,    0,  311,  312,  321,  322,  323,  325,    0,
        0,  324,    0,  318,  313,  326,  327,  325,  314,  315,
      324,  316,  317,  329,  326,  327,    0,  328,    0,    0,

        0,  331,  329,  330,    0,  321,  328,  318,  319,  320,
      331,  332,  330,  321,  322,  323,    0,  333,  324,    0,
      332,  329,  326,  327,    0,  325,  333,  334,  324,  335,
        0,    0,  326,  327,  331,    0,  334,  328,  335,  330,
      329,    0,  336,  337,  328,  338,  339,  340,  331,    0,
      330,  336,  337,  341,  338,  339,  340,  342,  332,  343,
      344,    0,  341,    0,  333,  335,  342,    0,  343,  344,
        0,  347,  335,  346,  334,    0,  335,  348,  337,  341,
      347,  344,  346,    0,    0,    0,  348,    0,    0,  336,
      337,    0,  338,  339,  340,  343,  344,    0,  346,  345,

      341,  349,  350,    0,  342,  353,  343,  344,  345,    0,
      349,  350,  351,    0,  353,    0,    0,  345,  347,    0,
      346,  351,  345,    0,  348,    0,  352,    0,  353,  354,
      355,  356,  350,  357,  351,  352,  353,  349,  354,  355,
      356,  358,  357,  351,  359,  352,  345,  352,  349,  350,
      358,    0,  353,  359,    0,  351,  357,    0,  360,  351,
      352,  361,  362,  352,    0,    0,  352,  360,    0,    0,
      361,  362,  365,  352,    0,    0,  354,  355,  356,    0,
      357,  365,    0,  364,    0,  367,  371,  366,  358,  368,
        0,  359,  364,  365,  367,  371,  366,  361,  368,  362,

        0,    0,    0,    0,  369,  360,  367,    0,  361,  362,
      363,  363,  363,  369,  363,    0,  363,    0,  370,  365,
      364,  363,  366,  363,  363,  363,  368,  370,  363,  372,
      364,  373,  367,  371,  366,  363,  368,  374,  372,  375,
      373,  369,    0,  376,  377,  378,  374,  379,  375,    0,
      381,  369,  376,  377,  378,  386,  379,  382,  370,  381,
      380,  383,  384,  388,  386,  370,  382,  378,  385,  380,
      383,  384,  388,  374,  387,    0,  372,  385,  373,  386,
        0,  377,  383,  387,  374,    0,  375,  381,  382,  385,
      376,  377,  378,    0,  379,  380,  391,  381,  384,    0,

      380,    0,  386,  392,  382,  391,    0,  380,  383,  384,
      388,  387,  392,  393,  394,  385,    0,  395,  396,  397,
      398,  387,  393,  394,  399,  391,  395,  396,  397,  398,
      403,    0,  401,  399,  392,  400,  402,  404,  395,  403,
      408,  401,    0,  391,  400,  402,  404,    0,    0,  408,
      392,  396,  401,  405,  400,    0,  400,  402,  404,  406,
      393,  394,  405,  409,  395,  396,  397,  398,  406,  407,
        0,  399,  409,    0,    0,  400,  410,  403,  407,  401,
      411,  407,  400,  402,  404,  410,  412,  408,  405,  411,
      413,    0,  414,  415,  406,  412,  409,    0,  416,  413,

      405,  414,  415,  417,    0,  419,  406,  416,  418,  421,
      409,  424,  417,  411,  419,  423,  407,  418,  421,  422,
      424,    0,    0,  410,  423,  414,  420,  411,  422,  417,
      421,  413,    0,  412,  416,  420,    0,  413,  425,  414,
      415,  418,  426,  418,  427,  416,    0,  425,  420,  422,
      417,  426,  419,  427,  423,  418,  421,    0,  424,  428,
      429,  431,  423,  430,    0,  432,  422,  433,  428,  429,
      431,  426,  430,  420,  432,  435,  433,    0,  436,  439,
      427,  438,  430,  437,  435,  425,    0,  436,  439,  426,
      438,  427,  437,  429,    0,  440,  428,    0,  433,    0,

      434,  435,    0,  438,  440,  432,  428,  429,  431,  434,
      430,  441,  432,  434,  433,  439,  437,    0,  442,    0,
      441,  440,  435,  443,  434,  436,  439,  442,  438,  447,
      437,  434,  443,    0,  445,  444,  446,  441,  447,  451,
      449,  448,  440,  445,  444,  446,    0,  434,  451,  449,
      448,    0,  445,    0,  446,  444,    0,  444,  441,  447,
      450,  451,  443,    0,  452,  442,  449,    0,  453,  450,
      443,  444,  448,  452,    0,  454,  447,  453,    0,    0,
      455,  445,  444,  446,  454,  456,  451,  449,  448,  455,
      457,  458,  450,  452,  456,  454,  459,    0,    0,  457,

      458,  453,    0,  461,  462,  459,    0,  450,    0,  460,
      463,  452,  461,  462,  464,  453,    0,  455,  460,  463,
      468,  457,  454,  464,  466,  456,  469,  455,    0,  468,
      465,  467,  456,  466,  462,  469,  459,  457,  458,  465,
      467,    0,  460,  459,  460,  470,  471,    0,  465,  467,
      461,  462,    0,  472,  470,  471,  460,  463,    0,  473,
      474,  464,  472,  475,    0,  466,  476,  468,  473,  474,
      477,  466,  475,  469,  479,  476,  478,  465,  467,  477,
      480,  481,  482,  479,    0,  478,    0,  483,  484,  480,
      481,  482,  470,  471,  473,  479,  483,  484,    0,  485,

      472,    0,  486,  487,    0,    0,  473,  474,  485,  478,
      475,  486,  487,  476,  479,    0,    0,  477,    0,    0,
        0,  479,  488,  478,  481,  487,    0,  480,  481,  482,
      489,  488,  490,  491,  483,  484,  492,    0,  493,  489,
        0,  490,  491,  494,    0,  492,  485,  493,    0,  486,
      487,  495,  494,  496,  497,  500,    0,  493,  498,  493,
      495,    0,  496,  497,  500,  494,    0,  498,    0,  488,
      495,    0,  495,  501,  494,  507,    0,  489,  493,  490,
      491,  500,  501,  492,  507,  493,  494,  499,  498,    0,
      494,  495,  495,    0,  496,  501,  499,    0,  495,    0,

      496,  497,  500,  502,  503,  498,  499,  505,  499,  506,
      504,    0,  502,  503,  509,    0,  505,  508,  506,  504,
      501,  510,  507,  509,  502,  503,  508,  499,  504,  506,
      510,  504,  511,  504,  499,    0,  512,  513,  514,  508,
      515,  511,  505,  502,  503,  512,  513,  514,    0,  515,
      502,  503,    0,  516,  505,    0,  506,  504,  517,    0,
      508,  509,  516,  519,  508,  522,  523,  517,  510,  518,
        0,  520,  519,  521,  522,  523,    0,  524,  518,  511,
      520,    0,  521,  512,  513,  514,  524,  515,  518,  519,
      518,    0,  525,  520,    0,  521,    0,    0,  527,  524,

      516,  525,  529,    0,    0,  517,  528,  527,    0,  518,
      519,  529,  522,  523,  525,  528,  518,  530,  520,    0,
      521,  531,  532,  533,  524,  534,  530,  535,  528,    0,
      531,  532,  533,    0,  534,    0,  535,    0,  528,  525,
      526,  526,  526,  536,  526,  527,  526,  537,    0,  529,
        0,  526,  536,  528,  526,  526,  537,  538,  526,    0,
      533,    0,  539,    0,  530,  526,  538,    0,  531,  532,
      533,  539,  534,  541,  535,  540,  538,  542,  538,  543,
      544,    0,  541,  545,  540,    0,  542,  547,  543,  544,
      536,  548,  545,  546,  537,    0,  547,  538,  549,  550,

      548,  552,  546,  553,  538,  554,  551,  549,  550,  539,
      552,  540,  553,    0,  554,  551,    0,  549,    0,  544,
      541,    0,  540,  555,  542,  551,  543,  544,  546,    0,
      545,    0,  555,  556,  547,  557,    0,  550,  548,    0,
      546,    0,  556,    0,  557,  549,  550,  558,  552,  559,
      553,    0,  554,  551,  560,  561,  558,  562,  559,  563,
      557,    0,  564,  560,  561,  565,  562,  566,  563,    0,
      555,  564,  568,    0,  565,  569,  566,    0,  567,  571,
      556,  568,  557,  570,  569,    0,  561,  567,  571,  572,
      573,    0,  570,    0,  558,    0,  559,    0,  572,  573,

      566,  560,  561,    0,  562,    0,  563,    0,  574,  564,
        0,  575,  565,    0,  566,  567,  570,  574,  577,  568,
      575,    0,  569,  573,  576,  567,  571,  577,    0,  578,
      570,  579,  580,  576,    0,  581,  572,  573,  578,  583,
      579,  580,  585,  574,  581,  586,    0,  582,  583,    0,
      584,  585,  583,  589,  586,  574,  582,    0,  575,  584,
        0,  576,  589,  584,  587,  577,  579,    0,  591,  582,
        0,  576,  588,  587,  581,    0,  578,  591,  579,  580,
        0,  588,  581,    0,  582,    0,  583,  590,    0,  585,
      591,    0,  586,  592,  582,  593,  590,  584,  588,  594,

      589,  595,  592,    0,  593,  587,    0,  598,  594,  600,
      595,  587,  596,  597,  599,  591,  598,    0,  600,  588,
      601,  596,  597,  599,  590,  597,  593,  602,  603,  601,
        0,    0,  604,  592,  590,    0,  602,  603,  595,  594,
      592,  604,  593,  596,  600,  599,  594,    0,  595,  602,
        0,    0,    0,  605,  598,    0,  600,  606,  603,  596,
      597,  599,  605,  607,  604,    0,  606,  601,  608,  609,
        0,  612,  607,  610,  602,  603,  611,  608,  609,  604,
      612,  613,  610,  614,  616,  611,  615,  617,  618,  619,
      613,  612,  614,  616,  620,  615,  617,  618,  619,    0,

      605,    0,  607,  620,  606,    0,  610,    0,  616,  611,
      607,    0,  614,    0,  613,  608,  609,  621,  612,    0,
      610,    0,  615,  611,    0,    0,  621,    0,  613,  622,
      614,  616,    0,  615,  617,  618,  619,  623,  622,  624,
      625,  620,  626,  627,  628,  629,  623,  630,  624,  625,
      631,  626,  627,  628,  629,    0,  630,  633,  634,  631,
        0,  635,  625,  637,  621,  636,  633,  634,  638,  632,
      635,  639,  637,  640,  636,    0,  622,  638,  632,  641,
      639,    0,  640,  625,  623,    0,  624,  625,  641,  626,
      627,  628,  629,  642,  630,  632,  636,  631,  643,    0,

      637,    0,  642,    0,  633,  634,    0,  643,  635,    0,
      637,    0,  636,  644,  642,  638,  632,    0,  639,  645,
      640,  646,  644,  647,    0,    0,  641,  648,  645,  649,
      646,    0,  647,  642,  644,  650,  648,  651,  649,  652,
      642,  653,  654,  655,  650,  643,  651,  656,  652,    0,
      653,  654,  655,  644,  659,  657,  656,    0,  658,    0,
      644,    0,    0,  659,  657,    0,  645,  658,  646,  660,
      647,  652,  663,    0,  648,    0,  649,  657,  660,    0,
      658,  663,  650,  664,  651,    0,  652,  661,  653,  654,
      655,  662,  664,    0,  656,  665,  661,  666,  667,  668,

      662,  659,  657,  669,  665,  658,  666,  667,  668,  661,
        0,  670,  669,  662,  671,  672,  660,  673,  674,  663,
      670,    0,  675,  671,  672,    0,  673,  674,  676,    0,
      664,  675,  678,    0,  661,    0,    0,  676,  662,  674,
      677,  678,  665,  679,  666,  667,  668,  680,  681,  677,
      669,  682,  679,    0,  683,    0,  680,  681,  670,  684,
      682,  671,  672,  683,  673,  674,    0,  679,  684,  675,
        0,  685,  686,  687,  688,  676,  689,  677,    0,  678,
      685,  686,  687,  688,  682,  689,    0,  677,  690,    0,
      679,  691,    0,  692,  680,  681,    0,  690,  682,  693,

      691,  683,  692,  694,  695,  686,  684,  696,  693,    0,
        0,    0,  694,  695,    0,  697,  696,  698,  685,  686,
      687,  688,  699,  689,  697,  700,  698,  701,  702,    0,
      703,  699,  704,  705,  700,  690,  701,  702,  691,  703,
      692,  704,  705,  706,  708,    0,  693,    0,  707,  709,
      694,  695,  706,  708,  696,    0,  698,  707,  709,  710,
        0,  711,  697,    0,  698,    0,    0,  703,  710,  699,
      711,    0,  700,  712,  701,  702,    0,  703,  713,  704,
      705,    0,  712,    0,  707,  712,    0,  713,  714,    0,
      706,  708,  710,  715,  716,  707,  709,  714,  711,    0,

      717,    0,  715,  716,  719,  718,  710,  720,  711,  717,
      714,    0,  721,  719,  718,  722,  720,  723,  724,    0,
      712,  721,  725,  726,  722,  713,  723,  724,  719,  727,
      728,  725,  726,  729,  730,  714,  731,  732,  727,  728,
      715,  716,  729,  730,    0,  731,  732,  717,  718,    0,
        0,  719,  718,  725,  720,    0,    0,  733,  731,  721,
        0,    0,  722,  734,  723,  724,  733,    0,    0,  725,
      726,    0,  734,  735,    0,    0,  727,  728,  736,  737,
      729,  730,  735,  731,  732,  738,  739,  736,  737,  740,
      741,  742,  743,  744,  738,  739,  745,  746,  740,  741,

      742,  743,  744,  747,  733,  745,  746,    0,    0,    0,
      734,    0,  747,  742,    0,    0,    0,    0,    0,    0,
      735,    0,    0,    0,    0,  736,  737,  741,    0,    0,
        0,    0,  738,  739,    0,    0,  740,  741,  742,  743,
      744,    0,    0,  745,  746,    0,    0,    0,    0,    0,
      747,  749,  749,  750,  750,  751,  751,  752,  752,  753,
      753,  754,  754,  755,  755,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,

      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "nask.ll"
/* -*- c++ -*- File generated by the BNF Converter (bnfc 2.9.5). */
/* Lexer definition for use with FLex */
/* Additional data for the lexer: a buffer for lexing string literals. */

#line 14 "nask.ll"
#include "scanner.hh"

/* using "token" to make the returns for the tokens shorter to type */
using token = nask_::NaskParser::token;


#include "absyn.hh"
#include "bison.hh"

#define initialize_lexer nask__initialize_lexer

/* BEGIN extensible string buffer */

#include "buffer.hh"

/* The initial size of the buffer to lex string literals. */
#define LITERAL_BUFFER_INITIAL_SIZE 1024

/* The pointer to the literal buffer. */
Buffer literal_buffer = nullptr;

/* Initialize the literal buffer. */
#define LITERAL_BUFFER_CREATE() literal_buffer = newBuffer(LITERAL_BUFFER_INITIAL_SIZE)

/* Append characters at the end of the buffer. */
#define LITERAL_BUFFER_APPEND(s) bufferAppendString(literal_buffer, s)

/* Append a character at the end of the buffer. */
#define LITERAL_BUFFER_APPEND_CHAR(c) bufferAppendChar(literal_buffer, c)

/* Release the buffer, returning a pointer to its content. */
#define LITERAL_BUFFER_HARVEST() releaseBuffer(literal_buffer)

/* In exceptional cases, e.g. when reaching EOF, we have to free the buffer. */
#define LITERAL_BUFFER_FREE() freeBuffer(literal_buffer)

/* END extensible string buffer */

/* update location on matching */
#define YY_USER_ACTION \
loc->begin.line   = loc->end.line; \
loc->begin.column = loc->end.column; \
for(int i = 0; yytext[i] != '\0'; i++) { \
    if(yytext[i] == '\n') { \
        loc->end.line++; \
        loc->end.column = 0; \
    } \
    else { \
        loc->end.column++; \
    } \
}
#line 1497 "lexer.cc"

#line 1499 "lexer.cc"

#define INITIAL 0
#define CHAR 1
#define CHARESC 2
#define CHAREND 3
#define STRING 4
#define ESCAPED 5
#define COMMENT 6
#define COMMENT1 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE Buffer

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 74 "nask.ll"


#line 1639 "lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 749 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3466 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 76 "nask.ll"
return token::_LBRACK;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 77 "nask.ll"
return token::_RBRACK;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 78 "nask.ll"
return token::_COLON;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 79 "nask.ll"
return token::_COMMA;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 80 "nask.ll"
return token::_PLUS;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 81 "nask.ll"
return token::_MINUS;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 82 "nask.ll"
return token::_STAR;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 83 "nask.ll"
return token::_SLASH;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 84 "nask.ll"
return token::_PERCENT;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 85 "nask.ll"
return token::_LPAREN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 86 "nask.ll"
return token::_RPAREN;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 87 "nask.ll"
return token::_KW_AAA;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 88 "nask.ll"
return token::_KW_AAD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 89 "nask.ll"
return token::_KW_AAM;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 90 "nask.ll"
return token::_KW_AAS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 91 "nask.ll"
return token::_KW_ABSOLUTE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 92 "nask.ll"
return token::_KW_ADC;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 93 "nask.ll"
return token::_KW_ADD;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 94 "nask.ll"
return token::_KW_ALIGN;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 95 "nask.ll"
return token::_KW_ALIGNB;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 96 "nask.ll"
return token::_KW_AND;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 97 "nask.ll"
return token::_KW_ARPL;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 98 "nask.ll"
return token::_KW_BITS;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 99 "nask.ll"
return token::_KW_BOUND;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 100 "nask.ll"
return token::_KW_BSF;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 101 "nask.ll"
return token::_KW_BSR;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 102 "nask.ll"
return token::_KW_BSWAP;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 103 "nask.ll"
return token::_KW_BT;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 104 "nask.ll"
return token::_KW_BTC;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 105 "nask.ll"
return token::_KW_BTR;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 106 "nask.ll"
return token::_KW_BTS;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 107 "nask.ll"
return token::_KW_BYTE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 108 "nask.ll"
return token::_KW_CALL;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 109 "nask.ll"
return token::_KW_CBW;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 110 "nask.ll"
return token::_KW_CDQ;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 111 "nask.ll"
return token::_KW_CLC;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 112 "nask.ll"
return token::_KW_CLD;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 113 "nask.ll"
return token::_KW_CLI;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 114 "nask.ll"
return token::_KW_CLTS;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 115 "nask.ll"
return token::_KW_CMC;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 116 "nask.ll"
return token::_KW_CMP;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 117 "nask.ll"
return token::_KW_CMPSB;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 118 "nask.ll"
return token::_KW_CMPSD;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 119 "nask.ll"
return token::_KW_CMPSW;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "nask.ll"
return token::_KW_CMPXCHG;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "nask.ll"
return token::_KW_CPUID;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "nask.ll"
return token::_KW_CWD;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "nask.ll"
return token::_KW_CWDE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "nask.ll"
return token::_KW_DAA;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "nask.ll"
return token::_KW_DAS;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "nask.ll"
return token::_KW_DB;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "nask.ll"
return token::_KW_DD;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "nask.ll"
return token::_KW_DEC;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "nask.ll"
return token::_KW_DIV;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "nask.ll"
return token::_KW_DQ;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "nask.ll"
return token::_KW_DT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 132 "nask.ll"
return token::_KW_DW;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "nask.ll"
return token::_KW_DWORD;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 134 "nask.ll"
return token::_KW_END;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "nask.ll"
return token::_KW_ENTER;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 136 "nask.ll"
return token::_KW_EQU;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 137 "nask.ll"
return token::_KW_EXTERN;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 138 "nask.ll"
return token::_KW_F2XM1;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 139 "nask.ll"
return token::_KW_FABS;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 140 "nask.ll"
return token::_KW_FADD;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 141 "nask.ll"
return token::_KW_FADDP;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 142 "nask.ll"
return token::_KW_FAR;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 143 "nask.ll"
return token::_KW_FBLD;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 144 "nask.ll"
return token::_KW_FBSTP;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 145 "nask.ll"
return token::_KW_FCHS;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 146 "nask.ll"
return token::_KW_FCLEX;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 147 "nask.ll"
return token::_KW_FCOM;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 148 "nask.ll"
return token::_KW_FCOMP;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 149 "nask.ll"
return token::_KW_FCOMPP;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 150 "nask.ll"
return token::_KW_FCOS;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 151 "nask.ll"
return token::_KW_FDECSTP;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 152 "nask.ll"
return token::_KW_FDISI;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 153 "nask.ll"
return token::_KW_FDIV;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 154 "nask.ll"
return token::_KW_FDIVP;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 155 "nask.ll"
return token::_KW_FDIVR;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 156 "nask.ll"
return token::_KW_FDIVRP;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 157 "nask.ll"
return token::_KW_FENI;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 158 "nask.ll"
return token::_KW_FFREE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 159 "nask.ll"
return token::_KW_FIADD;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 160 "nask.ll"
return token::_KW_FICOM;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 161 "nask.ll"
return token::_KW_FICOMP;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 162 "nask.ll"
return token::_KW_FIDIV;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 163 "nask.ll"
return token::_KW_FIDIVR;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 164 "nask.ll"
return token::_KW_FILD;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 165 "nask.ll"
return token::_KW_FILE;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 166 "nask.ll"
return token::_KW_FIMUL;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 167 "nask.ll"
return token::_KW_FINCSTP;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 168 "nask.ll"
return token::_KW_FINIT;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 169 "nask.ll"
return token::_KW_FIST;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 170 "nask.ll"
return token::_KW_FISTP;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 171 "nask.ll"
return token::_KW_FISUB;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 172 "nask.ll"
return token::_KW_FISUBR;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 173 "nask.ll"
return token::_KW_FLD;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 174 "nask.ll"
return token::_KW_FLD1;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 175 "nask.ll"
return token::_KW_FLDCW;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 176 "nask.ll"
return token::_KW_FLDENV;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 177 "nask.ll"
return token::_KW_FLDL2E;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 178 "nask.ll"
return token::_KW_FLDL2T;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 179 "nask.ll"
return token::_KW_FLDLG2;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 180 "nask.ll"
return token::_KW_FLDLN2;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 181 "nask.ll"
return token::_KW_FLDPI;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 182 "nask.ll"
return token::_KW_FLDZ;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 183 "nask.ll"
return token::_KW_FMUL;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 184 "nask.ll"
return token::_KW_FMULP;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 185 "nask.ll"
return token::_KW_FNCLEX;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 186 "nask.ll"
return token::_KW_FNDISI;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 187 "nask.ll"
return token::_KW_FNENI;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 188 "nask.ll"
return token::_KW_FNINIT;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 189 "nask.ll"
return token::_KW_FNOP;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 190 "nask.ll"
return token::_KW_FNSAVE;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 191 "nask.ll"
return token::_KW_FNSTCW;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 192 "nask.ll"
return token::_KW_FNSTENV;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 193 "nask.ll"
return token::_KW_FNSTSW;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 194 "nask.ll"
return token::_KW_FORMAT;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 195 "nask.ll"
return token::_KW_FPATAN;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 196 "nask.ll"
return token::_KW_FPREM;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 197 "nask.ll"
return token::_KW_FPREM1;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 198 "nask.ll"
return token::_KW_FPTAN;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 199 "nask.ll"
return token::_KW_FRNDINT;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 200 "nask.ll"
return token::_KW_FRSTOR;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 201 "nask.ll"
return token::_KW_FSAVE;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 202 "nask.ll"
return token::_KW_FSCALE;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 203 "nask.ll"
return token::_KW_FSETPM;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 204 "nask.ll"
return token::_KW_FSIN;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 205 "nask.ll"
return token::_KW_FSINCOS;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 206 "nask.ll"
return token::_KW_FSQRT;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 207 "nask.ll"
return token::_KW_FST;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 208 "nask.ll"
return token::_KW_FSTCW;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 209 "nask.ll"
return token::_KW_FSTENV;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 210 "nask.ll"
return token::_KW_FSTP;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 211 "nask.ll"
return token::_KW_FSTSW;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 212 "nask.ll"
return token::_KW_FSUB;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 213 "nask.ll"
return token::_KW_FSUBP;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 214 "nask.ll"
return token::_KW_FSUBR;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 215 "nask.ll"
return token::_KW_FSUBRP;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 216 "nask.ll"
return token::_KW_FTST;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 217 "nask.ll"
return token::_KW_FUCOM;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 218 "nask.ll"
return token::_KW_FUCOMP;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 219 "nask.ll"
return token::_KW_FUCOMPP;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 220 "nask.ll"
return token::_KW_FXAM;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 221 "nask.ll"
return token::_KW_FXCH;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 222 "nask.ll"
return token::_KW_FXTRACT;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 223 "nask.ll"
return token::_KW_FYL2X;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 224 "nask.ll"
return token::_KW_FYL2XP1;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 225 "nask.ll"
return token::_KW_GLOBAL;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 226 "nask.ll"
return token::_KW_HLT;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 227 "nask.ll"
return token::_KW_IDIV;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 228 "nask.ll"
return token::_KW_IMUL;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 229 "nask.ll"
return token::_KW_IN;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 230 "nask.ll"
return token::_KW_INC;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 231 "nask.ll"
return token::_KW_INCO;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 232 "nask.ll"
return token::_KW_INSB;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 233 "nask.ll"
return token::_KW_INSD;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 234 "nask.ll"
return token::_KW_INSTRSET;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 235 "nask.ll"
return token::_KW_INSW;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 236 "nask.ll"
return token::_KW_INT;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 237 "nask.ll"
return token::_KW_INT3;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 238 "nask.ll"
return token::_KW_INTO;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 239 "nask.ll"
return token::_KW_INVD;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 240 "nask.ll"
return token::_KW_INVLPG;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 241 "nask.ll"
return token::_KW_IRET;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 242 "nask.ll"
return token::_KW_IRETD;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 243 "nask.ll"
return token::_KW_IRETW;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 244 "nask.ll"
return token::_KW_JA;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 245 "nask.ll"
return token::_KW_JAE;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 246 "nask.ll"
return token::_KW_JB;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 247 "nask.ll"
return token::_KW_JBE;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 248 "nask.ll"
return token::_KW_JC;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 249 "nask.ll"
return token::_KW_JCXZ;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 250 "nask.ll"
return token::_KW_JE;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 251 "nask.ll"
return token::_KW_JECXZ;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 252 "nask.ll"
return token::_KW_JG;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 253 "nask.ll"
return token::_KW_JGE;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 254 "nask.ll"
return token::_KW_JL;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 255 "nask.ll"
return token::_KW_JLE;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 256 "nask.ll"
return token::_KW_JMP;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 257 "nask.ll"
return token::_KW_JNA;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 258 "nask.ll"
return token::_KW_JNAE;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 259 "nask.ll"
return token::_KW_JNB;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 260 "nask.ll"
return token::_KW_JNBE;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 261 "nask.ll"
return token::_KW_JNC;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 262 "nask.ll"
return token::_KW_JNE;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 263 "nask.ll"
return token::_KW_JNG;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 264 "nask.ll"
return token::_KW_JNGE;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 265 "nask.ll"
return token::_KW_JNL;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 266 "nask.ll"
return token::_KW_JNLE;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 267 "nask.ll"
return token::_KW_JNO;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 268 "nask.ll"
return token::_KW_JNP;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 269 "nask.ll"
return token::_KW_JNS;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 270 "nask.ll"
return token::_KW_JNZ;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 271 "nask.ll"
return token::_KW_JO;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 272 "nask.ll"
return token::_KW_JP;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 273 "nask.ll"
return token::_KW_JPE;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 274 "nask.ll"
return token::_KW_JPO;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 275 "nask.ll"
return token::_KW_JS;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 276 "nask.ll"
return token::_KW_JZ;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 277 "nask.ll"
return token::_KW_LAHF;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 278 "nask.ll"
return token::_KW_LAR;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 279 "nask.ll"
return token::_KW_LDS;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 280 "nask.ll"
return token::_KW_LEA;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 281 "nask.ll"
return token::_KW_LEAVE;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 282 "nask.ll"
return token::_KW_LES;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 283 "nask.ll"
return token::_KW_LFS;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 284 "nask.ll"
return token::_KW_LGDT;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 285 "nask.ll"
return token::_KW_LGS;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 286 "nask.ll"
return token::_KW_LIDT;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 287 "nask.ll"
return token::_KW_LLDT;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 288 "nask.ll"
return token::_KW_LMSW;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 289 "nask.ll"
return token::_KW_LOCK;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 290 "nask.ll"
return token::_KW_LODSB;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 291 "nask.ll"
return token::_KW_LODSD;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 292 "nask.ll"
return token::_KW_LODSW;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 293 "nask.ll"
return token::_KW_LOOP;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 294 "nask.ll"
return token::_KW_LOOPE;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 295 "nask.ll"
return token::_KW_LOOPNE;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 296 "nask.ll"
return token::_KW_LOOPNZ;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 297 "nask.ll"
return token::_KW_LOOPZ;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 298 "nask.ll"
return token::_KW_LSL;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 299 "nask.ll"
return token::_KW_LSS;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 300 "nask.ll"
return token::_KW_LTR;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 301 "nask.ll"
return token::_KW_MOV;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 302 "nask.ll"
return token::_KW_MOVSB;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 303 "nask.ll"
return token::_KW_MOVSD;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 304 "nask.ll"
return token::_KW_MOVSW;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 305 "nask.ll"
return token::_KW_MOVSX;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 306 "nask.ll"
return token::_KW_MOVZX;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 307 "nask.ll"
return token::_KW_MUL;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 308 "nask.ll"
return token::_KW_NEAR;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 309 "nask.ll"
return token::_KW_NEG;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 310 "nask.ll"
return token::_KW_NOP;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 311 "nask.ll"
return token::_KW_NOT;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 312 "nask.ll"
return token::_KW_OPTIMIZE;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 313 "nask.ll"
return token::_KW_OR;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 314 "nask.ll"
return token::_KW_ORG;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 315 "nask.ll"
return token::_KW_OUT;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 316 "nask.ll"
return token::_KW_OUTSB;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 317 "nask.ll"
return token::_KW_OUTSD;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 318 "nask.ll"
return token::_KW_OUTSW;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 319 "nask.ll"
return token::_KW_PADDING;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 320 "nask.ll"
return token::_KW_PADSET;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 321 "nask.ll"
return token::_KW_POP;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 322 "nask.ll"
return token::_KW_POPA;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 323 "nask.ll"
return token::_KW_POPAD;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 324 "nask.ll"
return token::_KW_POPAW;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 325 "nask.ll"
return token::_KW_POPF;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 326 "nask.ll"
return token::_KW_POPFD;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 327 "nask.ll"
return token::_KW_POPFW;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 328 "nask.ll"
return token::_KW_PUSH;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 329 "nask.ll"
return token::_KW_PUSHA;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 330 "nask.ll"
return token::_KW_PUSHAD;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 331 "nask.ll"
return token::_KW_PUSHAW;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 332 "nask.ll"
return token::_KW_PUSHD;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 333 "nask.ll"
return token::_KW_PUSHF;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 334 "nask.ll"
return token::_KW_PUSHFD;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 335 "nask.ll"
return token::_KW_PUSHFW;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 336 "nask.ll"
return token::_KW_RCL;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 337 "nask.ll"
return token::_KW_RCR;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 338 "nask.ll"
return token::_KW_RDMSR;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 339 "nask.ll"
return token::_KW_RDPMC;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 340 "nask.ll"
return token::_KW_REP;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 341 "nask.ll"
return token::_KW_REPE;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 342 "nask.ll"
return token::_KW_REPNE;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 343 "nask.ll"
return token::_KW_REPNZ;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 344 "nask.ll"
return token::_KW_REPZ;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 345 "nask.ll"
return token::_KW_RESB;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 346 "nask.ll"
return token::_KW_RESD;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 347 "nask.ll"
return token::_KW_RESQ;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 348 "nask.ll"
return token::_KW_REST;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 349 "nask.ll"
return token::_KW_RESW;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 350 "nask.ll"
return token::_KW_RET;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 351 "nask.ll"
return token::_KW_RETF;
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 352 "nask.ll"
return token::_KW_RETN;
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 353 "nask.ll"
return token::_KW_ROL;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 354 "nask.ll"
return token::_KW_ROR;
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 355 "nask.ll"
return token::_KW_RSM;
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 356 "nask.ll"
return token::_KW_SAHF;
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 357 "nask.ll"
return token::_KW_SAL;
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 358 "nask.ll"
return token::_KW_SAR;
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 359 "nask.ll"
return token::_KW_SBB;
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 360 "nask.ll"
return token::_KW_SCASB;
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 361 "nask.ll"
return token::_KW_SCASD;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 362 "nask.ll"
return token::_KW_SCASW;
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 363 "nask.ll"
return token::_KW_SECTION;
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 364 "nask.ll"
return token::_KW_SETA;
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 365 "nask.ll"
return token::_KW_SETAE;
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 366 "nask.ll"
return token::_KW_SETB;
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 367 "nask.ll"
return token::_KW_SETBE;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 368 "nask.ll"
return token::_KW_SETC;
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 369 "nask.ll"
return token::_KW_SETE;
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 370 "nask.ll"
return token::_KW_SETG;
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 371 "nask.ll"
return token::_KW_SETGE;
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 372 "nask.ll"
return token::_KW_SETL;
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 373 "nask.ll"
return token::_KW_SETLE;
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 374 "nask.ll"
return token::_KW_SETNA;
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 375 "nask.ll"
return token::_KW_SETNAE;
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 376 "nask.ll"
return token::_KW_SETNB;
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 377 "nask.ll"
return token::_KW_SETNBE;
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 378 "nask.ll"
return token::_KW_SETNC;
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 379 "nask.ll"
return token::_KW_SETNE;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 380 "nask.ll"
return token::_KW_SETNG;
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 381 "nask.ll"
return token::_KW_SETNGE;
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 382 "nask.ll"
return token::_KW_SETNL;
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 383 "nask.ll"
return token::_KW_SETNLE;
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 384 "nask.ll"
return token::_KW_SETNO;
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 385 "nask.ll"
return token::_KW_SETNP;
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 386 "nask.ll"
return token::_KW_SETNS;
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 387 "nask.ll"
return token::_KW_SETNZ;
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 388 "nask.ll"
return token::_KW_SETO;
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 389 "nask.ll"
return token::_KW_SETP;
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 390 "nask.ll"
return token::_KW_SETPE;
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 391 "nask.ll"
return token::_KW_SETPO;
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 392 "nask.ll"
return token::_KW_SETS;
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 393 "nask.ll"
return token::_KW_SETZ;
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 394 "nask.ll"
return token::_KW_SGDT;
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 395 "nask.ll"
return token::_KW_SHL;
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 396 "nask.ll"
return token::_KW_SHLD;
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 397 "nask.ll"
return token::_KW_SHORT;
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 398 "nask.ll"
return token::_KW_SHR;
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 399 "nask.ll"
return token::_KW_SHRD;
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 400 "nask.ll"
return token::_KW_SIDT;
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 401 "nask.ll"
return token::_KW_SLDT;
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 402 "nask.ll"
return token::_KW_SMSW;
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 403 "nask.ll"
return token::_KW_STC;
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 404 "nask.ll"
return token::_KW_STD;
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 405 "nask.ll"
return token::_KW_STI;
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 406 "nask.ll"
return token::_KW_STOSB;
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 407 "nask.ll"
return token::_KW_STOSD;
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 408 "nask.ll"
return token::_KW_STOSW;
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 409 "nask.ll"
return token::_KW_STR;
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 410 "nask.ll"
return token::_KW_SUB;
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 411 "nask.ll"
return token::_KW_TEST;
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 412 "nask.ll"
return token::_KW_TIMES;
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 413 "nask.ll"
return token::_KW_UD2;
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 414 "nask.ll"
return token::_KW_VERR;
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 415 "nask.ll"
return token::_KW_VERW;
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 416 "nask.ll"
return token::_KW_WAIT;
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 417 "nask.ll"
return token::_KW_WBINVD;
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 418 "nask.ll"
return token::_KW_WORD;
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 419 "nask.ll"
return token::_KW_WRMSR;
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 420 "nask.ll"
return token::_KW_XADD;
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 421 "nask.ll"
return token::_KW_XCHG;
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 422 "nask.ll"
return token::_KW_XLATB;
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 423 "nask.ll"
return token::_KW_XOR;
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 425 "nask.ll"
BEGIN COMMENT; /* BNFC: block comment "#" "\\n" */
	YY_BREAK
case 350:
/* rule 350 can match eol */
YY_RULE_SETUP
#line 426 "nask.ll"
BEGIN INITIAL;
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 427 "nask.ll"
/* skip */;
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 428 "nask.ll"
BEGIN COMMENT1; /* BNFC: block comment ";" "\\n" */
	YY_BREAK
case 353:
/* rule 353 can match eol */
YY_RULE_SETUP
#line 429 "nask.ll"
BEGIN INITIAL;
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 430 "nask.ll"
/* skip */;
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 432 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_Hex;
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 433 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_Id;
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 434 "nask.ll"
LITERAL_BUFFER_CREATE(); BEGIN STRING;
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 435 "nask.ll"
BEGIN ESCAPED;
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 436 "nask.ll"
yylval->emplace<std::string>(LITERAL_BUFFER_HARVEST()); BEGIN INITIAL; return token::_STRING_;
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 437 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR(yytext[0]);
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 438 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\f'); BEGIN STRING;
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 439 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\n'); BEGIN STRING;
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 440 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\r'); BEGIN STRING;
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 441 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\t'); BEGIN STRING;
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 442 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('"');  BEGIN STRING;
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 443 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\\'); BEGIN STRING;
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 444 "nask.ll"
LITERAL_BUFFER_APPEND(yytext);    BEGIN STRING;
	YY_BREAK
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(ESCAPED):
#line 445 "nask.ll"
LITERAL_BUFFER_FREE(); return token::_ERROR_;
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 446 "nask.ll"
BEGIN CHAR;
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 447 "nask.ll"
BEGIN CHARESC;
	YY_BREAK
case 370:
/* rule 370 can match eol */
YY_RULE_SETUP
#line 448 "nask.ll"
BEGIN CHAREND; yylval->emplace<char>(yytext[0]); return token::_CHAR_;
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 449 "nask.ll"
BEGIN CHAREND; yylval->emplace<char>('\f');     return token::_CHAR_;
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 450 "nask.ll"
BEGIN CHAREND; yylval->emplace<char>('\n');     return token::_CHAR_;
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 451 "nask.ll"
BEGIN CHAREND; yylval->emplace<char>('\r');     return token::_CHAR_;
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 452 "nask.ll"
BEGIN CHAREND; yylval->emplace<char>('\t');     return token::_CHAR_;
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 453 "nask.ll"
BEGIN CHAREND; yylval->emplace<char>(yytext[0]); return token::_CHAR_;
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 454 "nask.ll"
BEGIN INITIAL;
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 455 "nask.ll"
yylval->emplace<int>(atoi(yytext)); return token::_INTEGER_;
	YY_BREAK
case 378:
/* rule 378 can match eol */
YY_RULE_SETUP
#line 456 "nask.ll"
/* ignore white space. */;
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 457 "nask.ll"
return token::_ERROR_;
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 459 "nask.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3605 "lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CHAR):
case YY_STATE_EOF(CHARESC):
case YY_STATE_EOF(CHAREND):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(COMMENT1):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 749 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 749 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 748);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 459 "nask.ll"



NaskScanner::NaskScanner(std::istream *in)
    : yyFlexLexer(in)
{
    loc = new nask_::NaskParser::location_type();
}

NaskScanner::~NaskScanner()
{
    delete loc;
    delete yylval;
}

/* This implementation of NaskFlexLexer::yylex() is required to fill the
 * vtable of the class NaskFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */



#ifdef yylex
#undef yylex
#endif

int yyFlexLexer::yylex()
{
    std::cerr << "in yyFlexLexer::yylex() !" << std::endl;
    return 0;
}



