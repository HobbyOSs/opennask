#line 2 "lexer.cc"
#include <memory>

#line 5 "lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer nask_FlexLexer

#ifdef yyalloc
#define nask_alloc_ALREADY_DEFINED
#else
#define yyalloc nask_alloc
#endif

#ifdef yyrealloc
#define nask_realloc_ALREADY_DEFINED
#else
#define yyrealloc nask_realloc
#endif

#ifdef yyfree
#define nask_free_ALREADY_DEFINED
#else
#define yyfree nask_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 373
#define YY_END_OF_BUFFER 374
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[746] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  374,  372,  371,  371,
      359,  349,  358,    8,  372,    9,   10,    6,    4,    3,
        5,    7,  370,  370,   11,  352,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,    1,    2,
      373,  362,  361,  360,  369,  367,  368,  363,  364,  365,
      366,  351,  350,  354,  353,  358,  358,  357,    0,  355,
        0,  370,    0,  358,  358,  358,  358,  358,  358,  358,
      358,  358,   28,  358,  358,  358,  358,  358,  358,  358,

      358,  358,   51,   52,  358,  358,   55,   56,   57,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  154,  358,  169,  171,  173,
      175,  177,  179,  358,  358,  196,  197,  200,  201,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  238,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  357,  356,

       12,   13,   14,   15,  358,   17,   18,  358,   21,  358,
      358,  358,   25,   26,  358,   29,   30,   31,  358,  358,
       34,   35,   36,   37,   38,  358,   40,   41,  358,   47,
       49,   50,   53,   54,  358,   59,  358,   61,  358,  358,
      358,  358,   67,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,   98,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  132,  358,
      358,  358,  358,  358,  358,  358,  358,  151,  358,  358,
      155,  358,  161,  358,  358,  170,  172,  358,  358,  178,

      180,  181,  182,  184,  186,  187,  188,  190,  192,  193,
      194,  195,  198,  199,  358,  203,  204,  205,  207,  208,
      358,  210,  358,  358,  358,  358,  358,  358,  223,  224,
      225,  226,  232,  358,  234,  235,  236,  358,  239,  240,
      358,  246,  358,  261,  262,  358,  358,  265,  358,  275,
      278,  279,  280,  358,  282,  283,  284,  358,  358,  358,
      358,  320,  358,  323,  358,  358,  358,  328,  329,  330,
      358,  334,  335,  358,  358,  338,  358,  358,  358,  358,
      358,  358,  358,  358,  348,  356,  356,  358,  358,   22,
       23,  358,  358,   32,   33,   39,  358,  358,  358,   48,

      358,  358,  358,  358,   64,   65,   68,  358,   70,  358,
       72,   75,  358,  358,   78,   82,  358,  358,  358,  358,
       89,   90,  358,  358,  358,   94,  358,   99,  358,  358,
      358,  358,  107,  108,  358,  358,  358,  358,  114,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      129,  358,  358,  358,  135,  358,  137,  141,  358,  145,
      146,  358,  358,  358,  152,  153,  156,  157,  158,  358,
      160,  162,  163,  164,  358,  166,  174,  358,  183,  185,
      189,  191,  202,  358,  209,  211,  212,  213,  214,  358,
      218,  358,  358,  233,  358,  358,  358,  358,  247,  250,

      253,  358,  358,  266,  358,  269,  270,  271,  272,  273,
      274,  276,  277,  281,  358,  358,  289,  291,  293,  294,
      295,  297,  358,  313,  314,  317,  318,  319,  321,  358,
      324,  325,  326,  327,  358,  336,  358,  339,  340,  341,
      358,  343,  358,  345,  346,  358,  358,   19,   24,   27,
       42,   43,   44,  358,   46,   58,   60,  358,   63,   66,
       69,   71,   73,  358,   77,   79,   80,   83,   84,   85,
       87,   91,  358,   93,   95,   96,  100,  358,  358,  358,
      358,  106,  109,  358,  358,  112,  358,  358,  358,  358,
      358,  358,  358,  121,  123,  358,  358,  126,  358,  358,

      358,  131,  133,  358,  136,  138,  139,  142,  358,  148,
      358,  358,  358,  167,  168,  176,  206,  215,  216,  217,
      219,  358,  222,  227,  228,  229,  230,  231,  358,  241,
      242,  243,  358,  358,  248,  249,  251,  252,  254,  257,
      258,  263,  264,  267,  268,  285,  286,  287,  358,  290,
      292,  296,  298,  299,  301,  303,  304,  305,  307,  309,
      310,  311,  312,  315,  316,  322,  331,  332,  333,  337,
      358,  344,  347,  358,   20,  358,   62,   74,  358,   81,
       86,   88,  358,   97,  101,  102,  103,  104,  105,  110,
      111,  113,  115,  116,  358,  118,  119,  120,  122,  358,

      125,  127,  128,  358,  134,  140,  143,  358,  358,  150,
      358,  165,  220,  221,  358,  358,  245,  255,  256,  259,
      260,  358,  300,  302,  306,  308,  342,  358,   45,   76,
       92,  117,  124,  130,  144,  147,  149,  358,  358,  244,
      288,   16,  159,  237,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    6,    7,    1,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   21,   21,   21,   21,   21,   22,   23,    1,
        1,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,    1,   53,    1,   54,   55,   56,   57,

       58,   59,   60,   60,   60,   60,   60,   60,   60,   61,
       60,   60,   60,   62,   60,   63,   60,   60,   60,   64,
       60,   60,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[65] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    1,    2,    2,    2,    2,
        2,    2,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2
    } ;

static const flex_int16_t yy_base[753] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   62,   64,
       66,   71,   97,   96,   94,   85,   79, 4677, 4677, 4677,
     4677, 4677,   65, 4677,   65, 4677, 4677, 4677, 4677, 4677,
     4677, 4677,   72,   64, 4677, 4677,  131,  132,  152,  175,
      120,  203,   88,  202,   71,  232,  258,  269,  283,  302,
      304,  312,  342,  137,  156,  365,  357,  364, 4677, 4677,
     4677, 4677, 4677, 4677, 4677, 4677, 4677, 4677, 4677, 4677,
     4677, 4677, 4677, 4677, 4677,  308,  310,   88,   69, 4677,
      203,  259,  402,  410,  391,  447,  432,  460,  402,  461,
      462,  464,  466,  496,  474,  506,  510,  514,  516,  529,

      539,  556,  550,  562,  564,  579,  582,  585,  590,  596,
      604,  607,  615,  617,  641,  649,  660,  659,  663,  673,
      664,  705,  753,  713,  719,  741,  783,  723,  718,  724,
      767,  778,  781,  782,  786,  807,  826,  831,  836,  841,
      851,  859,  863,  861,  893,  880,  921,  884,  886,  907,
      935,  939,  940,  958,  964,  972,  961,  970,  998, 1000,
     1001, 1004, 1012, 1023, 1015, 1037, 1041, 1055, 1049, 1063,
     1074, 1085, 1089, 1077, 1104, 1114, 1119, 1137, 1148, 1131,
     1154, 1156, 1158, 1160, 1178, 1171, 1193, 1206, 1208, 1211,
     1216, 1219, 1234, 1238, 1251, 1248, 1261, 1262,  143,   72,

     1274, 1275, 1280, 1294, 1302, 1304, 1307, 1315, 1317, 1319,
     1329, 1337, 1343, 1347, 1361, 1358, 1369, 1371, 1373, 1372,
     1383, 1391, 1393, 1397, 1412, 1415, 1417, 1425, 1423, 1436,
     1437, 1447, 1460, 1465, 1471, 1473, 1477, 1479, 1492, 1500,
     1513, 1519, 1525, 1527, 1542, 1537, 1545, 1555, 1577, 1559,
     1578, 1596, 1599, 1600, 1601, 1613, 1614, 1633, 1628, 1681,
     1641, 1655, 1669, 1658, 1682, 1699, 1717, 1709, 1711, 1721,
     1722, 1736, 1744, 1750, 1761, 1762, 1776, 1784, 1782, 1787,
     1801, 1805, 1813, 1824, 1826, 1841, 1846, 1847, 1858, 1866,
     1868, 1870, 1869, 1890, 1887, 1909, 1912, 1914, 1922, 1920,

     1926, 1932, 1944, 1946, 1949, 1971, 1972, 1976, 1974, 1986,
     1997, 1999, 2000, 2001, 2011, 2022, 2026, 2036, 2040, 2041,
     2054, 2051, 2055, 2068, 2080, 2065, 2090, 2095, 2094, 2100,
     2108, 2113, 2114, 2134, 2135, 2136, 2148, 2154, 2158, 2162,
     2168, 2176, 2187, 2191, 2197, 2210, 2202, 2208, 2240, 2247,
     2220, 2260, 2272, 2273, 2275, 2283, 2286, 2300, 2297, 2330,
     2308, 2337, 2351, 2356, 2369, 2371, 2374, 2323, 2379, 2391,
     2393, 2396, 2401, 2404, 2415, 2419, 2423, 2436, 2433, 2444,
     2459, 2469, 2472, 2477, 2489, 4677,   70, 2492, 2494, 2502,
     2504, 2517, 2528, 2531, 2534, 2546, 2558, 2556, 2571, 2554,

     2573, 2586, 2588, 2599, 2591, 2610, 2613, 2616, 2628, 2631,
     2636, 2639, 2658, 2650, 2668, 2664, 2682, 2679, 2690, 2693,
     2707, 2708, 2712, 2722, 2727, 2730, 2733, 2735, 2756, 2757,
     2762, 2776, 2781, 2789, 2791, 2799, 2801, 2816, 2821, 2831,
     2435, 2834, 2844, 2845, 2849, 2857, 2855, 2877, 2879, 2885,
     2889, 2897, 2903, 2907, 2911, 2921, 2931, 2933, 2939, 2951,
     2956, 2973, 2974, 2976, 2979, 2984, 2996, 2997, 3001, 3002,
     3016, 3019, 3024, 3029, 3041, 3030, 3052, 3053, 3056, 3064,
     3075, 3078, 3081, 3086, 3089, 3101, 3104, 3107, 3115, 3118,
     3141, 3126, 3140, 3143, 3144, 3161, 3169, 3183, 3193, 3194,

     3204, 3212, 3223, 3226, 3236, 3237, 3248, 3256, 3260, 3262,
     3266, 3277, 3280, 3281, 3285, 3305, 3317, 3320, 3299, 3302,
     3334, 3335, 3365, 3345, 3377, 3353, 3359, 3363, 3395, 3396,
     3407, 3413, 3418, 3419, 3430, 3431, 3432, 3436, 3453, 3455,
     3458, 3472, 3473, 3475, 3476, 3487, 3495, 3498, 3509, 3512,
     3515, 3527, 3530, 3532, 3535, 3538, 3549, 3552, 3555, 3560,
     3572, 3575, 3578, 3589, 3592, 3597, 3600, 3612, 3614, 3615,
     3618, 3629, 3640, 3641, 3642, 3655, 3654, 3666, 3669, 3683,
     3684, 3694, 3695, 3698, 3708, 3709, 3712, 3735, 3720, 3737,
     3738, 3761, 3763, 3764, 3765, 3783, 3786, 3787, 3791, 3788,

     3815, 3816, 3820, 3837, 3839, 3840, 3841, 3842, 3845, 3864,
     3843, 3869, 3882, 3893, 3894, 3899, 3904, 3912, 3914, 3917,
     3918, 3936, 3922, 3939, 3944, 3947, 3957, 3962, 3972, 3968,
     3976, 3980, 3990, 4001, 4002, 4013, 4016, 4024, 4026, 4030,
     4034, 4036, 4053, 4056, 4059, 4070, 4076, 4078, 4080, 4082,
     4088, 4093, 4099, 4110, 4121, 4122, 4133, 4136, 4139, 4144,
     4147, 4150, 4162, 4165, 4173, 4176, 4179, 4184, 4187, 4190,
     4198, 4201, 4202, 4213, 4216, 4227, 4224, 4230, 4252, 4253,
     4256, 4257, 4275, 4267, 4270, 4278, 4280, 4281, 4293, 4307,
     4310, 4315, 4320, 4321, 4332, 4333, 4334, 4335, 4347, 4360,

     4361, 4374, 4375, 4387, 4386, 4389, 4404, 4401, 4400, 4415,
     4419, 4430, 4440, 4443, 4445, 4444, 4455, 4458, 4463, 4469,
     4473, 4484, 4495, 4497, 4498, 4503, 4508, 4518, 4521, 4523,
     4538, 4543, 4548, 4551, 4553, 4563, 4566, 4571, 4577, 4588,
     4596, 4606, 4607, 4611, 4677, 4664, 4666, 4668, 4670, 4672,
       70, 4674
    } ;

static const flex_int16_t yy_def[753] =
    {   0,
      745,    1,  746,  746,  746,  746,  746,  746,  747,  747,
      748,  748,  749,  749,  750,  750,  745,  745,  745,  745,
      745,  745,  751,  745,  752,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  751,  751,   37,   37,
      751,   37,  751,  751,   37,   37,   37,  751,  751,  751,
      751,  751,   37,  751,  751,  751,   37,   37,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  751,  751,  745,  752,  745,
      745,  745,  745,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,   37,  751,  751,  751,  751,  751,   37,
      751,  751,  751,  751,  751,  751,  123,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  123,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  123,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  123,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  745,   83,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  260,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,   40,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  145,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  745,  745,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      123,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  145,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,    0,  745,  745,  745,  745,  745,
      745,  745
    } ;

static const flex_int16_t yy_nxt[4742] =
    {   0,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   23,   32,   33,   34,   34,   34,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   23,   47,   48,   49,   50,   51,   23,
       52,   53,   54,   55,   56,   57,   58,   23,   23,   59,
       18,   60,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   61,   63,   61,   63,   61,   66,
       76,   77,   80,   61,   66,  386,   80,  386,  745,   76,
       82,   82,   82,   82,   82,  387,   78,   75,   82,   82,
       82,   82,   82,   76,   77,   77,   75,  134,   73,   73,

      745,  745,   76,  745,  745,   77,  135,  136,  745,   78,
      745,  137,   64,  745,   64,   81,   67,   76,   83,   81,
      745,   67,  132,  745,   68,   76,   69,   70,   71,   68,
      745,   69,   70,   71,   76,   83,   76,   76,  199,  745,
       76,   78,   76,  745,  745,   76,   76,  745,  199,  199,
      199,   76,   78,   78,   84,   85,  110,   86,   78,  111,
      745,   76,  745,   90,  187,   87,  112,   88,  188,   91,
       76,   89,   76,   92,   93,   95,   96,   78,   97,   94,
      745,  745,  189,   76,   76,  745,   98,   99,   77,   76,
      100,  745,   77,  199,  745,  745,  745,  101,  102,  103,

      745,  104,  105,  199,  199,  199,  106,   76,   76,   77,
       79,   77,  745,  745,  107,   77,   76,  108,  745,  745,
      109,  113,  745,   78,  745,  745,  114,  115,  116,  117,
      118,  119,  745,  745,  120,  745,  133,  121,  122,  123,
      124,  125,  745,  126,  127,  128,  129,  745,  745,  130,
      131,  745,  745,   79,   76,  138,  139,  140,   77,  141,
      745,  142,  745,   79,   79,   79,  143,  144,  145,  146,
      147,  745,   77,  148,   76,   82,   82,   82,   82,   82,
      149,  150,   77,   76,  151,  152,  153,  154,   76,  155,
       78,  745,  156,  157,   77,  158,  745,   76,   77,  159,

      160,  745,  745,  745,   78,  745,  161,   76,  745,   76,
      163,  745,  162,   76,  745,   76,   76,   76,   76,  745,
      164,   76,   76,   78,   76,   78,   76,  168,  745,   78,
      745,   78,  745,   78,  745,   76,  745,  171,  172,  173,
      165,  169,  166,  745,  745,  167,  745,  170,  745,  174,
      745,  745,  745,  175,   76,  745,   76,  745,  745,  745,
       76,  745,   76,  745,   76,  176,  177,  178,   77,  179,
       76,  180,  181,  182,  745,  745,  183,  184,   77,   76,
      191,  192,   77,   77,  185,  186,   78,  195,   77,  196,
       77,   77,  190,   77,  193,  745,   76,  194,  197,  745,

       77,  198,  745,  745,   77,   76,  745,   76,  745,  745,
      745,  745,   78,  745,  745,   76,   76,   76,  200,  200,
      200,  200,  200,   78,   76,  200,  200,  200,  200,  200,
      200,   78,  205,  201,  745,  745,  202,   76,  745,  745,
      210,  745,  745,   76,  745,  203,   76,  745,  745,  745,
      745,  204,   76,   78,   76,  200,  200,  200,  200,  200,
      200,   76,   76,  208,  745,   76,   76,   76,   78,   76,
      745,   76,  206,  207,   76,   76,   76,  745,   76,   76,
       76,   78,   78,   78,   76,   78,  209,   78,   76,  745,
      745,  216,  213,  745,  745,   78,  745,  745,  745,   76,

      745,   76,  745,  211,  214,  212,  217,  218,  220,  215,
       76,   76,   76,   76,   76,   76,   76,   78,   76,   76,
       76,   76,  745,  745,   76,  745,   76,   78,   76,  745,
       76,   78,  745,  745,   76,   78,  745,   78,  219,  223,
      224,  227,  745,   76,   76,  225,  745,  745,   76,  222,
       78,  221,  745,   76,  228,   76,  226,  745,   76,  745,
       78,   76,   76,  745,   76,  230,   76,   76,   76,   76,
       76,   78,  229,  745,  745,  745,   76,   78,   76,  231,
      745,   76,  745,   78,   76,   78,  745,   76,  745,  233,
       76,   76,  745,   76,  745,   76,   76,  232,  745,   76,

       78,   76,   76,   78,   76,  745,   78,  745,   76,   76,
       76,   78,   76,  745,   76,  745,   76,   78,   76,  745,
       76,   76,  236,  234,  745,   78,  745,  235,   78,   76,
      745,   76,  745,  745,   76,  745,   78,   76,  237,  745,
       77,  241,   76,  242,  745,  745,   76,  238,   76,  239,
      745,   77,  745,   77,   76,   76,   76,  243,  745,   76,
      745,  240,   78,   76,   76,   76,  745,   76,   76,   76,
       78,  745,  745,   76,   76,  244,  745,   76,   76,  246,
       78,   78,  245,  247,   78,   78,  248,  249,  745,  745,
      260,  250,  745,   76,  745,  251,  253,   77,  254,  255,

      745,   76,  745,  252,  745,  745,  745,  256,  257,  258,
       76,   76,   76,   77,  259,   76,   76,  745,   76,   76,
      745,  745,  745,   76,   76,  745,   78,   76,   76,   76,
      745,  745,   76,   76,   78,  745,  745,   76,   76,   78,
       78,  745,  269,  282,   78,   78,   76,  283,  261,  284,
      745,  745,  745,  268,  745,   76,  745,   76,   76,  270,
      745,  271,   78,  745,  281,   76,  285,   76,  745,  745,
       76,   76,   76,  745,   78,   76,   76,  272,  262,  263,
      264,   76,  273,   76,  265,  745,   76,   76,   78,  745,
      266,   76,   76,   76,  267,   76,   76,  745,  745,   78,

       76,  286,   78,   78,  745,   76,  274,   78,  275,   77,
      276,  745,   76,  289,  277,  287,  745,  745,  745,   76,
       77,   76,  278,  288,   77,  279,  280,  745,   78,  290,
       76,   76,  291,   76,   76,  745,   76,  745,   76,  745,
       76,   76,  745,  745,  745,   76,   76,   78,  292,  293,
       76,  294,   78,  295,  745,   76,   76,   78,  296,   76,
      745,  745,   78,  297,   76,   76,   76,  745,   76,  745,
      745,  745,   78,   76,  745,   76,  299,   76,   76,  745,
       78,  745,   78,   76,   78,   76,  300,  298,   76,   76,
      301,   76,  745,   76,   76,  745,  745,  745,   76,  302,

       76,   78,  745,   76,  745,   78,  745,   78,  745,  745,
      745,   76,   76,   76,  745,   76,  303,  304,  305,   77,
      306,   76,  307,  745,   77,  745,   76,  308,   78,  745,
      309,  310,   76,  745,  311,   76,   76,  315,   76,  745,
       76,  312,   78,  745,   76,   76,  745,  316,  313,   76,
      745,  745,  745,   76,   76,  745,   78,  745,  314,   76,
       78,   78,  318,   76,  745,  745,   76,  745,  745,   76,
      745,  745,   76,   76,  745,   76,  317,   76,   76,   78,
      319,  320,   78,  745,  321,   78,   76,   76,  745,  745,
      323,   76,   76,   78,  745,  326,  327,   77,  324,  322,

      745,   77,  325,   76,  745,   76,   76,  328,  745,   76,
       76,   77,   76,   76,   76,   76,   76,   76,   76,   78,
       76,   78,   78,  745,   76,   78,   76,  745,   76,   76,
      745,  745,  329,   78,  745,  334,   78,   76,  333,  330,
      331,  335,   76,  745,   78,  332,   76,  745,  745,  745,
       76,   76,   76,   76,   76,   76,   76,  338,   78,  745,
       76,  336,   78,   76,   76,  337,  339,   76,   76,   76,
       78,  745,  745,  745,  745,   76,   78,   76,  745,   76,
      745,  341,   76,  340,   78,  745,  745,  342,   76,   76,
       76,   76,  745,   76,   76,   78,  745,  745,   78,   76,

      745,   76,  745,   76,  343,  745,   78,   76,  344,   76,
       78,  351,  745,  745,  345,   76,  745,  352,   76,   76,
      346,  745,  745,  347,   76,   78,   76,  348,   76,   76,
      349,  350,  745,   76,  745,   78,   76,   76,  745,  353,
       78,   76,   76,  357,  354,   76,  745,  745,  355,  745,
      745,   76,   78,   76,  356,  745,   76,  361,   78,   76,
      358,   76,   76,   76,  745,   76,   76,  745,   76,   78,
       76,   76,   76,  359,   76,   78,   76,   78,  745,   78,
      745,   78,  365,   76,  366,   76,  745,  745,  362,   76,
      360,  363,   78,  745,  364,  373,  745,  745,   76,  745,

       76,  367,  745,  368,  369,   77,   76,   76,   76,  370,
       76,   76,   76,   76,   78,  371,   76,  745,  372,   77,
       76,   76,   76,   76,   76,   76,  376,   78,  745,   78,
       76,  745,   78,   76,  374,  745,  745,   78,  745,   76,
       78,  375,  745,   76,  745,   76,  745,  378,   76,  745,
      379,  377,   76,   76,  745,   78,   76,  745,   76,   78,
       76,  745,   76,   76,  745,   76,   76,   76,   76,   78,
      745,   76,   78,  381,  380,   76,   76,  382,  383,   76,
       76,  745,   78,   78,  384,   76,   76,  745,   76,   76,
       76,  745,  745,  745,   76,   78,   78,  745,  745,   76,

       76,   78,  385,   76,  745,  745,  745,   76,   76,   76,
      745,  745,   76,   76,   76,   78,   76,  745,   76,  745,
       76,   76,   76,   78,   76,   78,   76,   76,   78,   76,
      745,   76,   76,   76,   76,  745,   78,  745,   78,  388,
       78,  745,   76,   76,  389,  745,   76,  745,   76,  745,
       78,   76,   76,  390,   76,  745,   76,   76,   78,   76,
      745,   76,  745,   76,   78,  745,   76,   76,   78,   76,
      391,   76,   76,  392,   76,   76,   76,   76,   76,   78,
      745,   76,   78,   76,  393,   76,   76,   76,   76,   76,
       78,  745,   78,   78,   78,   76,   76,   76,   76,   76,

      394,  745,   76,  745,   78,   76,  395,   76,  745,  745,
       76,   76,   78,   76,   78,  745,  745,   76,   78,  745,
       76,   76,   76,   76,   76,   76,   76,  745,   76,   76,
       76,   76,  745,   78,  745,   76,   78,   76,   78,   76,
      745,   76,   76,   76,   78,   76,   78,  745,  745,   76,
       76,   76,   76,  745,  399,  745,  396,   78,   78,  745,
      745,   76,  745,  400,   76,   76,  397,   76,   78,   76,
       76,  398,  745,  745,   76,   76,   76,   76,   76,   76,
      745,   78,   76,  745,   76,   76,   78,   76,   76,   76,
      745,   76,   78,   76,   78,  745,  745,   76,   78,   76,

       78,  745,  745,  745,  402,   76,   76,  745,  745,  745,
      745,  401,   76,   78,   76,  745,  745,   76,   76,  403,
      745,   78,  745,   76,   76,   76,  745,   76,  745,   76,
       76,   76,   76,   76,   78,  404,  745,  745,  745,   76,
       78,   76,   76,  745,   76,  406,   78,   76,   78,  745,
       76,   76,   76,  407,  405,  745,   76,  745,   78,   76,
       76,  745,  745,   78,   76,   76,   78,  745,  745,   76,
      745,   76,  410,   76,  745,  745,   78,   76,  409,   76,
       78,  745,   76,   76,  408,  745,  745,  745,  745,   76,
      411,   76,   76,  745,   76,  745,  412,   76,   78,   78,

      414,   76,  413,  415,   76,   76,   76,   76,  745,  416,
       76,   76,  745,   76,   76,   76,  745,   78,   76,   76,
       78,   78,   78,  417,  745,  418,  745,   76,   76,   76,
       76,  745,  420,   76,   78,   78,  745,  419,   76,  421,
      422,  745,   76,  745,  745,  745,   76,   76,   76,   78,
      745,   76,   76,   76,   78,   76,  745,  423,  424,  745,
       76,  745,   78,   76,  425,   76,   76,  745,  745,   76,
      426,  427,   76,  745,   76,  434,   78,  745,  745,   78,
       76,  745,  745,   76,  745,   76,   76,   76,  745,  435,
       78,  745,  745,   76,  437,   76,   76,  745,  428,  745,

      436,  745,   78,   78,   76,  745,  429,   76,  430,  745,
       76,  745,  745,   76,   76,  431,   76,  745,  438,  432,
       78,   76,   76,   76,  745,   76,   76,   76,  745,  433,
       78,   76,   78,   76,   76,   76,   76,  439,   78,  745,
      440,   76,   78,   78,  442,  445,  745,  745,  444,   76,
       76,   76,  745,  443,  745,   76,  745,   78,   76,  441,
      745,   76,  446,   76,   76,   78,   76,   76,  745,   76,
      745,   78,  745,   76,   76,   76,   76,  745,  745,  745,
      745,   76,   78,   78,  449,  745,  447,  745,   76,   76,
       76,  745,   76,  745,  448,  745,   76,   78,   76,   77,

      745,   76,   76,  745,  450,   78,   76,  453,   78,  454,
       76,  457,  451,   76,   76,   76,   77,  745,   76,   76,
      455,  745,   78,  456,  452,  745,   78,   76,   76,   76,
       77,   76,  745,  745,   78,  745,   76,  745,   76,   76,
       76,  745,  459,  458,  745,   78,   76,   78,  460,  745,
      745,   76,   76,   76,  461,   76,  745,   76,  745,  463,
       76,   76,   78,   76,  745,   76,  462,   78,   78,  745,
      464,   76,   76,   76,   76,   76,   76,  745,   76,   78,
       76,  745,   76,   76,   76,  745,  745,   78,  472,   78,
       78,   78,   76,   76,  468,   76,  469,  745,   76,   76,

      466,   76,  465,  745,   76,  467,  473,  745,   78,  745,
       76,   78,  470,  745,   76,  471,  474,   76,   76,   76,
       76,   76,   76,   76,  475,   76,   76,   76,   76,  476,
       78,   76,  745,   78,   76,   78,   76,   76,  745,   76,
       76,   78,   76,   78,  745,  745,   76,   78,  745,   76,
      745,   76,  745,   78,   76,  745,  745,  745,   76,  745,
       76,   76,  477,   76,   76,   78,   76,   78,  478,  745,
       78,  479,   76,  480,   76,  745,   76,   76,   76,   76,
      745,   76,  745,  745,   76,   76,   76,  745,   76,  745,
       76,   76,   78,   78,  745,   78,   76,   78,   76,  481,

       76,   76,   76,  482,   76,   76,   76,   78,  745,  745,
      745,   76,  745,   76,   76,   76,   76,  745,   78,  745,
       78,   78,   78,   76,   76,   76,   76,   76,   76,  745,
      745,   76,   78,  745,  745,  745,   76,  745,   76,  483,
       76,   76,  745,   78,  745,   76,   76,   78,  745,   76,
       76,   76,   76,   76,   76,   76,   76,   78,  745,   76,
       76,   78,   78,   76,  745,   76,  745,  745,   76,   76,
       76,  745,   78,   76,   76,   78,   78,  745,   76,   76,
      484,  745,   76,  745,  745,   76,   78,  745,   76,   78,
      745,  745,   76,   76,   76,   76,  485,  486,  489,   76,

       76,   78,  745,   76,   76,   76,   76,   76,   76,   76,
      487,   78,  745,   76,   76,   78,   78,   76,   76,   76,
       76,   78,   76,  745,  745,  488,  745,   76,   76,   78,
      745,  490,   76,  491,   78,   78,  745,  745,  745,   76,
       76,   76,   76,  745,  745,  745,   76,   76,   76,   76,
       76,  745,   76,   76,  492,   78,   78,   78,  745,   76,
       76,  493,   76,   76,  745,   76,   76,   76,   76,   78,
      745,  745,   76,   76,  494,   78,   76,  745,  745,   78,
      745,   76,   76,   78,  745,  495,   76,   76,   76,   78,
       76,  745,   76,  745,  497,  745,   76,   78,  745,  499,

       76,   76,   76,  496,  500,   76,   76,   76,   78,  498,
       76,   76,   78,   76,   76,   76,   76,  501,   78,  745,
       76,  745,   76,   78,   76,   76,  745,  745,   76,   78,
      745,   78,  745,  745,   76,  504,  745,  503,  745,   76,
      745,   78,  745,   76,  505,  745,  745,  745,  745,   76,
      745,  502,   76,  745,   76,  745,  506,  745,  745,  745,
       76,   76,   76,   77,  507,   76,  508,   77,   78,  745,
      745,   77,   76,  745,   76,  512,  745,   76,   76,  509,
       76,   78,  510,  513,  745,  511,   76,   76,   76,   76,
      745,   76,  745,   78,   78,  745,   78,   76,  745,   76,

       76,  514,   76,  745,   78,   76,  745,   78,  745,  745,
      745,   76,   76,   76,   76,  745,  745,  745,   78,  745,
      745,   78,   76,  745,   76,   76,  745,   76,   76,   78,
      745,  745,  745,  745,  745,   76,  745,   76,   76,  516,
      745,  515,   76,  745,   78,  745,  745,  745,  745,   76,
      528,   76,   76,  517,  518,  519,   76,  520,   78,  521,
       76,   76,  745,  529,  522,   76,  523,  524,  525,  745,
       76,  526,   78,  745,   76,   76,   76,   78,  527,   76,
      745,  745,  531,   76,   76,   76,  745,  745,   76,   76,
       78,  530,   78,   76,  745,   78,   76,  745,   76,  745,

       78,   76,  745,   76,  745,   76,   76,   76,   76,   76,
       76,  532,   78,  533,   78,   76,  745,   78,   76,  534,
       76,   76,   78,   76,   76,   78,   76,  745,   76,   76,
      745,   76,  745,   76,  535,  745,   78,   76,   76,  745,
       78,   76,  537,   76,   78,   76,  536,   76,   76,   76,
       76,  745,  745,   76,   78,  745,   76,   78,   76,  745,
      589,   77,  590,  538,   76,   78,   77,   76,  539,  541,
      542,   76,   77,   76,   76,   76,  591,   76,  540,  745,
       78,  745,   76,   76,  745,   76,   76,  745,   76,  745,
       78,   76,  745,   78,   76,  544,   76,   76,   78,   76,

      543,  545,  745,   76,  745,  745,   76,   76,   76,   76,
       78,   76,  745,   78,  745,   78,   76,  745,   76,  546,
      745,   76,   76,   78,   76,   78,  547,  745,  745,   76,
      548,   76,  745,   76,  745,  745,   76,  745,   78,   76,
      745,   76,   76,  549,   76,   76,   76,  745,   76,   78,
      745,   76,   78,  745,   76,   78,   76,  745,  745,   76,
       76,   76,  745,   76,  745,  745,  550,   78,   76,   76,
       76,  745,   76,  745,  745,   78,   76,   78,   76,   78,
       76,  554,  551,   76,  552,   76,   76,   76,  745,  745,
      745,   76,   78,   76,   78,  745,   76,  555,   76,  556,

       76,  745,   76,  553,   76,   76,   76,   78,   76,   78,
       76,  745,   78,   76,  745,   76,  559,  745,   76,  745,
       78,   76,  745,   76,   76,   76,  557,   76,  558,  745,
       76,   78,  745,   76,   78,  745,   76,   78,   76,  745,
       76,   76,   76,   76,   76,   76,  745,  745,  560,   78,
       76,   76,   78,   76,  561,   76,  745,   78,  745,  745,
       78,  745,   76,   76,   76,   76,  745,  745,   76,   76,
      745,   78,   76,   76,  563,  745,  745,  562,   76,   78,
       76,  565,   76,   76,   76,   78,  745,   76,   76,   78,
      745,   76,  745,   76,  745,   76,   76,  745,   76,  564,

       78,  745,   76,   78,   76,  569,  566,   76,  567,  568,
       76,   78,   76,   76,   78,  745,   76,   76,  745,  745,
       76,   76,   76,  745,  745,  570,   76,   76,   78,   78,
      745,   76,   76,   78,   76,   76,   76,  571,   76,  745,
       76,   76,   76,   78,   76,   76,  572,   76,   78,   76,
      745,   78,  745,  745,   78,  745,   78,  576,  745,   76,
       76,   76,   76,  573,   76,  745,  745,   76,  575,  574,
       76,   76,  745,  745,   76,  745,   76,   78,   78,   76,
      579,   76,   76,   78,  745,   76,   76,   76,  745,  745,
       76,  580,  745,  578,   76,   76,   76,   78,  581,  745,

      745,  577,   78,   76,   76,   76,   76,  582,   76,   76,
       78,  745,   78,   76,   76,   76,  745,  745,  584,  745,
       78,   76,   78,  745,  745,  745,   76,  583,   76,  745,
       76,  745,  586,   76,  745,   76,   76,   78,  745,   76,
      585,   76,   78,   76,  745,   76,  745,  587,   76,   76,
       76,   76,   78,   76,   76,   78,  745,  592,   76,   76,
       76,  745,   76,   76,  745,   78,   78,  593,   76,   76,
       78,   76,  745,   76,  745,  588,   78,  745,   78,  745,
      594,  745,   76,   76,   76,  595,   76,  745,  596,  745,
       76,   76,  597,   76,   76,  745,   76,   76,   78,   76,

       78,   76,   76,   76,  598,  745,   78,   76,   76,   76,
       78,   76,   76,  599,  601,  745,   76,   76,   78,  745,
      745,   76,  745,  600,   78,   76,   76,  745,   78,   76,
      745,   76,   78,  745,  745,   76,   76,   76,   76,  602,
      745,   76,   78,  604,   76,   76,  745,   76,  603,   76,
      745,  745,   78,   76,   78,   76,   76,  745,  745,   76,
       78,   76,  745,   76,  745,   76,  605,  745,  745,  606,
       76,  607,   78,   76,  608,  745,  745,   78,   76,   76,
      745,   76,  745,   76,   76,   76,  745,   76,   76,   76,
       76,   76,  745,   76,   78,   78,  609,   78,   76,  611,

       78,   76,   76,   76,  745,   78,   76,   76,   76,  745,
       76,   76,  745,  745,  745,   76,   76,   78,   78,  745,
      610,   76,   78,   78,   76,   76,   76,  745,   76,   76,
       76,   76,  745,   76,   76,   76,   76,   78,   76,  745,
       78,  745,  612,   76,   76,   78,   76,  745,   76,   76,
       78,   78,  745,   76,   76,   76,  614,   76,   76,  745,
      745,   76,   78,  745,  745,  745,   76,   76,   76,   76,
       76,   76,  745,   78,   78,  615,   76,   78,   76,  613,
       76,   76,   76,   76,  745,   78,   76,  745,  745,   76,
      745,   76,   76,   76,   76,   76,   78,  745,  745,   78,

       76,  616,   78,   76,   76,   76,   76,   78,   76,   76,
       78,  745,   76,  617,  745,   76,   76,  745,   76,  745,
       76,   76,   78,   76,  745,   78,  745,   76,   78,   76,
       76,   76,   76,   76,  745,  745,   78,  745,   76,   78,
       76,   76,  618,  745,  619,   76,   76,   78,   76,   76,
      624,  745,  625,   76,   76,   76,   76,   76,   76,   76,
      745,   78,   78,  620,   78,   78,   76,   76,  621,  745,
       76,  626,  627,  745,   76,   76,  745,  622,   76,  629,
      745,  745,   78,   76,  745,  630,  628,  631,   76,  623,
       78,  745,   76,   76,  745,   76,   76,   76,   76,   76,

      633,  745,  745,  745,   78,  745,  632,   76,   76,   76,
      634,  745,  745,   76,   78,   78,  745,   76,   76,  635,
      637,   76,  745,  745,  745,   78,   76,  639,   76,  745,
      640,   76,  641,   78,  745,   76,  745,   76,  636,  638,
       76,   76,   76,  745,   78,   76,   76,   78,  643,  745,
       76,   76,  642,   76,  745,  745,   76,   78,   78,  745,
      745,   76,   76,  644,   76,   76,  745,   76,  745,   78,
       76,   76,  745,  745,   76,   76,   76,   78,   76,  745,
       76,   78,   76,   78,  645,   76,   76,   78,   76,   76,
       76,   76,  745,  745,   76,   76,  745,  745,   78,   76,

       76,   78,   78,  745,   76,  745,   78,   76,   76,  646,
       76,  647,   76,   76,   76,  745,   76,  745,   76,   76,
       78,  745,   76,   78,  745,   76,   78,  745,  745,   76,
      648,   76,   76,   76,   76,  745,  649,   76,   78,   76,
       76,   78,  745,  745,  650,  745,  745,  651,   76,   76,
       76,   76,  745,  745,   76,   78,   78,   76,   76,   76,
      745,  652,  653,  745,   76,  745,   78,   76,   76,   76,
      745,  745,   76,   76,   78,  745,  745,   76,  745,  745,
       78,  745,   76,  745,   78,  745,   76,   76,  654,  655,
      656,   76,  657,  745,  658,  745,  745,   76,   78,  659,

       76,   76,  660,  661,  664,   76,  662,  745,  745,   76,
       76,   76,   76,  663,  665,   76,   78,   78,   76,  745,
      745,   76,  745,   76,   76,  745,  745,   76,   78,   76,
      745,  745,   76,   76,   78,   76,   76,   76,  666,   78,
       78,   76,  745,  745,   76,   76,   76,   76,   76,  745,
       76,   78,   78,   78,  667,  745,  668,   78,   76,   76,
       76,  745,  745,   76,  745,   76,  745,   76,  745,   76,
       76,   76,   76,  670,   78,  669,   78,   76,   76,   78,
       76,   76,   76,   76,   76,  745,   76,   76,   76,   76,
       76,  745,   76,   78,   78,  745,   78,   78,  745,  745,

       76,   76,  671,   76,  745,   76,  745,   76,   78,   76,
       76,  673,   76,  672,   76,  745,   78,   76,  745,   78,
       76,  745,  675,   76,   76,   76,   76,   76,   76,   76,
       78,  745,   76,   78,  745,   76,   78,   76,  674,   76,
       76,   76,  745,   76,   76,  745,   76,   76,   78,   76,
       76,   78,   76,   78,   76,  745,   78,   76,  745,   78,
       76,   76,  676,   76,   76,   76,   76,   76,  745,   76,
       78,  745,  745,   78,   76,  745,   78,   76,  745,   76,
       76,   78,   76,   76,   76,  745,   76,   76,  677,   76,
       76,  745,   76,   78,   76,  745,   78,   76,  745,   78,

      745,   76,   76,   76,   76,   76,   76,   76,  745,  745,
       78,   76,   76,   78,   76,  745,  678,   76,   78,   76,
       76,   78,  745,   76,   76,  745,   76,   76,   76,   76,
       76,  679,   76,   78,   76,   78,   78,  745,  680,   78,
      745,   76,  745,   76,   76,   76,   76,   76,  745,   76,
       78,  745,   76,  681,   76,   76,   76,  745,  682,   76,
       76,   78,   78,   78,   76,  745,   76,   76,   76,   76,
       76,   76,  745,  745,   76,   78,   78,  745,  745,  745,
       76,   76,  683,   76,  745,  745,  745,   78,   76,   76,
       78,  745,   76,   76,   76,  684,  686,   76,   76,   76,

       76,  688,  689,   76,   78,   78,   76,   76,   76,   76,
      685,  687,   76,   76,   76,   78,   78,   76,   76,   78,
      745,   76,   76,   76,  745,   76,   76,  745,  745,   78,
       78,  745,  745,   78,   76,   76,   76,  745,  745,  691,
       76,   78,   76,   76,  690,  745,   76,   76,  745,   76,
       76,   76,   76,  745,  692,  745,   78,  745,   78,   78,
       76,   76,  693,  745,   76,  694,   76,  745,   76,   76,
       76,  745,   76,  695,  745,   76,  745,   76,   76,   76,
      745,  699,   78,  696,   78,   78,   78,   76,   76,   76,
       76,   76,   76,   76,  745,  745,   76,   76,  745,  698,

       76,   76,   76,  697,   78,   76,  745,   78,   78,   78,
      745,  745,   78,   76,  745,   76,   76,   76,  702,  700,
       76,   76,  745,  703,  745,   76,  701,  745,  745,   76,
       76,  745,  745,  745,   76,   76,   78,   78,   76,   76,
       76,   78,   76,   76,   76,   76,   76,   76,   76,  745,
       76,   76,  704,   76,   76,   76,   76,   76,   78,   76,
       78,   78,   78,   78,   78,  745,   78,   76,   76,   76,
      708,  745,   76,  745,   76,  745,  745,  710,   76,  706,
      707,  705,  745,   76,  745,   78,  745,   76,  745,   76,
       78,   76,   76,   76,   76,   76,   76,   76,   76,   76,

      745,  745,  709,   78,   76,  745,  745,   76,   76,   76,
      711,  712,  745,   76,   78,   78,   76,   76,   76,   76,
       78,   76,   76,   76,  745,   78,   76,   76,   76,  745,
      745,   76,   76,   78,   76,   78,   76,  745,   78,   78,
      745,   76,  745,   78,   76,   76,   76,  745,  745,   76,
       76,   76,   76,   76,  745,  745,   76,   78,   76,  745,
       78,   76,   76,  713,   76,   78,   76,   76,   78,   76,
       76,   76,  745,   76,   76,  745,   76,   76,   78,  745,
      745,   76,   76,   78,  714,   76,   76,  745,   76,   78,
       76,   76,  745,   78,   76,   76,   76,   78,  745,   76,

      745,   78,  745,  715,   76,  745,   76,   76,  745,   76,
      745,   78,  745,  745,   76,   76,   76,  745,   76,  745,
       76,   76,   78,   78,   76,  745,  716,   76,   76,   76,
       76,   76,   76,  745,   78,   76,  745,   78,   76,   76,
       76,   76,   76,  717,   76,   78,  745,   78,   76,  745,
       76,   78,  718,   76,   76,   78,  745,   78,   76,  745,
      720,   76,  745,  745,   76,   76,  745,   76,   76,  745,
       76,  719,  745,   76,   78,   76,   76,   78,   76,  721,
       78,   76,   76,   76,   76,   76,   76,   76,   76,  745,
       76,   78,   76,   76,   76,  745,   76,   78,   76,   78,

      745,   78,   76,   78,   76,   76,  745,   76,   76,   78,
      745,   76,  745,   76,   78,   76,  745,  722,  745,  745,
       78,  745,   76,  745,   76,  745,   76,   76,   76,  745,
       76,   78,   76,  745,   76,   76,   76,  723,   76,  745,
       76,   76,   78,   78,   76,   76,  745,   76,  724,   76,
       76,   76,   76,   76,   78,   76,  745,   78,   76,  745,
       78,   76,   76,  725,   76,   78,  726,   76,   78,  745,
       76,   78,  745,   76,   76,  745,   76,  745,   76,   76,
      745,   76,  745,   78,   76,   76,   78,   76,   76,   76,
       76,   76,   76,   76,   78,   76,   76,   78,   76,   76,

       78,   76,   76,   76,   76,   78,   76,   76,   78,  745,
      745,   78,   76,  745,   76,   76,   76,   76,   76,   78,
      745,   76,   78,   78,  727,   76,  745,   76,   76,   76,
       76,   76,   76,  745,   78,   76,   76,   78,   76,   76,
      745,   76,   76,  745,   76,   78,  745,  745,   78,  745,
       76,   78,  745,   76,   76,  728,  729,   76,   76,  745,
      745,   76,   76,  745,  745,   76,   76,   76,   76,  745,
       76,   76,   76,   78,   78,   76,   76,   78,   78,   76,
       76,   76,   76,   76,   76,   76,   76,  745,   78,   76,
      730,   78,   76,  745,   76,   76,   78,  745,   76,   78,

      745,   78,   78,  745,   76,   76,  745,   76,   76,   76,
      745,  745,   76,  731,   78,   76,  745,  745,  745,   76,
       76,   76,   76,  745,   76,   76,   76,   76,   78,   76,
       76,   78,   76,   76,   76,   76,   78,   76,   76,   76,
       76,   78,   78,  745,  745,   76,   76,   76,   76,   76,
      745,  745,   76,   78,   78,   78,   78,  745,  745,   76,
      745,   76,   76,  745,  745,   76,   76,   76,   78,  745,
      745,  745,   76,   76,   76,   76,  732,  745,  745,   76,
       76,   78,   78,  745,   76,   76,   76,   76,   76,   76,
      745,   76,   76,  745,   76,   78,   78,  745,  745,   76,

       76,   76,  733,   76,  745,   76,   76,   78,   78,   76,
       78,  745,   76,   76,   76,   76,  745,  737,   76,  745,
       76,   78,   78,  745,   76,   78,   76,   76,  734,   76,
      745,  745,  745,   76,  745,   76,   78,  745,   76,   76,
       78,   76,  735,  736,   76,   76,  738,  745,   76,   76,
       76,   78,   76,   76,   76,  745,   76,   76,   76,   76,
       76,   78,  745,   76,   78,   78,   78,   76,   76,   76,
      745,   76,   76,  740,   76,  745,   78,   76,   76,   78,
      745,  745,   76,   76,   78,  745,  745,   76,  745,   76,
       78,  745,   76,  739,   78,   76,   76,   76,   76,  745,

       76,  745,   76,   76,  745,   78,  745,   76,   76,   76,
       76,   76,   76,   76,  745,   76,   78,   76,   78,   78,
      741,   76,   76,   76,   78,   76,   76,  745,   76,   78,
      745,  745,   76,  745,  745,   76,   76,   76,  745,   78,
      745,  745,   78,   76,   78,  742,  745,   76,   76,   76,
       76,  745,   76,   76,  745,   76,   76,   76,   76,   78,
       76,  745,   76,  745,   78,   76,  745,   76,   76,   78,
       76,   76,   78,   76,   78,   76,   76,   76,  745,  745,
       76,  745,   76,  745,   78,   76,  745,   78,  745,  745,
       76,   76,   78,   76,  745,   76,  745,  745,   78,  745,

       76,   76,   76,   76,  744,   76,  745,  745,  745,   78,
       76,   76,   76,  743,  745,   76,   76,   78,   76,  745,
       76,   76,  745,   76,  745,   76,  745,   78,   78,   76,
      745,  745,   78,  745,  745,  745,  745,  745,  745,  745,
       76,  745,  745,  745,  745,  745,  745,  745,   76,  745,
      745,  745,  745,  745,  745,  745,  745,  745,   76,   76,
      745,  745,  745,   76,   61,   61,   62,   62,   65,   65,
       72,   72,   74,   74,   79,   79,   17,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,

      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745
    } ;

static const flex_int16_t yy_chk[4742] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    9,    9,   10,   10,   11,   11,
       23,  751,   25,   12,   12,  387,   79,  200,   17,   23,
       34,   34,   34,   34,   34,  200,   23,   16,   33,   33,
       33,   33,   33,   43,   45,   45,   15,   45,   14,   13,

        0,    0,   43,    0,    0,   45,   45,   45,    0,   43,
        0,   45,    9,    0,   10,   25,   11,   23,   33,   79,
        0,   12,   43,    0,   11,   41,   11,   11,   11,   12,
        0,   12,   12,   12,   41,   33,   37,   38,   78,    0,
       43,   41,   54,    0,    0,   37,   38,    0,   78,   78,
       78,   54,   37,   38,   37,   37,   41,   37,   54,   41,
        0,   55,    0,   38,   54,   37,   41,   37,   54,   38,
       55,   37,   41,   38,   38,   39,   39,   55,   39,   38,
        0,    0,   55,   37,   38,    0,   39,   39,   39,   54,
       39,    0,   39,  199,    0,    0,    0,   39,   40,   40,

        0,   40,   40,  199,  199,  199,   40,   44,   55,   40,
       81,   40,    0,    0,   40,   40,   44,   40,    0,    0,
       40,   42,    0,   44,    0,    0,   42,   42,   42,   42,
       42,   42,    0,    0,   42,    0,   44,   42,   42,   42,
       42,   42,    0,   42,   42,   42,   42,    0,    0,   42,
       42,    0,    0,   81,   44,   46,   46,   46,   46,   46,
        0,   46,    0,   81,   81,   81,   46,   46,   46,   46,
       46,    0,   46,   46,   48,   82,   82,   82,   82,   82,
       46,   47,   47,   48,   47,   47,   47,   47,   49,   47,
       48,    0,   47,   47,   47,   47,    0,   49,   47,   47,

       47,    0,    0,    0,   49,    0,   48,   50,    0,   51,
       49,    0,   48,   76,    0,   77,   50,   52,   51,    0,
       49,   48,   76,   50,   77,   51,   52,   51,    0,   76,
        0,   77,    0,   52,    0,   49,    0,   52,   52,   52,
       50,   51,   50,    0,    0,   50,    0,   51,    0,   52,
        0,    0,    0,   52,   50,    0,   51,    0,    0,    0,
       76,    0,   77,    0,   52,   53,   53,   53,   53,   53,
       56,   53,   53,   53,    0,    0,   53,   53,   53,   56,
       57,   57,   53,   57,   53,   53,   56,   58,   58,   58,
       58,   57,   56,   57,   57,    0,   85,   57,   58,    0,

       58,   58,    0,    0,   58,   85,    0,   89,    0,    0,
        0,    0,   85,    0,    0,   84,   89,   56,   83,   83,
       83,   83,   83,   89,   84,   83,   83,   83,   83,   83,
       83,   84,   85,   84,    0,    0,   84,   87,    0,    0,
       89,    0,    0,   85,    0,   84,   87,    0,    0,    0,
        0,   84,   86,   87,   89,   83,   83,   83,   83,   83,
       83,   86,   84,   87,    0,   88,   90,   91,   86,   92,
        0,   93,   86,   86,   88,   90,   91,    0,   92,   95,
       93,   88,   90,   91,   87,   92,   88,   93,   95,    0,
        0,   93,   92,    0,    0,   95,    0,    0,    0,   86,

        0,   94,    0,   90,   92,   91,   93,   93,   95,   92,
       94,   96,   88,   90,   91,   97,   92,   94,   93,   98,
       96,   99,    0,    0,   97,    0,   95,   96,   98,    0,
       99,   97,    0,    0,  100,   98,    0,   99,   94,   98,
       98,   99,    0,  100,  101,   98,    0,    0,   94,   97,
      100,   96,    0,  101,   99,  103,   98,    0,   96,    0,
      101,  102,   97,    0,  103,  101,   98,  104,   99,  105,
      102,  103,  100,    0,    0,    0,  104,  102,  105,  102,
        0,  100,    0,  104,  106,  105,    0,  107,    0,  105,
      108,  101,    0,  106,    0,  109,  107,  102,    0,  108,

      106,  110,  103,  107,  109,    0,  108,    0,  102,  111,
      110,  109,  112,    0,  104,    0,  105,  110,  111,    0,
      113,  112,  110,  106,    0,  111,    0,  109,  112,  113,
        0,  106,    0,    0,  107,    0,  113,  108,  110,    0,
      114,  114,  109,  114,    0,    0,  115,  111,  110,  112,
        0,  114,    0,  114,  116,  115,  111,  114,    0,  112,
        0,  113,  115,  116,  118,  117,    0,  113,  119,  121,
      116,    0,    0,  118,  117,  115,    0,  119,  121,  116,
      118,  117,  115,  116,  119,  121,  116,  117,    0,    0,
      121,  117,    0,  115,    0,  118,  120,  120,  120,  120,

        0,  116,    0,  119,    0,    0,    0,  120,  120,  120,
      122,  118,  117,  120,  120,  119,  121,    0,  124,  122,
        0,    0,    0,  129,  125,    0,  122,  124,  128,  130,
        0,    0,  129,  125,  124,    0,    0,  128,  130,  129,
      125,    0,  125,  129,  128,  130,  126,  130,  122,  130,
        0,    0,    0,  124,    0,  126,    0,  122,  123,  125,
        0,  125,  126,    0,  128,  124,  130,  123,    0,    0,
      129,  125,  131,    0,  123,  128,  130,  126,  123,  123,
      123,  131,  126,  132,  123,    0,  133,  134,  131,    0,
      123,  135,  132,  126,  123,  133,  134,    0,    0,  132,

      135,  131,  133,  134,    0,  123,  127,  135,  127,  127,
      127,    0,  136,  134,  127,  132,    0,    0,    0,  131,
      127,  136,  127,  133,  127,  127,  127,    0,  136,  135,
      132,  137,  136,  133,  134,    0,  138,    0,  135,    0,
      137,  139,    0,    0,    0,  138,  140,  137,  136,  136,
      139,  136,  138,  137,    0,  140,  141,  139,  138,  136,
        0,    0,  140,  139,  142,  141,  144,    0,  143,    0,
        0,    0,  141,  142,    0,  144,  141,  143,  137,    0,
      142,    0,  144,  138,  143,  146,  142,  140,  139,  148,
      143,  149,    0,  140,  146,    0,    0,    0,  148,  144,

      149,  146,    0,  141,    0,  148,    0,  149,    0,    0,
        0,  142,  150,  144,    0,  143,  145,  145,  145,  145,
      145,  150,  145,    0,  145,    0,  147,  145,  150,    0,
      145,  145,  146,    0,  145,  147,  148,  150,  149,    0,
      151,  145,  147,    0,  152,  153,    0,  150,  147,  151,
        0,    0,    0,  152,  153,    0,  151,    0,  147,  150,
      152,  153,  152,  154,    0,    0,  157,    0,    0,  155,
        0,    0,  154,  147,    0,  157,  151,  156,  155,  154,
      152,  153,  157,    0,  154,  155,  156,  151,    0,    0,
      155,  152,  153,  156,    0,  158,  158,  158,  156,  154,

        0,  158,  157,  159,    0,  160,  161,  158,    0,  162,
      154,  158,  159,  157,  160,  161,  155,  163,  162,  159,
      165,  160,  161,    0,  156,  162,  163,    0,  164,  165,
        0,    0,  159,  163,    0,  163,  165,  164,  162,  159,
      160,  163,  166,    0,  164,  161,  167,    0,    0,    0,
      159,  166,  160,  161,  169,  167,  162,  165,  166,    0,
      168,  164,  167,  169,  163,  164,  166,  165,  170,  168,
      169,    0,    0,    0,    0,  164,  168,  170,    0,  171,
        0,  168,  174,  167,  170,    0,    0,  169,  171,  166,
      172,  174,    0,  167,  173,  171,    0,    0,  174,  172,

        0,  169,    0,  173,  170,    0,  172,  168,  171,  175,
      173,  174,    0,    0,  171,  170,    0,  174,  175,  176,
      172,    0,    0,  172,  177,  175,  171,  173,  176,  174,
      173,  173,    0,  177,    0,  176,  180,  172,    0,  175,
      177,  173,  178,  177,  176,  180,    0,    0,  176,    0,
        0,  178,  180,  179,  176,    0,  175,  180,  178,  181,
      178,  182,  179,  183,    0,  184,  176,    0,  181,  179,
      182,  177,  183,  179,  184,  181,  186,  182,    0,  183,
        0,  184,  182,  180,  183,  186,    0,    0,  181,  178,
      179,  181,  186,    0,  181,  186,    0,    0,  187,    0,

      179,  184,    0,  185,  185,  185,  181,  187,  182,  185,
      183,  188,  184,  189,  187,  185,  190,    0,  185,  185,
      188,  191,  189,  186,  192,  190,  189,  188,    0,  189,
      191,    0,  190,  192,  187,    0,    0,  191,    0,  193,
      192,  188,    0,  194,    0,  187,    0,  191,  193,    0,
      192,  190,  194,  196,    0,  193,  195,    0,  188,  194,
      189,    0,  196,  190,    0,  195,  197,  198,  191,  196,
        0,  192,  195,  194,  193,  197,  198,  195,  196,  201,
      202,    0,  197,  198,  197,  203,  193,    0,  201,  202,
      194,    0,    0,    0,  203,  201,  202,    0,    0,  204,

      196,  203,  198,  195,    0,    0,    0,  205,  204,  206,
        0,    0,  207,  197,  198,  204,  205,    0,  206,    0,
      208,  207,  209,  205,  210,  206,  201,  202,  207,  208,
        0,  209,  203,  210,  211,    0,  208,    0,  209,  205,
      210,    0,  212,  211,  208,    0,  204,    0,  213,    0,
      211,  212,  214,  210,  205,    0,  206,  213,  212,  207,
        0,  214,    0,  216,  213,    0,  215,  208,  214,  209,
      211,  210,  216,  212,  217,  215,  218,  220,  219,  216,
        0,  211,  215,  217,  215,  218,  220,  219,  221,  212,
      217,    0,  218,  220,  219,  213,  222,  221,  223,  214,

      219,    0,  224,    0,  221,  222,  220,  223,    0,    0,
      216,  224,  222,  215,  223,    0,    0,  225,  224,    0,
      226,  217,  227,  218,  220,  219,  225,    0,  229,  226,
      228,  227,    0,  225,    0,  221,  226,  229,  227,  228,
        0,  230,  231,  222,  229,  223,  228,    0,    0,  224,
      230,  231,  232,    0,  229,    0,  226,  230,  231,    0,
        0,  232,    0,  230,  225,  233,  228,  226,  232,  227,
      234,  228,    0,    0,  233,  229,  235,  228,  236,  234,
        0,  233,  237,    0,  238,  235,  234,  236,  230,  231,
        0,  237,  235,  238,  236,    0,    0,  239,  237,  232,

      238,    0,    0,    0,  237,  240,  239,    0,    0,    0,
        0,  235,  233,  239,  240,    0,    0,  234,  241,  239,
        0,  240,    0,  235,  242,  236,    0,  241,    0,  237,
      243,  238,  244,  242,  241,  240,    0,    0,    0,  243,
      242,  244,  246,    0,  239,  242,  243,  245,  244,    0,
      247,  246,  240,  244,  241,    0,  245,    0,  246,  247,
      248,    0,    0,  245,  250,  241,  247,    0,    0,  248,
        0,  242,  247,  250,    0,    0,  248,  243,  246,  244,
      250,    0,  249,  251,  245,    0,    0,    0,    0,  246,
      248,  249,  251,    0,  245,    0,  248,  247,  249,  251,

      250,  252,  249,  250,  253,  254,  255,  248,    0,  251,
      252,  250,    0,  253,  254,  255,    0,  252,  256,  257,
      253,  254,  255,  252,    0,  253,    0,  256,  257,  249,
      251,    0,  255,  259,  256,  257,    0,  254,  258,  256,
      256,    0,  259,    0,    0,    0,  261,  258,  252,  259,
        0,  253,  254,  255,  258,  261,    0,  257,  258,    0,
      262,    0,  261,  264,  258,  256,  257,    0,    0,  262,
      259,  259,  264,    0,  263,  261,  262,    0,    0,  264,
      259,    0,    0,  263,    0,  258,  260,  265,    0,  262,
      263,    0,    0,  261,  264,  260,  265,    0,  260,    0,

      263,    0,  260,  265,  266,    0,  260,  262,  260,    0,
      264,    0,    0,  266,  268,  260,  269,    0,  265,  260,
      266,  263,  267,  268,    0,  269,  270,  271,    0,  260,
      268,  267,  269,  260,  265,  270,  271,  266,  267,    0,
      267,  272,  270,  271,  268,  271,    0,    0,  270,  273,
      272,  266,    0,  269,    0,  274,    0,  272,  273,  267,
        0,  268,  272,  269,  274,  273,  275,  276,    0,  267,
        0,  274,    0,  270,  271,  275,  276,    0,    0,    0,
        0,  277,  275,  276,  275,    0,  273,    0,  272,  278,
      277,    0,  280,    0,  274,    0,  273,  277,  278,  279,

        0,  280,  274,    0,  276,  278,  281,  279,  280,  279,
      282,  280,  277,  275,  276,  281,  279,    0,  283,  282,
      279,    0,  281,  279,  278,    0,  282,  283,  277,  284,
      279,  285,    0,    0,  283,    0,  278,    0,  284,  280,
      285,    0,  282,  281,    0,  284,  286,  285,  283,    0,
        0,  287,  288,  281,  284,  286,    0,  282,    0,  286,
      287,  288,  286,  289,    0,  283,  285,  287,  288,    0,
      287,  290,  289,  291,  293,  292,  284,    0,  285,  289,
      290,    0,  291,  293,  292,    0,    0,  290,  293,  291,
      293,  292,  295,  286,  292,  294,  292,    0,  287,  288,

      290,  295,  289,    0,  294,  291,  293,    0,  295,    0,
      289,  294,  292,    0,  296,  292,  294,  297,  290,  298,
      291,  293,  292,  296,  294,  300,  297,  299,  298,  295,
      296,  301,    0,  297,  300,  298,  299,  302,    0,  295,
      301,  300,  294,  299,    0,    0,  302,  301,    0,  303,
        0,  304,    0,  302,  305,    0,    0,    0,  303,    0,
      304,  296,  298,  305,  297,  303,  298,  304,  299,    0,
      305,  303,  300,  304,  299,    0,  306,  307,  301,  309,
        0,  308,    0,    0,  302,  306,  307,    0,  309,    0,
      308,  310,  306,  307,    0,  309,  303,  308,  304,  307,

      310,  305,  311,  308,  312,  313,  314,  310,    0,    0,
        0,  311,    0,  312,  313,  314,  315,    0,  311,    0,
      312,  313,  314,  306,  307,  315,  309,  316,  308,    0,
        0,  317,  315,    0,    0,    0,  316,    0,  310,  315,
      317,  318,    0,  316,    0,  319,  320,  317,    0,  311,
      318,  312,  313,  314,  319,  320,  322,  318,    0,  321,
      323,  319,  320,  315,    0,  322,    0,    0,  321,  323,
      326,    0,  322,  324,  316,  321,  323,    0,  317,  326,
      318,    0,  324,    0,    0,  325,  326,    0,  318,  324,
        0,    0,  319,  320,  325,  327,  321,  323,  326,  329,

      328,  325,    0,  322,  327,  330,  321,  323,  329,  328,
      324,  327,    0,  331,  330,  329,  328,  326,  332,  333,
      324,  330,  331,    0,    0,  325,    0,  332,  333,  331,
        0,  327,  325,  328,  332,  333,    0,    0,    0,  334,
      335,  336,  327,    0,    0,    0,  329,  328,  334,  335,
      336,    0,  330,  337,  332,  334,  335,  336,    0,  338,
      331,  332,  337,  339,    0,  332,  333,  340,  338,  337,
        0,    0,  339,  341,  334,  338,  340,    0,    0,  339,
        0,  342,  341,  340,    0,  338,  334,  335,  336,  341,
      342,    0,  343,    0,  341,    0,  344,  342,    0,  342,

      337,  343,  345,  340,  342,  344,  338,  347,  343,  341,
      339,  345,  344,  348,  340,  346,  347,  343,  345,    0,
      341,    0,  348,  347,  346,  351,    0,    0,  342,  348,
        0,  346,    0,    0,  351,  348,    0,  347,    0,  343,
        0,  351,    0,  344,  348,    0,    0,    0,    0,  345,
        0,  346,  350,    0,  347,    0,  348,    0,    0,    0,
      348,  350,  346,  349,  349,  352,  349,  349,  350,    0,
        0,  349,  351,    0,  352,  350,    0,  353,  354,  349,
      355,  352,  349,  350,    0,  349,  353,  354,  356,  355,
        0,  357,    0,  353,  354,    0,  355,  356,    0,  350,

      357,  354,  359,    0,  356,  358,    0,  357,    0,    0,
        0,  359,  352,  361,  358,    0,    0,    0,  359,    0,
        0,  358,  361,    0,  353,  354,    0,  355,  368,  361,
        0,    0,    0,    0,    0,  356,    0,  368,  357,  359,
        0,  358,  362,    0,  368,    0,    0,    0,    0,  359,
      361,  362,  358,  360,  360,  360,  363,  360,  362,  360,
      361,  364,    0,  362,  360,  363,  360,  360,  360,    0,
      364,  360,  363,    0,  365,  368,  366,  364,  360,  367,
        0,    0,  364,  365,  369,  366,    0,    0,  367,  362,
      365,  363,  366,  369,    0,  367,  370,    0,  371,    0,

      369,  372,    0,  363,    0,  370,  373,  371,  364,  374,
      372,  365,  370,  366,  371,  373,    0,  372,  374,  367,
      375,  365,  373,  366,  376,  374,  367,    0,  377,  375,
        0,  369,    0,  376,  371,    0,  375,  377,  379,    0,
      376,  378,  375,  370,  377,  371,  374,  379,  372,  380,
      378,    0,    0,  373,  379,    0,  374,  378,  380,    0,
      441,  441,  441,  377,  381,  380,  441,  375,  377,  379,
      380,  376,  441,  381,  382,  377,  441,  383,  378,    0,
      381,    0,  384,  382,    0,  379,  383,    0,  378,    0,
      382,  384,    0,  383,  385,  382,  380,  388,  384,  389,

      381,  383,    0,  385,    0,    0,  388,  390,  389,  391,
      385,  381,    0,  388,    0,  389,  390,    0,  391,  384,
        0,  382,  392,  390,  383,  391,  388,    0,    0,  384,
      389,  392,    0,  393,    0,    0,  394,    0,  392,  395,
        0,  385,  393,  392,  388,  394,  389,    0,  395,  393,
        0,  396,  394,    0,  390,  395,  391,    0,    0,  400,
      396,  398,    0,  397,    0,    0,  393,  396,  400,  392,
      398,    0,  397,    0,    0,  400,  399,  398,  401,  397,
      393,  398,  397,  394,  397,  399,  395,  401,    0,    0,
        0,  402,  399,  403,  401,    0,  405,  399,  396,  401,

      402,    0,  403,  397,  404,  405,  400,  402,  398,  403,
      397,    0,  405,  404,    0,  406,  404,    0,  407,    0,
      404,  408,    0,  399,  406,  401,  402,  407,  403,    0,
      408,  406,    0,  409,  407,    0,  410,  408,  402,    0,
      403,  411,  409,  405,  412,  410,    0,    0,  406,  409,
      411,  404,  410,  412,  408,  414,    0,  411,    0,    0,
      412,    0,  406,  413,  414,  407,    0,    0,  408,  416,
        0,  414,  413,  415,  411,    0,    0,  410,  416,  413,
      409,  414,  415,  410,  418,  416,    0,  417,  411,  415,
        0,  412,    0,  418,    0,  419,  417,    0,  420,  413,

      418,    0,  414,  417,  419,  418,  415,  420,  415,  417,
      413,  419,  421,  422,  420,    0,  416,  423,    0,    0,
      415,  421,  422,    0,    0,  419,  423,  424,  421,  422,
        0,  418,  425,  423,  417,  426,  424,  420,  427,    0,
      428,  425,  419,  424,  426,  420,  423,  427,  425,  428,
        0,  426,    0,    0,  427,    0,  428,  427,    0,  421,
      422,  429,  430,  424,  423,    0,    0,  431,  426,  425,
      429,  430,    0,    0,  424,    0,  431,  429,  430,  425,
      431,  432,  426,  431,    0,  427,  433,  428,    0,    0,
      432,  431,    0,  430,  434,  433,  435,  432,  431,    0,

        0,  429,  433,  434,  436,  435,  437,  432,  429,  430,
      434,    0,  435,  436,  431,  437,    0,    0,  435,    0,
      436,  438,  437,    0,    0,    0,  439,  434,  432,    0,
      438,    0,  437,  433,    0,  439,  440,  438,    0,  442,
      436,  434,  439,  435,    0,  440,    0,  438,  442,  443,
      444,  436,  440,  437,  445,  442,    0,  442,  443,  444,
      447,    0,  446,  445,    0,  443,  444,  443,  438,  447,
      445,  446,    0,  439,    0,  440,  447,    0,  446,    0,
      444,    0,  448,  440,  449,  445,  442,    0,  446,    0,
      450,  448,  447,  449,  451,    0,  443,  444,  448,  450,

      449,  445,  452,  451,  448,    0,  450,  447,  453,  446,
      451,  452,  454,  449,  451,    0,  455,  453,  452,    0,
        0,  454,    0,  450,  453,  455,  456,    0,  454,  448,
        0,  449,  455,    0,    0,  456,  457,  450,  458,  452,
        0,  451,  456,  454,  459,  457,    0,  458,  453,  452,
        0,    0,  457,  459,  458,  453,  460,    0,    0,  454,
      459,  461,    0,  455,    0,  460,  456,    0,    0,  457,
      461,  457,  460,  456,  459,    0,    0,  461,  462,  463,
        0,  464,    0,  457,  465,  458,    0,  462,  463,  466,
      464,  459,    0,  465,  462,  463,  462,  464,  466,  464,

      465,  467,  468,  460,    0,  466,  469,  470,  461,    0,
      467,  468,    0,    0,    0,  469,  470,  467,  468,    0,
      463,  471,  469,  470,  472,  462,  463,    0,  464,  473,
      471,  465,    0,  472,  474,  476,  466,  471,  473,    0,
      472,    0,  470,  474,  476,  473,  475,    0,  467,  468,
      474,  476,    0,  469,  470,  475,  476,  477,  478,    0,
        0,  479,  475,    0,    0,    0,  477,  478,  471,  480,
      479,  472,    0,  477,  478,  476,  473,  479,  480,  475,
      481,  474,  476,  482,    0,  480,  483,    0,    0,  481,
        0,  484,  482,  475,  485,  483,  481,    0,    0,  482,

      484,  478,  483,  485,  477,  478,  486,  484,  479,  487,
      485,    0,  488,  484,    0,  486,  480,    0,  487,    0,
      489,  488,  486,  490,    0,  487,    0,  481,  488,  489,
      482,  492,  490,  483,    0,    0,  489,    0,  484,  490,
      492,  485,  490,    0,  490,  493,  491,  492,  494,  495,
      492,    0,  492,  486,  493,  491,  487,  494,  495,  488,
        0,  493,  491,  490,  494,  495,  496,  489,  491,    0,
      490,  492,  492,    0,  497,  496,    0,  491,  492,  495,
        0,    0,  496,  497,    0,  496,  493,  496,  498,  491,
      497,    0,  493,  491,    0,  494,  495,  498,  499,  500,

      497,    0,    0,    0,  498,    0,  496,  499,  500,  501,
      498,    0,    0,  496,  499,  500,    0,  502,  501,  499,
      500,  497,    0,    0,    0,  501,  502,  501,  503,    0,
      501,  504,  501,  502,    0,  498,    0,  503,  499,  500,
      504,  505,  506,    0,  503,  499,  500,  504,  503,    0,
      505,  506,  502,  507,    0,    0,  501,  505,  506,    0,
        0,  508,  507,  505,  502,  509,    0,  510,    0,  507,
      508,  511,    0,    0,  509,  503,  510,  508,  504,    0,
      511,  509,  512,  510,  505,  513,  514,  511,  505,  506,
      515,  512,    0,    0,  513,  514,    0,    0,  512,  515,

      507,  513,  514,    0,  519,    0,  515,  520,  508,  515,
      516,  515,  509,  519,  510,    0,  520,    0,  511,  516,
      519,    0,  517,  520,    0,  518,  516,    0,    0,  512,
      515,  517,  513,  514,  518,    0,  516,  515,  517,  521,
      522,  518,    0,    0,  517,    0,    0,  518,  521,  522,
      524,  519,    0,    0,  520,  521,  522,  516,  526,  524,
        0,  521,  522,    0,  527,    0,  524,  526,  528,  517,
        0,    0,  518,  527,  526,    0,    0,  528,    0,    0,
      527,    0,  525,    0,  528,    0,  521,  522,  523,  523,
      523,  525,  523,    0,  523,    0,    0,  524,  525,  523,

      529,  530,  523,  523,  525,  526,  523,    0,    0,  529,
      530,  527,  531,  523,  525,  528,  529,  530,  532,    0,
        0,  531,    0,  533,  534,    0,    0,  532,  531,  525,
        0,    0,  533,  534,  532,  535,  536,  537,  530,  533,
      534,  538,    0,    0,  535,  536,  537,  529,  530,    0,
      538,  535,  536,  537,  535,    0,  535,  538,  539,  531,
      540,    0,    0,  541,    0,  532,    0,  539,    0,  540,
      533,  534,  541,  537,  539,  535,  540,  542,  543,  541,
      544,  545,  535,  536,  537,    0,  542,  543,  538,  544,
      545,    0,  546,  542,  543,    0,  544,  545,    0,    0,

      547,  546,  541,  548,    0,  539,    0,  540,  546,  547,
      541,  546,  548,  543,  549,    0,  547,  550,    0,  548,
      551,    0,  548,  549,  542,  543,  550,  544,  545,  551,
      549,    0,  552,  550,    0,  553,  551,  554,  547,  546,
      555,  552,    0,  556,  553,    0,  554,  547,  552,  555,
      548,  553,  556,  554,  557,    0,  555,  558,    0,  556,
      559,  549,  554,  557,  550,  560,  558,  551,    0,  559,
      557,    0,    0,  558,  560,    0,  559,  561,    0,  552,
      562,  560,  553,  563,  554,    0,  561,  555,  558,  562,
      556,    0,  563,  561,  564,    0,  562,  565,    0,  563,

        0,  557,  566,  564,  558,  567,  565,  559,    0,    0,
      564,  566,  560,  565,  567,    0,  563,  568,  566,  569,
      570,  567,    0,  571,  561,    0,  568,  562,  569,  570,
      563,  564,  571,  568,  572,  569,  570,    0,  567,  571,
        0,  564,    0,  572,  565,  573,  574,  575,    0,  566,
      572,    0,  567,  570,  573,  574,  575,    0,  571,  577,
      576,  573,  574,  575,  568,    0,  569,  570,  577,  576,
      571,  578,    0,    0,  579,  577,  576,    0,    0,    0,
      578,  572,  573,  579,    0,    0,    0,  578,  580,  581,
      579,    0,  573,  574,  575,  576,  579,  580,  581,  582,

      583,  580,  581,  584,  580,  581,  577,  576,  582,  583,
      578,  579,  584,  585,  586,  582,  583,  587,  578,  584,
        0,  579,  585,  586,    0,  589,  587,    0,    0,  585,
      586,    0,    0,  587,  589,  580,  581,    0,    0,  585,
      588,  589,  590,  591,  584,    0,  582,  583,    0,  588,
      584,  590,  591,    0,  587,    0,  588,    0,  590,  591,
      585,  586,  588,    0,  587,  589,  592,    0,  593,  594,
      595,    0,  589,  590,    0,  592,    0,  593,  594,  595,
        0,  594,  592,  591,  593,  594,  595,  588,  596,  590,
      591,  597,  598,  600,    0,    0,  599,  596,    0,  593,

      597,  598,  600,  592,  596,  599,    0,  597,  598,  600,
        0,    0,  599,  592,    0,  593,  594,  595,  599,  596,
      601,  602,    0,  600,    0,  603,  597,    0,    0,  601,
      602,    0,    0,    0,  603,  596,  601,  602,  597,  598,
      600,  603,  604,  599,  605,  606,  607,  608,  611,    0,
      609,  604,  601,  605,  606,  607,  608,  611,  604,  609,
      605,  606,  607,  608,  611,    0,  609,  601,  602,  610,
      609,    0,  603,    0,  612,    0,    0,  611,  610,  607,
      608,  604,    0,  612,    0,  610,    0,  613,    0,  604,
      612,  605,  606,  607,  608,  611,  613,  609,  614,  615,

        0,    0,  610,  613,  616,    0,    0,  614,  615,  617,
      612,  613,    0,  616,  614,  615,  610,  618,  617,  619,
      616,  612,  620,  621,    0,  617,  618,  623,  619,    0,
        0,  620,  621,  618,  613,  619,  623,    0,  620,  621,
        0,  622,    0,  623,  624,  614,  615,    0,    0,  625,
      622,  616,  626,  624,    0,    0,  617,  622,  625,    0,
      624,  626,  627,  622,  618,  625,  619,  628,  626,  620,
      621,  627,    0,  630,  623,    0,  628,  629,  627,    0,
        0,  631,  630,  628,  622,  632,  629,    0,  622,  630,
      631,  624,    0,  629,  632,  633,  625,  631,    0,  626,

        0,  632,    0,  629,  633,    0,  634,  635,    0,  627,
        0,  633,    0,    0,  628,  634,  635,    0,  636,    0,
      630,  637,  634,  635,  629,    0,  633,  636,  631,  638,
      637,  639,  632,    0,  636,  640,    0,  637,  638,  641,
      639,  642,  633,  634,  640,  638,    0,  639,  641,    0,
      642,  640,  639,  634,  635,  641,    0,  642,  643,    0,
      641,  644,    0,    0,  645,  636,    0,  643,  637,    0,
      644,  639,    0,  645,  643,  646,  638,  644,  639,  641,
      645,  647,  640,  648,  646,  649,  641,  650,  642,    0,
      647,  646,  648,  651,  649,    0,  650,  647,  652,  648,

        0,  649,  651,  650,  653,  643,    0,  652,  644,  651,
        0,  645,    0,  653,  652,  654,    0,  649,    0,    0,
      653,    0,  646,    0,  654,    0,  655,  656,  647,    0,
      648,  654,  649,    0,  650,  655,  656,  654,  657,    0,
      651,  658,  655,  656,  659,  652,    0,  657,  655,  660,
      658,  653,  661,  659,  657,  662,    0,  658,  660,    0,
      659,  661,  654,  658,  662,  660,  659,  663,  661,    0,
      664,  662,    0,  655,  656,    0,  663,    0,  665,  664,
        0,  666,    0,  663,  667,  657,  664,  665,  658,  668,
      666,  659,  669,  667,  665,  670,  660,  666,  668,  661,

      667,  669,  662,  671,  670,  668,  672,  673,  669,    0,
        0,  670,  671,    0,  663,  672,  673,  664,  674,  671,
        0,  675,  672,  673,  671,  665,    0,  674,  666,  677,
      675,  667,  676,    0,  674,  678,  668,  675,  677,  669,
        0,  676,  670,    0,  678,  677,    0,    0,  676,    0,
      671,  678,    0,  672,  673,  674,  676,  679,  680,    0,
        0,  681,  682,    0,    0,  674,  679,  680,  675,    0,
      681,  682,  684,  679,  680,  685,  677,  681,  682,  676,
      683,  684,  678,  686,  685,  687,  688,    0,  684,  683,
      679,  685,  686,    0,  687,  688,  683,    0,  689,  686,

        0,  687,  688,    0,  679,  680,    0,  689,  681,  682,
        0,    0,  690,  683,  689,  691,    0,    0,    0,  684,
      692,  690,  685,    0,  691,  693,  694,  683,  690,  692,
      686,  691,  687,  688,  693,  694,  692,  695,  696,  697,
      698,  693,  694,    0,    0,  689,  695,  696,  697,  698,
        0,    0,  699,  695,  696,  697,  698,    0,    0,  690,
        0,  699,  691,    0,    0,  700,  701,  692,  699,    0,
        0,    0,  693,  694,  700,  701,  695,    0,    0,  702,
      703,  700,  701,    0,  695,  696,  697,  698,  702,  703,
        0,  705,  704,    0,  706,  702,  703,    0,    0,  699,

      705,  704,  700,  706,    0,  709,  708,  705,  704,  707,
      706,    0,  700,  701,  709,  708,    0,  709,  707,    0,
      710,  709,  708,    0,  711,  707,  702,  703,  704,  710,
        0,    0,    0,  711,    0,  712,  710,    0,  705,  704,
      711,  706,  707,  708,  712,  713,  711,    0,  714,  716,
      715,  712,  709,  708,  713,    0,  707,  714,  716,  715,
      717,  713,    0,  718,  714,  716,  715,  710,  719,  717,
        0,  711,  718,  716,  720,    0,  717,  719,  721,  718,
        0,    0,  712,  720,  719,    0,    0,  721,    0,  722,
      720,    0,  713,  715,  721,  714,  716,  715,  722,    0,

      723,    0,  724,  725,    0,  722,    0,  717,  726,  723,
      718,  724,  725,  727,    0,  719,  723,  726,  724,  725,
      722,  720,  727,  728,  726,  721,  729,    0,  730,  727,
        0,    0,  728,    0,    0,  729,  722,  730,    0,  728,
        0,    0,  729,  731,  730,  728,    0,  723,  732,  724,
      725,    0,  731,  733,    0,  726,  734,  732,  735,  731,
      727,    0,  733,    0,  732,  734,    0,  735,  736,  733,
      728,  737,  734,  729,  735,  730,  738,  736,    0,    0,
      737,    0,  739,    0,  736,  738,    0,  737,    0,    0,
      731,  739,  738,  740,    0,  732,    0,    0,  739,    0,

      733,  741,  740,  734,  739,  735,    0,    0,    0,  740,
      741,  742,  743,  738,    0,  736,  744,  741,  737,    0,
      742,  743,    0,  738,    0,  744,    0,  742,  743,  739,
        0,    0,  744,    0,    0,    0,    0,    0,    0,    0,
      740,    0,    0,    0,    0,    0,    0,    0,  741,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  742,  743,
        0,    0,    0,  744,  746,  746,  747,  747,  748,  748,
      749,  749,  750,  750,  752,  752,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,

      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "nask.ll"
/* -*- c++ -*- File generated by the BNF Converter (bnfc 2.9.5). */
/* Lexer definition for use with FLex */
/* Additional data for the lexer: a buffer for lexing string literals. */

#line 14 "nask.ll"
#include "scanner.hh"

/* using "token" to make the returns for the tokens shorter to type */
using token = nask_::NaskParser::token;


#include "absyn.hh"
#include "bison.hh"

#define initialize_lexer nask__initialize_lexer

/* BEGIN extensible string buffer */

#include "buffer.hh"

/* The initial size of the buffer to lex string literals. */
#define LITERAL_BUFFER_INITIAL_SIZE 1024

/* The pointer to the literal buffer. */
Buffer literal_buffer = nullptr;

/* Initialize the literal buffer. */
#define LITERAL_BUFFER_CREATE() literal_buffer = newBuffer(LITERAL_BUFFER_INITIAL_SIZE)

/* Append characters at the end of the buffer. */
#define LITERAL_BUFFER_APPEND(s) bufferAppendString(literal_buffer, s)

/* Append a character at the end of the buffer. */
#define LITERAL_BUFFER_APPEND_CHAR(c) bufferAppendChar(literal_buffer, c)

/* Release the buffer, returning a pointer to its content. */
#define LITERAL_BUFFER_HARVEST() releaseBuffer(literal_buffer)

/* In exceptional cases, e.g. when reaching EOF, we have to free the buffer. */
#define LITERAL_BUFFER_FREE() freeBuffer(literal_buffer)

/* END extensible string buffer */

/* update location on matching */
#define YY_USER_ACTION \
loc->begin.line   = loc->end.line; \
loc->begin.column = loc->end.column; \
for(int i = 0; yytext[i] != '\0'; i++) { \
    if(yytext[i] == '\n') { \
        loc->end.line++; \
        loc->end.column = 0; \
    } \
    else { \
        loc->end.column++; \
    } \
}
#line 1765 "lexer.cc"

#line 1767 "lexer.cc"

#define INITIAL 0
#define CHAR 1
#define CHARESC 2
#define CHAREND 3
#define STRING 4
#define ESCAPED 5
#define COMMENT 6
#define COMMENT1 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE Buffer

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 74 "nask.ll"


#line 1907 "lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 746 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4677 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 76 "nask.ll"
return token::_LBRACK;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 77 "nask.ll"
return token::_RBRACK;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 78 "nask.ll"
return token::_COMMA;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 79 "nask.ll"
return token::_PLUS;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 80 "nask.ll"
return token::_MINUS;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 81 "nask.ll"
return token::_STAR;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 82 "nask.ll"
return token::_SLASH;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 83 "nask.ll"
return token::_PERCENT;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 84 "nask.ll"
return token::_LPAREN;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 85 "nask.ll"
return token::_RPAREN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 86 "nask.ll"
return token::_COLON;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 87 "nask.ll"
return token::_KW_AAA;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 88 "nask.ll"
return token::_KW_AAD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 89 "nask.ll"
return token::_KW_AAM;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 90 "nask.ll"
return token::_KW_AAS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 91 "nask.ll"
return token::_KW_ABSOLUTE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 92 "nask.ll"
return token::_KW_ADC;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 93 "nask.ll"
return token::_KW_ADD;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 94 "nask.ll"
return token::_KW_ALIGN;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 95 "nask.ll"
return token::_KW_ALIGNB;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 96 "nask.ll"
return token::_KW_AND;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 97 "nask.ll"
return token::_KW_ARPL;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 98 "nask.ll"
return token::_KW_BITS;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 99 "nask.ll"
return token::_KW_BOUND;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 100 "nask.ll"
return token::_KW_BSF;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 101 "nask.ll"
return token::_KW_BSR;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 102 "nask.ll"
return token::_KW_BSWAP;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 103 "nask.ll"
return token::_KW_BT;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 104 "nask.ll"
return token::_KW_BTC;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 105 "nask.ll"
return token::_KW_BTR;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 106 "nask.ll"
return token::_KW_BTS;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 107 "nask.ll"
return token::_KW_BYTE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 108 "nask.ll"
return token::_KW_CALL;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 109 "nask.ll"
return token::_KW_CBW;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 110 "nask.ll"
return token::_KW_CDQ;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 111 "nask.ll"
return token::_KW_CLC;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 112 "nask.ll"
return token::_KW_CLD;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 113 "nask.ll"
return token::_KW_CLI;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 114 "nask.ll"
return token::_KW_CLTS;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 115 "nask.ll"
return token::_KW_CMC;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 116 "nask.ll"
return token::_KW_CMP;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 117 "nask.ll"
return token::_KW_CMPSB;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 118 "nask.ll"
return token::_KW_CMPSD;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 119 "nask.ll"
return token::_KW_CMPSW;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "nask.ll"
return token::_KW_CMPXCHG;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "nask.ll"
return token::_KW_CPUID;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "nask.ll"
return token::_KW_CWD;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "nask.ll"
return token::_KW_CWDE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "nask.ll"
return token::_KW_DAA;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "nask.ll"
return token::_KW_DAS;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "nask.ll"
return token::_KW_DB;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "nask.ll"
return token::_KW_DD;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "nask.ll"
return token::_KW_DEC;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "nask.ll"
return token::_KW_DIV;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "nask.ll"
return token::_KW_DQ;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "nask.ll"
return token::_KW_DT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 132 "nask.ll"
return token::_KW_DW;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "nask.ll"
return token::_KW_DWORD;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 134 "nask.ll"
return token::_KW_END;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "nask.ll"
return token::_KW_ENTER;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 136 "nask.ll"
return token::_KW_EQU;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 137 "nask.ll"
return token::_KW_EXTERN;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 138 "nask.ll"
return token::_KW_F2XM1;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 139 "nask.ll"
return token::_KW_FABS;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 140 "nask.ll"
return token::_KW_FADD;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 141 "nask.ll"
return token::_KW_FADDP;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 142 "nask.ll"
return token::_KW_FAR;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 143 "nask.ll"
return token::_KW_FBLD;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 144 "nask.ll"
return token::_KW_FBSTP;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 145 "nask.ll"
return token::_KW_FCHS;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 146 "nask.ll"
return token::_KW_FCLEX;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 147 "nask.ll"
return token::_KW_FCOM;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 148 "nask.ll"
return token::_KW_FCOMP;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 149 "nask.ll"
return token::_KW_FCOMPP;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 150 "nask.ll"
return token::_KW_FCOS;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 151 "nask.ll"
return token::_KW_FDECSTP;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 152 "nask.ll"
return token::_KW_FDISI;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 153 "nask.ll"
return token::_KW_FDIV;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 154 "nask.ll"
return token::_KW_FDIVP;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 155 "nask.ll"
return token::_KW_FDIVR;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 156 "nask.ll"
return token::_KW_FDIVRP;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 157 "nask.ll"
return token::_KW_FENI;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 158 "nask.ll"
return token::_KW_FFREE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 159 "nask.ll"
return token::_KW_FIADD;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 160 "nask.ll"
return token::_KW_FICOM;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 161 "nask.ll"
return token::_KW_FICOMP;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 162 "nask.ll"
return token::_KW_FIDIV;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 163 "nask.ll"
return token::_KW_FIDIVR;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 164 "nask.ll"
return token::_KW_FILD;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 165 "nask.ll"
return token::_KW_FILE;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 166 "nask.ll"
return token::_KW_FIMUL;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 167 "nask.ll"
return token::_KW_FINCSTP;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 168 "nask.ll"
return token::_KW_FINIT;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 169 "nask.ll"
return token::_KW_FIST;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 170 "nask.ll"
return token::_KW_FISTP;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 171 "nask.ll"
return token::_KW_FISUB;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 172 "nask.ll"
return token::_KW_FISUBR;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 173 "nask.ll"
return token::_KW_FLD;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 174 "nask.ll"
return token::_KW_FLD1;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 175 "nask.ll"
return token::_KW_FLDCW;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 176 "nask.ll"
return token::_KW_FLDENV;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 177 "nask.ll"
return token::_KW_FLDL2E;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 178 "nask.ll"
return token::_KW_FLDL2T;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 179 "nask.ll"
return token::_KW_FLDLG2;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 180 "nask.ll"
return token::_KW_FLDLN2;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 181 "nask.ll"
return token::_KW_FLDPI;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 182 "nask.ll"
return token::_KW_FLDZ;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 183 "nask.ll"
return token::_KW_FMUL;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 184 "nask.ll"
return token::_KW_FMULP;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 185 "nask.ll"
return token::_KW_FNCLEX;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 186 "nask.ll"
return token::_KW_FNDISI;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 187 "nask.ll"
return token::_KW_FNENI;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 188 "nask.ll"
return token::_KW_FNINIT;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 189 "nask.ll"
return token::_KW_FNOP;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 190 "nask.ll"
return token::_KW_FNSAVE;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 191 "nask.ll"
return token::_KW_FNSTCW;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 192 "nask.ll"
return token::_KW_FNSTENV;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 193 "nask.ll"
return token::_KW_FNSTSW;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 194 "nask.ll"
return token::_KW_FORMAT;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 195 "nask.ll"
return token::_KW_FPATAN;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 196 "nask.ll"
return token::_KW_FPREM;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 197 "nask.ll"
return token::_KW_FPREM1;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 198 "nask.ll"
return token::_KW_FPTAN;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 199 "nask.ll"
return token::_KW_FRNDINT;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 200 "nask.ll"
return token::_KW_FRSTOR;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 201 "nask.ll"
return token::_KW_FSAVE;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 202 "nask.ll"
return token::_KW_FSCALE;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 203 "nask.ll"
return token::_KW_FSETPM;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 204 "nask.ll"
return token::_KW_FSIN;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 205 "nask.ll"
return token::_KW_FSINCOS;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 206 "nask.ll"
return token::_KW_FSQRT;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 207 "nask.ll"
return token::_KW_FST;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 208 "nask.ll"
return token::_KW_FSTCW;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 209 "nask.ll"
return token::_KW_FSTENV;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 210 "nask.ll"
return token::_KW_FSTP;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 211 "nask.ll"
return token::_KW_FSTSW;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 212 "nask.ll"
return token::_KW_FSUB;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 213 "nask.ll"
return token::_KW_FSUBP;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 214 "nask.ll"
return token::_KW_FSUBR;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 215 "nask.ll"
return token::_KW_FSUBRP;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 216 "nask.ll"
return token::_KW_FTST;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 217 "nask.ll"
return token::_KW_FUCOM;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 218 "nask.ll"
return token::_KW_FUCOMP;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 219 "nask.ll"
return token::_KW_FUCOMPP;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 220 "nask.ll"
return token::_KW_FXAM;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 221 "nask.ll"
return token::_KW_FXCH;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 222 "nask.ll"
return token::_KW_FXTRACT;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 223 "nask.ll"
return token::_KW_FYL2X;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 224 "nask.ll"
return token::_KW_FYL2XP1;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 225 "nask.ll"
return token::_KW_GLOBAL;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 226 "nask.ll"
return token::_KW_HLT;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 227 "nask.ll"
return token::_KW_IDIV;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 228 "nask.ll"
return token::_KW_IMUL;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 229 "nask.ll"
return token::_KW_IN;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 230 "nask.ll"
return token::_KW_INC;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 231 "nask.ll"
return token::_KW_INCO;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 232 "nask.ll"
return token::_KW_INSB;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 233 "nask.ll"
return token::_KW_INSD;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 234 "nask.ll"
return token::_KW_INSTRSET;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 235 "nask.ll"
return token::_KW_INSW;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 236 "nask.ll"
return token::_KW_INT;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 237 "nask.ll"
return token::_KW_INT3;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 238 "nask.ll"
return token::_KW_INTO;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 239 "nask.ll"
return token::_KW_INVD;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 240 "nask.ll"
return token::_KW_INVLPG;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 241 "nask.ll"
return token::_KW_IRET;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 242 "nask.ll"
return token::_KW_IRETD;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 243 "nask.ll"
return token::_KW_IRETW;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 244 "nask.ll"
return token::_KW_JA;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 245 "nask.ll"
return token::_KW_JAE;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 246 "nask.ll"
return token::_KW_JB;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 247 "nask.ll"
return token::_KW_JBE;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 248 "nask.ll"
return token::_KW_JC;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 249 "nask.ll"
return token::_KW_JCXZ;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 250 "nask.ll"
return token::_KW_JE;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 251 "nask.ll"
return token::_KW_JECXZ;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 252 "nask.ll"
return token::_KW_JG;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 253 "nask.ll"
return token::_KW_JGE;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 254 "nask.ll"
return token::_KW_JL;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 255 "nask.ll"
return token::_KW_JLE;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 256 "nask.ll"
return token::_KW_JMP;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 257 "nask.ll"
return token::_KW_JNA;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 258 "nask.ll"
return token::_KW_JNAE;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 259 "nask.ll"
return token::_KW_JNB;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 260 "nask.ll"
return token::_KW_JNBE;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 261 "nask.ll"
return token::_KW_JNC;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 262 "nask.ll"
return token::_KW_JNE;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 263 "nask.ll"
return token::_KW_JNG;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 264 "nask.ll"
return token::_KW_JNGE;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 265 "nask.ll"
return token::_KW_JNL;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 266 "nask.ll"
return token::_KW_JNLE;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 267 "nask.ll"
return token::_KW_JNO;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 268 "nask.ll"
return token::_KW_JNP;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 269 "nask.ll"
return token::_KW_JNS;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 270 "nask.ll"
return token::_KW_JNZ;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 271 "nask.ll"
return token::_KW_JO;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 272 "nask.ll"
return token::_KW_JP;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 273 "nask.ll"
return token::_KW_JPE;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 274 "nask.ll"
return token::_KW_JPO;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 275 "nask.ll"
return token::_KW_JS;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 276 "nask.ll"
return token::_KW_JZ;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 277 "nask.ll"
return token::_KW_LAHF;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 278 "nask.ll"
return token::_KW_LAR;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 279 "nask.ll"
return token::_KW_LDS;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 280 "nask.ll"
return token::_KW_LEA;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 281 "nask.ll"
return token::_KW_LEAVE;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 282 "nask.ll"
return token::_KW_LES;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 283 "nask.ll"
return token::_KW_LFS;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 284 "nask.ll"
return token::_KW_LGDT;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 285 "nask.ll"
return token::_KW_LGS;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 286 "nask.ll"
return token::_KW_LIDT;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 287 "nask.ll"
return token::_KW_LLDT;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 288 "nask.ll"
return token::_KW_LMSW;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 289 "nask.ll"
return token::_KW_LOCK;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 290 "nask.ll"
return token::_KW_LODSB;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 291 "nask.ll"
return token::_KW_LODSD;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 292 "nask.ll"
return token::_KW_LODSW;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 293 "nask.ll"
return token::_KW_LOOP;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 294 "nask.ll"
return token::_KW_LOOPE;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 295 "nask.ll"
return token::_KW_LOOPNE;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 296 "nask.ll"
return token::_KW_LOOPNZ;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 297 "nask.ll"
return token::_KW_LOOPZ;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 298 "nask.ll"
return token::_KW_LSL;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 299 "nask.ll"
return token::_KW_LSS;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 300 "nask.ll"
return token::_KW_LTR;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 301 "nask.ll"
return token::_KW_MOV;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 302 "nask.ll"
return token::_KW_MOVSB;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 303 "nask.ll"
return token::_KW_MOVSD;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 304 "nask.ll"
return token::_KW_MOVSW;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 305 "nask.ll"
return token::_KW_MOVSX;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 306 "nask.ll"
return token::_KW_MOVZX;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 307 "nask.ll"
return token::_KW_MUL;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 308 "nask.ll"
return token::_KW_NEAR;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 309 "nask.ll"
return token::_KW_NEG;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 310 "nask.ll"
return token::_KW_NOP;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 311 "nask.ll"
return token::_KW_NOT;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 312 "nask.ll"
return token::_KW_OPTIMIZE;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 313 "nask.ll"
return token::_KW_OR;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 314 "nask.ll"
return token::_KW_ORG;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 315 "nask.ll"
return token::_KW_OUT;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 316 "nask.ll"
return token::_KW_OUTSB;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 317 "nask.ll"
return token::_KW_OUTSD;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 318 "nask.ll"
return token::_KW_OUTSW;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 319 "nask.ll"
return token::_KW_PADDING;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 320 "nask.ll"
return token::_KW_PADSET;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 321 "nask.ll"
return token::_KW_POP;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 322 "nask.ll"
return token::_KW_POPA;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 323 "nask.ll"
return token::_KW_POPAD;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 324 "nask.ll"
return token::_KW_POPAW;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 325 "nask.ll"
return token::_KW_POPF;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 326 "nask.ll"
return token::_KW_POPFD;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 327 "nask.ll"
return token::_KW_POPFW;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 328 "nask.ll"
return token::_KW_PUSH;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 329 "nask.ll"
return token::_KW_PUSHA;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 330 "nask.ll"
return token::_KW_PUSHAD;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 331 "nask.ll"
return token::_KW_PUSHAW;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 332 "nask.ll"
return token::_KW_PUSHD;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 333 "nask.ll"
return token::_KW_PUSHF;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 334 "nask.ll"
return token::_KW_PUSHFD;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 335 "nask.ll"
return token::_KW_PUSHFW;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 336 "nask.ll"
return token::_KW_RCL;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 337 "nask.ll"
return token::_KW_RCR;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 338 "nask.ll"
return token::_KW_RDMSR;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 339 "nask.ll"
return token::_KW_RDPMC;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 340 "nask.ll"
return token::_KW_REP;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 341 "nask.ll"
return token::_KW_REPE;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 342 "nask.ll"
return token::_KW_REPNE;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 343 "nask.ll"
return token::_KW_REPNZ;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 344 "nask.ll"
return token::_KW_REPZ;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 345 "nask.ll"
return token::_KW_RESB;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 346 "nask.ll"
return token::_KW_RESD;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 347 "nask.ll"
return token::_KW_RESQ;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 348 "nask.ll"
return token::_KW_REST;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 349 "nask.ll"
return token::_KW_RESW;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 350 "nask.ll"
return token::_KW_RET;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 351 "nask.ll"
return token::_KW_RETF;
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 352 "nask.ll"
return token::_KW_RETN;
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 353 "nask.ll"
return token::_KW_ROL;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 354 "nask.ll"
return token::_KW_ROR;
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 355 "nask.ll"
return token::_KW_RSM;
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 356 "nask.ll"
return token::_KW_SAHF;
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 357 "nask.ll"
return token::_KW_SAL;
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 358 "nask.ll"
return token::_KW_SAR;
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 359 "nask.ll"
return token::_KW_SBB;
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 360 "nask.ll"
return token::_KW_SCASB;
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 361 "nask.ll"
return token::_KW_SCASD;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 362 "nask.ll"
return token::_KW_SCASW;
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 363 "nask.ll"
return token::_KW_SECTION;
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 364 "nask.ll"
return token::_KW_SETA;
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 365 "nask.ll"
return token::_KW_SETAE;
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 366 "nask.ll"
return token::_KW_SETB;
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 367 "nask.ll"
return token::_KW_SETBE;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 368 "nask.ll"
return token::_KW_SETC;
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 369 "nask.ll"
return token::_KW_SETE;
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 370 "nask.ll"
return token::_KW_SETG;
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 371 "nask.ll"
return token::_KW_SETGE;
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 372 "nask.ll"
return token::_KW_SETL;
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 373 "nask.ll"
return token::_KW_SETLE;
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 374 "nask.ll"
return token::_KW_SETNA;
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 375 "nask.ll"
return token::_KW_SETNAE;
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 376 "nask.ll"
return token::_KW_SETNB;
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 377 "nask.ll"
return token::_KW_SETNBE;
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 378 "nask.ll"
return token::_KW_SETNC;
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 379 "nask.ll"
return token::_KW_SETNE;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 380 "nask.ll"
return token::_KW_SETNG;
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 381 "nask.ll"
return token::_KW_SETNGE;
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 382 "nask.ll"
return token::_KW_SETNL;
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 383 "nask.ll"
return token::_KW_SETNLE;
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 384 "nask.ll"
return token::_KW_SETNO;
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 385 "nask.ll"
return token::_KW_SETNP;
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 386 "nask.ll"
return token::_KW_SETNS;
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 387 "nask.ll"
return token::_KW_SETNZ;
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 388 "nask.ll"
return token::_KW_SETO;
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 389 "nask.ll"
return token::_KW_SETP;
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 390 "nask.ll"
return token::_KW_SETPE;
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 391 "nask.ll"
return token::_KW_SETPO;
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 392 "nask.ll"
return token::_KW_SETS;
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 393 "nask.ll"
return token::_KW_SETZ;
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 394 "nask.ll"
return token::_KW_SGDT;
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 395 "nask.ll"
return token::_KW_SHL;
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 396 "nask.ll"
return token::_KW_SHLD;
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 397 "nask.ll"
return token::_KW_SHORT;
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 398 "nask.ll"
return token::_KW_SHR;
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 399 "nask.ll"
return token::_KW_SHRD;
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 400 "nask.ll"
return token::_KW_SIDT;
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 401 "nask.ll"
return token::_KW_SLDT;
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 402 "nask.ll"
return token::_KW_SMSW;
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 403 "nask.ll"
return token::_KW_STC;
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 404 "nask.ll"
return token::_KW_STD;
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 405 "nask.ll"
return token::_KW_STI;
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 406 "nask.ll"
return token::_KW_STOSB;
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 407 "nask.ll"
return token::_KW_STOSD;
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 408 "nask.ll"
return token::_KW_STOSW;
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 409 "nask.ll"
return token::_KW_STR;
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 410 "nask.ll"
return token::_KW_SUB;
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 411 "nask.ll"
return token::_KW_TEST;
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 412 "nask.ll"
return token::_KW_TIMES;
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 413 "nask.ll"
return token::_KW_UD2;
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 414 "nask.ll"
return token::_KW_VERR;
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 415 "nask.ll"
return token::_KW_VERW;
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 416 "nask.ll"
return token::_KW_WAIT;
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 417 "nask.ll"
return token::_KW_WBINVD;
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 418 "nask.ll"
return token::_KW_WORD;
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 419 "nask.ll"
return token::_KW_WRMSR;
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 420 "nask.ll"
return token::_KW_XADD;
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 421 "nask.ll"
return token::_KW_XCHG;
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 422 "nask.ll"
return token::_KW_XLATB;
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 423 "nask.ll"
return token::_KW_XOR;
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 425 "nask.ll"
BEGIN COMMENT; /* BNFC: block comment "#" "\\n" */
	YY_BREAK
case 350:
/* rule 350 can match eol */
YY_RULE_SETUP
#line 426 "nask.ll"
BEGIN INITIAL;
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 427 "nask.ll"
/* skip */;
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 428 "nask.ll"
BEGIN COMMENT1; /* BNFC: block comment ";" "\\n" */
	YY_BREAK
case 353:
/* rule 353 can match eol */
YY_RULE_SETUP
#line 429 "nask.ll"
BEGIN INITIAL;
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 430 "nask.ll"
/* skip */;
	YY_BREAK
case 355:
/* rule 355 can match eol */
YY_RULE_SETUP
#line 432 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_NaskChar;
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 433 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_Hex;
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 434 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_Label;
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 435 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_Id;
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 436 "nask.ll"
LITERAL_BUFFER_CREATE(); BEGIN STRING;
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 437 "nask.ll"
BEGIN ESCAPED;
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 438 "nask.ll"
yylval->emplace<std::string>(LITERAL_BUFFER_HARVEST()); BEGIN INITIAL; return token::_STRING_;
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 439 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR(yytext[0]);
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 440 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\f'); BEGIN STRING;
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 441 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\n'); BEGIN STRING;
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 442 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\r'); BEGIN STRING;
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 443 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\t'); BEGIN STRING;
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 444 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('"');  BEGIN STRING;
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 445 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\\'); BEGIN STRING;
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 446 "nask.ll"
LITERAL_BUFFER_APPEND(yytext);    BEGIN STRING;
	YY_BREAK
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(ESCAPED):
#line 447 "nask.ll"
LITERAL_BUFFER_FREE(); return token::_ERROR_;
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 448 "nask.ll"
yylval->emplace<int>(atoi(yytext)); return token::_INTEGER_;
	YY_BREAK
case 371:
/* rule 371 can match eol */
YY_RULE_SETUP
#line 449 "nask.ll"
/* ignore white space. */;
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 450 "nask.ll"
return token::_ERROR_;
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 452 "nask.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3838 "lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CHAR):
case YY_STATE_EOF(CHARESC):
case YY_STATE_EOF(CHAREND):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(COMMENT1):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 746 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 746 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 745);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 452 "nask.ll"



NaskScanner::NaskScanner(std::istream *in)
    : yyFlexLexer(in)
{
    loc = new nask_::NaskParser::location_type();
}

NaskScanner::~NaskScanner()
{
    delete loc;
    delete yylval;
}

/* This implementation of NaskFlexLexer::yylex() is required to fill the
 * vtable of the class NaskFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */



#ifdef yylex
#undef yylex
#endif

int yyFlexLexer::yylex()
{
    std::cerr << "in yyFlexLexer::yylex() !" << std::endl;
    return 0;
}



