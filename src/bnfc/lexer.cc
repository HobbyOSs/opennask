#line 2 "lexer.cc"
#include <memory>

#line 5 "lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer nask_FlexLexer

#ifdef yyalloc
#define nask_alloc_ALREADY_DEFINED
#else
#define yyalloc nask_alloc
#endif

#ifdef yyrealloc
#define nask_realloc_ALREADY_DEFINED
#else
#define yyrealloc nask_realloc
#endif

#ifdef yyfree
#define nask_free_ALREADY_DEFINED
#else
#define yyfree nask_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 370
#define YY_END_OF_BUFFER 371
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[740] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  371,  369,  368,  368,
      356,  346,  355,    8,  369,    9,   10,    6,    4,    3,
        5,    7,  367,  367,   11,  349,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,    1,    2,
      370,  359,  358,  357,  366,  364,  365,  360,  361,  362,
      363,  348,  347,  351,  350,  355,  355,  354,    0,  352,
        0,  367,    0,  355,  355,  355,  355,  355,  355,  355,
      355,  355,   28,  355,  355,  355,  355,  355,  355,  355,

      355,  355,   51,   52,  355,  355,   55,   56,   57,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  153,  355,  168,  170,  172,
      174,  176,  178,  355,  355,  195,  196,  199,  200,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  236,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  354,  353,

       12,   13,   14,   15,  355,   17,   18,  355,   21,  355,
      355,  355,   25,   26,  355,   29,   30,   31,  355,  355,
       34,   35,   36,   37,   38,  355,   40,   41,  355,   47,
       49,   50,   53,   54,  355,   59,  355,   61,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,   97,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  131,  355,  355,
      355,  355,  355,  355,  355,  355,  150,  355,  355,  154,
      355,  160,  355,  355,  169,  171,  355,  355,  177,  179,

      180,  181,  183,  185,  186,  187,  189,  191,  192,  193,
      194,  197,  198,  355,  202,  203,  204,  206,  207,  355,
      209,  355,  355,  355,  355,  355,  355,  222,  223,  224,
      225,  231,  232,  233,  234,  355,  237,  238,  355,  244,
      355,  259,  260,  355,  355,  263,  355,  273,  276,  277,
      278,  355,  280,  281,  282,  355,  355,  355,  355,  318,
      320,  355,  355,  355,  325,  326,  327,  355,  331,  332,
      355,  355,  335,  355,  355,  355,  355,  355,  355,  355,
      355,  345,  353,  353,  355,  355,   22,   23,  355,  355,
       32,   33,   39,  355,  355,  355,   48,  355,  355,  355,

      355,   64,   65,   67,  355,   69,  355,   71,   74,  355,
      355,   77,   81,  355,  355,  355,  355,   88,   89,  355,
      355,  355,   93,  355,   98,  355,  355,  355,  355,  106,
      107,  355,  355,  355,  355,  113,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  128,  355,  355,
      355,  134,  355,  136,  140,  355,  144,  145,  355,  355,
      355,  151,  152,  155,  156,  157,  355,  159,  161,  162,
      163,  355,  165,  173,  355,  182,  184,  188,  190,  201,
      355,  208,  210,  211,  212,  213,  355,  217,  355,  355,
      355,  355,  355,  355,  245,  248,  251,  355,  355,  264,

      355,  267,  268,  269,  270,  271,  272,  274,  275,  279,
      355,  355,  287,  289,  291,  292,  293,  295,  355,  311,
      312,  315,  316,  317,  319,  321,  322,  323,  324,  355,
      333,  355,  336,  337,  338,  355,  340,  355,  342,  343,
      355,  355,   19,   24,   27,   42,   43,   44,  355,   46,
       58,   60,  355,   63,   66,   68,   70,   72,  355,   76,
       78,   79,   82,   83,   84,   86,   90,  355,   92,   94,
       95,   99,  355,  355,  355,  355,  105,  108,  355,  355,
      111,  355,  355,  355,  355,  355,  355,  355,  120,  122,
      355,  355,  125,  355,  355,  355,  130,  132,  355,  135,

      137,  138,  141,  355,  147,  355,  355,  355,  166,  167,
      175,  205,  214,  215,  216,  218,  355,  221,  226,  227,
      228,  229,  230,  355,  239,  240,  241,  355,  355,  246,
      247,  249,  250,  252,  255,  256,  261,  262,  265,  266,
      283,  284,  285,  355,  288,  290,  294,  296,  297,  299,
      301,  302,  303,  305,  307,  308,  309,  310,  313,  314,
      328,  329,  330,  334,  355,  341,  344,  355,   20,  355,
       62,   73,  355,   80,   85,   87,  355,   96,  100,  101,
      102,  103,  104,  109,  110,  112,  114,  115,  355,  117,
      118,  119,  121,  355,  124,  126,  127,  355,  133,  139,

      142,  355,  355,  149,  355,  164,  219,  220,  355,  355,
      243,  253,  254,  257,  258,  355,  298,  300,  304,  306,
      339,  355,   45,   75,   91,  116,  123,  129,  143,  146,
      148,  355,  355,  242,  286,   16,  158,  235,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    6,    7,    1,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   21,   21,   21,   21,   21,   22,   23,    1,
        1,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,    1,   53,    1,   54,   55,   56,   57,

       58,   59,   60,   60,   60,   60,   60,   60,   60,   61,
       60,   60,   60,   62,   60,   63,   60,   60,   60,   64,
       60,   60,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[65] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    1,    2,    2,    2,    2,
        2,    2,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2
    } ;

static const flex_int16_t yy_base[747] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   62,   64,
       66,   71,   97,   96,   94,   85,   79, 4644, 4644, 4644,
     4644, 4644,   65, 4644,   65, 4644, 4644, 4644, 4644, 4644,
     4644, 4644,   72,   64, 4644, 4644,  131,  132,  152,  175,
      120,  203,   88,  202,   71,  232,  258,  269,  283,  302,
      304,  312,  342,  137,  156,  365,  357,  364, 4644, 4644,
     4644, 4644, 4644, 4644, 4644, 4644, 4644, 4644, 4644, 4644,
     4644, 4644, 4644, 4644, 4644,  308,  310,   88,   69, 4644,
      203,  259,  402,  410,  391,  447,  432,  460,  402,  461,
      462,  464,  466,  496,  474,  506,  510,  514,  516,  529,

      539,  556,  550,  562,  564,  579,  582,  585,  590,  596,
      604,  607,  615,  619,  636,  639,  641,  660,  661,  674,
      681,  673,  729,  706,  717,  727,  759,  721,  762,  783,
      789,  806,  723,  807,  808,  812,  825,  852,  857,  860,
      862,  875,  880,  877,  910,  903,  935,  905,  917,  938,
      940,  959,  962,  965,  983,  984,  980,  993, 1008, 1023,
      994, 1034, 1002, 1036, 1038, 1048, 1051, 1068, 1071, 1090,
     1092, 1100, 1113, 1096, 1094, 1119, 1136, 1153, 1156, 1142,
     1159, 1161, 1164, 1181, 1194, 1186, 1209, 1222, 1223, 1237,
     1234, 1235, 1248, 1249, 1259, 1262, 1276, 1277,  143,   72,

     1288, 1289, 1291, 1299, 1301, 1302, 1313, 1316, 1321, 1341,
     1342, 1343, 1345, 1353, 1355, 1356, 1366, 1367, 1377, 1396,
     1385, 1395, 1406, 1407, 1410, 1420, 1418, 1428, 1446, 1452,
     1431, 1450, 1470, 1471, 1473, 1476, 1491, 1494, 1505, 1495,
     1515, 1519, 1534, 1530, 1544, 1547, 1548, 1545, 1570, 1573,
     1574, 1598, 1602, 1613, 1615, 1588, 1632, 1638, 1686, 1664,
     1665, 1683, 1687, 1691, 1688, 1723, 1701, 1727, 1728, 1740,
     1745, 1746, 1763, 1768, 1769, 1773, 1791, 1776, 1808, 1781,
     1813, 1814, 1825, 1831, 1833, 1843, 1848, 1854, 1858, 1868,
     1873, 1898, 1888, 1902, 1916, 1922, 1924, 1927, 1928, 1941,

     1942, 1956, 1961, 1946, 1964, 1976, 1990, 1986, 1991, 2001,
     2004, 2005, 2009, 2019, 2015, 2027, 2030, 2041, 2044, 2045,
     2049, 2063, 2064, 2059, 2067, 2081, 2089, 2078, 2093, 2103,
     2115, 2107, 2118, 2121, 2126, 2129, 2132, 2144, 2161, 2169,
     2147, 2143, 2184, 2186, 2189, 2201, 2216, 2243, 2204, 2230,
     2245, 2249, 2255, 2260, 2270, 2273, 2275, 2305, 2295, 2297,
     2305, 2319, 2330, 2331, 2345, 2349, 2353, 2359, 2363, 2364,
     2381, 2382, 2385, 2399, 2393, 2405, 2403, 2407, 2417, 2435,
     2447, 2449, 4644,   70, 2457, 2460, 2461, 2462, 2472, 2483,
     2489, 2497, 2501, 2502, 2515, 2525, 2529, 2543, 2547, 2551,

     2557, 2561, 2579, 2571, 2583, 2575, 2593, 2605, 2597, 2601,
     2615, 2620, 2619, 2623, 2633, 2647, 2659, 2660, 2665, 2673,
     2679, 2684, 2683, 2708, 2687, 2709, 2713, 2719, 2736, 2737,
     2738, 2742, 2759, 2761, 2765, 2763, 2788, 1635, 2793, 2798,
     2813, 2815, 2821, 2817, 2832, 2842, 2850, 2856, 2861, 2869,
     2875, 2886, 2896, 2904, 2901, 2914, 2915, 2918, 2929, 2919,
     2940, 2941, 2954, 2955, 2959, 2969, 2973, 2974, 2977, 2991,
     2994, 2995, 2996, 3009, 3014, 3013, 3031, 3035, 3037, 3039,
     3049, 3050, 3054, 3064, 3067, 3072, 3089, 3090, 3104, 3091,
     3118, 3131, 3130, 3153, 3158, 3164, 3172, 3154, 3183, 3197,

     3207, 3208, 3209, 3212, 3222, 3226, 3227, 3232, 3237, 3249,
     3251, 3252, 3266, 3271, 3276, 3281, 3286, 3294, 3324, 3305,
     3315, 3311, 3329, 3350, 3354, 3355, 3365, 3368, 3369, 3373,
     3379, 3387, 3390, 3391, 3405, 3408, 3409, 3419, 3427, 3430,
     3432, 3433, 3444, 3459, 3467, 3469, 3472, 3473, 3484, 3486,
     3487, 3492, 3512, 3513, 3526, 3532, 3536, 3537, 3538, 3540,
     3555, 3558, 3572, 3577, 3580, 3590, 3592, 3594, 3595, 3598,
     3600, 3612, 3617, 3644, 3649, 3654, 3652, 3669, 3671, 3674,
     3673, 3677, 3688, 3706, 3717, 3723, 3725, 3727, 3728, 3729,
     3750, 3751, 3752, 3769, 3771, 3773, 3779, 3784, 3794, 3806,

     3808, 3812, 3814, 3834, 3835, 3840, 3848, 3862, 3858, 3863,
     3876, 3880, 3888, 3890, 3891, 3902, 3903, 3908, 3913, 3931,
     3932, 3936, 3942, 3954, 3953, 3956, 3957, 3959, 3976, 3977,
     3982, 3996, 3999, 4009, 4010, 4011, 4022, 4028, 4036, 4039,
     4050, 4054, 4062, 4064, 4065, 4068, 4076, 4079, 4082, 4094,
     4090, 4105, 4108, 4118, 4119, 4122, 4133, 4144, 4145, 4147,
     4148, 4158, 4159, 4162, 4172, 4170, 4173, 4187, 4198, 4199,
     4202, 4212, 4222, 4216, 4226, 4227, 4244, 4241, 4252, 4256,
     4262, 4266, 4267, 4270, 4280, 4281, 4284, 4285, 4295, 4306,
     4307, 4310, 4320, 4321, 4324, 4335, 4339, 4343, 4347, 4360,

     4364, 4361, 4372, 4383, 4387, 4401, 4404, 4405, 4406, 4416,
     4426, 4427, 4428, 4429, 4441, 4446, 4456, 4469, 4470, 4471,
     4481, 4482, 4483, 4496, 4506, 4510, 4511, 4523, 4524, 4525,
     4535, 4536, 4538, 4546, 4550, 4565, 4568, 4578, 4644, 4631,
     4633, 4635, 4637, 4639,   70, 4641
    } ;

static const flex_int16_t yy_def[747] =
    {   0,
      739,    1,  740,  740,  740,  740,  740,  740,  741,  741,
      742,  742,  743,  743,  744,  744,  739,  739,  739,  739,
      739,  739,  745,  739,  746,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  745,  745,   37,   37,
      745,   37,  745,  745,   37,   37,   37,  745,  745,  745,
      745,  745,   37,  745,  745,  745,   37,   37,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  745,  745,  739,  746,  739,
      739,  739,  739,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,

      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,   37,
      745,  745,  745,  745,  745,  745,  123,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  123,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  123,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  123,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  739,   83,

      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  259,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,

      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,   40,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  145,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  739,  739,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,

      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  123,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,

      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  145,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,

      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,

      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,    0,  739,
      739,  739,  739,  739,  739,  739
    } ;

static const flex_int16_t yy_nxt[4709] =
    {   0,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   23,   32,   33,   34,   34,   34,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   23,   47,   48,   49,   50,   51,   23,
       52,   53,   54,   55,   56,   57,   58,   23,   23,   59,
       18,   60,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   61,   63,   61,   63,   61,   66,
       76,   77,   80,   61,   66,  383,   80,  383,  739,   76,
       82,   82,   82,   82,   82,  384,   78,   75,   82,   82,
       82,   82,   82,   76,   77,   77,   75,  134,   73,   73,

      739,  739,   76,  739,  739,   77,  135,  136,  739,   78,
      739,  137,   64,  739,   64,   81,   67,   76,   83,   81,
      739,   67,  132,  739,   68,   76,   69,   70,   71,   68,
      739,   69,   70,   71,   76,   83,   76,   76,  199,  739,
       76,   78,   76,  739,  739,   76,   76,  739,  199,  199,
      199,   76,   78,   78,   84,   85,  110,   86,   78,  111,
      739,   76,  739,   90,  187,   87,  112,   88,  188,   91,
       76,   89,   76,   92,   93,   95,   96,   78,   97,   94,
      739,  739,  189,   76,   76,  739,   98,   99,   77,   76,
      100,  739,   77,  199,  739,  739,  739,  101,  102,  103,

      739,  104,  105,  199,  199,  199,  106,   76,   76,   77,
       79,   77,  739,  739,  107,   77,   76,  108,  739,  739,
      109,  113,  739,   78,  739,  739,  114,  115,  116,  117,
      118,  119,  739,  739,  120,  739,  133,  121,  122,  123,
      124,  125,  739,  126,  127,  128,  129,  739,  739,  130,
      131,  739,  739,   79,   76,  138,  139,  140,   77,  141,
      739,  142,  739,   79,   79,   79,  143,  144,  145,  146,
      147,  739,   77,  148,   76,   82,   82,   82,   82,   82,
      149,  150,   77,   76,  151,  152,  153,  154,   76,  155,
       78,  739,  156,  157,   77,  158,  739,   76,   77,  159,

      160,  739,  739,  739,   78,  739,  161,   76,  739,   76,
      163,  739,  162,   76,  739,   76,   76,   76,   76,  739,
      164,   76,   76,   78,   76,   78,   76,  168,  739,   78,
      739,   78,  739,   78,  739,   76,  739,  171,  172,  173,
      165,  169,  166,  739,  739,  167,  739,  170,  739,  174,
      739,  739,  739,  175,   76,  739,   76,  739,  739,  739,
       76,  739,   76,  739,   76,  176,  177,  178,   77,  179,
       76,  180,  181,  182,  739,  739,  183,  184,   77,   76,
      191,  192,   77,   77,  185,  186,   78,  195,   77,  196,
       77,   77,  190,   77,  193,  739,   76,  194,  197,  739,

       77,  198,  739,  739,   77,   76,  739,   76,  739,  739,
      739,  739,   78,  739,  739,   76,   76,   76,  200,  200,
      200,  200,  200,   78,   76,  200,  200,  200,  200,  200,
      200,   78,  205,  201,  739,  739,  202,   76,  739,  739,
      210,  739,  739,   76,  739,  203,   76,  739,  739,  739,
      739,  204,   76,   78,   76,  200,  200,  200,  200,  200,
      200,   76,   76,  208,  739,   76,   76,   76,   78,   76,
      739,   76,  206,  207,   76,   76,   76,  739,   76,   76,
       76,   78,   78,   78,   76,   78,  209,   78,   76,  739,
      739,  216,  213,  739,  739,   78,  739,  739,  739,   76,

      739,   76,  739,  211,  214,  212,  217,  218,  220,  215,
       76,   76,   76,   76,   76,   76,   76,   78,   76,   76,
       76,   76,  739,  739,   76,  739,   76,   78,   76,  739,
       76,   78,  739,  739,   76,   78,  739,   78,  219,  223,
      224,  227,  739,   76,   76,  225,  739,  739,   76,  222,
       78,  221,  739,   76,  228,   76,  226,  739,   76,  739,
       78,   76,   76,  739,   76,  230,   76,   76,   76,   76,
       76,   78,  229,  739,  739,  739,   76,   78,   76,  231,
      739,   76,  739,   78,   76,   78,  739,   76,  739,  233,
       76,   76,  739,   76,  739,   76,   76,  232,  739,   76,

       78,   76,   76,   78,   76,  739,   78,  739,   76,   76,
       76,   78,   76,  739,   76,  739,   76,   78,   76,  739,
       76,   76,  236,  234,   76,   78,  739,  235,   78,   76,
      739,   76,  739,   76,   76,  739,   78,   76,  237,  739,
       78,   76,   76,  241,   76,  242,   76,  238,   76,  239,
       76,  739,  739,   76,  739,   76,   76,   78,  739,   76,
       78,  240,   78,  739,  739,   76,   76,   76,  248,  245,
      243,   76,  249,  246,   76,   76,  247,  244,   76,  739,
      739,   78,   78,  739,  739,  739,   76,   76,   76,  739,
      739,   76,  739,   76,   78,   76,  250,  252,   77,  253,

      254,  251,   78,  739,  739,  739,  739,  259,  255,  256,
      257,   76,   76,   76,   77,  258,  260,  739,  739,  739,
       76,  739,   76,  739,  739,   76,   76,   78,   76,  739,
      739,   76,   76,   76,   76,   76,  739,   76,   78,  739,
      268,   76,   78,   76,   78,  739,  267,  739,   78,  739,
       78,  739,  739,  739,  261,  262,  263,  269,   76,  270,
      264,  739,  280,  271,  739,  287,  265,   76,  272,   76,
      266,  739,  739,   76,  739,   76,   76,  739,  739,   76,
      739,   76,  273,   78,  274,   77,  275,  281,   76,  739,
      276,  739,  739,  739,   76,  739,   77,   76,  277,  739,

       77,  278,  279,   76,   78,  739,  282,  739,  283,  739,
       78,   76,   76,   76,   76,  739,  739,   76,  739,  739,
       76,   76,   76,  285,  739,  284,   76,   78,   78,   78,
       76,  739,  739,   78,  739,   76,  739,  290,  288,   76,
      739,   76,  739,  286,  739,  739,   78,  739,  739,  739,
      739,  289,  294,  291,  292,  739,  293,   76,   76,   76,
       76,  739,   76,  739,   76,   76,   76,   76,  739,  739,
      739,   76,  739,   78,   76,  739,   76,   76,   78,  295,
       76,   78,   76,   78,  296,   76,  739,  298,  739,   76,
      739,   76,  739,  739,   76,  739,   78,  739,   78,  739,

      739,   78,  299,  739,   76,  739,  297,  300,   76,   76,
       76,  739,   76,  739,   76,  301,  739,   76,  739,   76,
      739,  739,   76,  739,   78,  739,   78,   76,  739,   76,
      739,   76,   76,  302,  303,  304,   77,  305,   78,  306,
       76,   77,  739,   76,  307,   76,  739,  308,  309,   76,
      739,  310,   76,  739,   76,   76,   78,   76,  311,   78,
      739,   78,  312,  739,   76,  739,  739,   76,  314,   76,
       76,  739,  313,   76,  739,  739,   76,  739,  315,   76,
       78,  316,  317,   78,  739,   76,   78,   76,   76,   76,
       76,  320,   76,  739,   76,  739,  739,   76,   76,   76,

      318,   78,  739,  319,   78,   78,  321,   76,   76,  322,
      323,   76,  739,   76,   76,   78,   76,   76,  325,  326,
       77,  324,   76,   78,   77,  739,  739,  739,   76,   78,
      327,  333,   76,  739,   77,   76,   76,   76,  331,   76,
      739,   76,  328,   76,   78,  739,   76,  739,   76,  329,
       76,  739,   76,   76,   76,   78,   76,   78,  739,   78,
       76,  739,   76,  330,  739,   76,  739,  739,  332,   78,
      739,  739,   78,   76,  334,   76,   76,  337,  335,  739,
      336,  739,   76,  739,  739,   76,   76,  739,   76,   78,
       76,  739,   78,  338,  339,   76,  739,   76,  739,   76,

       76,   76,  739,   76,   76,   76,   76,  739,   76,  340,
       76,   78,  739,   78,   76,   78,  739,   78,   76,  739,
       76,   78,  739,   76,   76,  739,  342,   76,  739,  351,
      349,  341,  343,   76,   78,  344,  350,  739,  345,  739,
       78,   76,   76,  739,   76,  739,   76,   76,   76,  352,
       76,  346,   76,  353,  347,  348,   76,   78,   76,  354,
      355,   76,  739,   78,   76,   76,   76,   76,  359,   76,
       76,   76,  739,   76,   78,   76,  356,   78,   76,  739,
       78,  357,   78,  739,  739,   78,   76,  362,   76,  739,
      363,   76,  739,  360,   76,   76,  739,  739,  358,  361,

       76,  739,   78,  739,  739,   76,  739,   78,   76,  739,
      370,   76,  739,   76,   76,  739,   76,  739,  739,  365,
      366,   77,  364,   76,  739,  367,  739,   76,   76,  739,
       78,  368,  739,   76,  369,   77,   76,   76,   76,   76,
       76,  373,   76,   78,   78,  739,  739,  739,   76,   76,
      371,   76,  739,   76,   76,   78,   78,  372,   78,  739,
      739,   76,   76,   76,   76,  375,  376,   76,  739,   78,
       78,  739,  739,   76,   76,   76,   76,  374,  739,  739,
       78,   76,   76,   78,  378,  379,   76,   76,  377,   76,
       76,   76,  380,   76,   76,  739,   76,   78,   78,  381,

       76,   76,   76,   76,   76,   76,   76,   76,  739,   78,
       78,   76,   78,   76,   76,   76,   76,  382,   76,  739,
       78,   76,   78,   78,  739,  739,   76,   76,   76,   76,
       76,  739,  739,  739,   78,   76,  739,   78,  385,  739,
       76,   76,   78,   76,  739,  386,   76,   76,   76,  739,
       76,   76,  739,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   78,   78,   78,   76,   78,   76,   76,   76,
       76,   76,   76,   76,   78,  387,   78,   78,  390,  389,
       76,   76,   76,  388,  739,  739,  739,   78,   78,  739,
       76,   76,  739,   76,   76,   76,  739,   76,   78,   76,

       76,   76,  739,  739,  391,   76,   78,   76,   76,   76,
       76,   76,   76,  739,  739,   76,   78,   78,   76,   76,
       76,   76,  739,   76,   76,   76,  739,   78,   78,   76,
      392,   78,   76,   76,   76,  739,   76,   76,  739,   78,
      739,   78,   76,  739,  739,   76,  739,   76,   76,   78,
      739,   76,   78,  739,  739,   76,  739,   76,   76,   76,
       76,  393,   76,  739,   76,  739,   76,   78,  739,  394,
       76,   78,   76,   78,  395,   76,   76,  396,   76,  397,
       76,   76,  739,   76,   76,   76,  739,   76,  739,  739,
       76,   78,   78,  739,   78,  739,   76,   78,   76,   76,

       76,  739,   76,  739,   76,   76,  739,  739,   76,   76,
       76,  739,   78,  398,  739,   78,   78,  739,  399,   76,
       76,  739,   76,   76,   76,   76,   78,  739,   76,   76,
      401,  739,  400,   76,  739,   76,   78,  739,  739,   76,
       78,  739,  739,   76,   76,  403,   76,   76,   76,   76,
       76,   78,   76,   76,  739,   78,  402,   76,   76,   76,
      404,   76,   76,  739,  739,   78,   78,   76,   78,   78,
      410,   76,  405,  739,  407,   76,  739,  739,   76,   76,
      739,  739,   76,  408,   76,  406,   76,   76,   76,  409,
      739,   78,  739,   76,   78,   78,   76,   76,  739,   76,

       76,  414,   76,   76,  413,  739,  739,   76,  739,   78,
      739,  411,   76,  739,  412,  739,   76,  739,   76,   78,
       76,  739,   76,   78,  415,   76,   76,   76,  739,   76,
      739,  420,  739,  739,   78,  739,   78,   76,  739,  416,
       76,  418,  419,   76,  417,  739,   76,  739,  739,  739,
       76,  739,   76,   78,   76,  739,  739,  421,  739,   78,
      584,   77,  585,  422,  739,   76,   77,   76,  739,   76,
       76,  739,   77,  739,  739,  739,  586,  739,   76,   76,
      423,  424,  739,  739,   76,   78,   78,  739,   76,  739,
       76,   76,   76,   76,  739,  739,   76,   76,  431,  432,

       76,   76,   76,  425,   78,   76,   76,   78,   78,   78,
      739,  426,   78,  427,  433,   76,   76,   76,  739,  739,
      428,  739,   78,  434,  429,  739,  436,  435,   76,  739,
      739,  739,   76,   76,  430,   76,  439,   76,   76,   76,
       76,   76,   76,   76,   78,   76,  437,  739,   78,   78,
       76,   76,  739,   76,   76,  441,  739,  739,  739,   76,
       76,   78,  739,  442,  739,  438,   78,   78,   76,  440,
      739,  443,  739,   76,   76,   76,  739,   76,   76,   76,
       76,  739,   76,   76,   78,  739,   76,   76,  444,   78,
       78,  446,   76,   77,   78,   76,   76,   76,   76,  739,

      739,  450,   78,  451,  739,   76,  739,  445,  739,  448,
       77,  447,   78,   76,  452,   76,  739,  453,   76,   76,
       76,   76,   76,  455,   77,   76,  739,   76,   76,   78,
       76,  449,  454,   76,   78,   78,   76,  739,   76,   76,
      739,  739,  739,   76,  739,   76,   78,   76,   76,  457,
      456,  460,   78,   76,   78,  458,  739,   76,  739,   76,
       76,  739,   76,   76,   78,   76,   76,  461,   76,   78,
      739,  459,   76,   76,  739,   78,  739,   76,   76,   78,
      739,  739,   76,   76,  739,   76,  739,   76,  739,   78,
      739,  739,  463,   76,   78,   76,  739,  465,  462,  466,

       76,  739,   76,   76,  739,  464,   76,   76,  739,   78,
       76,  739,   76,  739,  471,  467,   76,  469,  468,   78,
       76,   76,  472,   78,  739,   76,  739,   76,  739,   76,
       76,  739,   76,   76,  739,  470,   76,   78,   76,  739,
       76,   76,   76,   78,  473,   78,   76,   76,   78,   78,
       76,   76,  739,  739,   76,   76,   76,  739,  739,  739,
       76,   76,   78,   78,  739,  739,   76,   78,   76,   76,
       76,  739,  474,  475,   76,   76,   76,   78,   76,   76,
       76,   76,   78,  476,  739,   78,  739,  739,  477,  739,
       76,   76,  739,   76,   76,   76,   76,   78,   76,  739,

       76,  739,  739,  478,   76,   76,   76,   78,   76,   76,
       76,   78,   78,   76,   76,   76,   76,  479,   76,   76,
       76,  739,   78,   76,   76,   78,   78,  739,   76,   76,
       78,  739,   76,   76,  739,   76,   78,  739,   76,  739,
       78,   76,   76,   76,   76,  739,   76,  480,   78,   76,
       76,   78,  739,   76,   76,   76,   76,   76,   76,   76,
      739,   76,   78,   76,   76,   78,   78,   76,   76,   76,
       78,   76,   76,   76,  481,  739,  739,   76,   76,   76,
       78,   76,   76,   76,   78,   78,   76,  482,   78,  739,
      739,  739,   76,   76,   76,   76,   76,   76,   76,   78,

      486,   76,   78,   76,  485,  483,  484,   76,   76,  739,
       78,   76,   76,  739,   78,   76,   76,   76,  739,   76,
       76,   76,  487,   76,   78,  739,   76,  488,   78,   76,
       76,   76,   76,   76,   76,   76,   78,   76,  739,   78,
       76,   76,   78,   76,  739,   76,   76,   78,   76,   76,
       78,  739,   76,   78,  739,   76,  489,   76,   76,   76,
      491,   76,  739,  490,   78,   78,   76,   76,   78,  739,
       76,  739,  739,   76,   76,   76,  739,  497,   76,  739,
      739,   76,   78,   76,   76,  492,  739,  493,  739,   76,
       78,   76,  495,  739,   76,   76,   76,  496,   76,   76,

       76,  739,  494,   76,  739,   78,   76,   78,  739,   76,
       78,  739,  739,   76,  739,   76,  739,  739,   76,  739,
      739,   76,   78,  739,  499,   78,  739,  498,  500,  739,
      739,  739,  739,  739,  739,   76,   76,  501,   76,   77,
      503,   76,  504,   77,   76,  739,  739,   77,   76,  502,
       76,   78,  739,   76,   76,  505,   76,   76,  506,   76,
       76,  507,  739,   76,   78,   76,   78,  739,  739,   76,
       78,  508,  739,  739,   76,   76,   78,  510,   76,  509,
       76,   78,   76,  739,   76,  739,  739,   76,  739,   76,
      739,   78,  739,  739,   78,   76,   78,   76,  739,  739,

       76,   76,   76,  739,  739,  739,  739,   76,  739,   76,
       76,   76,   76,  739,  511,  739,   78,  512,   78,   76,
      739,  739,   76,  525,   76,   76,   78,   76,  513,  514,
      515,  526,  516,   76,  517,   76,   76,  524,  739,  518,
       78,  519,  520,  521,   76,   76,  522,   76,  739,   76,
       76,   78,   78,  523,   76,  739,  739,   76,   76,   76,
      739,  527,  739,   76,   76,  739,   78,   76,   76,   76,
       78,   76,  528,   76,   78,  739,  529,   76,   76,  739,
       78,  739,   76,   76,   78,   78,   76,   76,  739,  739,
       76,  739,  739,  739,  739,   76,   76,   76,   76,   76,

      530,   76,   78,   78,   76,   76,   78,   76,   76,  532,
       76,   76,   76,   76,   78,   76,   76,   76,  739,   76,
       78,   76,   76,  531,   78,  739,   78,  739,   78,  537,
      739,   76,  739,   76,   76,  535,  739,   76,   78,  533,
       76,  536,  739,  539,  534,   76,  739,  739,  538,   76,
      739,   76,   76,  739,   76,   76,   78,   76,  739,   76,
      739,   76,   76,   76,  540,   76,   76,   76,   78,   76,
       78,   76,  739,  739,   76,   76,   76,   76,   78,  739,
      739,   78,   78,   78,  739,  739,   76,   76,   76,  541,
      739,  542,  739,   78,   76,  739,  543,   76,  544,   76,

      739,   76,   76,   76,   78,  739,   76,   76,  739,   76,
       78,   76,   76,   76,   76,   76,   76,  739,   78,  739,
       76,  545,   78,   78,   76,  739,  546,  739,  547,   76,
       76,  739,  739,  739,   76,   76,   78,  739,  739,   76,
      549,   76,  739,   76,  739,  739,   78,  548,   76,   76,
       78,  550,   76,   76,   76,  739,   76,   76,  739,  739,
      739,   76,   76,  739,   78,   76,   76,   76,   78,  551,
      739,   76,   78,  739,  554,   76,   76,   76,   78,  739,
       76,   76,   78,  739,   76,   76,  739,  552,   76,   76,
      739,  553,   78,   76,  739,   76,   78,   76,   76,   76,

       78,  739,   76,   76,   78,  739,   76,   76,  739,   76,
       76,   76,  739,   76,   78,   76,  739,  555,   78,   76,
       76,  556,   78,   76,   76,   76,   78,   76,   76,   76,
      739,   76,  739,   76,   76,   76,   78,   76,   76,  557,
       78,   78,  559,  558,   78,   76,  560,   76,  739,   76,
      563,  739,   76,   76,   78,  739,  739,   76,  561,  564,
      562,   76,  739,  739,   76,   76,  739,   76,   78,  739,
       76,   76,   76,   76,   76,   76,  739,  739,   76,   76,
       78,   78,  565,  739,   76,   76,   78,   76,   76,   76,
      739,  739,   76,   76,   78,  739,  739,   76,   76,   76,

       78,   76,  739,  566,   78,   78,  739,  567,   78,  739,
      739,   76,   76,   76,   76,  739,  739,   76,   76,  739,
      568,  570,   76,   76,   76,   76,  569,   76,  739,   78,
       78,   76,  571,   76,   78,   76,   76,  574,  739,   76,
       78,   76,   76,   76,  739,  739,  739,   76,  575,  573,
       76,   76,   76,  739,  572,  576,   76,   78,   78,   78,
       76,   76,  739,   78,   76,   76,   76,  577,   76,  579,
       76,   76,  739,   76,  739,   76,  578,   76,  739,   76,
       78,  739,   78,  739,   78,  739,   78,  739,   76,   76,
       76,  739,  581,   76,   76,  739,  582,  739,   76,  739,

      580,  739,   76,   76,  739,  739,  739,   76,  739,   78,
      739,   76,   76,   76,   78,   76,  587,   76,   76,   78,
       76,  588,   76,  739,  739,  739,   76,   76,  739,   76,
      739,   76,  583,  739,   78,   76,   78,   76,   78,  739,
       76,  739,   78,  739,  739,   76,   76,   76,  589,  739,
       76,  590,  591,   78,  592,   76,   76,  739,  739,  593,
      739,   76,  739,   78,   76,   76,   76,   76,  739,   76,
       76,   78,  739,   76,   76,   76,  594,   78,  739,  739,
       76,  596,   78,   76,   76,  739,  739,  739,  595,   76,
       78,   76,  739,  739,   76,  739,   78,  739,  739,  739,

       76,   76,   76,  597,  739,  739,   76,   78,   76,   76,
       76,  599,  739,   76,  598,   76,  739,   78,   76,   76,
       76,   76,   78,   76,   76,   78,  739,   76,   76,   76,
      739,  739,   76,   76,   76,   78,   78,  739,   76,   78,
       78,  600,  601,   76,  602,   76,   76,  739,   76,  603,
       78,  739,  604,   76,   76,   76,   76,  739,  739,   76,
       76,   78,   78,  606,   76,  605,   76,   76,   76,   76,
       76,   76,  739,   76,   76,   78,   78,  739,   76,   76,
       78,   76,   76,   76,  739,  739,  739,   76,   76,  739,
       78,   76,   76,   76,   78,   78,   76,  739,   78,   76,

       76,   76,  739,  739,  739,   76,   76,   76,   76,   76,
       76,   76,   78,  607,   76,   78,   78,   78,   76,   76,
      739,   76,  609,   76,  739,   76,   76,   76,   76,   76,
       78,  739,  739,  608,   78,   78,   76,  739,  739,  739,
       76,  610,   76,   76,   76,   76,   76,   76,   76,   76,
      739,   76,   78,   76,   76,   76,   78,  739,   78,   76,
       78,   76,  611,   76,   76,   76,   76,  739,   76,   76,
       78,   78,   76,  739,  739,   78,  612,   76,   76,  739,
      739,   76,  739,   76,  739,   78,   76,   76,   78,   76,
      739,   76,  739,   78,   76,   76,   76,  739,  739,  739,

      739,   76,   76,   76,   76,   76,   76,  739,  739,   76,
       78,   78,   78,  613,  739,  614,   76,  616,   76,   76,
      739,  739,  739,   76,   76,   78,  617,  739,  619,  739,
      620,  739,   76,  739,  615,   76,   76,  623,  618,   78,
      739,   76,   76,   76,   76,   76,  739,  739,  739,  621,
      622,   78,   78,  624,  739,  625,   76,  626,   76,   76,
      739,  628,  739,   76,  739,  739,  739,   76,   76,   76,
       76,  739,   76,  739,   78,   78,  627,   76,   76,   78,
      629,  739,   76,   76,  630,   78,   76,  739,   76,  739,
      632,  739,  739,   78,  637,  634,  739,   76,  635,  739,

      636,  739,   76,  631,   78,   76,   76,  739,  638,  633,
       76,   76,   76,   76,   76,  739,   76,   76,   78,  739,
      739,   76,   76,   76,   76,  739,   76,   76,   78,   78,
       78,   76,   76,   78,  639,   76,   76,   76,  739,  739,
       76,   76,   76,   78,  739,  739,   76,   78,   78,   76,
      739,   76,  739,   78,   76,  640,   76,   76,   78,   76,
       76,   76,  739,   76,   76,   76,   76,  739,  739,  739,
       78,   76,   78,   78,   76,  641,   76,  642,   76,   76,
       76,   76,  739,  644,   76,   76,   76,   78,  739,   76,
       76,   76,   78,  645,  739,   76,  643,   78,  646,   76,

       76,   76,   78,   76,   76,  739,  739,   78,   76,  739,
       76,  739,  739,  647,  739,   78,   76,  739,   76,   76,
       76,  648,  739,   76,  739,   76,   78,  739,   76,   76,
      739,  739,   78,   76,   76,  739,   78,  739,   76,  739,
      739,  739,  659,   76,  739,  739,   76,  649,  650,  651,
       78,  652,  660,  653,  739,   76,  739,   76,  654,   76,
       76,  655,  656,   76,   76,  657,  739,   76,   76,   76,
       76,   78,  658,   76,   76,   78,   78,  739,   76,   76,
      739,   76,   76,   76,   76,  739,   78,   76,  739,   78,
       78,  739,   76,   76,   78,   76,   76,  661,  739,  662,

       78,   76,   76,  739,   76,   76,   76,   76,   78,  739,
       76,   78,   78,   76,   76,  739,  739,   76,  663,   76,
       76,   76,   76,   76,   76,   76,   78,  739,  664,   78,
       78,   76,   76,   76,  739,   76,  739,   76,   76,   76,
       78,   76,   76,   76,   76,  739,   76,   76,   78,   76,
      739,   78,  665,   78,   78,  739,  667,   76,   76,  666,
       76,   76,  739,  739,   76,   78,  739,  739,  669,  739,
      739,   76,   76,   76,   76,  739,  668,   76,   76,   76,
       78,   76,   76,   76,   76,   76,   76,   76,   78,   76,
       78,   76,   76,   78,   78,  739,   76,   76,   76,  739,

       76,   76,  739,  739,  739,   78,   76,   78,   78,  739,
      739,   76,  739,   78,  670,  739,  739,   76,   76,   76,
      739,   76,  739,  739,   76,   76,   76,   76,  739,  739,
      739,   76,  739,   78,   78,  739,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   78,  671,  739,
       76,   76,   76,   78,   76,  739,  739,   78,   78,   78,
       76,   78,  739,   76,   76,   76,  739,  739,  739,   76,
      739,  739,   76,  739,  739,  672,   78,   76,   76,   78,
      673,  739,   76,  739,   76,   76,   76,  739,   76,   76,
       76,   76,   76,   78,   76,   76,  674,   76,   78,   76,

       76,   78,  739,   76,   76,   76,   76,   76,   76,   76,
       76,   78,   76,   78,   76,   78,   78,   76,  675,   78,
      739,   78,   76,  739,   76,  739,   76,  739,  739,   76,
      676,   76,   76,   78,  739,  739,  677,  739,   78,  739,
      678,  739,   76,  739,   76,  739,   76,   76,  739,   76,
       76,  739,   76,  739,   76,  739,  739,   76,   76,   76,
      739,  679,  739,   76,   76,   78,   76,  682,   76,   76,
       78,  680,  683,   78,   76,   78,   76,  739,   76,   76,
      739,  739,   76,   76,  739,   76,  681,   76,   76,  739,
       78,   76,   78,   76,   78,   78,   76,  739,   78,  739,

      739,   76,   76,  739,   76,  685,   76,  739,  739,   78,
      739,   76,  739,  739,  739,  687,  739,  684,  739,  686,
       76,   76,   76,   76,  739,   76,   76,   78,   76,   76,
       76,   76,   76,   76,   76,  739,  739,   76,   78,   76,
       76,   76,   76,   76,   78,  693,   78,  739,   78,   78,
       78,  688,  739,  689,  739,   76,   76,   76,   76,  739,
      739,  739,  739,  692,   76,   76,   76,  691,  690,   76,
      739,   78,   78,   78,   76,   76,   76,   76,   76,   76,
       76,   76,  739,   76,   76,   76,  694,   76,  739,   76,
       78,  695,   78,   76,   78,  739,  696,  739,   76,   76,

       78,  739,   76,   76,   76,   78,  697,  739,   76,  739,
      698,   76,  739,   76,  739,   78,  739,   76,  739,   76,
       76,   76,   76,   76,  739,   76,   76,   78,   76,   78,
      739,   76,  739,   78,  739,   78,   76,  739,  699,   76,
       76,  739,  739,  739,  739,   76,   76,  739,   76,   76,
      700,  739,  701,   76,   76,   78,   78,  739,   76,  702,
       76,   78,   76,   76,   76,  739,   76,   76,   76,   78,
      739,  739,   76,  703,  704,  739,   76,   76,  739,   78,
      739,   76,  739,   78,   78,   76,   76,   76,  739,  705,
       76,  706,   76,   76,   76,   76,   76,   78,  739,  739,

       76,   78,   76,  739,   76,   76,  739,   76,   76,   78,
       76,   78,   78,   76,   76,   76,   76,   76,   76,  739,
      739,  739,   76,   78,   78,  739,  739,   76,   76,   78,
      707,  739,   76,  739,   78,  739,   76,   76,  739,  739,
       76,   76,   76,   76,  739,   76,   76,   76,  739,  739,
       76,  708,   78,   78,   76,   76,   76,   78,   76,   76,
       76,   76,   76,   78,   76,   76,  739,   76,   76,  739,
       76,   76,  739,   76,   78,   78,  739,   78,   78,  739,
       78,   76,   76,   76,   76,  709,  739,   76,   76,  739,
       76,   76,  739,  739,   76,  710,   76,   78,   78,  739,

      739,   76,  739,   78,   76,   76,   76,  739,   76,   76,
       76,   76,  739,   76,   76,   76,   76,   78,  711,  739,
       78,  739,  739,   76,   76,   76,  739,   76,   76,   76,
       78,   78,   78,   76,   76,  712,   76,  714,  739,  739,
      739,   76,   76,   78,   76,  739,  739,  739,   76,   78,
       76,   76,  739,   76,  713,   76,  715,   78,  739,   76,
       78,   76,   76,   76,   76,  739,  739,   76,   76,   76,
       76,   78,  739,   76,   76,   78,   76,  739,   76,   76,
       76,   76,   76,   78,   76,   78,   78,   76,   76,   78,
       76,   76,  739,   76,  739,   76,   76,   78,  739,   76,

       78,  716,   76,   78,   76,  739,   76,  739,   76,  717,
       76,   78,  739,   76,   76,   78,   76,   76,  739,   76,
       76,  718,   76,   76,   76,  739,   78,   76,   76,   78,
      739,   76,   76,   76,   76,  719,   76,  739,   76,   78,
       78,  739,   76,   78,  739,  720,   76,   76,  739,   76,
       76,  739,   76,   76,   78,  739,  739,   76,   76,   76,
       76,   76,   76,   76,   76,   78,   78,   76,   78,   78,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   78,
       78,  739,  739,   78,   76,   76,   76,   76,  739,  739,
      739,   78,   76,   78,   78,  739,   76,   76,  721,   76,

       76,   76,  739,   76,   76,  739,  739,   76,   78,  739,
       76,   76,   76,   76,   76,  739,   76,   76,  739,   78,
       78,   76,   76,   78,   76,   76,   76,   76,  723,  722,
       76,   76,   76,   78,  739,  739,   76,   78,  739,   76,
       76,   76,  739,   78,  739,  739,   76,   78,   78,   76,
       76,   76,  739,  739,   76,   76,  739,   76,   76,  739,
      724,   76,   78,  739,   76,   78,   76,   76,   76,  739,
       76,   76,   76,   78,   76,   76,   76,   78,   76,   76,
       76,   76,  725,   78,   76,   76,   76,   78,   78,   76,
       76,   78,  739,   76,   76,   76,   76,  739,   76,   76,

       76,   78,   78,  739,   76,   78,   78,  739,   76,   76,
      739,   76,   76,  739,   76,   76,   78,  739,   76,   76,
       76,   76,   76,  739,   76,   76,   76,   78,   78,   76,
      739,   78,   76,   76,   76,   76,   76,   76,   76,  726,
       76,   78,   78,  739,   76,   78,  739,   76,   76,   76,
      739,  739,   76,   76,  739,  739,   78,   76,   76,   76,
       78,   76,   76,  727,   78,   76,   76,  739,   78,   76,
      739,  739,   76,   76,   76,   76,   76,   76,   76,  739,
      739,   78,   78,  739,  728,   78,   76,   76,   76,  731,
      739,   76,   76,   78,  739,   76,  739,   76,  739,   76,

      739,   76,  729,  730,   78,  739,   76,  739,   78,   76,
       76,   76,   76,   76,  732,   76,   76,  739,   76,   76,
       76,   76,   78,  739,   76,   78,   78,   78,  739,  739,
       76,   76,   76,   76,   76,   76,  739,   78,  739,   76,
       76,   76,   76,   76,  739,  734,   76,   78,   78,   78,
       78,   76,  739,   76,  733,   76,   76,   76,   76,  739,
       76,   76,   78,  739,  739,  739,  739,   78,   76,  739,
       76,  739,  739,  739,   76,   76,   76,   78,   76,   76,
       76,   76,  735,   76,   76,   76,   76,   76,   76,  739,
       78,   78,   78,   76,  739,   76,   76,   76,   76,  739,

      739,   76,   78,   78,   78,  739,  739,  739,   76,  736,
       76,   76,  739,  739,  739,   76,   76,   78,  739,  739,
       76,   76,   76,   76,   76,   76,  739,   78,   76,   76,
       76,   78,   78,   76,   76,   76,  739,   76,   76,   76,
       76,   76,  739,   76,   78,   78,   78,  739,   76,   76,
       76,   76,   76,  739,  739,   76,   78,   78,   76,   78,
       76,  739,   76,   76,   76,  738,  739,   78,  739,  739,
       76,   78,  739,   76,  739,   76,   76,   76,  737,   76,
      739,  739,   76,   76,  739,  739,   78,   76,   76,   78,
       76,  739,   76,  739,  739,  739,  739,  739,   76,   78,

      739,  739,   76,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,   76,  739,  739,
       76,  739,  739,  739,  739,  739,  739,  739,  739,  739,
       76,   61,   61,   62,   62,   65,   65,   72,   72,   74,
       74,   79,   79,   17,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,

      739,  739,  739,  739,  739,  739,  739,  739
    } ;

static const flex_int16_t yy_chk[4709] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    9,    9,   10,   10,   11,   11,
       23,  745,   25,   12,   12,  384,   79,  200,   17,   23,
       34,   34,   34,   34,   34,  200,   23,   16,   33,   33,
       33,   33,   33,   43,   45,   45,   15,   45,   14,   13,

        0,    0,   43,    0,    0,   45,   45,   45,    0,   43,
        0,   45,    9,    0,   10,   25,   11,   23,   33,   79,
        0,   12,   43,    0,   11,   41,   11,   11,   11,   12,
        0,   12,   12,   12,   41,   33,   37,   38,   78,    0,
       43,   41,   54,    0,    0,   37,   38,    0,   78,   78,
       78,   54,   37,   38,   37,   37,   41,   37,   54,   41,
        0,   55,    0,   38,   54,   37,   41,   37,   54,   38,
       55,   37,   41,   38,   38,   39,   39,   55,   39,   38,
        0,    0,   55,   37,   38,    0,   39,   39,   39,   54,
       39,    0,   39,  199,    0,    0,    0,   39,   40,   40,

        0,   40,   40,  199,  199,  199,   40,   44,   55,   40,
       81,   40,    0,    0,   40,   40,   44,   40,    0,    0,
       40,   42,    0,   44,    0,    0,   42,   42,   42,   42,
       42,   42,    0,    0,   42,    0,   44,   42,   42,   42,
       42,   42,    0,   42,   42,   42,   42,    0,    0,   42,
       42,    0,    0,   81,   44,   46,   46,   46,   46,   46,
        0,   46,    0,   81,   81,   81,   46,   46,   46,   46,
       46,    0,   46,   46,   48,   82,   82,   82,   82,   82,
       46,   47,   47,   48,   47,   47,   47,   47,   49,   47,
       48,    0,   47,   47,   47,   47,    0,   49,   47,   47,

       47,    0,    0,    0,   49,    0,   48,   50,    0,   51,
       49,    0,   48,   76,    0,   77,   50,   52,   51,    0,
       49,   48,   76,   50,   77,   51,   52,   51,    0,   76,
        0,   77,    0,   52,    0,   49,    0,   52,   52,   52,
       50,   51,   50,    0,    0,   50,    0,   51,    0,   52,
        0,    0,    0,   52,   50,    0,   51,    0,    0,    0,
       76,    0,   77,    0,   52,   53,   53,   53,   53,   53,
       56,   53,   53,   53,    0,    0,   53,   53,   53,   56,
       57,   57,   53,   57,   53,   53,   56,   58,   58,   58,
       58,   57,   56,   57,   57,    0,   85,   57,   58,    0,

       58,   58,    0,    0,   58,   85,    0,   89,    0,    0,
        0,    0,   85,    0,    0,   84,   89,   56,   83,   83,
       83,   83,   83,   89,   84,   83,   83,   83,   83,   83,
       83,   84,   85,   84,    0,    0,   84,   87,    0,    0,
       89,    0,    0,   85,    0,   84,   87,    0,    0,    0,
        0,   84,   86,   87,   89,   83,   83,   83,   83,   83,
       83,   86,   84,   87,    0,   88,   90,   91,   86,   92,
        0,   93,   86,   86,   88,   90,   91,    0,   92,   95,
       93,   88,   90,   91,   87,   92,   88,   93,   95,    0,
        0,   93,   92,    0,    0,   95,    0,    0,    0,   86,

        0,   94,    0,   90,   92,   91,   93,   93,   95,   92,
       94,   96,   88,   90,   91,   97,   92,   94,   93,   98,
       96,   99,    0,    0,   97,    0,   95,   96,   98,    0,
       99,   97,    0,    0,  100,   98,    0,   99,   94,   98,
       98,   99,    0,  100,  101,   98,    0,    0,   94,   97,
      100,   96,    0,  101,   99,  103,   98,    0,   96,    0,
      101,  102,   97,    0,  103,  101,   98,  104,   99,  105,
      102,  103,  100,    0,    0,    0,  104,  102,  105,  102,
        0,  100,    0,  104,  106,  105,    0,  107,    0,  105,
      108,  101,    0,  106,    0,  109,  107,  102,    0,  108,

      106,  110,  103,  107,  109,    0,  108,    0,  102,  111,
      110,  109,  112,    0,  104,    0,  105,  110,  111,    0,
      113,  112,  110,  106,  114,  111,    0,  109,  112,  113,
        0,  106,    0,  114,  107,    0,  113,  108,  110,    0,
      114,  115,  109,  114,  116,  114,  117,  111,  110,  112,
      115,    0,    0,  116,    0,  117,  111,  115,    0,  112,
      116,  113,  117,    0,    0,  118,  119,  113,  117,  116,
      115,  114,  117,  116,  118,  119,  116,  115,  122,    0,
        0,  118,  119,    0,    0,    0,  121,  122,  115,    0,
        0,  116,    0,  117,  122,  121,  118,  120,  120,  120,

      120,  119,  121,    0,    0,    0,    0,  121,  120,  120,
      120,  124,  118,  119,  120,  120,  122,    0,    0,    0,
      124,    0,  125,    0,    0,  122,  128,  124,  133,    0,
        0,  125,  126,  121,  123,  128,    0,  133,  125,    0,
      125,  126,  128,  123,  133,    0,  124,    0,  126,    0,
      123,    0,    0,    0,  123,  123,  123,  125,  124,  125,
      123,    0,  128,  126,    0,  133,  123,  129,  126,  125,
      123,    0,    0,  128,    0,  133,  129,    0,    0,  126,
        0,  123,  127,  129,  127,  127,  127,  129,  130,    0,
      127,    0,    0,    0,  131,    0,  127,  130,  127,    0,

      127,  127,  127,  131,  130,    0,  130,    0,  130,    0,
      131,  132,  134,  135,  129,    0,    0,  136,    0,    0,
      132,  134,  135,  131,    0,  130,  136,  132,  134,  135,
      137,    0,    0,  136,    0,  130,    0,  136,  134,  137,
        0,  131,    0,  132,    0,    0,  137,    0,    0,    0,
        0,  135,  137,  136,  136,    0,  136,  138,  132,  134,
      135,    0,  139,    0,  136,  140,  138,  141,    0,    0,
        0,  139,    0,  138,  140,    0,  141,  137,  139,  138,
      142,  140,  144,  141,  139,  143,    0,  141,    0,  142,
        0,  144,    0,    0,  143,    0,  142,    0,  144,    0,

        0,  143,  142,    0,  138,    0,  140,  143,  146,  139,
      148,    0,  140,    0,  141,  144,    0,  146,    0,  148,
        0,    0,  149,    0,  146,    0,  148,  142,    0,  144,
        0,  149,  143,  145,  145,  145,  145,  145,  149,  145,
      147,  145,    0,  150,  145,  151,    0,  145,  145,  147,
        0,  145,  150,    0,  151,  146,  147,  148,  145,  150,
        0,  151,  147,    0,  152,    0,    0,  153,  150,  149,
      154,    0,  147,  152,    0,    0,  153,    0,  150,  154,
      152,  151,  152,  153,    0,  157,  154,  147,  155,  156,
      150,  154,  151,    0,  157,    0,    0,  155,  156,  161,

      152,  157,    0,  153,  155,  156,  154,  163,  161,  155,
      156,  152,    0,  159,  153,  161,  163,  154,  158,  158,
      158,  157,  159,  163,  158,    0,    0,    0,  160,  159,
      158,  163,  157,    0,  158,  155,  156,  160,  161,  162,
        0,  164,  159,  165,  160,    0,  161,    0,  162,  159,
      164,    0,  165,  166,  163,  162,  167,  164,    0,  165,
      159,    0,  166,  160,    0,  167,    0,    0,  162,  166,
        0,    0,  167,  168,  164,  160,  169,  166,  164,    0,
      165,    0,  168,    0,    0,  169,  162,    0,  164,  168,
      165,    0,  169,  167,  168,  170,    0,  171,    0,  175,

      166,  174,    0,  167,  170,  172,  171,    0,  175,  169,
      174,  170,    0,  171,  172,  175,    0,  174,  173,    0,
      168,  172,    0,  169,  176,    0,  171,  173,    0,  175,
      174,  170,  171,  176,  173,  172,  174,    0,  172,    0,
      176,  177,  170,    0,  171,    0,  175,  180,  174,  176,
      177,  173,  172,  176,  173,  173,  180,  177,  178,  176,
      177,  179,    0,  180,  181,  173,  182,  178,  180,  183,
      179,  176,    0,  181,  178,  182,  178,  179,  183,    0,
      181,  179,  182,    0,    0,  183,  184,  182,  177,    0,
      183,  186,    0,  181,  180,  184,    0,    0,  179,  181,

      186,    0,  184,    0,    0,  178,    0,  186,  179,    0,
      186,  181,    0,  182,  187,    0,  183,    0,    0,  185,
      185,  185,  184,  187,    0,  185,    0,  188,  189,    0,
      187,  185,    0,  184,  185,  185,  188,  189,  186,  191,
      192,  189,  190,  188,  189,    0,    0,    0,  191,  192,
      187,  190,    0,  193,  194,  191,  192,  188,  190,    0,
        0,  187,  193,  194,  195,  191,  192,  196,    0,  193,
      194,    0,    0,  195,  188,  189,  196,  190,    0,    0,
      195,  197,  198,  196,  194,  195,  191,  192,  193,  190,
      197,  198,  196,  201,  202,    0,  203,  197,  198,  197,

      193,  194,  201,  202,  204,  203,  205,  206,    0,  201,
      202,  195,  203,  204,  196,  205,  206,  198,  207,    0,
      204,  208,  205,  206,    0,    0,  209,  207,  197,  198,
      208,    0,    0,    0,  207,  209,    0,  208,  205,    0,
      201,  202,  209,  203,    0,  208,  210,  211,  212,    0,
      213,  204,    0,  205,  206,  210,  211,  212,  214,  213,
      215,  216,  210,  211,  212,  207,  213,  214,  208,  215,
      216,  217,  218,  209,  214,  210,  215,  216,  215,  212,
      217,  218,  219,  211,    0,    0,    0,  217,  218,    0,
      221,  219,    0,  210,  211,  212,    0,  213,  219,  221,

      222,  220,    0,    0,  219,  214,  221,  215,  216,  222,
      220,  223,  224,    0,    0,  225,  222,  220,  217,  218,
      223,  224,    0,  227,  225,  226,    0,  223,  224,  219,
      220,  225,  227,  228,  226,    0,  231,  221,    0,  227,
        0,  226,  228,    0,    0,  231,    0,  222,  220,  228,
        0,  229,  231,    0,    0,  232,    0,  230,  223,  224,
      229,  226,  225,    0,  232,    0,  230,  229,    0,  228,
      227,  232,  226,  230,  228,  233,  234,  229,  235,  230,
      228,  236,    0,  231,  233,  234,    0,  235,    0,    0,
      236,  233,  234,    0,  235,    0,  237,  236,  229,  238,

      240,    0,  232,    0,  230,  237,    0,    0,  238,  240,
      239,    0,  237,  235,    0,  238,  240,    0,  237,  239,
      241,    0,  233,  234,  242,  235,  239,    0,  236,  241,
      240,    0,  239,  242,    0,  244,  241,    0,    0,  243,
      242,    0,    0,  237,  244,  242,  238,  240,  243,  245,
      248,  244,  246,  247,    0,  243,  241,  239,  245,  248,
      243,  246,  247,    0,    0,  245,  248,  241,  246,  247,
      248,  242,  244,    0,  246,  249,    0,    0,  250,  251,
        0,    0,  244,  247,  249,  245,  243,  250,  251,  247,
        0,  249,    0,  256,  250,  251,  245,  248,    0,  246,

      247,  251,  256,  252,  250,    0,    0,  253,    0,  256,
        0,  249,  252,    0,  249,    0,  253,    0,  254,  252,
      255,    0,  249,  253,  252,  250,  251,  254,    0,  255,
        0,  256,    0,    0,  254,    0,  255,  257,    0,  253,
      256,  255,  255,  258,  254,    0,  257,    0,    0,    0,
      252,    0,  258,  257,  253,    0,    0,  257,    0,  258,
      438,  438,  438,  257,    0,  254,  438,  255,    0,  260,
      261,    0,  438,    0,    0,    0,  438,    0,  260,  261,
      258,  258,    0,    0,  257,  260,  261,    0,  262,    0,
      258,  259,  263,  265,    0,    0,  264,  262,  260,  261,

      259,  263,  265,  259,  262,  264,  267,  259,  263,  265,
        0,  259,  264,  259,  262,  267,  260,  261,    0,    0,
      259,    0,  267,  263,  259,    0,  265,  264,  266,    0,
        0,    0,  268,  269,  259,  262,  267,  266,  259,  263,
      265,  268,  269,  264,  266,  270,  266,    0,  268,  269,
      271,  272,    0,  267,  270,  269,    0,    0,    0,  271,
      272,  270,    0,  270,    0,  266,  271,  272,  273,  268,
        0,  271,    0,  274,  275,  266,    0,  273,  276,  268,
      269,    0,  274,  275,  273,    0,  280,  276,  272,  274,
      275,  274,  270,  278,  276,  280,  277,  271,  272,    0,

        0,  278,  280,  278,    0,  277,    0,  273,    0,  276,
      278,  275,  277,  279,  278,  273,    0,  278,  281,  282,
      274,  275,  279,  280,  278,  276,    0,  281,  282,  279,
      283,  277,  279,  280,  281,  282,  284,    0,  285,  283,
        0,    0,    0,  277,    0,  284,  283,  285,  286,  282,
      281,  285,  284,  287,  285,  283,    0,  286,    0,  288,
      279,    0,  287,  289,  286,  281,  282,  286,  288,  287,
        0,  284,  289,  290,    0,  288,    0,  283,  291,  289,
        0,    0,  290,  284,    0,  285,    0,  291,    0,  290,
        0,    0,  289,  293,  291,  286,    0,  291,  288,  291,

      287,    0,  293,  292,    0,  290,  288,  294,    0,  293,
      289,    0,  292,    0,  293,  291,  294,  292,  291,  292,
      290,  295,  293,  294,    0,  291,    0,  296,    0,  297,
      295,    0,  298,  299,    0,  292,  296,  295,  297,    0,
      293,  298,  299,  296,  294,  297,  300,  301,  298,  299,
      292,  304,    0,    0,  294,  300,  301,    0,    0,    0,
      304,  302,  300,  301,    0,    0,  303,  304,  295,  305,
      302,    0,  297,  298,  296,  303,  297,  302,  305,  298,
      299,  306,  303,  302,    0,  305,    0,    0,  303,    0,
      306,  308,    0,  300,  301,  307,  309,  306,  304,    0,

      308,    0,    0,  306,  307,  309,  310,  308,  302,  311,
      312,  307,  309,  303,  313,  310,  305,  307,  311,  312,
      315,    0,  310,  313,  314,  311,  312,    0,  306,  315,
      313,    0,  316,  314,    0,  317,  315,    0,  308,    0,
      314,  316,  307,  309,  317,    0,  318,  314,  316,  319,
      320,  317,    0,  310,  321,  318,  311,  312,  319,  320,
        0,  313,  318,  321,  324,  319,  320,  315,  322,  323,
      321,  314,  325,  324,  317,    0,    0,  322,  323,  316,
      324,  325,  317,  328,  322,  323,  326,  320,  325,    0,
        0,    0,  328,  318,  327,  326,  319,  320,  329,  328,

      325,  321,  326,  327,  324,  322,  323,  329,  330,    0,
      327,  324,  332,    0,  329,  322,  323,  330,    0,  325,
      331,  332,  326,  333,  330,    0,  334,  327,  332,  331,
      328,  335,  333,  326,  336,  334,  331,  337,    0,  333,
      335,  327,  334,  336,    0,  329,  337,  335,  342,  338,
      336,    0,  341,  337,    0,  330,  331,  342,  338,  332,
      336,  341,    0,  331,  342,  338,  339,  331,  341,    0,
      333,    0,    0,  334,  340,  339,    0,  341,  335,    0,
        0,  336,  339,  340,  337,  338,    0,  339,    0,  343,
      340,  344,  340,    0,  345,  342,  338,  340,  343,  341,

      344,    0,  339,  345,    0,  343,  346,  344,    0,  349,
      345,    0,    0,  339,    0,  346,    0,    0,  349,    0,
        0,  340,  346,    0,  345,  349,    0,  344,  346,    0,
        0,    0,    0,    0,    0,  350,  343,  346,  344,  347,
      347,  345,  347,  347,  350,    0,    0,  347,  348,  346,
      351,  350,    0,  346,  352,  347,  349,  348,  347,  351,
      353,  347,    0,  352,  348,  354,  351,    0,    0,  353,
      352,  348,    0,    0,  354,  355,  353,  352,  356,  348,
      357,  354,  350,    0,  355,    0,    0,  356,    0,  357,
        0,  355,    0,    0,  356,  348,  357,  351,    0,    0,

      359,  352,  360,    0,    0,    0,    0,  353,    0,  359,
      361,  360,  354,    0,  356,    0,  359,  357,  360,  361,
        0,    0,  355,  360,  362,  356,  361,  357,  358,  358,
      358,  361,  358,  362,  358,  363,  364,  359,    0,  358,
      362,  358,  358,  358,  363,  364,  358,  359,    0,  360,
      365,  363,  364,  358,  366,    0,    0,  361,  367,  365,
        0,  362,    0,  366,  368,    0,  365,  367,  369,  370,
      366,  362,  363,  368,  367,    0,  364,  369,  370,    0,
      368,    0,  363,  364,  369,  370,  371,  372,    0,    0,
      373,    0,    0,    0,    0,  371,  372,  365,  375,  373,

      368,  366,  371,  372,  374,  367,  373,  375,  377,  372,
      376,  368,  378,  374,  375,  369,  370,  377,    0,  376,
      374,  378,  379,  371,  377,    0,  376,    0,  378,  377,
        0,  379,    0,  371,  372,  375,    0,  373,  379,  374,
      380,  376,    0,  379,  374,  375,    0,    0,  378,  380,
        0,  374,  381,    0,  382,  377,  380,  376,    0,  378,
        0,  381,  385,  382,  380,  386,  387,  388,  381,  379,
      382,  385,    0,    0,  386,  387,  388,  389,  385,    0,
        0,  386,  387,  388,    0,    0,  389,  380,  390,  381,
        0,  385,    0,  389,  391,    0,  386,  390,  389,  381,

        0,  382,  392,  391,  390,    0,  393,  394,    0,  385,
      391,  392,  386,  387,  388,  393,  394,    0,  392,    0,
      395,  390,  393,  394,  389,    0,  394,    0,  394,  395,
      396,    0,    0,    0,  397,  390,  395,    0,    0,  396,
      395,  391,    0,  397,    0,    0,  396,  394,  398,  392,
      397,  396,  399,  393,  394,    0,  400,  398,    0,    0,
        0,  399,  401,    0,  398,  400,  402,  395,  399,  398,
        0,  401,  400,    0,  401,  402,  404,  396,  401,    0,
      406,  397,  402,    0,  403,  404,    0,  399,  405,  406,
        0,  400,  404,  403,    0,  398,  406,  405,  407,  399,

      403,    0,  409,  400,  405,    0,  410,  407,    0,  401,
      408,  409,    0,  402,  407,  410,    0,  403,  409,  408,
      411,  405,  410,  404,  413,  412,  408,  406,  414,  411,
        0,  403,    0,  413,  412,  405,  411,  414,  415,  407,
      413,  412,  410,  408,  414,  407,  411,  415,    0,  409,
      414,    0,  416,  410,  415,    0,    0,  408,  412,  415,
      412,  416,    0,    0,  417,  418,    0,  411,  416,    0,
      419,  413,  412,  417,  418,  414,    0,    0,  420,  419,
      417,  418,  416,    0,  421,  415,  419,  420,  423,  422,
        0,    0,  425,  421,  420,    0,    0,  423,  422,  416,

      421,  425,    0,  417,  423,  422,    0,  420,  425,    0,
        0,  417,  418,  424,  426,    0,    0,  419,  427,    0,
      421,  423,  424,  426,  428,  420,  422,  427,    0,  424,
      426,  421,  424,  428,  427,  423,  422,  428,    0,  425,
      428,  429,  430,  431,    0,    0,    0,  432,  428,  427,
      429,  430,  431,    0,  426,  428,  432,  429,  430,  431,
      424,  426,    0,  432,  433,  427,  434,  429,  436,  432,
      435,  428,    0,  433,    0,  434,  431,  436,    0,  435,
      433,    0,  434,    0,  436,    0,  435,    0,  429,  430,
      431,    0,  434,  437,  432,    0,  435,    0,  439,    0,

      433,    0,  437,  440,    0,    0,    0,  439,    0,  437,
        0,  433,  440,  434,  439,  436,  439,  435,  441,  440,
      442,  440,  444,    0,    0,    0,  443,  441,    0,  442,
        0,  444,  437,    0,  441,  443,  442,  445,  444,    0,
      437,    0,  443,    0,    0,  439,  445,  446,  441,    0,
      440,  442,  443,  445,  444,  447,  446,    0,    0,  445,
        0,  448,    0,  446,  447,  441,  449,  442,    0,  444,
      448,  447,    0,  443,  450,  449,  446,  448,    0,    0,
      451,  448,  449,  450,  445,    0,    0,    0,  447,  451,
      450,  452,    0,    0,  446,    0,  451,    0,    0,    0,

      452,  453,  447,  449,    0,    0,  455,  452,  448,  454,
      453,  451,    0,  449,  450,  455,    0,  453,  454,  456,
      457,  450,  455,  458,  460,  454,    0,  451,  456,  457,
        0,    0,  458,  460,  459,  456,  457,    0,  452,  458,
      460,  453,  454,  459,  454,  461,  462,    0,  453,  456,
      459,    0,  459,  455,  461,  462,  454,    0,    0,  463,
      464,  461,  462,  461,  465,  460,  456,  457,  463,  464,
      458,  460,    0,  465,  466,  463,  464,    0,  467,  468,
      465,  459,  469,  466,    0,    0,    0,  467,  468,    0,
      466,  469,  461,  462,  467,  468,  470,    0,  469,  471,

      472,  473,    0,    0,    0,  470,  463,  464,  471,  472,
      473,  465,  470,  467,  474,  471,  472,  473,  476,  475,
        0,  466,  473,  474,    0,  467,  468,  476,  475,  469,
      474,    0,    0,  472,  476,  475,  477,    0,    0,    0,
      478,  473,  479,  470,  480,  477,  471,  472,  473,  478,
        0,  479,  477,  480,  481,  482,  478,    0,  479,  483,
      480,  474,  475,  481,  482,  476,  475,    0,  483,  484,
      481,  482,  485,    0,    0,  483,  481,  486,  484,    0,
        0,  485,    0,  477,    0,  484,  486,  478,  485,  479,
        0,  480,    0,  486,  487,  488,  490,    0,    0,    0,

        0,  481,  482,  487,  488,  490,  483,    0,    0,  489,
      487,  488,  490,  487,    0,  487,  484,  488,  489,  485,
        0,    0,    0,  491,  486,  489,  488,    0,  489,    0,
      489,    0,  491,    0,  487,  493,  492,  490,  488,  491,
        0,  487,  488,  490,  493,  492,    0,    0,    0,  489,
      489,  493,  492,  491,    0,  492,  489,  492,  494,  498,
        0,  493,    0,  495,    0,    0,    0,  494,  498,  496,
      491,    0,  495,    0,  494,  498,  492,  497,  496,  495,
      494,    0,  493,  492,  495,  496,  497,    0,  499,    0,
      496,    0,    0,  497,  498,  497,    0,  499,  497,    0,

      497,    0,  500,  495,  499,  494,  498,    0,  499,  496,
      495,  500,  501,  502,  503,    0,  496,  504,  500,    0,
        0,  501,  502,  503,  497,    0,  504,  505,  501,  502,
      503,  506,  507,  504,  501,  499,  505,  508,    0,    0,
      506,  507,  509,  505,    0,    0,  508,  506,  507,  500,
        0,  509,    0,  508,  510,  501,  511,  512,  509,  501,
      502,  503,    0,  510,  504,  511,  512,    0,    0,    0,
      510,  513,  511,  512,  505,  511,  514,  511,  506,  507,
      513,  515,    0,  512,  508,  514,  516,  513,    0,  509,
      515,  517,  514,  513,    0,  516,  511,  515,  514,  518,

      517,  510,  516,  511,  512,    0,    0,  517,  518,    0,
      520,    0,    0,  517,    0,  518,  522,    0,  513,  520,
      521,  518,    0,  514,    0,  522,  520,    0,  515,  521,
        0,    0,  522,  516,  523,    0,  521,    0,  517,    0,
        0,    0,  521,  523,    0,    0,  518,  519,  519,  519,
      523,  519,  521,  519,    0,  524,    0,  520,  519,  525,
      526,  519,  519,  522,  524,  519,    0,  521,  525,  526,
      527,  524,  519,  528,  529,  525,  526,    0,  530,  527,
        0,  523,  528,  529,  531,    0,  527,  530,    0,  528,
      529,    0,  532,  531,  530,  533,  534,  530,    0,  530,

      531,  532,  524,    0,  533,  534,  525,  526,  532,    0,
      535,  533,  534,  536,  537,    0,    0,  527,  530,  535,
      528,  529,  536,  537,  538,  530,  535,    0,  532,  536,
      537,  531,  539,  538,    0,  540,    0,  541,  542,  532,
      538,  539,  533,  534,  540,    0,  541,  542,  539,  543,
        0,  540,  536,  541,  542,    0,  541,  535,  543,  538,
      536,  537,    0,    0,  544,  543,    0,    0,  543,    0,
        0,  538,  545,  544,  546,    0,  542,  547,  548,  539,
      544,  545,  540,  546,  541,  542,  547,  548,  545,  549,
      546,  550,  551,  547,  548,    0,  543,  552,  549,    0,

      550,  551,    0,    0,    0,  549,  552,  550,  551,    0,
        0,  544,    0,  552,  549,    0,    0,  553,  554,  545,
        0,  546,    0,    0,  547,  548,  553,  554,    0,    0,
        0,  555,    0,  553,  554,    0,  549,  556,  550,  551,
      555,  557,  558,  559,  552,  560,  556,  555,  553,    0,
      557,  558,  559,  556,  560,    0,    0,  557,  558,  559,
      561,  560,    0,  562,  553,  554,    0,    0,    0,  561,
        0,    0,  562,    0,    0,  558,  561,  563,  555,  562,
      559,    0,  564,    0,  556,  565,  563,    0,  557,  558,
      559,  564,  560,  563,  565,  566,  562,  567,  564,  568,

      569,  565,    0,  570,  566,  571,  567,  561,  568,  569,
      562,  566,  570,  567,  571,  568,  569,  572,  565,  570,
        0,  571,  573,    0,  563,    0,  572,    0,    0,  564,
      566,  573,  565,  572,    0,    0,  568,    0,  573,    0,
      571,    0,  566,    0,  567,    0,  568,  569,    0,  574,
      570,    0,  571,    0,  575,    0,    0,  577,  574,  576,
        0,  573,    0,  575,  572,  574,  577,  575,  576,  573,
      575,  574,  576,  577,  578,  576,  579,    0,  581,  580,
        0,    0,  582,  578,    0,  579,  574,  581,  580,    0,
      578,  582,  579,  583,  581,  580,  574,    0,  582,    0,

        0,  575,  583,    0,  577,  580,  576,    0,    0,  583,
        0,  584,    0,    0,    0,  583,    0,  579,    0,  582,
      584,  578,  585,  579,    0,  581,  580,  584,  586,  582,
      587,  585,  588,  589,  590,    0,    0,  586,  585,  587,
      583,  588,  589,  590,  586,  589,  587,    0,  588,  589,
      590,  584,    0,  585,    0,  591,  592,  593,  584,    0,
        0,    0,    0,  588,  591,  592,  593,  587,  586,  585,
        0,  591,  592,  593,  594,  586,  595,  587,  596,  588,
      589,  590,    0,  594,  597,  595,  591,  596,    0,  598,
      594,  592,  595,  597,  596,    0,  594,    0,  598,  599,

      597,    0,  591,  592,  593,  598,  595,    0,  599,    0,
      596,  600,    0,  601,    0,  599,    0,  602,    0,  603,
      600,  594,  601,  595,    0,  596,  602,  600,  603,  601,
        0,  597,    0,  602,    0,  603,  598,    0,  599,  604,
      605,    0,    0,    0,    0,  606,  599,    0,  604,  605,
      602,    0,  603,  607,  606,  604,  605,    0,  600,  604,
      601,  606,  607,  609,  602,    0,  603,  608,  610,  607,
        0,    0,  609,  605,  606,    0,  608,  610,    0,  609,
        0,  611,    0,  608,  610,  612,  604,  605,    0,  607,
      611,  608,  606,  613,  612,  614,  615,  611,    0,    0,

      607,  612,  613,    0,  614,  615,    0,  616,  617,  613,
      609,  614,  615,  618,  608,  610,  616,  617,  619,    0,
        0,    0,  618,  616,  617,    0,    0,  619,  611,  618,
      617,    0,  612,    0,  619,    0,  620,  621,    0,    0,
      613,  622,  614,  615,    0,  620,  621,  623,    0,    0,
      622,  617,  620,  621,  616,  617,  623,  622,  625,  624,
      618,  626,  627,  623,  628,  619,    0,  625,  624,    0,
      626,  627,    0,  628,  625,  624,    0,  626,  627,    0,
      628,  629,  630,  620,  621,  624,    0,  631,  622,    0,
      629,  630,    0,    0,  623,  628,  631,  629,  630,    0,

        0,  632,    0,  631,  633,  625,  624,    0,  626,  627,
      632,  628,    0,  633,  634,  635,  636,  632,  629,    0,
      633,    0,    0,  634,  635,  636,    0,  637,  629,  630,
      634,  635,  636,  638,  631,  634,  637,  636,    0,    0,
        0,  639,  638,  637,  640,    0,    0,    0,  632,  638,
      639,  633,    0,  640,  634,  641,  636,  639,    0,  642,
      640,  634,  635,  636,  641,    0,    0,  643,  642,  644,
      645,  641,    0,  646,  637,  642,  643,    0,  644,  645,
      638,  647,  646,  643,  648,  644,  645,  649,  639,  646,
      647,  640,    0,  648,    0,  651,  649,  647,    0,  650,

      648,  644,  641,  649,  651,    0,  642,    0,  650,  649,
      652,  651,    0,  653,  643,  650,  644,  645,    0,  652,
      646,  650,  653,  654,  655,    0,  652,  656,  647,  653,
        0,  648,  654,  655,  649,  653,  656,    0,  657,  654,
      655,    0,  651,  656,    0,  654,  650,  657,    0,  658,
      659,    0,  660,  661,  657,    0,    0,  652,  658,  659,
      653,  660,  661,  662,  663,  658,  659,  664,  660,  661,
      654,  655,  662,  663,  656,  666,  664,  665,  667,  662,
      663,    0,    0,  664,  666,  657,  665,  667,    0,    0,
        0,  666,  668,  665,  667,    0,  658,  659,  665,  660,

      661,  668,    0,  669,  670,    0,    0,  671,  668,    0,
      662,  663,  669,  670,  664,    0,  671,  672,    0,  669,
      670,  674,  666,  671,  665,  667,  672,  673,  670,  668,
      674,  675,  676,  672,    0,    0,  673,  674,    0,  668,
      675,  676,    0,  673,    0,    0,  678,  675,  676,  677,
      669,  670,    0,    0,  671,  678,    0,  679,  677,    0,
      673,  680,  678,    0,  672,  677,  679,  681,  674,    0,
      680,  682,  683,  679,  673,  684,  681,  680,  675,  676,
      682,  683,  677,  681,  684,  685,  686,  682,  683,  687,
      688,  684,    0,  678,  685,  686,  677,    0,  687,  688,

      689,  685,  686,    0,  679,  687,  688,    0,  680,  689,
        0,  690,  691,    0,  681,  692,  689,    0,  682,  683,
      690,  691,  684,    0,  692,  693,  694,  690,  691,  695,
        0,  692,  685,  686,  693,  694,  687,  688,  695,  689,
      696,  693,  694,    0,  697,  695,    0,  689,  698,  696,
        0,    0,  699,  697,    0,    0,  696,  698,  690,  691,
      697,  699,  692,  694,  698,  700,  702,    0,  699,  701,
        0,    0,  693,  694,  700,  702,  695,  703,  701,    0,
        0,  700,  702,    0,  698,  701,  703,  696,  704,  703,
        0,  697,  705,  703,    0,  698,    0,  704,    0,  699,

        0,  705,  701,  702,  704,    0,  706,    0,  705,  707,
      708,  709,  700,  702,  705,  706,  701,    0,  707,  708,
      709,  710,  706,    0,  703,  707,  708,  709,    0,    0,
      710,  711,  712,  713,  714,  704,    0,  710,    0,  705,
      711,  712,  713,  714,    0,  710,  715,  711,  712,  713,
      714,  716,    0,  706,  709,  715,  707,  708,  709,    0,
      716,  717,  715,    0,    0,    0,    0,  716,  710,    0,
      717,    0,    0,    0,  718,  719,  720,  717,  711,  712,
      713,  714,  716,  718,  719,  720,  721,  722,  723,    0,
      718,  719,  720,  715,    0,  721,  722,  723,  716,    0,

        0,  724,  721,  722,  723,    0,    0,    0,  717,  722,
      724,  725,    0,    0,    0,  726,  727,  724,    0,    0,
      725,  718,  719,  720,  726,  727,    0,  725,  728,  729,
      730,  726,  727,  721,  722,  723,    0,  728,  729,  730,
      731,  732,    0,  733,  728,  729,  730,    0,  724,  731,
      732,  734,  733,    0,    0,  735,  731,  732,  725,  733,
      734,    0,  726,  727,  735,  733,    0,  734,    0,    0,
      736,  735,    0,  737,    0,  728,  729,  730,  732,  736,
        0,    0,  737,  738,    0,    0,  736,  731,  732,  737,
      733,    0,  738,    0,    0,    0,    0,    0,  734,  738,

        0,    0,  735,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  736,    0,    0,
      737,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      738,  740,  740,  741,  741,  742,  742,  743,  743,  744,
      744,  746,  746,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,

      739,  739,  739,  739,  739,  739,  739,  739
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "nask.ll"
/* -*- c++ -*- File generated by the BNF Converter (bnfc 2.9.5). */
/* Lexer definition for use with FLex */
/* Additional data for the lexer: a buffer for lexing string literals. */

#line 14 "nask.ll"
#include "scanner.hh"

/* using "token" to make the returns for the tokens shorter to type */
using token = nask_::NaskParser::token;


#include "absyn.hh"
#include "bison.hh"

#define initialize_lexer nask__initialize_lexer

/* BEGIN extensible string buffer */

#include "buffer.hh"

/* The initial size of the buffer to lex string literals. */
#define LITERAL_BUFFER_INITIAL_SIZE 1024

/* The pointer to the literal buffer. */
Buffer literal_buffer = nullptr;

/* Initialize the literal buffer. */
#define LITERAL_BUFFER_CREATE() literal_buffer = newBuffer(LITERAL_BUFFER_INITIAL_SIZE)

/* Append characters at the end of the buffer. */
#define LITERAL_BUFFER_APPEND(s) bufferAppendString(literal_buffer, s)

/* Append a character at the end of the buffer. */
#define LITERAL_BUFFER_APPEND_CHAR(c) bufferAppendChar(literal_buffer, c)

/* Release the buffer, returning a pointer to its content. */
#define LITERAL_BUFFER_HARVEST() releaseBuffer(literal_buffer)

/* In exceptional cases, e.g. when reaching EOF, we have to free the buffer. */
#define LITERAL_BUFFER_FREE() freeBuffer(literal_buffer)

/* END extensible string buffer */

/* update location on matching */
#define YY_USER_ACTION \
loc->begin.line   = loc->end.line; \
loc->begin.column = loc->end.column; \
for(int i = 0; yytext[i] != '\0'; i++) { \
    if(yytext[i] == '\n') { \
        loc->end.line++; \
        loc->end.column = 0; \
    } \
    else { \
        loc->end.column++; \
    } \
}
#line 1754 "lexer.cc"

#line 1756 "lexer.cc"

#define INITIAL 0
#define CHAR 1
#define CHARESC 2
#define CHAREND 3
#define STRING 4
#define ESCAPED 5
#define COMMENT 6
#define COMMENT1 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE Buffer

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 74 "nask.ll"


#line 1896 "lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 740 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4644 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 76 "nask.ll"
return token::_LBRACK;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 77 "nask.ll"
return token::_RBRACK;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 78 "nask.ll"
return token::_COMMA;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 79 "nask.ll"
return token::_PLUS;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 80 "nask.ll"
return token::_MINUS;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 81 "nask.ll"
return token::_STAR;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 82 "nask.ll"
return token::_SLASH;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 83 "nask.ll"
return token::_PERCENT;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 84 "nask.ll"
return token::_LPAREN;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 85 "nask.ll"
return token::_RPAREN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 86 "nask.ll"
return token::_COLON;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 87 "nask.ll"
return token::_KW_AAA;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 88 "nask.ll"
return token::_KW_AAD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 89 "nask.ll"
return token::_KW_AAM;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 90 "nask.ll"
return token::_KW_AAS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 91 "nask.ll"
return token::_KW_ABSOLUTE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 92 "nask.ll"
return token::_KW_ADC;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 93 "nask.ll"
return token::_KW_ADD;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 94 "nask.ll"
return token::_KW_ALIGN;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 95 "nask.ll"
return token::_KW_ALIGNB;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 96 "nask.ll"
return token::_KW_AND;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 97 "nask.ll"
return token::_KW_ARPL;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 98 "nask.ll"
return token::_KW_BITS;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 99 "nask.ll"
return token::_KW_BOUND;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 100 "nask.ll"
return token::_KW_BSF;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 101 "nask.ll"
return token::_KW_BSR;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 102 "nask.ll"
return token::_KW_BSWAP;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 103 "nask.ll"
return token::_KW_BT;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 104 "nask.ll"
return token::_KW_BTC;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 105 "nask.ll"
return token::_KW_BTR;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 106 "nask.ll"
return token::_KW_BTS;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 107 "nask.ll"
return token::_KW_BYTE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 108 "nask.ll"
return token::_KW_CALL;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 109 "nask.ll"
return token::_KW_CBW;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 110 "nask.ll"
return token::_KW_CDQ;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 111 "nask.ll"
return token::_KW_CLC;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 112 "nask.ll"
return token::_KW_CLD;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 113 "nask.ll"
return token::_KW_CLI;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 114 "nask.ll"
return token::_KW_CLTS;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 115 "nask.ll"
return token::_KW_CMC;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 116 "nask.ll"
return token::_KW_CMP;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 117 "nask.ll"
return token::_KW_CMPSB;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 118 "nask.ll"
return token::_KW_CMPSD;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 119 "nask.ll"
return token::_KW_CMPSW;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "nask.ll"
return token::_KW_CMPXCHG;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "nask.ll"
return token::_KW_CPUID;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "nask.ll"
return token::_KW_CWD;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "nask.ll"
return token::_KW_CWDE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "nask.ll"
return token::_KW_DAA;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "nask.ll"
return token::_KW_DAS;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "nask.ll"
return token::_KW_DB;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "nask.ll"
return token::_KW_DD;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "nask.ll"
return token::_KW_DEC;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "nask.ll"
return token::_KW_DIV;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "nask.ll"
return token::_KW_DQ;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "nask.ll"
return token::_KW_DT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 132 "nask.ll"
return token::_KW_DW;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "nask.ll"
return token::_KW_DWORD;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 134 "nask.ll"
return token::_KW_END;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "nask.ll"
return token::_KW_ENTER;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 136 "nask.ll"
return token::_KW_EQU;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 137 "nask.ll"
return token::_KW_EXTERN;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 138 "nask.ll"
return token::_KW_F2XM1;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 139 "nask.ll"
return token::_KW_FABS;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 140 "nask.ll"
return token::_KW_FADD;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 141 "nask.ll"
return token::_KW_FADDP;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 142 "nask.ll"
return token::_KW_FBLD;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 143 "nask.ll"
return token::_KW_FBSTP;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 144 "nask.ll"
return token::_KW_FCHS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 145 "nask.ll"
return token::_KW_FCLEX;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 146 "nask.ll"
return token::_KW_FCOM;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 147 "nask.ll"
return token::_KW_FCOMP;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 148 "nask.ll"
return token::_KW_FCOMPP;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 149 "nask.ll"
return token::_KW_FCOS;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 150 "nask.ll"
return token::_KW_FDECSTP;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 151 "nask.ll"
return token::_KW_FDISI;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 152 "nask.ll"
return token::_KW_FDIV;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 153 "nask.ll"
return token::_KW_FDIVP;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 154 "nask.ll"
return token::_KW_FDIVR;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 155 "nask.ll"
return token::_KW_FDIVRP;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 156 "nask.ll"
return token::_KW_FENI;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 157 "nask.ll"
return token::_KW_FFREE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 158 "nask.ll"
return token::_KW_FIADD;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 159 "nask.ll"
return token::_KW_FICOM;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 160 "nask.ll"
return token::_KW_FICOMP;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 161 "nask.ll"
return token::_KW_FIDIV;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 162 "nask.ll"
return token::_KW_FIDIVR;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 163 "nask.ll"
return token::_KW_FILD;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 164 "nask.ll"
return token::_KW_FILE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 165 "nask.ll"
return token::_KW_FIMUL;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 166 "nask.ll"
return token::_KW_FINCSTP;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 167 "nask.ll"
return token::_KW_FINIT;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 168 "nask.ll"
return token::_KW_FIST;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 169 "nask.ll"
return token::_KW_FISTP;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 170 "nask.ll"
return token::_KW_FISUB;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 171 "nask.ll"
return token::_KW_FISUBR;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 172 "nask.ll"
return token::_KW_FLD;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 173 "nask.ll"
return token::_KW_FLD1;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 174 "nask.ll"
return token::_KW_FLDCW;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 175 "nask.ll"
return token::_KW_FLDENV;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 176 "nask.ll"
return token::_KW_FLDL2E;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 177 "nask.ll"
return token::_KW_FLDL2T;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 178 "nask.ll"
return token::_KW_FLDLG2;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 179 "nask.ll"
return token::_KW_FLDLN2;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 180 "nask.ll"
return token::_KW_FLDPI;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 181 "nask.ll"
return token::_KW_FLDZ;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 182 "nask.ll"
return token::_KW_FMUL;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 183 "nask.ll"
return token::_KW_FMULP;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 184 "nask.ll"
return token::_KW_FNCLEX;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 185 "nask.ll"
return token::_KW_FNDISI;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 186 "nask.ll"
return token::_KW_FNENI;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 187 "nask.ll"
return token::_KW_FNINIT;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 188 "nask.ll"
return token::_KW_FNOP;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 189 "nask.ll"
return token::_KW_FNSAVE;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 190 "nask.ll"
return token::_KW_FNSTCW;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 191 "nask.ll"
return token::_KW_FNSTENV;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 192 "nask.ll"
return token::_KW_FNSTSW;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 193 "nask.ll"
return token::_KW_FORMAT;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 194 "nask.ll"
return token::_KW_FPATAN;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 195 "nask.ll"
return token::_KW_FPREM;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 196 "nask.ll"
return token::_KW_FPREM1;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 197 "nask.ll"
return token::_KW_FPTAN;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 198 "nask.ll"
return token::_KW_FRNDINT;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 199 "nask.ll"
return token::_KW_FRSTOR;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 200 "nask.ll"
return token::_KW_FSAVE;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 201 "nask.ll"
return token::_KW_FSCALE;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 202 "nask.ll"
return token::_KW_FSETPM;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 203 "nask.ll"
return token::_KW_FSIN;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 204 "nask.ll"
return token::_KW_FSINCOS;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 205 "nask.ll"
return token::_KW_FSQRT;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 206 "nask.ll"
return token::_KW_FST;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 207 "nask.ll"
return token::_KW_FSTCW;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 208 "nask.ll"
return token::_KW_FSTENV;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 209 "nask.ll"
return token::_KW_FSTP;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 210 "nask.ll"
return token::_KW_FSTSW;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 211 "nask.ll"
return token::_KW_FSUB;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 212 "nask.ll"
return token::_KW_FSUBP;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 213 "nask.ll"
return token::_KW_FSUBR;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 214 "nask.ll"
return token::_KW_FSUBRP;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 215 "nask.ll"
return token::_KW_FTST;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 216 "nask.ll"
return token::_KW_FUCOM;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 217 "nask.ll"
return token::_KW_FUCOMP;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 218 "nask.ll"
return token::_KW_FUCOMPP;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 219 "nask.ll"
return token::_KW_FXAM;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 220 "nask.ll"
return token::_KW_FXCH;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 221 "nask.ll"
return token::_KW_FXTRACT;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 222 "nask.ll"
return token::_KW_FYL2X;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 223 "nask.ll"
return token::_KW_FYL2XP1;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 224 "nask.ll"
return token::_KW_GLOBAL;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 225 "nask.ll"
return token::_KW_HLT;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 226 "nask.ll"
return token::_KW_IDIV;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 227 "nask.ll"
return token::_KW_IMUL;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 228 "nask.ll"
return token::_KW_IN;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 229 "nask.ll"
return token::_KW_INC;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 230 "nask.ll"
return token::_KW_INCO;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 231 "nask.ll"
return token::_KW_INSB;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 232 "nask.ll"
return token::_KW_INSD;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 233 "nask.ll"
return token::_KW_INSTRSET;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 234 "nask.ll"
return token::_KW_INSW;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 235 "nask.ll"
return token::_KW_INT;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 236 "nask.ll"
return token::_KW_INT3;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 237 "nask.ll"
return token::_KW_INTO;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 238 "nask.ll"
return token::_KW_INVD;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 239 "nask.ll"
return token::_KW_INVLPG;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 240 "nask.ll"
return token::_KW_IRET;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 241 "nask.ll"
return token::_KW_IRETD;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 242 "nask.ll"
return token::_KW_IRETW;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 243 "nask.ll"
return token::_KW_JA;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 244 "nask.ll"
return token::_KW_JAE;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 245 "nask.ll"
return token::_KW_JB;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 246 "nask.ll"
return token::_KW_JBE;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 247 "nask.ll"
return token::_KW_JC;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 248 "nask.ll"
return token::_KW_JCXZ;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 249 "nask.ll"
return token::_KW_JE;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 250 "nask.ll"
return token::_KW_JECXZ;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 251 "nask.ll"
return token::_KW_JG;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 252 "nask.ll"
return token::_KW_JGE;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 253 "nask.ll"
return token::_KW_JL;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 254 "nask.ll"
return token::_KW_JLE;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 255 "nask.ll"
return token::_KW_JMP;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 256 "nask.ll"
return token::_KW_JNA;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 257 "nask.ll"
return token::_KW_JNAE;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 258 "nask.ll"
return token::_KW_JNB;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 259 "nask.ll"
return token::_KW_JNBE;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 260 "nask.ll"
return token::_KW_JNC;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 261 "nask.ll"
return token::_KW_JNE;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 262 "nask.ll"
return token::_KW_JNG;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 263 "nask.ll"
return token::_KW_JNGE;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 264 "nask.ll"
return token::_KW_JNL;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 265 "nask.ll"
return token::_KW_JNLE;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 266 "nask.ll"
return token::_KW_JNO;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 267 "nask.ll"
return token::_KW_JNP;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 268 "nask.ll"
return token::_KW_JNS;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 269 "nask.ll"
return token::_KW_JNZ;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 270 "nask.ll"
return token::_KW_JO;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 271 "nask.ll"
return token::_KW_JP;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 272 "nask.ll"
return token::_KW_JPE;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 273 "nask.ll"
return token::_KW_JPO;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 274 "nask.ll"
return token::_KW_JS;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 275 "nask.ll"
return token::_KW_JZ;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 276 "nask.ll"
return token::_KW_LAHF;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 277 "nask.ll"
return token::_KW_LAR;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 278 "nask.ll"
return token::_KW_LDS;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 279 "nask.ll"
return token::_KW_LEA;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 280 "nask.ll"
return token::_KW_LEAVE;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 281 "nask.ll"
return token::_KW_LES;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 282 "nask.ll"
return token::_KW_LFS;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 283 "nask.ll"
return token::_KW_LGDT;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 284 "nask.ll"
return token::_KW_LGS;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 285 "nask.ll"
return token::_KW_LIDT;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 286 "nask.ll"
return token::_KW_LLDT;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 287 "nask.ll"
return token::_KW_LMSW;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 288 "nask.ll"
return token::_KW_LOCK;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 289 "nask.ll"
return token::_KW_LODSB;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 290 "nask.ll"
return token::_KW_LODSD;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 291 "nask.ll"
return token::_KW_LODSW;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 292 "nask.ll"
return token::_KW_LOOP;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 293 "nask.ll"
return token::_KW_LOOPE;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 294 "nask.ll"
return token::_KW_LOOPNE;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 295 "nask.ll"
return token::_KW_LOOPNZ;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 296 "nask.ll"
return token::_KW_LOOPZ;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 297 "nask.ll"
return token::_KW_LSL;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 298 "nask.ll"
return token::_KW_LSS;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 299 "nask.ll"
return token::_KW_LTR;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 300 "nask.ll"
return token::_KW_MOV;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 301 "nask.ll"
return token::_KW_MOVSB;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 302 "nask.ll"
return token::_KW_MOVSD;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 303 "nask.ll"
return token::_KW_MOVSW;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 304 "nask.ll"
return token::_KW_MOVSX;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 305 "nask.ll"
return token::_KW_MOVZX;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 306 "nask.ll"
return token::_KW_MUL;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 307 "nask.ll"
return token::_KW_NEG;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 308 "nask.ll"
return token::_KW_NOP;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 309 "nask.ll"
return token::_KW_NOT;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 310 "nask.ll"
return token::_KW_OPTIMIZE;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 311 "nask.ll"
return token::_KW_OR;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 312 "nask.ll"
return token::_KW_ORG;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 313 "nask.ll"
return token::_KW_OUT;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 314 "nask.ll"
return token::_KW_OUTSB;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 315 "nask.ll"
return token::_KW_OUTSD;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 316 "nask.ll"
return token::_KW_OUTSW;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 317 "nask.ll"
return token::_KW_PADDING;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 318 "nask.ll"
return token::_KW_PADSET;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 319 "nask.ll"
return token::_KW_POP;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 320 "nask.ll"
return token::_KW_POPA;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 321 "nask.ll"
return token::_KW_POPAD;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 322 "nask.ll"
return token::_KW_POPAW;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 323 "nask.ll"
return token::_KW_POPF;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 324 "nask.ll"
return token::_KW_POPFD;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 325 "nask.ll"
return token::_KW_POPFW;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 326 "nask.ll"
return token::_KW_PUSH;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 327 "nask.ll"
return token::_KW_PUSHA;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 328 "nask.ll"
return token::_KW_PUSHAD;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 329 "nask.ll"
return token::_KW_PUSHAW;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 330 "nask.ll"
return token::_KW_PUSHD;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 331 "nask.ll"
return token::_KW_PUSHF;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 332 "nask.ll"
return token::_KW_PUSHFD;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 333 "nask.ll"
return token::_KW_PUSHFW;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 334 "nask.ll"
return token::_KW_RCL;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 335 "nask.ll"
return token::_KW_RCR;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 336 "nask.ll"
return token::_KW_RDMSR;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 337 "nask.ll"
return token::_KW_RDPMC;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 338 "nask.ll"
return token::_KW_REP;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 339 "nask.ll"
return token::_KW_REPE;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 340 "nask.ll"
return token::_KW_REPNE;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 341 "nask.ll"
return token::_KW_REPNZ;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 342 "nask.ll"
return token::_KW_REPZ;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 343 "nask.ll"
return token::_KW_RESB;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 344 "nask.ll"
return token::_KW_RESD;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 345 "nask.ll"
return token::_KW_RESQ;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 346 "nask.ll"
return token::_KW_REST;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 347 "nask.ll"
return token::_KW_RESW;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 348 "nask.ll"
return token::_KW_RET;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 349 "nask.ll"
return token::_KW_RETF;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 350 "nask.ll"
return token::_KW_RETN;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 351 "nask.ll"
return token::_KW_ROL;
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 352 "nask.ll"
return token::_KW_ROR;
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 353 "nask.ll"
return token::_KW_RSM;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 354 "nask.ll"
return token::_KW_SAHF;
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 355 "nask.ll"
return token::_KW_SAL;
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 356 "nask.ll"
return token::_KW_SAR;
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 357 "nask.ll"
return token::_KW_SBB;
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 358 "nask.ll"
return token::_KW_SCASB;
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 359 "nask.ll"
return token::_KW_SCASD;
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 360 "nask.ll"
return token::_KW_SCASW;
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 361 "nask.ll"
return token::_KW_SECTION;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 362 "nask.ll"
return token::_KW_SETA;
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 363 "nask.ll"
return token::_KW_SETAE;
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 364 "nask.ll"
return token::_KW_SETB;
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 365 "nask.ll"
return token::_KW_SETBE;
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 366 "nask.ll"
return token::_KW_SETC;
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 367 "nask.ll"
return token::_KW_SETE;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 368 "nask.ll"
return token::_KW_SETG;
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 369 "nask.ll"
return token::_KW_SETGE;
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 370 "nask.ll"
return token::_KW_SETL;
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 371 "nask.ll"
return token::_KW_SETLE;
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 372 "nask.ll"
return token::_KW_SETNA;
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 373 "nask.ll"
return token::_KW_SETNAE;
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 374 "nask.ll"
return token::_KW_SETNB;
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 375 "nask.ll"
return token::_KW_SETNBE;
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 376 "nask.ll"
return token::_KW_SETNC;
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 377 "nask.ll"
return token::_KW_SETNE;
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 378 "nask.ll"
return token::_KW_SETNG;
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 379 "nask.ll"
return token::_KW_SETNGE;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 380 "nask.ll"
return token::_KW_SETNL;
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 381 "nask.ll"
return token::_KW_SETNLE;
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 382 "nask.ll"
return token::_KW_SETNO;
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 383 "nask.ll"
return token::_KW_SETNP;
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 384 "nask.ll"
return token::_KW_SETNS;
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 385 "nask.ll"
return token::_KW_SETNZ;
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 386 "nask.ll"
return token::_KW_SETO;
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 387 "nask.ll"
return token::_KW_SETP;
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 388 "nask.ll"
return token::_KW_SETPE;
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 389 "nask.ll"
return token::_KW_SETPO;
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 390 "nask.ll"
return token::_KW_SETS;
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 391 "nask.ll"
return token::_KW_SETZ;
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 392 "nask.ll"
return token::_KW_SGDT;
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 393 "nask.ll"
return token::_KW_SHL;
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 394 "nask.ll"
return token::_KW_SHLD;
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 395 "nask.ll"
return token::_KW_SHR;
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 396 "nask.ll"
return token::_KW_SHRD;
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 397 "nask.ll"
return token::_KW_SIDT;
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 398 "nask.ll"
return token::_KW_SLDT;
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 399 "nask.ll"
return token::_KW_SMSW;
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 400 "nask.ll"
return token::_KW_STC;
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 401 "nask.ll"
return token::_KW_STD;
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 402 "nask.ll"
return token::_KW_STI;
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 403 "nask.ll"
return token::_KW_STOSB;
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 404 "nask.ll"
return token::_KW_STOSD;
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 405 "nask.ll"
return token::_KW_STOSW;
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 406 "nask.ll"
return token::_KW_STR;
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 407 "nask.ll"
return token::_KW_SUB;
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 408 "nask.ll"
return token::_KW_TEST;
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 409 "nask.ll"
return token::_KW_TIMES;
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 410 "nask.ll"
return token::_KW_UD2;
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 411 "nask.ll"
return token::_KW_VERR;
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 412 "nask.ll"
return token::_KW_VERW;
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 413 "nask.ll"
return token::_KW_WAIT;
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 414 "nask.ll"
return token::_KW_WBINVD;
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 415 "nask.ll"
return token::_KW_WORD;
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 416 "nask.ll"
return token::_KW_WRMSR;
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 417 "nask.ll"
return token::_KW_XADD;
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 418 "nask.ll"
return token::_KW_XCHG;
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 419 "nask.ll"
return token::_KW_XLATB;
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 420 "nask.ll"
return token::_KW_XOR;
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 422 "nask.ll"
BEGIN COMMENT; /* BNFC: block comment "#" "\\n" */
	YY_BREAK
case 347:
/* rule 347 can match eol */
YY_RULE_SETUP
#line 423 "nask.ll"
BEGIN INITIAL;
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 424 "nask.ll"
/* skip */;
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 425 "nask.ll"
BEGIN COMMENT1; /* BNFC: block comment ";" "\\n" */
	YY_BREAK
case 350:
/* rule 350 can match eol */
YY_RULE_SETUP
#line 426 "nask.ll"
BEGIN INITIAL;
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 427 "nask.ll"
/* skip */;
	YY_BREAK
case 352:
/* rule 352 can match eol */
YY_RULE_SETUP
#line 429 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_NaskChar;
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 430 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_Hex;
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 431 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_Label;
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 432 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_Id;
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 433 "nask.ll"
LITERAL_BUFFER_CREATE(); BEGIN STRING;
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 434 "nask.ll"
BEGIN ESCAPED;
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 435 "nask.ll"
yylval->emplace<std::string>(LITERAL_BUFFER_HARVEST()); BEGIN INITIAL; return token::_STRING_;
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 436 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR(yytext[0]);
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 437 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\f'); BEGIN STRING;
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 438 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\n'); BEGIN STRING;
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 439 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\r'); BEGIN STRING;
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 440 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\t'); BEGIN STRING;
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 441 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('"');  BEGIN STRING;
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 442 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\\'); BEGIN STRING;
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 443 "nask.ll"
LITERAL_BUFFER_APPEND(yytext);    BEGIN STRING;
	YY_BREAK
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(ESCAPED):
#line 444 "nask.ll"
LITERAL_BUFFER_FREE(); return token::_ERROR_;
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 445 "nask.ll"
yylval->emplace<int>(atoi(yytext)); return token::_INTEGER_;
	YY_BREAK
case 368:
/* rule 368 can match eol */
YY_RULE_SETUP
#line 446 "nask.ll"
/* ignore white space. */;
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 447 "nask.ll"
return token::_ERROR_;
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 449 "nask.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3812 "lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CHAR):
case YY_STATE_EOF(CHARESC):
case YY_STATE_EOF(CHAREND):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(COMMENT1):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 740 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 740 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 739);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 449 "nask.ll"



NaskScanner::NaskScanner(std::istream *in)
    : yyFlexLexer(in)
{
    loc = new nask_::NaskParser::location_type();
}

NaskScanner::~NaskScanner()
{
    delete loc;
    delete yylval;
}

/* This implementation of NaskFlexLexer::yylex() is required to fill the
 * vtable of the class NaskFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */



#ifdef yylex
#undef yylex
#endif

int yyFlexLexer::yylex()
{
    std::cerr << "in yyFlexLexer::yylex() !" << std::endl;
    return 0;
}



