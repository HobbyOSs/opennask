#line 2 "lexer.cc"
#include <memory>

#line 5 "lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer nask_FlexLexer

#ifdef yyalloc
#define nask_alloc_ALREADY_DEFINED
#else
#define yyalloc nask_alloc
#endif

#ifdef yyrealloc
#define nask_realloc_ALREADY_DEFINED
#else
#define yyrealloc nask_realloc
#endif

#ifdef yyfree
#define nask_free_ALREADY_DEFINED
#else
#define yyfree nask_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 378
#define YY_END_OF_BUFFER 379
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[749] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  379,  377,  376,  376,
      364,  355,  363,    9,  377,   10,   11,    7,    5,    3,
        6,    8,  375,  375,    4,  358,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,    1,    2,
      378,  367,  366,  365,  374,  372,  373,  368,  369,  370,
      371,  357,  356,  360,  359,  363,  363,    0,  361,    0,
      375,    0,  363,  363,  363,  363,  363,  363,  363,  363,
      363,   28,  363,  363,  363,  363,  363,  363,  363,   47,

      363,  363,   52,   53,  363,  363,   56,   57,   58,   59,
      363,  363,   64,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  129,  363,
      363,  363,  363,  363,  155,  363,  363,  363,  159,  363,
      174,  176,  178,  180,  182,  184,  363,  363,  201,  202,
      205,  206,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  243,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  333,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,

      363,  363,  362,   12,   13,   14,   15,  363,   17,   18,
      363,   21,  363,  363,  363,   25,   26,  363,   29,   30,
       31,  363,  363,   34,   35,   36,   37,   38,  363,   40,
       41,  363,   48,   50,   51,   54,   55,  363,   61,  363,
       63,  363,  363,  363,  363,   70,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  101,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  136,  363,  363,  363,  363,  363,  363,  363,  363,
      156,  363,  363,  160,  363,  166,  363,  363,  175,  177,

      363,  363,  183,  185,  186,  187,  189,  191,  192,  193,
      195,  197,  198,  199,  200,  203,  204,  363,  208,  209,
      210,  212,  213,  363,  215,  363,  363,  363,  363,  363,
      363,  228,  229,  230,  231,  237,  363,  239,  240,  241,
      363,  244,  245,  363,  251,  363,  266,  267,  363,  363,
      270,  363,  280,  283,  284,  285,  363,  287,  288,  289,
      363,  363,  363,  363,  325,  363,  328,  363,  363,  363,
      334,  335,  336,  363,  340,  341,  363,  363,  344,  363,
      363,  363,  363,  363,  363,  363,  363,  354,  362,  362,
      363,  363,   22,   23,  363,  363,   32,   33,   39,  363,

      363,  363,   49,  363,  363,  363,  363,   67,   68,   71,
      363,   73,  363,   75,   78,  363,  363,   81,   85,  363,
      363,  363,  363,   92,   93,  363,  363,  363,   97,  363,
      102,  363,  363,  363,  363,  110,  111,  363,  363,  363,
      363,  117,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  133,  363,  363,  363,  139,  363,  141,
      145,  363,  149,  150,  363,  363,  363,  157,  158,  161,
      162,  163,  363,  165,  167,  168,  169,  363,  171,  179,
      363,  188,  190,  194,  196,  207,  363,  214,  216,  217,
      218,  219,  363,  223,  363,  363,  238,  363,  363,  363,

      363,  252,  255,  258,  363,  363,  271,  363,  274,  275,
      276,  277,  278,  279,  281,  282,  286,  363,  363,  294,
      296,  298,  299,  300,  302,  363,  318,  319,  322,  323,
      324,  326,  363,  329,  330,  331,  332,  363,  342,  363,
      345,  346,  347,  363,  349,  363,  351,  352,  363,  363,
       19,   24,   27,   42,   43,   44,  363,   46,   60,   62,
      363,   66,   69,   72,   74,   76,  363,   80,   82,   83,
       86,   87,   88,   90,   94,  363,   96,   98,   99,  103,
      363,  363,  363,  363,  109,  112,  363,  363,  115,  363,
      363,  363,  363,  363,  363,  363,  124,  126,  363,  363,

      130,  363,  363,  363,  135,  137,  363,  140,  142,  143,
      146,  363,  152,  363,  363,  363,  172,  173,  181,  211,
      220,  221,  222,  224,  363,  227,  232,  233,  234,  235,
      236,  363,  246,  247,  248,  363,  363,  253,  254,  256,
      257,  259,  262,  263,  268,  269,  272,  273,  290,  291,
      292,  363,  295,  297,  301,  303,  304,  306,  308,  309,
      310,  312,  314,  315,  316,  317,  320,  321,  327,  337,
      338,  339,  343,  363,  350,  353,  363,   20,  363,   65,
       77,  363,   84,   89,   91,  363,  100,  104,  105,  106,
      107,  108,  113,  114,  116,  118,  119,  363,  121,  122,

      123,  125,  363,  128,  131,  132,  363,  138,  144,  147,
      363,  363,  154,  363,  170,  225,  226,  363,  363,  250,
      260,  261,  264,  265,  363,  305,  307,  311,  313,  348,
      363,   45,   79,   95,  120,  127,  134,  148,  151,  153,
      363,  363,  249,  293,   16,  164,  242,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    6,    7,    1,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   21,   21,   21,   21,   21,   22,   23,    1,
        1,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,    1,   53,    1,   54,   55,   56,   57,

       58,   59,   60,   60,   60,   60,   60,   60,   60,   61,
       60,   60,   60,   62,   60,   63,   60,   60,   60,   64,
       60,   60,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[65] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    1,    2,    2,    2,    2,
        2,    1,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2
    } ;

static const flex_int16_t yy_base[756] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   62,   64,
       66,   71,   94,   92,   80,   79,   79, 3505, 3505, 3505,
     3505, 3505,   65, 3505,   65, 3505, 3505, 3505, 3505, 3505,
     3505, 3505,   67,   72, 3505, 3505,  120,  133,  163,  186,
      154,  214,   66,   88,  131,  239,  265,  136,  276,  281,
      303,  304,  352,  311,  306,   96,  348,  355, 3505, 3505,
     3505, 3505, 3505, 3505, 3505, 3505, 3505, 3505, 3505, 3505,
     3505, 3505, 3505, 3505, 3505,   90,  106,   69, 3505,  101,
      331,  392,  400,  164,  309,  408,  338,  177,  230,  322,
      416,  426,  354,  219,  419,  420,  448,  470,  449,  424,

      472,  480,  475,  477,  482,  492,  488,  499,  500,  504,
      505,  506,  511,  512,  523,  541,  525,  548,  556,  566,
      574,  571,  584,  585,  608,  610,  615,  611,  663,  618,
      626,  651,  639,  661,  666,  667,  690,  682,  687,  703,
      706,  709,  702,  721,  733,  735,  727,  765,  745,  781,
      752,  758,  779,  764,  806,  793,  809,  810,  812,  807,
      841,  835,  823,  827,  838,  851,  839,  846,  868,  880,
      878,  881,  894,  891,  901,  896,  907,  909,  935,  902,
      904,  937,  950,  958,  952,  968,  966,  953,  959,  969,
      983,  998,  963, 1003, 1008, 1009, 1011, 1014, 1022, 1024,

     1039, 1027,   92, 1032, 1042, 1054, 1059, 1064, 1066, 1067,
     1078, 1072, 1083, 1082, 1084, 1085, 1088, 1090, 1095, 1098,
     1100, 1117, 1124, 1127, 1134, 1140, 1141, 1146, 1148, 1151,
     1156, 1152, 1154, 1158, 1159, 1166, 1170, 1173, 1177, 1180,
     1185, 1200, 1207, 1210, 1212, 1214, 1229, 1225, 1230, 1226,
     1244, 1231, 1243, 1249, 1283, 1260, 1255, 1284, 1294, 1286,
     1288, 1289, 1320, 1309, 1319, 1313, 1312, 1337, 1325, 1352,
     1345, 1364, 1365, 1362, 1369, 1376, 1379, 1377, 1382, 1394,
     1393, 1422, 1396, 1398, 1421, 1427, 1437, 1438, 1439, 1451,
     1450, 1454, 1466, 1456, 1471, 1467, 1491, 1478, 1496, 1507,

     1510, 1517, 1521, 1522, 1523, 1524, 1527, 1528, 1535, 1539,
     1541, 1542, 1547, 1567, 1572, 1578, 1583, 1584, 1590, 1591,
     1595, 1596, 1597, 1602, 1601, 1603, 1608, 1613, 1618, 1615,
     1623, 1620, 1626, 1652, 1654, 1657, 1659, 1669, 1671, 1672,
     1674, 1675, 1676, 1677, 1687, 1682, 1679, 1693, 1708, 1711,
     1728, 1727, 1742, 1730, 1738, 1743, 1745, 1753, 1757, 1760,
     1763, 1778, 1808, 1782, 1784, 1786, 1788, 1808, 1811, 1803,
     1813, 1814, 1838, 1853, 1854, 1856, 1857, 1859, 1864, 1867,
     1871, 1874, 1869, 1877, 1870, 1875, 1888, 1887, 3505,   72,
     1910, 1920, 1923, 1927, 1928, 1931, 1933, 1938, 1941, 1944,

     1946, 1952, 1945, 1960, 1959, 1962, 1977, 1987, 1995, 2001,
     2002, 2003, 2005, 2008, 2013, 2018, 2021, 2023, 2016, 2029,
     2036, 2031, 2053, 2064, 2066, 2072, 2071, 2077, 2079, 2084,
     2082, 2085, 2089, 2097, 2090, 2087, 2108, 2130, 2133, 2138,
     2140, 2145, 2150, 2148, 2153, 2156, 2151, 2163, 2167, 2173,
     2179, 2190, 2202, 2204, 2206, 2207, 2208, 2209, 2212, 2225,
     2222, 2227, 2223, 2229, 2262, 2241, 2266, 2264, 2268, 2278,
     2281, 2283, 2285, 2286, 2289, 2291, 2293, 2296, 2297, 2299,
     2307, 2301, 2312, 2314, 2317, 2322, 2349, 2342, 2347, 2353,
     2357, 2363, 2365, 2368, 2376, 2373, 2378, 2379, 2413, 2392,

     2419, 2421, 2424, 2429, 2427, 2431, 2435, 2437, 2448, 2449,
     2454, 2456, 2470, 2472, 2477, 2483, 2485, 2488, 2489, 2490,
     2491, 2493, 2505, 2511, 2522, 2552, 2516, 2545, 2518, 2539,
     2542, 2546, 2550, 2547, 2553, 2557, 2564, 2582, 2590, 2596,
     2598, 2606, 2608, 2609, 2610, 2612, 2614, 2616, 2627, 2624,
     2630, 2626, 2631, 2641, 2642, 2658, 2660, 2666, 2670, 2672,
     2683, 2682, 2684, 2686, 2687, 2690, 2701, 2694, 2697, 2702,
     2700, 2712, 2718, 2715, 2716, 2736, 2743, 2746, 2757, 2758,
     2760, 2772, 2761, 2771, 2768, 2776, 2779, 2786, 2778, 2791,
     2789, 2797, 2801, 2813, 2821, 2831, 2834, 2841, 2842, 2845,

     2847, 2852, 2855, 2863, 2857, 2867, 2870, 2875, 2877, 2882,
     2887, 2898, 2897, 2903, 2916, 2919, 2926, 2927, 2931, 2933,
     2937, 2938, 2939, 2949, 2955, 2953, 2956, 2959, 2960, 2961,
     2967, 2979, 2972, 2982, 2983, 2990, 2995, 3001, 3009, 3011,
     3013, 3015, 3016, 3031, 3034, 3035, 3038, 3041, 3045, 3057,
     3059, 3061, 3064, 3065, 3067, 3075, 3077, 3080, 3087, 3091,
     3094, 3098, 3101, 3109, 3117, 3119, 3121, 3123, 3131, 3133,
     3135, 3137, 3143, 3150, 3149, 3151, 3154, 3153, 3165, 3167,
     3172, 3177, 3179, 3183, 3185, 3195, 3193, 3199, 3206, 3207,
     3209, 3211, 3213, 3225, 3227, 3229, 3235, 3239, 3241, 3243,

     3255, 3257, 3259, 3261, 3262, 3275, 3280, 3283, 3285, 3291,
     3298, 3301, 3303, 3311, 3305, 3317, 3319, 3325, 3331, 3337,
     3342, 3344, 3347, 3354, 3361, 3360, 3362, 3365, 3367, 3373,
     3377, 3379, 3381, 3387, 3393, 3395, 3397, 3410, 3413, 3416,
     3418, 3421, 3423, 3429, 3436, 3437, 3439, 3505, 3492, 3494,
     3496, 3498, 3500,   74, 3502
    } ;

static const flex_int16_t yy_def[756] =
    {   0,
      748,    1,  749,  749,  749,  749,  749,  749,  750,  750,
      751,  751,  752,  752,  753,  753,  748,  748,  748,  748,
      748,  748,  754,  748,  755,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  754,  754,   37,   37,
      754,   37,  754,  754,  754,   37,   37,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  754,  754,  755,  748,  748,
      748,  748,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,

      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,   37,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  125,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  125,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,

      754,  754,   82,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,

      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  148,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  748,  748,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,

      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,

      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  148,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,

      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,

      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,    0,  748,  748,
      748,  748,  748,  748,  748
    } ;

static const flex_int16_t yy_nxt[3570] =
    {   0,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   23,   32,   33,   34,   34,   34,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   23,   47,   48,   49,   50,   51,   23,
       52,   53,   54,   55,   56,   57,   58,   23,   23,   59,
       18,   60,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   61,   63,   61,   63,   61,   66,
       76,   76,   79,   61,   66,   77,   79,  389,  748,   76,
       76,   75,   75,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   76,   73,   76,   73,  389,  748,  748,

      134,   76,   76,  748,   76,  390,  748,  135,   78,  748,
       76,   76,   64,   82,   64,   80,   67,   76,   76,   80,
       76,   67,  136,  194,   68,   76,   69,   70,   71,   68,
       82,   69,   70,   71,   76,  748,   76,  748,   76,  748,
       76,   76,   76,   83,   84,   76,   85,   76,   76,  748,
       76,   78,  748,  748,   86,  748,   87,  137,   76,   76,
       88,   78,   78,   78,   89,  748,  138,  139,   76,   76,
       90,  140,   76,  164,   91,   92,  748,  748,   76,  165,
       93,  748,   76,   76,  748,   76,   94,   95,   76,   96,
      111,   76,  748,  112,  748,  113,  748,   97,   98,   77,

      114,   99,  748,   77,  100,  208,   76,  748,  101,  102,
      103,  748,  104,  105,  748,  213,   76,  106,  748,  748,
       77,  748,   77,  748,   76,  107,   77,  108,  109,   76,
      748,  110,  115,   76,  748,   76,  748,  116,  117,  118,
      119,  120,  121,  748,   76,  122,  748,  748,  123,  124,
      125,  126,  127,  223,  128,  129,  130,  131,  748,  748,
      132,  133,  141,  142,  143,   77,  144,  748,  145,  748,
      748,   76,  214,  146,  147,  148,  149,  150,  748,   77,
      151,   76,   76,  748,  748,  748,   76,  152,  153,   77,
       76,  154,  155,  156,  157,   76,  158,  748,  748,  159,

      160,   77,  161,  166,  748,   77,  162,  163,   76,   76,
      748,   76,  748,  167,   76,  748,   76,   76,   76,  168,
       76,  169,  748,   76,  170,   76,  171,   76,   76,  174,
      175,  176,  193,   76,  209,  210,   76,  748,  191,  748,
      172,  177,  192,   76,  748,  178,  173,   81,   81,   81,
       81,   81,   76,   76,  748,   76,   76,   76,   76,   76,
       76,   76,   76,   76,  212,  215,   76,  748,   76,   76,
      748,  195,  196,  748,   76,  179,  180,  181,  199,  182,
      200,  183,  184,  185,  748,  197,  186,  187,  198,  201,
       76,  748,  202,  188,  189,  190,  222,  748,  748,  748,

       76,  748,  748,  748,   76,   76,   76,   76,  203,  203,
      203,  203,  203,   76,   76,  203,  203,  203,  203,  203,
      203,   76,   76,  204,   76,   76,  205,  748,  748,   76,
       76,   76,  748,   76,   76,  206,  748,  748,   76,  211,
       76,  207,  748,  748,  216,  203,  203,  203,  203,  203,
      203,  219,   76,   76,   76,  748,  217,  748,  748,  225,
       76,  218,   76,   76,  224,  748,  220,  221,   76,  748,
      748,   76,   76,  226,  227,   76,   76,   76,   76,  228,
       76,  748,   76,  748,   76,   76,   76,   76,  748,   76,
      229,   76,  232,   76,   76,  230,   76,   76,  233,  748,

       76,   76,   76,  234,   76,   76,   76,  236,  231,   76,
       76,   76,  748,   76,   76,  748,   76,   76,   76,   76,
       76,  235,   76,  748,   76,   76,   76,   76,   76,   76,
       76,  239,   76,  748,   76,  748,  237,   76,  748,   76,
       76,  238,  748,  748,   76,  748,   76,  240,  748,  241,
      748,   76,   76,   76,  242,   76,   76,   76,   76,  247,
      748,   76,   76,   76,   76,  244,  248,  245,  748,  243,
       76,   76,  748,  748,  748,   76,  748,   76,  249,   76,
       76,  246,  250,  252,  748,  251,  748,  253,   76,   76,
       76,  748,  748,   76,  256,   77,  257,  258,   76,   76,

       76,  748,  254,  748,  748,  259,  260,  261,   76,  748,
      263,   77,  262,   76,  255,   76,   76,  748,   76,  748,
       76,  748,   76,   76,   76,   76,   76,  748,  264,   76,
      748,   76,   76,  265,  266,  267,   76,   76,  272,  268,
       76,  748,  748,  748,   76,  269,  748,  275,  748,  270,
      271,  285,  276,   76,  748,  273,   76,  274,  748,  284,
       76,  748,   76,   76,  748,   76,   76,   76,   76,  748,
       76,   76,   76,  289,  286,   76,  287,   76,   76,  748,
       76,   76,  748,  748,  748,  748,  277,   76,  278,  748,
      279,   76,   76,  288,  280,   76,   76,  748,  290,  748,

      748,   76,  281,   76,   76,  282,  283,   76,   76,  291,
      748,   76,  294,   76,   76,   76,   76,   76,   76,   76,
       76,  292,  748,   76,  748,  293,   76,  748,  295,  296,
      298,  297,   76,  299,   76,   76,  300,  748,   76,   76,
       76,   76,   76,  748,  748,  748,  302,   76,  301,   76,
       76,  748,  748,  748,   76,   76,  748,   76,   76,   76,
      303,   76,  304,   76,  748,  305,   76,  748,  748,   76,
      748,  748,   76,   76,  748,  748,  748,  748,   76,   76,
      748,  748,  748,  748,   76,   76,   76,   76,  306,  307,
      308,   77,  309,   76,  310,   76,   77,   76,   76,  311,

      748,  748,  312,  313,   76,  320,  314,   76,  316,  318,
       76,   76,   76,  315,   76,   76,   76,   76,  317,  319,
       76,   76,  748,   76,   76,  748,   76,  748,   76,  321,
      748,   76,   76,   76,  323,  324,  326,   76,  327,  748,
       76,   76,  748,   76,   76,   76,   76,  322,  328,   76,
      325,   76,   76,   76,  748,   76,   76,  748,   76,   76,
       76,   76,   76,  334,   76,   76,  329,  330,  748,  332,
      748,  335,  336,   76,  337,   76,  333,  339,  331,   76,
      338,  340,   76,   76,  748,   76,   76,   76,  341,  748,
       76,   76,   76,   76,   76,   76,   76,  342,   76,   76,

      748,   76,  748,   76,  344,   76,   76,   76,   76,   76,
       76,  748,   76,  748,   76,   76,   76,  748,   76,  345,
       76,   76,  343,   76,  748,  347,  360,  361,  748,  748,
       76,  348,   76,   76,  351,  346,  349,  352,  353,  350,
       76,  354,   76,   76,  356,  748,   76,  355,   76,   76,
      748,   76,  748,   76,   76,   76,   76,   76,   76,   76,
      748,   76,  362,   76,   76,  357,   76,   76,   76,  358,
      748,   76,   76,   76,   76,  359,  364,   76,  368,  363,
       76,  379,   76,   76,  371,  372,   77,   76,   76,   76,
      373,  748,  365,  376,  369,  366,  374,   76,  367,  375,

       77,  748,   76,   76,   76,   76,  748,  370,   76,  748,
       76,  748,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,  377,   76,  748,   76,   76,   76,
      748,  748,   76,  378,  748,   76,   76,   76,   76,  381,
      382,   76,  748,  380,   76,  748,   76,   76,  385,  384,
       76,  383,  748,   76,  386,   76,   76,  748,  748,   76,
       76,   76,  387,   76,   76,  748,   76,  388,   76,   76,
      748,   76,   76,   76,   76,  748,   76,   76,   76,   76,
       76,   76,  748,   76,   76,  748,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,

       76,  391,   76,   76,   76,   76,   76,  392,  748,   76,
      748,   76,   76,  396,   76,  748,   76,  393,   76,   76,
      395,  748,   76,  394,   76,  748,  748,  748,  748,   76,
       76,   76,   76,  748,   76,   76,   76,   76,   76,   76,
       76,   76,   76,  748,  397,   76,   76,   76,   76,  748,
       76,   76,   76,   76,   76,   76,   76,   76,  398,   76,
       76,   76,   76,   76,   76,   76,   76,  748,   76,   76,
       76,   76,   76,   76,  748,   76,   76,  748,   76,   76,
       76,  403,   76,  402,   76,   76,   76,   76,  748,  399,
       76,   76,   76,   76,   76,  748,  748,  400,   76,   76,

       76,  748,  401,   76,   76,   76,   76,  405,   76,  748,
       76,   76,   76,  404,   76,   76,  748,   76,   76,   76,
      748,   76,   76,  748,   76,   76,   76,  406,   76,   76,
       76,   76,   76,  748,   76,   76,   76,   76,  409,   76,
       76,  748,  407,   76,   76,   76,  748,  748,   76,   76,
      748,  408,   76,  413,   76,  410,  416,   76,   76,   76,
       76,  748,   76,   76,   76,   76,   76,  411,  748,   76,
      748,  412,  748,  748,   76,  748,  748,   76,   76,  414,
      419,   76,   76,   76,  417,  415,  421,  418,   76,   76,
      748,   76,  422,   76,   76,   76,   76,   76,   76,   76,

       76,   76,   76,   76,  748,  748,  748,   76,   76,  748,
      420,  748,   76,  427,   76,  423,  748,   76,   76,  428,
      424,  425,  748,   76,   76,   76,   76,   76,  748,  426,
       76,  429,  430,   76,   76,   76,   76,  431,   76,   76,
       76,   76,   76,  437,  439,  432,   76,  433,  440,  748,
       76,   76,  748,  438,  434,  748,  748,   76,  435,   76,
      748,   76,  748,  442,   76,   76,   76,   76,  436,   76,
       76,   76,   76,  441,   76,  443,   76,   76,   76,   76,
      445,   76,   76,   76,   76,  448,  748,   76,  748,   76,
       76,   76,  447,   76,  444,  449,   76,   76,   76,   76,

      452,   76,  748,   76,   76,  748,  446,   76,   76,  748,
       76,  748,   76,  748,   76,  748,   76,   76,  450,  748,
      460,   76,  748,  451,  453,  748,   76,   76,   76,   76,
      454,   76,   76,  455,   76,   76,   76,  748,  748,  748,
      461,   76,   76,   76,   76,   76,   76,  456,   76,  457,
       76,   76,   76,   76,  748,   76,   76,  466,  462,   76,
      458,   76,  463,  459,   76,   76,  748,  464,   76,  748,
       76,   76,   76,   76,   76,  467,   76,  748,  465,   76,
       76,   76,  748,   76,  748,   76,  475,  748,  748,   76,
       76,   76,   76,  470,  748,  471,   76,  472,  468,  748,

      469,   76,   76,   76,  476,   76,   76,  748,   76,  748,
       76,  748,   76,  473,  748,   76,  474,  477,   76,   76,
      479,   76,   76,   76,   76,  478,   76,   76,   76,   76,
       76,   76,   76,   76,  748,   76,   76,   76,   76,  748,
       76,   76,   76,   76,   76,  748,   76,   76,   76,   76,
      748,  482,   76,   76,  483,   76,   76,  748,  480,   76,
      748,   76,   76,  481,  748,  748,  484,  748,  485,   76,
      748,  748,   76,   76,   76,   76,   76,   76,  748,   76,
       76,   76,  748,   76,  748,  748,   76,   76,   76,   76,
      748,   76,   76,   76,   76,   76,   76,   76,   76,   76,

       76,   76,   76,  748,   76,   76,   76,   76,   76,   76,
       76,   76,  486,   76,  748,   76,   76,   76,   76,   76,
       76,  748,   76,   76,   76,   76,  748,   76,   76,   76,
       76,   76,   76,  748,   76,   76,   76,   76,  748,  487,
       76,  748,   76,   76,  488,  489,  748,   76,   76,   76,
      490,  492,  748,   76,   76,   76,  493,   76,  491,   76,
       76,  494,   76,  748,   76,   76,   76,   76,   76,  748,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,  748,  495,   76,  748,   76,  497,

      748,   76,  496,  500,   76,  498,   76,   76,  748,   76,
      502,   76,  504,   76,  748,  503,   76,  499,  501,  748,
      748,   76,   76,   76,   76,   76,   76,   76,   76,   76,
      748,   76,   76,   76,   76,   76,  748,  748,  748,   76,
      748,   76,   76,   76,   76,   76,  506,   76,   76,  505,
       76,  510,   76,  511,  748,  507,   76,   76,   76,   76,
       76,  748,   76,   76,  508,   76,  512,   76,   76,  513,
      515,   76,  514,  517,   76,  748,  509,   76,  516,   76,
       76,  748,   76,   76,  748,  748,  748,   76,  748,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,  748,

       76,  748,   76,  748,  518,   76,  748,  748,   76,   76,
      532,  748,   76,   76,  534,   76,   76,   76,   76,   76,
      519,  748,   76,  748,  531,   76,  533,   76,   76,  748,
       76,  520,  521,  522,   76,  523,   76,  524,   76,  748,
       76,  748,  525,   76,  526,  527,  528,  748,  537,  529,
      535,  748,   76,  536,  748,   76,  530,  748,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,  748,   76,   76,
       76,   76,   76,   76,   76,   76,  540,  748,   76,   76,
       76,   76,   76,   76,  538,  545,  547,  748,  748,  539,

      748,   76,   76,  748,  548,   76,   76,  541,   76,   76,
      544,   76,  542,  543,  748,   76,   76,  748,  546,   76,
      748,   76,   76,   76,   76,   76,   76,   76,   76,   76,
      549,  748,   76,   76,   76,  748,   76,   76,   76,   76,
       76,   76,   76,   76,  550,   76,   76,   76,  748,   76,
       76,   76,   76,  748,  552,   76,  551,   76,   76,   76,
       76,  748,   76,  748,   76,   76,   76,   76,  554,  553,
      555,  557,   76,   76,   76,   76,   76,  748,  558,   76,
       76,  748,   76,   76,  748,   76,  559,  748,  748,  556,
       76,   76,   76,   76,  562,  748,   76,   76,   76,  560,

       76,   76,  561,  748,   76,  748,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
      748,   76,   76,   76,  748,  748,   76,   76,   76,   76,
       76,  748,   76,  563,   76,   76,   76,   76,  748,   76,
      564,   76,  748,   76,  748,   76,  566,   76,  748,  748,
       76,  565,  568,   76,   76,   76,  571,   76,   76,  567,
       76,  569,  572,  570,  748,   76,  573,   76,   76,   76,
       76,   76,  748,   76,  748,   76,   76,   76,   76,  748,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,  574,   76,   76,

      748,   76,   76,   76,   76,   76,  575,  748,  579,  748,
      748,   76,  576,   76,  748,  582,   76,  578,   76,  577,
      748,  585,   76,   76,   76,  581,  583,  748,  748,   76,
      580,   76,  748,  584,   76,   76,   76,   76,   76,   76,
      748,   76,   76,   76,   76,   76,  586,   76,  748,   76,
       76,  748,   76,   76,   76,   76,   76,  587,   76,   76,
       76,   76,   76,  748,   76,   76,  748,   76,   76,  589,
       76,  590,   76,  592,  588,  593,  595,   76,   76,  596,
      748,   76,   76,  748,   76,   76,  597,   76,  748,  594,
       76,  748,   76,   76,  591,   76,  748,   76,  599,  598,

       76,  748,   76,   76,   76,   76,  601,   76,   76,   76,
      600,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,  602,   76,   76,   76,   76,  604,
       76,   76,   76,  748,   76,  748,   76,   76,  748,   76,
      603,   76,   76,   76,  607,  748,   76,  748,  605,  748,
      748,  748,  606,  748,   76,   76,   76,  608,   76,   76,
       76,   76,  611,  609,   76,  610,  748,   76,  748,   76,
      748,   76,  748,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,  748,  612,   76,  613,   76,  614,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,

       76,   76,   76,   76,   76,   76,   76,   76,  748,  748,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,  617,  748,  615,   76,   76,   76,  748,
       76,   76,  748,   76,  616,   76,   76,   76,   76,  748,
      748,   76,  618,   76,  748,   76,  748,   76,   76,   76,
      748,   76,   76,   76,   76,  619,   76,  748,   76,   76,
      748,   76,   76,   76,   76,  748,   76,   76,   76,   76,
       76,   76,  748,   76,   76,  748,  620,   76,   76,   76,
      748,   76,   76,   76,   76,  748,  748,   76,  748,  621,
       76,  622,   76,   76,   76,  624,  748,   76,  748,   76,

      627,   76,  628,  748,  625,   76,   76,  748,  748,   76,
      623,  748,  748,  748,  632,   76,  626,   76,   76,  631,
       76,  629,  630,  636,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,  633,   76,  634,
       76,   76,   76,   76,   76,   76,  637,  638,  748,   76,
      640,   76,  642,   76,   76,  643,  646,  644,  635,   76,
      748,   76,   76,   76,  647,   76,  639,  645,   76,  641,
       76,   76,  748,   76,  748,   76,   76,   76,  748,   76,
      748,   76,   76,   76,   76,  648,   76,   76,   76,   76,
       76,   76,  748,   76,   76,   76,   76,   76,   76,   76,

       76,   76,   76,   76,   76,   76,   76,   76,   76,  748,
       76,  748,  649,  748,  650,  748,   76,  653,  654,   76,
      652,   76,   76,   76,   76,   76,  748,   76,  748,   76,
       76,  748,   76,  651,  748,   76,   76,   76,  655,  748,
       76,   76,   76,   76,   76,   76,  748,   76,  748,  656,
       76,   76,   76,   76,  748,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,  748,  748,   76,   76,   76,
       76,   76,  667,  748,   76,  657,  658,  659,   76,  660,
      748,  661,  668,  748,  748,  748,  662,   76,  748,  663,
      664,   76,  669,  665,   76,   76,   76,   76,   76,   76,

      666,   76,   76,   76,   76,   76,  670,  748,  671,   76,
       76,   76,   76,   76,   76,   76,   76,   76,  748,   76,
       76,   76,   76,   76,   76,  748,   76,  672,   76,   76,
       76,   76,   76,  748,   76,   76,   76,  673,   76,  748,
       76,   76,   76,  748,   76,   76,   76,   76,   76,  748,
       76,  676,  675,  674,  678,   76,   76,  748,   76,  748,
       76,   76,   76,   76,   76,   76,   76,  677,   76,  748,
      748,   76,   76,  748,   76,   76,   76,   76,   76,   76,
       76,  748,   76,   76,   76,  748,   76,   76,   76,   76,
      679,   76,   76,   76,   76,   76,   76,   76,   76,   76,

       76,   76,   76,  748,   76,   76,   76,   76,   76,  748,
       76,   76,   76,  748,   76,   76,   76,   76,   76,  680,
       76,   76,   76,   76,   76,  748,   76,  748,  681,   76,
       76,  748,   76,  748,   76,   76,   76,  748,   76,   76,
      683,   76,   76,  682,  748,  748,   76,  748,   76,   76,
       76,   76,   76,   76,   76,  685,  684,   76,  748,  748,
       76,  748,   76,   76,   76,   76,   76,   76,   76,  748,
       76,   76,   76,   76,   76,   76,   76,   76,  686,  691,
      748,   76,   76,   76,   76,   76,   76,  748,   76,  692,
       76,   76,   76,   76,   76,   76,   76,  687,   76,  689,

       76,  748,   76,   76,  688,   76,   76,  748,  748,   76,
       76,   76,   76,   76,  690,   76,  696,  694,   76,  748,
       76,  748,  748,   76,   76,  693,   76,   76,   76,  748,
       76,   76,  748,  695,  748,   76,   76,  698,   76,   76,
      748,   76,  697,   76,  748,   76,   76,   76,   76,   76,
       76,  702,   76,   76,  748,   76,   76,   76,  699,   76,
       76,   76,   76,  700,  748,   76,   76,  701,   76,   76,
      748,   76,   76,   76,  748,   76,  748,   76,  703,  705,
       76,   76,   76,   76,   76,  704,   76,   76,  748,   76,
      706,   76,   76,   76,   76,  748,   76,   76,  748,   76,

      707,   76,   76,   76,   76,  748,  748,   76,   76,   76,
      748,   76,   76,  748,  708,   76,  748,   76,  748,   76,
      709,   76,   76,  711,   76,  710,  748,   76,  748,   76,
       76,   76,   76,   76,   76,  712,   76,  713,   76,   76,
       76,   76,   76,   76,   76,   76,  748,   76,  715,   76,
       76,   76,   76,   76,   76,   76,  748,  714,   76,  748,
       76,   76,  748,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,  748,   76,   76,   76,
      748,   76,  716,   76,   76,   76,   76,   76,   76,   76,
       76,   76,  748,   76,  748,   76,   76,   76,  748,  748,

       76,   76,  748,  717,   76,   76,   76,   76,   76,   76,
      718,   76,   76,   76,   76,   76,   76,  748,   76,   76,
       76,   76,  748,   76,   76,   76,  719,   76,  748,   76,
       76,   76,  748,  748,   76,   76,   76,  720,  748,   76,
       76,  721,   76,   76,  748,   76,   76,   76,   76,   76,
       76,  748,   76,   76,  748,   76,  748,  723,  748,   76,
      722,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,  748,   76,  724,  748,   76,   76,
       76,   76,   76,   76,  748,   76,   76,   76,  748,   76,
       76,   76,   76,   76,   76,  748,   76,   76,  725,   76,

      748,   76,  748,   76,  726,   76,   76,  727,   76,   76,
      748,   76,   76,   76,   76,   76,   76,   76,  748,   76,
      748,  728,   76,   76,   76,  729,   76,   76,   76,   76,
      748,   76,   76,   76,  748,   76,   76,   76,   76,   76,
       76,  748,   76,   76,  748,   76,   76,   76,   76,   76,
       76,   76,  748,   76,   76,   76,   76,   76,   76,   76,
      748,   76,  748,   76,   76,   76,  748,   76,   76,   76,
       76,   76,   76,   76,  748,   76,  730,   76,  748,   76,
      748,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,  748,   76,  732,   76,  731,   76,   76,   76,

       76,   76,   76,   76,   76,   76,   76,   76,  748,   76,
      748,   76,   76,   76,   76,  733,   76,   76,   76,   76,
       76,   76,  748,   76,   76,   76,  748,   76,  748,   76,
       76,   76,   76,  734,   76,   76,  748,   76,  748,   76,
       76,   76,  748,   76,   76,   76,   76,   76,   76,   76,
      748,   76,  748,   76,  748,   76,  748,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,  748,   76,
      748,   76,  748,   76,  748,   76,   76,   76,  748,   76,
       76,   76,  748,  735,  748,   76,  748,   76,   76,   76,
       76,   76,  748,   76,   76,   76,   76,   76,  748,   76,

      748,  736,  748,   76,  748,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,  740,   76,
      748,  737,   76,  748,   76,   76,  748,   76,  748,  738,
       76,   76,   76,   76,  748,   76,   76,   76,  741,   76,
      739,  748,   76,   76,  748,   76,  748,   76,  748,   76,
       76,   76,   76,   76,  748,   76,   76,   76,   76,   76,
      743,   76,  748,   76,  748,   76,   76,   76,   76,   76,
       76,   76,   76,  742,   76,   76,   76,   76,   76,   76,
      748,   76,   76,   76,   76,  748,   76,   76,  748,   76,
      748,   76,   76,   76,   76,   76,   76,  744,   76,   76,

       76,   76,   76,  748,  745,  748,   76,   76,  748,   76,
      748,   76,   76,   76,   76,   76,  748,   76,   76,   76,
      748,   76,  748,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,  748,   76,  748,   76,
      748,   76,   76,   76,   76,   76,  748,   76,  747,   76,
       76,   76,  748,   76,  748,  748,  748,  748,  748,  748,
      746,  748,   76,  748,  748,   76,  748,  748,   76,  748,
       76,  748,  748,   76,  748,   76,  748,  748,  748,  748,
      748,   76,  748,  748,  748,  748,  748,  748,   76,   76,
      748,   76,   61,   61,   62,   62,   65,   65,   72,   72,

       74,   74,   78,   78,   17,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748
    } ;

static const flex_int16_t yy_chk[3570] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    9,    9,   10,   10,   11,   11,
       23,   43,   25,   12,   12,  754,   78,  390,   17,   23,
       43,   16,   15,   33,   33,   33,   33,   33,   34,   34,
       34,   34,   34,   44,   14,   76,   13,  203,    0,    0,

       43,   56,   44,    0,   76,  203,    0,   43,   80,    0,
       56,   77,    9,   33,   10,   25,   11,   23,   43,   78,
       77,   12,   44,   56,   11,   37,   11,   11,   11,   12,
       33,   12,   12,   12,   37,    0,   45,    0,   38,    0,
       44,   48,   76,   37,   37,   45,   37,   38,   56,    0,
       48,   80,    0,    0,   37,    0,   37,   45,   77,   41,
       37,   80,   80,   80,   38,    0,   45,   45,   41,   84,
       38,   45,   37,   48,   38,   38,    0,    0,   84,   48,
       38,    0,   88,   45,    0,   38,   39,   39,   48,   39,
       41,   88,    0,   41,    0,   41,    0,   39,   39,   39,

       41,   39,    0,   39,   39,   84,   41,    0,   39,   40,
       40,    0,   40,   40,    0,   88,   84,   40,    0,    0,
       40,    0,   40,    0,   94,   40,   40,   40,   40,   88,
        0,   40,   42,   94,    0,   89,    0,   42,   42,   42,
       42,   42,   42,    0,   89,   42,    0,    0,   42,   42,
       42,   42,   42,   94,   42,   42,   42,   42,    0,    0,
       42,   42,   46,   46,   46,   46,   46,    0,   46,    0,
        0,   94,   89,   46,   46,   46,   46,   46,    0,   46,
       46,   49,   89,    0,    0,    0,   50,   46,   47,   47,
       49,   47,   47,   47,   47,   50,   47,    0,    0,   47,

       47,   47,   47,   49,    0,   47,   47,   47,   51,   52,
        0,   55,    0,   49,   85,    0,   54,   51,   52,   50,
       55,   50,    0,   85,   50,   54,   51,   90,   49,   52,
       52,   52,   55,   50,   85,   85,   90,    0,   54,    0,
       51,   52,   54,   87,    0,   52,   51,   81,   81,   81,
       81,   81,   87,   57,    0,   51,   52,   53,   55,   93,
       58,   85,   57,   54,   87,   90,   53,    0,   93,   58,
        0,   57,   57,    0,   90,   53,   53,   53,   58,   53,
       58,   53,   53,   53,    0,   57,   53,   53,   57,   58,
       87,    0,   58,   53,   53,   53,   93,    0,    0,    0,

       57,    0,    0,    0,   53,   83,   93,   58,   82,   82,
       82,   82,   82,   86,   83,   82,   82,   82,   82,   82,
       82,   91,   86,   83,   95,   96,   83,    0,    0,  100,
       91,   92,    0,   95,   96,   83,    0,    0,  100,   86,
       92,   83,    0,    0,   91,   82,   82,   82,   82,   82,
       82,   92,   83,   97,   99,    0,   91,    0,    0,   96,
       86,   91,   97,   99,   95,    0,   92,   92,   91,    0,
        0,   95,   96,   97,   97,   98,  100,  101,   92,   97,
      103,    0,  104,    0,   98,  102,  101,  105,    0,  103,
       97,  104,   99,  107,  102,   98,  105,  106,  101,    0,

       97,   99,  107,  102,  108,  109,  106,  105,   98,  110,
      111,  112,    0,  108,  109,    0,  113,  114,  110,  111,
      112,  102,   98,    0,  101,  113,  114,  103,  115,  104,
      117,  111,  102,    0,  105,    0,  106,  115,    0,  117,
      107,  110,    0,    0,  106,    0,  116,  111,    0,  112,
        0,  108,  109,  118,  114,  116,  110,  111,  112,  117,
        0,  119,  118,  113,  114,  116,  117,  116,    0,  115,
      119,  120,    0,    0,    0,  115,    0,  117,  118,  121,
      120,  116,  118,  119,    0,  118,    0,  119,  121,  123,
      124,    0,    0,  116,  122,  122,  122,  122,  123,  124,

      118,    0,  120,    0,    0,  122,  122,  122,  119,    0,
      123,  122,  122,  125,  121,  126,  128,    0,  120,    0,
      127,    0,  125,  130,  126,  128,  121,    0,  124,  127,
        0,  131,  130,  125,  125,  125,  123,  124,  127,  125,
      131,    0,    0,    0,  133,  125,    0,  128,    0,  125,
      126,  131,  128,  133,    0,  127,  132,  127,    0,  130,
      125,    0,  126,  128,    0,  132,  134,  127,  129,    0,
      130,  135,  136,  133,  132,  134,  132,  129,  131,    0,
      135,  136,    0,    0,    0,    0,  129,  138,  129,    0,
      129,  133,  139,  132,  129,  137,  138,    0,  134,    0,

        0,  139,  129,  132,  137,  129,  129,  143,  140,  136,
        0,  141,  139,  134,  142,  129,  143,  140,  135,  136,
      141,  137,    0,  142,    0,  138,  144,    0,  139,  139,
      140,  139,  147,  141,  138,  144,  142,    0,  145,  139,
      146,  147,  137,    0,    0,    0,  144,  145,  143,  146,
      149,    0,    0,    0,  143,  140,    0,  151,  141,  149,
      145,  142,  146,  152,    0,  147,  151,    0,    0,  154,
        0,    0,  152,  144,    0,    0,    0,    0,  154,  147,
        0,    0,    0,    0,  153,  145,  150,  146,  148,  148,
      148,  148,  148,  153,  148,  150,  148,  149,  156,  148,

        0,    0,  148,  148,  151,  154,  148,  156,  150,  153,
      152,  155,  160,  148,  157,  158,  154,  159,  150,  153,
      155,  160,    0,  157,  158,    0,  159,    0,  163,  155,
        0,  153,  164,  150,  156,  157,  158,  163,  159,    0,
      162,  164,    0,  165,  167,  156,  161,  155,  160,  162,
      157,  168,  165,  167,    0,  161,  166,    0,  155,  160,
      168,  157,  158,  163,  159,  166,  161,  161,    0,  162,
        0,  164,  165,  169,  166,  163,  162,  167,  161,  164,
      166,  167,  169,  171,    0,  170,  172,  162,  168,    0,
      165,  167,  171,  161,  170,  172,  174,  169,  168,  173,

        0,  176,    0,  166,  171,  174,  175,  180,  173,  181,
      176,    0,  177,    0,  178,  175,  180,    0,  181,  172,
      169,  177,  170,  178,    0,  174,  180,  181,    0,    0,
      171,  174,  170,  172,  176,  173,  175,  176,  176,  175,
      179,  177,  182,  174,  178,    0,  173,  177,  176,  179,
        0,  182,    0,  175,  180,  183,  181,  185,  188,  177,
        0,  178,  182,  184,  183,  179,  185,  188,  193,  179,
        0,  187,  184,  186,  190,  179,  183,  193,  185,  182,
      187,  193,  186,  190,  189,  189,  189,  179,  191,  182,
      189,    0,  184,  190,  186,  184,  189,  191,  184,  189,

      189,    0,  183,  192,  185,  188,    0,  187,  194,    0,
      184,    0,  192,  195,  196,  193,  197,  194,  187,  198,
      186,  190,  195,  196,  191,  197,    0,  199,  198,  200,
        0,    0,  202,  192,    0,  191,  199,  204,  200,  195,
      196,  202,    0,  194,  201,    0,  204,  205,  199,  198,
      192,  197,    0,  201,  200,  194,  205,    0,    0,  206,
      195,  196,  201,  197,  207,    0,  198,  202,  206,  208,
        0,  209,  210,  207,  199,    0,  200,  212,  208,  202,
      209,  210,    0,  211,  204,    0,  212,  214,  213,  215,
      216,  201,  211,  217,  205,  218,  214,  213,  215,  216,

      219,  208,  217,  220,  218,  221,  206,  211,    0,  219,
        0,  207,  220,  218,  221,    0,  208,  213,  209,  210,
      215,    0,  222,  214,  212,    0,    0,    0,    0,  223,
      211,  222,  224,    0,  214,  213,  215,  216,  223,  225,
      217,  224,  218,    0,  222,  226,  227,  219,  225,    0,
      220,  228,  221,  229,  226,  227,  230,  232,  223,  233,
      228,  231,  229,  234,  235,  230,  232,    0,  233,  222,
      231,  236,  234,  235,    0,  237,  223,    0,  238,  224,
      236,  233,  239,  232,  237,  240,  225,  238,    0,  229,
      241,  239,  226,  227,  240,    0,    0,  231,  228,  241,

      229,    0,  231,  230,  232,  242,  233,  240,  231,    0,
      234,  235,  243,  238,  242,  244,    0,  245,  236,  246,
        0,  243,  237,    0,  244,  238,  245,  242,  246,  239,
      248,  250,  240,    0,  247,  249,  252,  241,  245,  248,
      250,    0,  243,  247,  249,  252,    0,    0,  253,  251,
        0,  244,  242,  250,  254,  247,  252,  253,  251,  243,
      257,    0,  244,  254,  245,  256,  246,  248,    0,  257,
        0,  249,    0,    0,  256,    0,    0,  248,  250,  251,
      254,  247,  249,  252,  253,  251,  256,  253,  255,  258,
        0,  260,  257,  261,  262,  253,  251,  255,  258,  259,

      260,  254,  261,  262,    0,    0,    0,  257,  259,    0,
      255,    0,  256,  261,  264,  258,    0,  267,  266,  261,
      259,  259,    0,  264,  265,  263,  267,  266,    0,  260,
      269,  262,  262,  265,  263,  255,  258,  263,  260,  269,
      261,  262,  268,  264,  266,  263,  259,  263,  267,    0,
      271,  268,    0,  265,  263,    0,    0,  270,  263,  271,
        0,  264,    0,  269,  267,  266,  270,  274,  263,  272,
      273,  265,  263,  268,  275,  270,  274,  269,  272,  273,
      271,  276,  278,  275,  277,  274,    0,  279,    0,  268,
      276,  278,  273,  277,  270,  275,  279,  271,  281,  280,

      278,  283,    0,  284,  270,    0,  272,  281,  280,    0,
      283,    0,  284,    0,  274,    0,  272,  273,  276,    0,
      283,  275,    0,  277,  279,    0,  285,  282,  276,  278,
      280,  277,  286,  281,  279,  285,  282,    0,    0,    0,
      284,  286,  287,  288,  289,  281,  280,  282,  283,  282,
      284,  287,  288,  289,    0,  291,  290,  289,  285,  292,
      282,  294,  286,  282,  291,  290,    0,  287,  292,    0,
      294,  293,  296,  285,  282,  290,  295,    0,  288,  286,
      293,  296,    0,  298,    0,  295,  296,    0,    0,  287,
      288,  289,  298,  294,    0,  295,  297,  295,  292,    0,

      293,  299,  291,  290,  296,  297,  292,    0,  294,    0,
      299,    0,  300,  295,    0,  301,  295,  297,  293,  296,
      298,  300,  302,  295,  301,  297,  303,  304,  305,  306,
      298,  302,  307,  308,    0,  303,  304,  305,  306,    0,
      309,  307,  308,  297,  310,    0,  311,  312,  299,  309,
        0,  306,  313,  310,  307,  311,  312,    0,  301,  300,
        0,  313,  301,  302,    0,    0,  310,    0,  311,  302,
        0,    0,  314,  303,  304,  305,  306,  315,    0,  307,
      308,  314,    0,  316,    0,    0,  315,  309,  317,  318,
        0,  310,  316,  311,  312,  319,  320,  317,  318,  313,

      321,  322,  323,    0,  319,  320,  325,  324,  326,  321,
      322,  323,  318,  327,    0,  325,  324,  326,  328,  314,
      330,    0,  327,  329,  315,  332,    0,  328,  331,  330,
      316,  333,  329,    0,  332,  317,  318,  331,    0,  321,
      333,    0,  319,  320,  324,  326,    0,  321,  322,  323,
      327,  329,    0,  325,  324,  326,  330,  334,  328,  335,
      327,  331,  336,    0,  337,  328,  334,  330,  335,    0,
      329,  336,  332,  337,  338,  331,  339,  340,  333,  341,
      342,  343,  344,  338,  347,  339,  340,  346,  341,  342,
      343,  344,  345,  347,    0,  335,  346,    0,  348,  337,

        0,  345,  335,  344,  334,  341,  335,  348,    0,  336,
      345,  337,  346,  349,    0,  345,  350,  343,  344,    0,
        0,  338,  349,  339,  340,  350,  341,  342,  343,  344,
        0,  347,  352,  351,  346,  354,    0,    0,    0,  345,
        0,  352,  351,  355,  354,  348,  350,  353,  356,  349,
      357,  352,  355,  352,    0,  351,  353,  356,  358,  357,
      349,    0,  359,  350,  351,  360,  352,  358,  361,  352,
      353,  359,  352,  357,  360,    0,  351,  361,  353,  352,
      351,    0,  354,  362,    0,    0,    0,  364,    0,  365,
      355,  366,  362,  367,  353,  356,  364,  357,  365,    0,

      366,    0,  367,    0,  361,  358,    0,    0,  370,  359,
      365,    0,  360,  368,  367,  361,  369,  370,  371,  372,
      362,    0,  368,    0,  364,  369,  366,  371,  372,    0,
      362,  363,  363,  363,  364,  363,  365,  363,  366,    0,
      367,    0,  363,  373,  363,  363,  363,    0,  370,  363,
      368,    0,  373,  369,    0,  370,  363,    0,  374,  375,
      368,  376,  377,  369,  378,  371,  372,  374,  375,  379,
      376,  377,  380,  378,  383,  385,  381,    0,  379,  382,
      386,  380,  384,  383,  385,  381,  378,    0,  382,  386,
      373,  384,  388,  387,  374,  383,  385,    0,    0,  377,

        0,  388,  387,    0,  386,  374,  375,  380,  376,  377,
      382,  378,  380,  381,    0,  391,  379,    0,  384,  380,
        0,  383,  385,  381,  391,  392,  382,  386,  393,  384,
      387,    0,  394,  395,  392,    0,  396,  393,  397,  388,
      387,  394,  395,  398,  391,  396,  399,  397,    0,  400,
      403,  401,  398,    0,  395,  399,  392,  402,  400,  403,
      401,    0,  391,    0,  405,  404,  402,  406,  400,  396,
      400,  401,  392,  405,  404,  393,  406,    0,  402,  394,
      395,    0,  407,  396,    0,  397,  404,    0,    0,  400,
      398,  407,  408,  399,  407,    0,  400,  403,  401,  405,

      409,  408,  406,    0,  402,    0,  410,  411,  412,  409,
      413,  405,  404,  414,  406,  410,  411,  412,  415,  413,
        0,  419,  414,  416,    0,    0,  417,  415,  418,  407,
      419,    0,  416,  409,  420,  417,  422,  418,    0,  408,
      411,  421,    0,  420,    0,  422,  414,  409,    0,    0,
      421,  413,  417,  410,  411,  412,  420,  413,  423,  416,
      414,  418,  421,  418,    0,  415,  422,  423,  419,  424,
      416,  425,    0,  417,    0,  418,  427,  426,  424,    0,
      425,  420,  428,  422,  429,  427,  426,  431,  421,  430,
      432,  428,  436,  429,  433,  435,  431,  423,  430,  432,

        0,  436,  434,  433,  435,  423,  426,    0,  430,    0,
        0,  434,  427,  437,    0,  434,  424,  429,  425,  428,
        0,  435,  437,  427,  426,  433,  434,    0,    0,  428,
      432,  429,    0,  434,  431,  438,  430,  432,  439,  436,
        0,  433,  435,  440,  438,  441,  437,  439,    0,  434,
      442,    0,  440,  444,  441,  443,  447,  438,  445,  442,
      437,  446,  444,    0,  443,  447,    0,  445,  448,  440,
      446,  441,  449,  444,  439,  444,  445,  448,  450,  446,
        0,  449,  438,    0,  451,  439,  447,  450,    0,  444,
      440,    0,  441,  451,  443,  452,    0,  442,  449,  448,

      444,    0,  443,  447,  452,  445,  451,  453,  446,  454,
      450,  455,  456,  457,  458,  448,  453,  459,  454,  449,
      455,  456,  457,  458,  452,  450,  459,  461,  463,  454,
      460,  451,  462,    0,  464,    0,  461,  463,    0,  460,
      453,  462,  452,  464,  457,    0,  466,    0,  455,    0,
        0,    0,  456,    0,  453,  466,  454,  459,  455,  456,
      457,  458,  462,  460,  459,  460,    0,  465,    0,  468,
        0,  467,    0,  469,  461,  463,  465,  460,  468,  462,
      467,  464,  469,  470,    0,  465,  471,  466,  472,  467,
      473,  474,  470,  466,  475,  471,  476,  472,  477,  473,

      474,  478,  479,  475,  480,  476,  482,  477,    0,    0,
      478,  479,  481,  480,  465,  482,  468,  483,  467,  484,
      469,  481,  485,  479,    0,  473,  483,  486,  484,    0,
      470,  485,    0,  471,  478,  472,  486,  473,  474,    0,
        0,  475,  479,  476,    0,  477,    0,  488,  478,  479,
        0,  480,  489,  482,  487,  481,  488,    0,  490,  481,
        0,  489,  491,  487,  483,    0,  484,  490,  492,  485,
      493,  491,    0,  494,  486,    0,  487,  492,  496,  493,
        0,  495,  494,  497,  498,    0,    0,  496,    0,  493,
      495,  493,  497,  498,  488,  494,    0,  500,    0,  489,

      495,  487,  495,    0,  494,  490,  500,    0,    0,  491,
      493,    0,    0,    0,  498,  492,  494,  493,  499,  496,
      494,  495,  495,  500,  501,  496,  502,  499,  495,  503,
      497,  498,  505,  501,  504,  502,  506,  499,  503,  499,
      507,  505,  508,  504,  500,  506,  501,  502,    0,  507,
      503,  508,  504,  509,  510,  504,  506,  504,  499,  511,
        0,  512,  509,  510,  508,  499,  502,  505,  511,  503,
      512,  501,    0,  502,    0,  513,  503,  514,    0,  505,
        0,  504,  515,  506,  513,  508,  514,  507,  516,  508,
      517,  515,    0,  518,  519,  520,  521,  516,  522,  517,

      509,  510,  518,  519,  520,  521,  511,  522,  512,    0,
      523,    0,  518,    0,  518,    0,  524,  520,  521,  523,
      519,  527,  513,  529,  514,  524,    0,  525,    0,  515,
      527,    0,  529,  518,    0,  516,  525,  517,  524,    0,
      518,  519,  520,  521,  530,  522,    0,  531,    0,  525,
      528,  532,  534,  530,    0,  533,  531,  523,  535,  528,
      532,  534,  536,  524,  533,    0,    0,  535,  527,  537,
      529,  536,  528,    0,  525,  526,  526,  526,  537,  526,
        0,  526,  528,    0,    0,    0,  526,  538,    0,  526,
      526,  530,  533,  526,  531,  539,  538,  528,  532,  534,

      526,  540,  533,  541,  539,  535,  538,    0,  538,  536,
      540,  542,  541,  543,  544,  545,  537,  546,    0,  547,
      542,  548,  543,  544,  545,    0,  546,  538,  547,  550,
      548,  552,  549,    0,  538,  551,  553,  540,  550,    0,
      552,  549,  539,    0,  551,  553,  554,  555,  540,    0,
      541,  549,  546,  544,  551,  554,  555,    0,  542,    0,
      543,  544,  545,  556,  546,  557,  547,  550,  548,    0,
        0,  558,  556,    0,  557,  559,  550,  560,  552,  549,
      558,    0,  551,  553,  559,    0,  560,  562,  561,  563,
      557,  564,  565,  554,  555,  566,  562,  561,  563,  568,

      564,  565,  569,    0,  566,  571,  567,  570,  568,    0,
      556,  569,  557,    0,  571,  567,  570,  572,  558,  561,
      574,  575,  559,  573,  560,    0,  572,    0,  566,  574,
      575,    0,  573,    0,  562,  561,  563,    0,  564,  565,
      570,  576,  566,  567,    0,    0,  568,    0,  577,  569,
      576,  578,  571,  567,  570,  574,  573,  577,    0,    0,
      578,    0,  579,  580,  572,  581,  583,  574,  575,    0,
      573,  579,  580,  585,  581,  583,  584,  582,  576,  583,
        0,  586,  585,  589,  587,  584,  582,    0,  576,  584,
      586,  588,  589,  587,  591,  577,  590,  579,  578,  582,

      588,    0,  592,  591,  581,  590,  593,    0,    0,  579,
      580,  592,  581,  583,  582,  593,  591,  588,  594,    0,
      585,    0,    0,  584,  582,  587,  595,  594,  586,    0,
      589,  587,    0,  590,    0,  595,  596,  593,  588,  597,
        0,  591,  592,  590,    0,  596,  598,  599,  597,  592,
      600,  597,  601,  593,    0,  598,  599,  602,  594,  600,
      603,  601,  605,  595,    0,  594,  602,  596,  604,  603,
        0,  605,  606,  595,    0,  607,    0,  604,  599,  602,
      608,  606,  609,  596,  607,  600,  597,  610,    0,  608,
      603,  609,  611,  598,  599,    0,  610,  600,    0,  601,

      604,  611,  613,  612,  602,    0,    0,  603,  614,  605,
        0,  613,  612,    0,  607,  604,    0,  614,    0,  606,
      610,  615,  607,  612,  616,  611,    0,  608,    0,  609,
      615,  617,  618,  616,  610,  613,  619,  614,  620,  611,
      617,  618,  621,  622,  623,  619,    0,  620,  616,  613,
      612,  621,  622,  623,  624,  614,    0,  615,  626,    0,
      625,  627,    0,  624,  628,  629,  630,  626,  615,  625,
      627,  616,  631,  628,  629,  630,    0,  633,  617,  618,
        0,  631,  625,  619,  632,  620,  633,  634,  635,  621,
      622,  623,    0,  632,    0,  636,  634,  635,    0,    0,

      637,  624,    0,  625,  636,  626,  638,  625,  627,  637,
      632,  628,  629,  630,  639,  638,  640,    0,  641,  631,
      642,  643,    0,  639,  633,  640,  636,  641,    0,  642,
      643,  632,    0,    0,  634,  635,  644,  637,    0,  645,
      646,  642,  636,  647,    0,  644,  648,  637,  645,  646,
      649,    0,  647,  638,    0,  648,    0,  644,    0,  649,
      642,  639,  650,  640,  651,  641,  652,  642,  643,  653,
      654,  650,  655,  651,    0,  652,  644,    0,  653,  654,
      656,  655,  657,  644,    0,  658,  645,  646,    0,  656,
      647,  657,  659,  648,  658,    0,  660,  649,  652,  661,

        0,  659,    0,  662,  657,  660,  663,  658,  661,  650,
        0,  651,  662,  652,  664,  663,  653,  654,    0,  655,
        0,  661,  665,  664,  666,  662,  667,  656,  668,  657,
        0,  665,  658,  666,    0,  667,  669,  668,  670,  659,
      671,    0,  672,  660,    0,  669,  661,  670,  673,  671,
      662,  672,    0,  663,  675,  674,  676,  673,  678,  677,
        0,  664,    0,  675,  674,  676,    0,  678,  677,  665,
      679,  666,  680,  667,    0,  668,  674,  681,    0,  679,
        0,  680,  682,  669,  683,  670,  681,  671,  684,  672,
      685,  682,    0,  683,  679,  673,  677,  684,  687,  685,

      686,  675,  674,  676,  688,  678,  677,  687,    0,  686,
        0,  689,  690,  688,  691,  682,  692,  679,  693,  680,
      689,  690,    0,  691,  681,  692,    0,  693,    0,  682,
      694,  683,  695,  686,  696,  684,    0,  685,    0,  694,
      697,  695,    0,  696,  698,  687,  699,  686,  700,  697,
        0,  688,    0,  698,    0,  699,    0,  700,  689,  690,
      701,  691,  702,  692,  703,  693,  704,  705,    0,  701,
        0,  702,    0,  703,    0,  704,  705,  694,    0,  695,
      706,  696,    0,  698,    0,  707,    0,  697,  708,  706,
      709,  698,    0,  699,  707,  700,  710,  708,    0,  709,

        0,  703,    0,  711,    0,  710,  712,  701,  713,  702,
      715,  703,  711,  704,  705,  712,  714,  713,  712,  715,
        0,  707,  716,    0,  717,  714,    0,  706,    0,  710,
      718,  716,  707,  717,    0,  708,  719,  709,  714,  718,
      711,    0,  720,  710,    0,  719,    0,  721,    0,  722,
      711,  720,  723,  712,    0,  713,  721,  715,  722,  724,
      719,  723,    0,  714,    0,  726,  725,  727,  724,  716,
      728,  717,  729,  718,  726,  725,  727,  718,  730,  728,
        0,  729,  731,  719,  732,    0,  733,  730,    0,  720,
        0,  731,  734,  732,  721,  733,  722,  725,  735,  723,

      736,  734,  737,    0,  731,    0,  724,  735,    0,  736,
        0,  737,  726,  725,  727,  738,    0,  728,  739,  729,
        0,  740,    0,  741,  738,  730,  742,  739,  743,  731,
      740,  732,  741,  733,  744,  742,    0,  743,    0,  734,
        0,  745,  746,  744,  747,  735,    0,  736,  742,  737,
      745,  746,    0,  747,    0,    0,    0,    0,    0,    0,
      741,    0,  738,    0,    0,  739,    0,    0,  740,    0,
      741,    0,    0,  742,    0,  743,    0,    0,    0,    0,
        0,  744,    0,    0,    0,    0,    0,    0,  745,  746,
        0,  747,  749,  749,  750,  750,  751,  751,  752,  752,

      753,  753,  755,  755,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "nask.ll"
/* -*- c++ -*- File generated by the BNF Converter (bnfc 2.9.5). */
/* Lexer definition for use with FLex */
/* Additional data for the lexer: a buffer for lexing string literals. */

#line 14 "nask.ll"
#include "scanner.hh"

/* using "token" to make the returns for the tokens shorter to type */
using token = nask_::NaskParser::token;


#include "absyn.hh"
#include "bison.hh"

#define initialize_lexer nask__initialize_lexer

/* BEGIN extensible string buffer */

#include "buffer.hh"

/* The initial size of the buffer to lex string literals. */
#define LITERAL_BUFFER_INITIAL_SIZE 1024

/* The pointer to the literal buffer. */
Buffer literal_buffer = nullptr;

/* Initialize the literal buffer. */
#define LITERAL_BUFFER_CREATE() literal_buffer = newBuffer(LITERAL_BUFFER_INITIAL_SIZE)

/* Append characters at the end of the buffer. */
#define LITERAL_BUFFER_APPEND(s) bufferAppendString(literal_buffer, s)

/* Append a character at the end of the buffer. */
#define LITERAL_BUFFER_APPEND_CHAR(c) bufferAppendChar(literal_buffer, c)

/* Release the buffer, returning a pointer to its content. */
#define LITERAL_BUFFER_HARVEST() releaseBuffer(literal_buffer)

/* In exceptional cases, e.g. when reaching EOF, we have to free the buffer. */
#define LITERAL_BUFFER_FREE() freeBuffer(literal_buffer)

/* END extensible string buffer */

/* update location on matching */
#define YY_USER_ACTION \
loc->begin.line   = loc->end.line; \
loc->begin.column = loc->end.column; \
for(int i = 0; yytext[i] != '\0'; i++) { \
    if(yytext[i] == '\n') { \
        loc->end.line++; \
        loc->end.column = 0; \
    } \
    else { \
        loc->end.column++; \
    } \
}
#line 1505 "lexer.cc"

#line 1507 "lexer.cc"

#define INITIAL 0
#define CHAR 1
#define CHARESC 2
#define CHAREND 3
#define STRING 4
#define ESCAPED 5
#define COMMENT 6
#define COMMENT1 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE Buffer

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 74 "nask.ll"


#line 1647 "lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 749 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3505 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 76 "nask.ll"
return token::_LBRACK;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 77 "nask.ll"
return token::_RBRACK;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 78 "nask.ll"
return token::_COMMA;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 79 "nask.ll"
return token::_COLON;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 80 "nask.ll"
return token::_PLUS;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 81 "nask.ll"
return token::_MINUS;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 82 "nask.ll"
return token::_STAR;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 83 "nask.ll"
return token::_SLASH;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 84 "nask.ll"
return token::_PERCENT;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 85 "nask.ll"
return token::_LPAREN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 86 "nask.ll"
return token::_RPAREN;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 87 "nask.ll"
return token::_KW_AAA;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 88 "nask.ll"
return token::_KW_AAD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 89 "nask.ll"
return token::_KW_AAM;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 90 "nask.ll"
return token::_KW_AAS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 91 "nask.ll"
return token::_KW_ABSOLUTE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 92 "nask.ll"
return token::_KW_ADC;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 93 "nask.ll"
return token::_KW_ADD;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 94 "nask.ll"
return token::_KW_ALIGN;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 95 "nask.ll"
return token::_KW_ALIGNB;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 96 "nask.ll"
return token::_KW_AND;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 97 "nask.ll"
return token::_KW_ARPL;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 98 "nask.ll"
return token::_KW_BITS;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 99 "nask.ll"
return token::_KW_BOUND;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 100 "nask.ll"
return token::_KW_BSF;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 101 "nask.ll"
return token::_KW_BSR;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 102 "nask.ll"
return token::_KW_BSWAP;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 103 "nask.ll"
return token::_KW_BT;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 104 "nask.ll"
return token::_KW_BTC;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 105 "nask.ll"
return token::_KW_BTR;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 106 "nask.ll"
return token::_KW_BTS;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 107 "nask.ll"
return token::_KW_BYTE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 108 "nask.ll"
return token::_KW_CALL;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 109 "nask.ll"
return token::_KW_CBW;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 110 "nask.ll"
return token::_KW_CDQ;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 111 "nask.ll"
return token::_KW_CLC;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 112 "nask.ll"
return token::_KW_CLD;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 113 "nask.ll"
return token::_KW_CLI;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 114 "nask.ll"
return token::_KW_CLTS;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 115 "nask.ll"
return token::_KW_CMC;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 116 "nask.ll"
return token::_KW_CMP;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 117 "nask.ll"
return token::_KW_CMPSB;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 118 "nask.ll"
return token::_KW_CMPSD;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 119 "nask.ll"
return token::_KW_CMPSW;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "nask.ll"
return token::_KW_CMPXCHG;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "nask.ll"
return token::_KW_CPUID;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "nask.ll"
return token::_KW_CS;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "nask.ll"
return token::_KW_CWD;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "nask.ll"
return token::_KW_CWDE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "nask.ll"
return token::_KW_DAA;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "nask.ll"
return token::_KW_DAS;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "nask.ll"
return token::_KW_DB;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "nask.ll"
return token::_KW_DD;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "nask.ll"
return token::_KW_DEC;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "nask.ll"
return token::_KW_DIV;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "nask.ll"
return token::_KW_DQ;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 132 "nask.ll"
return token::_KW_DS;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "nask.ll"
return token::_KW_DT;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 134 "nask.ll"
return token::_KW_DW;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "nask.ll"
return token::_KW_DWORD;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 136 "nask.ll"
return token::_KW_END;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 137 "nask.ll"
return token::_KW_ENTER;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 138 "nask.ll"
return token::_KW_EQU;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 139 "nask.ll"
return token::_KW_ES;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 140 "nask.ll"
return token::_KW_EXTERN;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 141 "nask.ll"
return token::_KW_F2XM1;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 142 "nask.ll"
return token::_KW_FABS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 143 "nask.ll"
return token::_KW_FADD;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 144 "nask.ll"
return token::_KW_FADDP;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 145 "nask.ll"
return token::_KW_FAR;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 146 "nask.ll"
return token::_KW_FBLD;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 147 "nask.ll"
return token::_KW_FBSTP;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 148 "nask.ll"
return token::_KW_FCHS;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 149 "nask.ll"
return token::_KW_FCLEX;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 150 "nask.ll"
return token::_KW_FCOM;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 151 "nask.ll"
return token::_KW_FCOMP;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 152 "nask.ll"
return token::_KW_FCOMPP;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 153 "nask.ll"
return token::_KW_FCOS;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 154 "nask.ll"
return token::_KW_FDECSTP;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 155 "nask.ll"
return token::_KW_FDISI;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 156 "nask.ll"
return token::_KW_FDIV;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 157 "nask.ll"
return token::_KW_FDIVP;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 158 "nask.ll"
return token::_KW_FDIVR;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 159 "nask.ll"
return token::_KW_FDIVRP;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 160 "nask.ll"
return token::_KW_FENI;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 161 "nask.ll"
return token::_KW_FFREE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 162 "nask.ll"
return token::_KW_FIADD;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 163 "nask.ll"
return token::_KW_FICOM;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 164 "nask.ll"
return token::_KW_FICOMP;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 165 "nask.ll"
return token::_KW_FIDIV;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 166 "nask.ll"
return token::_KW_FIDIVR;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 167 "nask.ll"
return token::_KW_FILD;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 168 "nask.ll"
return token::_KW_FILE;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 169 "nask.ll"
return token::_KW_FIMUL;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 170 "nask.ll"
return token::_KW_FINCSTP;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 171 "nask.ll"
return token::_KW_FINIT;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 172 "nask.ll"
return token::_KW_FIST;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 173 "nask.ll"
return token::_KW_FISTP;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 174 "nask.ll"
return token::_KW_FISUB;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 175 "nask.ll"
return token::_KW_FISUBR;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 176 "nask.ll"
return token::_KW_FLD;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 177 "nask.ll"
return token::_KW_FLD1;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 178 "nask.ll"
return token::_KW_FLDCW;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 179 "nask.ll"
return token::_KW_FLDENV;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 180 "nask.ll"
return token::_KW_FLDL2E;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 181 "nask.ll"
return token::_KW_FLDL2T;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 182 "nask.ll"
return token::_KW_FLDLG2;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 183 "nask.ll"
return token::_KW_FLDLN2;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 184 "nask.ll"
return token::_KW_FLDPI;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 185 "nask.ll"
return token::_KW_FLDZ;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 186 "nask.ll"
return token::_KW_FMUL;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 187 "nask.ll"
return token::_KW_FMULP;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 188 "nask.ll"
return token::_KW_FNCLEX;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 189 "nask.ll"
return token::_KW_FNDISI;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 190 "nask.ll"
return token::_KW_FNENI;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 191 "nask.ll"
return token::_KW_FNINIT;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 192 "nask.ll"
return token::_KW_FNOP;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 193 "nask.ll"
return token::_KW_FNSAVE;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 194 "nask.ll"
return token::_KW_FNSTCW;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 195 "nask.ll"
return token::_KW_FNSTENV;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 196 "nask.ll"
return token::_KW_FNSTSW;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 197 "nask.ll"
return token::_KW_FORMAT;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 198 "nask.ll"
return token::_KW_FPATAN;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 199 "nask.ll"
return token::_KW_FPREM;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 200 "nask.ll"
return token::_KW_FPREM1;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 201 "nask.ll"
return token::_KW_FPTAN;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 202 "nask.ll"
return token::_KW_FRNDINT;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 203 "nask.ll"
return token::_KW_FRSTOR;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 204 "nask.ll"
return token::_KW_FS;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 205 "nask.ll"
return token::_KW_FSAVE;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 206 "nask.ll"
return token::_KW_FSCALE;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 207 "nask.ll"
return token::_KW_FSETPM;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 208 "nask.ll"
return token::_KW_FSIN;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 209 "nask.ll"
return token::_KW_FSINCOS;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 210 "nask.ll"
return token::_KW_FSQRT;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 211 "nask.ll"
return token::_KW_FST;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 212 "nask.ll"
return token::_KW_FSTCW;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 213 "nask.ll"
return token::_KW_FSTENV;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 214 "nask.ll"
return token::_KW_FSTP;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 215 "nask.ll"
return token::_KW_FSTSW;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 216 "nask.ll"
return token::_KW_FSUB;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 217 "nask.ll"
return token::_KW_FSUBP;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 218 "nask.ll"
return token::_KW_FSUBR;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 219 "nask.ll"
return token::_KW_FSUBRP;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 220 "nask.ll"
return token::_KW_FTST;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 221 "nask.ll"
return token::_KW_FUCOM;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 222 "nask.ll"
return token::_KW_FUCOMP;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 223 "nask.ll"
return token::_KW_FUCOMPP;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 224 "nask.ll"
return token::_KW_FXAM;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 225 "nask.ll"
return token::_KW_FXCH;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 226 "nask.ll"
return token::_KW_FXTRACT;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 227 "nask.ll"
return token::_KW_FYL2X;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 228 "nask.ll"
return token::_KW_FYL2XP1;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 229 "nask.ll"
return token::_KW_GLOBAL;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 230 "nask.ll"
return token::_KW_GS;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 231 "nask.ll"
return token::_KW_HLT;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 232 "nask.ll"
return token::_KW_IDIV;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 233 "nask.ll"
return token::_KW_IMUL;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 234 "nask.ll"
return token::_KW_IN;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 235 "nask.ll"
return token::_KW_INC;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 236 "nask.ll"
return token::_KW_INCO;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 237 "nask.ll"
return token::_KW_INSB;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 238 "nask.ll"
return token::_KW_INSD;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 239 "nask.ll"
return token::_KW_INSTRSET;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 240 "nask.ll"
return token::_KW_INSW;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 241 "nask.ll"
return token::_KW_INT;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 242 "nask.ll"
return token::_KW_INT3;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 243 "nask.ll"
return token::_KW_INTO;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 244 "nask.ll"
return token::_KW_INVD;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 245 "nask.ll"
return token::_KW_INVLPG;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 246 "nask.ll"
return token::_KW_IRET;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 247 "nask.ll"
return token::_KW_IRETD;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 248 "nask.ll"
return token::_KW_IRETW;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 249 "nask.ll"
return token::_KW_JA;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 250 "nask.ll"
return token::_KW_JAE;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 251 "nask.ll"
return token::_KW_JB;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 252 "nask.ll"
return token::_KW_JBE;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 253 "nask.ll"
return token::_KW_JC;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 254 "nask.ll"
return token::_KW_JCXZ;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 255 "nask.ll"
return token::_KW_JE;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 256 "nask.ll"
return token::_KW_JECXZ;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 257 "nask.ll"
return token::_KW_JG;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 258 "nask.ll"
return token::_KW_JGE;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 259 "nask.ll"
return token::_KW_JL;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 260 "nask.ll"
return token::_KW_JLE;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 261 "nask.ll"
return token::_KW_JMP;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 262 "nask.ll"
return token::_KW_JNA;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 263 "nask.ll"
return token::_KW_JNAE;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 264 "nask.ll"
return token::_KW_JNB;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 265 "nask.ll"
return token::_KW_JNBE;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 266 "nask.ll"
return token::_KW_JNC;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 267 "nask.ll"
return token::_KW_JNE;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 268 "nask.ll"
return token::_KW_JNG;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 269 "nask.ll"
return token::_KW_JNGE;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 270 "nask.ll"
return token::_KW_JNL;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 271 "nask.ll"
return token::_KW_JNLE;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 272 "nask.ll"
return token::_KW_JNO;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 273 "nask.ll"
return token::_KW_JNP;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 274 "nask.ll"
return token::_KW_JNS;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 275 "nask.ll"
return token::_KW_JNZ;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 276 "nask.ll"
return token::_KW_JO;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 277 "nask.ll"
return token::_KW_JP;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 278 "nask.ll"
return token::_KW_JPE;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 279 "nask.ll"
return token::_KW_JPO;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 280 "nask.ll"
return token::_KW_JS;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 281 "nask.ll"
return token::_KW_JZ;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 282 "nask.ll"
return token::_KW_LAHF;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 283 "nask.ll"
return token::_KW_LAR;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 284 "nask.ll"
return token::_KW_LDS;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 285 "nask.ll"
return token::_KW_LEA;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 286 "nask.ll"
return token::_KW_LEAVE;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 287 "nask.ll"
return token::_KW_LES;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 288 "nask.ll"
return token::_KW_LFS;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 289 "nask.ll"
return token::_KW_LGDT;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 290 "nask.ll"
return token::_KW_LGS;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 291 "nask.ll"
return token::_KW_LIDT;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 292 "nask.ll"
return token::_KW_LLDT;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 293 "nask.ll"
return token::_KW_LMSW;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 294 "nask.ll"
return token::_KW_LOCK;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 295 "nask.ll"
return token::_KW_LODSB;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 296 "nask.ll"
return token::_KW_LODSD;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 297 "nask.ll"
return token::_KW_LODSW;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 298 "nask.ll"
return token::_KW_LOOP;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 299 "nask.ll"
return token::_KW_LOOPE;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 300 "nask.ll"
return token::_KW_LOOPNE;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 301 "nask.ll"
return token::_KW_LOOPNZ;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 302 "nask.ll"
return token::_KW_LOOPZ;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 303 "nask.ll"
return token::_KW_LSL;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 304 "nask.ll"
return token::_KW_LSS;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 305 "nask.ll"
return token::_KW_LTR;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 306 "nask.ll"
return token::_KW_MOV;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 307 "nask.ll"
return token::_KW_MOVSB;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 308 "nask.ll"
return token::_KW_MOVSD;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 309 "nask.ll"
return token::_KW_MOVSW;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 310 "nask.ll"
return token::_KW_MOVSX;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 311 "nask.ll"
return token::_KW_MOVZX;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 312 "nask.ll"
return token::_KW_MUL;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 313 "nask.ll"
return token::_KW_NEAR;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 314 "nask.ll"
return token::_KW_NEG;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 315 "nask.ll"
return token::_KW_NOP;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 316 "nask.ll"
return token::_KW_NOT;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 317 "nask.ll"
return token::_KW_OPTIMIZE;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 318 "nask.ll"
return token::_KW_OR;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 319 "nask.ll"
return token::_KW_ORG;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 320 "nask.ll"
return token::_KW_OUT;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 321 "nask.ll"
return token::_KW_OUTSB;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 322 "nask.ll"
return token::_KW_OUTSD;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 323 "nask.ll"
return token::_KW_OUTSW;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 324 "nask.ll"
return token::_KW_PADDING;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 325 "nask.ll"
return token::_KW_PADSET;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 326 "nask.ll"
return token::_KW_POP;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 327 "nask.ll"
return token::_KW_POPA;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 328 "nask.ll"
return token::_KW_POPAD;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 329 "nask.ll"
return token::_KW_POPAW;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 330 "nask.ll"
return token::_KW_POPF;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 331 "nask.ll"
return token::_KW_POPFD;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 332 "nask.ll"
return token::_KW_POPFW;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 333 "nask.ll"
return token::_KW_PUSH;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 334 "nask.ll"
return token::_KW_PUSHA;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 335 "nask.ll"
return token::_KW_PUSHAD;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 336 "nask.ll"
return token::_KW_PUSHAW;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 337 "nask.ll"
return token::_KW_PUSHD;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 338 "nask.ll"
return token::_KW_PUSHF;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 339 "nask.ll"
return token::_KW_PUSHFD;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 340 "nask.ll"
return token::_KW_PUSHFW;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 341 "nask.ll"
return token::_KW_RCL;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 342 "nask.ll"
return token::_KW_RCR;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 343 "nask.ll"
return token::_KW_RDMSR;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 344 "nask.ll"
return token::_KW_RDPMC;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 345 "nask.ll"
return token::_KW_REP;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 346 "nask.ll"
return token::_KW_REPE;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 347 "nask.ll"
return token::_KW_REPNE;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 348 "nask.ll"
return token::_KW_REPNZ;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 349 "nask.ll"
return token::_KW_REPZ;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 350 "nask.ll"
return token::_KW_RESB;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 351 "nask.ll"
return token::_KW_RESD;
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 352 "nask.ll"
return token::_KW_RESQ;
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 353 "nask.ll"
return token::_KW_REST;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 354 "nask.ll"
return token::_KW_RESW;
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 355 "nask.ll"
return token::_KW_RET;
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 356 "nask.ll"
return token::_KW_RETF;
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 357 "nask.ll"
return token::_KW_RETN;
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 358 "nask.ll"
return token::_KW_ROL;
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 359 "nask.ll"
return token::_KW_ROR;
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 360 "nask.ll"
return token::_KW_RSM;
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 361 "nask.ll"
return token::_KW_SAHF;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 362 "nask.ll"
return token::_KW_SAL;
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 363 "nask.ll"
return token::_KW_SAR;
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 364 "nask.ll"
return token::_KW_SBB;
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 365 "nask.ll"
return token::_KW_SCASB;
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 366 "nask.ll"
return token::_KW_SCASD;
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 367 "nask.ll"
return token::_KW_SCASW;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 368 "nask.ll"
return token::_KW_SECTION;
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 369 "nask.ll"
return token::_KW_SETA;
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 370 "nask.ll"
return token::_KW_SETAE;
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 371 "nask.ll"
return token::_KW_SETB;
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 372 "nask.ll"
return token::_KW_SETBE;
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 373 "nask.ll"
return token::_KW_SETC;
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 374 "nask.ll"
return token::_KW_SETE;
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 375 "nask.ll"
return token::_KW_SETG;
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 376 "nask.ll"
return token::_KW_SETGE;
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 377 "nask.ll"
return token::_KW_SETL;
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 378 "nask.ll"
return token::_KW_SETLE;
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 379 "nask.ll"
return token::_KW_SETNA;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 380 "nask.ll"
return token::_KW_SETNAE;
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 381 "nask.ll"
return token::_KW_SETNB;
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 382 "nask.ll"
return token::_KW_SETNBE;
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 383 "nask.ll"
return token::_KW_SETNC;
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 384 "nask.ll"
return token::_KW_SETNE;
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 385 "nask.ll"
return token::_KW_SETNG;
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 386 "nask.ll"
return token::_KW_SETNGE;
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 387 "nask.ll"
return token::_KW_SETNL;
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 388 "nask.ll"
return token::_KW_SETNLE;
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 389 "nask.ll"
return token::_KW_SETNO;
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 390 "nask.ll"
return token::_KW_SETNP;
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 391 "nask.ll"
return token::_KW_SETNS;
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 392 "nask.ll"
return token::_KW_SETNZ;
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 393 "nask.ll"
return token::_KW_SETO;
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 394 "nask.ll"
return token::_KW_SETP;
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 395 "nask.ll"
return token::_KW_SETPE;
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 396 "nask.ll"
return token::_KW_SETPO;
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 397 "nask.ll"
return token::_KW_SETS;
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 398 "nask.ll"
return token::_KW_SETZ;
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 399 "nask.ll"
return token::_KW_SGDT;
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 400 "nask.ll"
return token::_KW_SHL;
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 401 "nask.ll"
return token::_KW_SHLD;
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 402 "nask.ll"
return token::_KW_SHORT;
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 403 "nask.ll"
return token::_KW_SHR;
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 404 "nask.ll"
return token::_KW_SHRD;
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 405 "nask.ll"
return token::_KW_SIDT;
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 406 "nask.ll"
return token::_KW_SLDT;
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 407 "nask.ll"
return token::_KW_SMSW;
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 408 "nask.ll"
return token::_KW_SS;
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 409 "nask.ll"
return token::_KW_STC;
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 410 "nask.ll"
return token::_KW_STD;
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 411 "nask.ll"
return token::_KW_STI;
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 412 "nask.ll"
return token::_KW_STOSB;
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 413 "nask.ll"
return token::_KW_STOSD;
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 414 "nask.ll"
return token::_KW_STOSW;
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 415 "nask.ll"
return token::_KW_STR;
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 416 "nask.ll"
return token::_KW_SUB;
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 417 "nask.ll"
return token::_KW_TEST;
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 418 "nask.ll"
return token::_KW_TIMES;
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 419 "nask.ll"
return token::_KW_UD2;
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 420 "nask.ll"
return token::_KW_VERR;
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 421 "nask.ll"
return token::_KW_VERW;
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 422 "nask.ll"
return token::_KW_WAIT;
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 423 "nask.ll"
return token::_KW_WBINVD;
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 424 "nask.ll"
return token::_KW_WORD;
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 425 "nask.ll"
return token::_KW_WRMSR;
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 426 "nask.ll"
return token::_KW_XADD;
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 427 "nask.ll"
return token::_KW_XCHG;
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 428 "nask.ll"
return token::_KW_XLATB;
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 429 "nask.ll"
return token::_KW_XOR;
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 431 "nask.ll"
BEGIN COMMENT; /* BNFC: block comment "#" "\\n" */
	YY_BREAK
case 356:
/* rule 356 can match eol */
YY_RULE_SETUP
#line 432 "nask.ll"
BEGIN INITIAL;
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 433 "nask.ll"
/* skip */;
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 434 "nask.ll"
BEGIN COMMENT1; /* BNFC: block comment ";" "\\n" */
	YY_BREAK
case 359:
/* rule 359 can match eol */
YY_RULE_SETUP
#line 435 "nask.ll"
BEGIN INITIAL;
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 436 "nask.ll"
/* skip */;
	YY_BREAK
case 361:
/* rule 361 can match eol */
YY_RULE_SETUP
#line 438 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_NaskChar;
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 439 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_Hex;
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 440 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_Id;
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 441 "nask.ll"
LITERAL_BUFFER_CREATE(); BEGIN STRING;
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 442 "nask.ll"
BEGIN ESCAPED;
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 443 "nask.ll"
yylval->emplace<std::string>(LITERAL_BUFFER_HARVEST()); BEGIN INITIAL; return token::_STRING_;
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 444 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR(yytext[0]);
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 445 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\f'); BEGIN STRING;
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 446 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\n'); BEGIN STRING;
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 447 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\r'); BEGIN STRING;
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 448 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\t'); BEGIN STRING;
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 449 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('"');  BEGIN STRING;
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 450 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\\'); BEGIN STRING;
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 451 "nask.ll"
LITERAL_BUFFER_APPEND(yytext);    BEGIN STRING;
	YY_BREAK
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(ESCAPED):
#line 452 "nask.ll"
LITERAL_BUFFER_FREE(); return token::_ERROR_;
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 453 "nask.ll"
yylval->emplace<int>(atoi(yytext)); return token::_INTEGER_;
	YY_BREAK
case 376:
/* rule 376 can match eol */
YY_RULE_SETUP
#line 454 "nask.ll"
/* ignore white space. */;
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 455 "nask.ll"
return token::_ERROR_;
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 457 "nask.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3603 "lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CHAR):
case YY_STATE_EOF(CHARESC):
case YY_STATE_EOF(CHAREND):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(COMMENT1):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 749 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 749 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 748);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 457 "nask.ll"



NaskScanner::NaskScanner(std::istream *in)
    : yyFlexLexer(in)
{
    loc = new nask_::NaskParser::location_type();
}

NaskScanner::~NaskScanner()
{
    delete loc;
    delete yylval;
}

/* This implementation of NaskFlexLexer::yylex() is required to fill the
 * vtable of the class NaskFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */



#ifdef yylex
#undef yylex
#endif

int yyFlexLexer::yylex()
{
    std::cerr << "in yyFlexLexer::yylex() !" << std::endl;
    return 0;
}



