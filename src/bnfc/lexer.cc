#line 2 "lexer.cc"
#include <memory>

#line 5 "lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer nask_FlexLexer

#ifdef yyalloc
#define nask_alloc_ALREADY_DEFINED
#else
#define yyalloc nask_alloc
#endif

#ifdef yyrealloc
#define nask_realloc_ALREADY_DEFINED
#else
#define yyrealloc nask_realloc
#endif

#ifdef yyfree
#define nask_free_ALREADY_DEFINED
#else
#define yyfree nask_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 368
#define YY_END_OF_BUFFER 369
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[733] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  369,  367,  366,  366,
      353,  345,    8,    9,   10,    6,    4,    3,    5,    7,
      364,  364,   11,  348,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,    1,    2,  367,  368,
      356,  355,  354,  363,  361,  362,  357,  358,  359,  360,
      347,  346,  350,  349,  364,    0,  365,  365,    0,  365,
      365,  365,  365,  365,  365,  365,  365,  365,   28,  365,
      365,  365,  365,  365,  365,  365,  365,  365,   51,   52,

      365,  365,   55,   56,   57,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      152,  365,  167,  169,  171,  173,  175,  177,  365,  365,
      194,  195,  198,  199,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      235,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,    0,  351,  352,    0,   12,   13,   14,

       15,  365,   17,   18,  365,   21,  365,  365,  365,   25,
       26,  365,   29,   30,   31,  365,  365,   34,   35,   36,
       37,   38,  365,   40,   41,  365,   47,   49,   50,   53,
       54,  365,   59,  365,   61,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,   97,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  131,  365,  365,  365,  365,  365,
      365,  365,  149,  365,  365,  153,  365,  159,  365,  365,
      168,  170,  365,  365,  176,  178,  179,  180,  182,  184,

      185,  186,  188,  190,  191,  192,  193,  196,  197,  365,
      201,  202,  203,  205,  206,  365,  208,  365,  365,  365,
      365,  365,  365,  221,  222,  223,  224,  230,  231,  232,
      233,  365,  236,  237,  365,  243,  365,  258,  259,  365,
      365,  262,  365,  272,  275,  276,  277,  365,  279,  280,
      281,  365,  365,  365,  365,  317,  319,  365,  365,  365,
      324,  325,  326,  365,  330,  331,  365,  365,  334,  365,
      365,  365,  365,  365,  365,  365,  365,  344,  351,  351,
      365,  365,   22,   23,  365,  365,   32,   33,   39,  365,
      365,  365,   48,  365,  365,  365,  365,   64,   65,   67,

      365,   69,  365,   71,   74,  365,  365,   77,   81,  365,
      365,  365,  365,   88,   89,  365,  365,  365,   93,  365,
       98,  365,  365,  365,  365,  106,  107,  365,  365,  365,
      365,  113,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  128,  365,  365,  365,  134,  365,  136,
      140,  365,  144,  145,  365,  365,  150,  151,  154,  155,
      156,  365,  158,  160,  161,  162,  365,  164,  172,  365,
      181,  183,  187,  189,  200,  365,  207,  209,  210,  211,
      212,  365,  216,  365,  365,  365,  365,  365,  365,  244,
      247,  250,  365,  365,  263,  365,  266,  267,  268,  269,

      270,  271,  273,  274,  278,  365,  365,  286,  288,  290,
      291,  292,  294,  365,  310,  311,  314,  315,  316,  318,
      320,  321,  322,  323,  365,  332,  365,  335,  336,  337,
      365,  339,  365,  341,  342,  365,  365,   19,   24,   27,
       42,   43,   44,  365,   46,   58,   60,  365,   63,   66,
       68,   70,   72,  365,   76,   78,   79,   82,   83,   84,
       86,   90,  365,   92,   94,   95,   99,  365,  365,  365,
      365,  105,  108,  365,  365,  111,  365,  365,  365,  365,
      365,  365,  365,  120,  122,  365,  365,  125,  365,  365,
      365,  130,  132,  365,  135,  137,  138,  141,  365,  147,

      365,  365,  165,  166,  174,  204,  213,  214,  215,  217,
      365,  220,  225,  226,  227,  228,  229,  365,  238,  239,
      240,  365,  365,  245,  246,  248,  249,  251,  254,  255,
      260,  261,  264,  265,  282,  283,  284,  365,  287,  289,
      293,  295,  296,  298,  300,  301,  302,  304,  306,  307,
      308,  309,  312,  313,  327,  328,  329,  333,  365,  340,
      343,  365,   20,  365,   62,   73,  365,   80,   85,   87,
      365,   96,  100,  101,  102,  103,  104,  109,  110,  112,
      114,  115,  365,  117,  118,  119,  121,  365,  124,  126,
      127,  365,  133,  139,  142,  365,  365,  365,  163,  218,

      219,  365,  365,  242,  252,  253,  256,  257,  365,  297,
      299,  303,  305,  338,  365,   45,   75,   91,  116,  123,
      129,  143,  146,  148,  365,  365,  241,  285,   16,  157,
      234,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    7,    8,    1,    9,   10,
       11,   12,   13,   14,   15,    1,   16,   17,   18,   19,
       20,   21,   21,   21,   21,   21,   21,   22,   23,    1,
        1,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,    1,   53,    1,   54,   55,   56,   57,

       58,   59,   60,   60,   60,   60,   60,   60,   60,   61,
       60,   60,   60,   62,   60,   63,   60,   60,   60,   64,
       60,   60,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[65] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3
    } ;

static const flex_int16_t yy_base[741] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   62,   63,
       66,   71,  140,  139,  103,  101,  103, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
       60,   65, 2387, 2387,  114,   78,   66,  147,  126,  175,
       86,  109,  155,  215,  256,  145,  148,  186,  211,  220,
      291,   87,  131,  137,  252,  315, 2387, 2387,   77, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387,  249,  337,    0,   89,   69,  309,
      138,  280,  206,  287,  159,  286,  288,  338,  359,  303,
      364,  360,  350,  388,  395,  361,  321,  365,  128,  175,

      400,  366,  222,  250,  394,  403,  414,  418,  415,  420,
      429,  419,  444,  426,  434,  443,  446,  465,  468,  475,
      477,  480,  499,  482,  489,  504,  510,  524,  526,  527,
      531,  251,  528,  532,  542,  543,  550,  553,  546,  581,
      483,  570,  561,  571,  573,  575,  591,  579,  609,  613,
      615,  590,  617,  619,  616,  625,  636,  637,  640,  641,
      643,  644,  647,  655,  659,  663,  666,  667,  673,  671,
      681,  702,  691,  708,  669,  709,  710,  711,  714,  720,
      732,  717,  726,  744,  746,  751,  756,  755,  758,  762,
      760,  776,  770,   72,   82, 2387,   89,  677,  777,  781,

      784,  786,  788,  792,  793,  795,  796,  798,  800,  803,
      804,  810,  807,  819,  821,  824,  826,  827,  829,  833,
      835,  836,  838,  841,  844,  845,  847,  850,  856,  859,
      861,  862,  865,  867,  870,  876,  879,  884,  885,  887,
      888,  891,  896,  899,  908,  907,  910,  916,  918,  928,
      914,  934,  938,  942,  945,  968,  948,  949,  963,  954,
      956,  970,  978,  988,  989,  990,  992, 1004,  997, 1006,
     1011, 1014, 1016, 1020, 1021, 1030, 1028, 1032, 1036, 1037,
     1047, 1055, 1053, 1056, 1057, 1058, 1064, 1073, 1078, 1072,
     1075, 1076, 1081, 1090, 1095, 1097, 1099, 1100, 1105, 1107,

     1109, 1114, 1116, 1117, 1123, 1125, 1126, 1131, 1132, 1134,
     1137, 1140, 1142, 1143, 1146, 1148, 1149, 1151, 1152, 1157,
     1158, 1160, 1166, 1163, 1167, 1168, 1174, 1175, 1177, 1184,
     1189, 1192, 1191, 1195, 1198, 1206, 1200, 1199, 1210, 1217,
     1220, 1224, 1235, 1229, 1225, 1227, 1232, 1241, 1246, 1255,
     1258, 1260, 1262, 1282, 1270, 1263, 1267, 1279, 1282, 1265,
     1274, 1277, 1294, 1305, 1306, 1314, 1317, 1320, 1321, 1323,
     1324, 1328, 1329, 1331, 1332, 1340, 1335, 1346, 2387,   63,
     1349, 1352, 1354, 1357, 1363, 1366, 1371, 1372, 1373, 1374,
     1378, 1388, 1389, 1394, 1397, 1400, 1405, 1403, 1404, 1408,

     1409, 1415, 1420, 1423, 1424, 1427, 1425, 1431, 1430, 1446,
     1449, 1441, 1442, 1451, 1456, 1457, 1466, 1471, 1472, 1473,
     1474, 1475, 1480, 1482, 1477, 1481, 1491, 1496, 1498, 1501,
     1506, 1507, 1513, 1517, 1522, 1525, 1528, 1532, 1533, 1539,
     1544, 1548, 1551, 1553, 1554, 1558, 1559, 1562, 1565, 1569,
     1573, 1576, 1577, 1579, 1583, 1580, 1584, 1591, 1594, 1600,
     1606, 1608, 1609, 1610, 1611, 1612, 1614, 1615, 1616, 1617,
     1626, 1632, 1634, 1635, 1636, 1637, 1638, 1641, 1642, 1646,
     1653, 1658, 1660, 1664, 1665, 1662, 1668, 1670, 1672, 1694,
     1696, 1698, 1697, 1704, 1706, 1715, 1722, 1723, 1724, 1725,

     1726, 1727, 1730, 1732, 1741, 1744, 1746, 1748, 1751, 1750,
     1752, 1753, 1758, 1767, 1774, 1776, 1778, 1779, 1785, 1790,
     1799, 1801, 1802, 1804, 1806, 1808, 1813, 1810, 1816, 1818,
     1820, 1825, 1827, 1828, 1832, 1834, 1835, 1836, 1842, 1844,
     1851, 1853, 1854, 1858, 1860, 1861, 1862, 1863, 1865, 1868,
     1869, 1872, 1877, 1879, 1883, 1884, 1886, 1887, 1888, 1889,
     1893, 1895, 1898, 1904, 1905, 1909, 1910, 1914, 1915, 1920,
     1926, 1924, 1929, 1931, 1935, 1938, 1940, 1943, 1946, 1947,
     1952, 1954, 1957, 1955, 1963, 1966, 1971, 1973, 1977, 1978,
     1980, 1982, 1987, 1997, 1998, 1999, 2001, 2002, 2004, 2006,

     2007, 2013, 2016, 2022, 2024, 2025, 2028, 2030, 2039, 2042,
     2044, 2045, 2046, 2047, 2048, 2049, 2051, 2053, 2054, 2056,
     2065, 2068, 2070, 2072, 2073, 2074, 2075, 2077, 2079, 2080,
     2089, 2094, 2097, 2099, 2100, 2103, 2105, 2106, 2108, 2109,
     2111, 2115, 2120, 2123, 2125, 2127, 2130, 2131, 2132, 2134,
     2141, 2146, 2148, 2151, 2152, 2153, 2155, 2156, 2157, 2158,
     2160, 2163, 2167, 2172, 2174, 2177, 2178, 2179, 2181, 2182,
     2183, 2186, 2188, 2189, 2198, 2203, 2204, 2205, 2206, 2207,
     2209, 2210, 2212, 2214, 2215, 2221, 2224, 2226, 2229, 2230,
     2231, 2232, 2233, 2236, 2238, 2240, 2241, 2256, 2257, 2258,

     2259, 2263, 2264, 2266, 2267, 2273, 2278, 2281, 2282, 2283,
     2284, 2287, 2288, 2289, 2292, 2293, 2299, 2304, 2307, 2308,
     2309, 2313, 2314, 2315, 2316, 2318, 2319, 2323, 2325, 2330,
     2333, 2387, 2359, 2363, 2367, 2371, 2375, 2378, 2380, 2383
    } ;

static const flex_int16_t yy_def[741] =
    {   0,
      732,    1,  733,  733,  733,  733,  733,  733,  734,  734,
      735,  735,  736,  736,  737,  737,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  738,  738,  738,  738,  738,   37,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  732,  732,  739,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  740,  738,  732,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  739,   76,  732,  732,  738,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  140,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  732,  732,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  140,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,    0,  732,  732,  732,  732,  732,  732,  732,  732
    } ;

static const flex_int16_t yy_nxt[2452] =
    {   0,
       18,   19,   20,   19,   21,   22,   18,   23,   18,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   32,   32,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   41,   45,   46,   47,   48,   49,   41,
       50,   51,   52,   53,   54,   55,   56,   41,   41,   57,
       18,   58,   59,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   60,   60,   62,   62,   60,  379,
       65,  196,  197,   60,   77,   65,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   77,   79,  379,   91,
       92,  196,   93,   79,   77,   77,  380,   77,   79,   79,

       94,   95,  732,   74,   96,   74,   76,   79,   79,   86,
       79,   97,   63,   63,  182,   87,   66,   77,  183,   88,
       89,   66,   77,   76,   67,   90,   68,   69,   70,   67,
       79,   68,   69,   70,   77,   79,   77,   80,   81,   77,
       82,   72,   72,  128,  732,   77,   77,   79,   83,   79,
       84,  732,   79,   77,   85,   77,   77,  184,   79,   79,
      732,  732,  106,   77,  185,  107,   79,   77,   79,   79,
       98,   99,  108,  100,  101,  158,   79,  732,  102,  202,
       79,  129,  156,   77,  732,  159,  103,  732,  157,  104,
      130,  131,  105,  109,   77,  132,   79,  207,  110,  111,

      112,  113,  114,  115,  732,  732,  116,   79,  732,  117,
      118,  119,  120,  121,   77,  122,  123,  124,  125,   77,
       78,  126,  127,   77,  160,  732,  161,   79,   77,  162,
       77,  732,   79,  732,  163,  732,   79,  205,  133,  134,
      135,   79,  136,   79,  137,  166,  167,  168,  164,  138,
      139,  140,  141,  142,  165,  732,  143,  169,   77,   77,
       77,  170,  732,  144,   77,   75,   75,   75,   75,   75,
      732,   79,   79,   79,  732,  186,  187,   79,  290,  145,
      732,  732,  146,  147,  148,  149,  732,  150,   77,  188,
      151,  152,  189,  153,   77,   77,   77,  154,  155,   77,

      732,   79,  732,  732,  732,  203,  204,   79,   79,   79,
      732,   77,   79,  206,  171,  172,  173,   77,  174,  732,
      175,  176,  177,   77,   79,  178,  179,  732,  208,   77,
       79,  209,  198,  180,  181,  199,   79,  732,  190,  732,
      191,  732,   79,  732,  200,  216,   77,  227,  732,  192,
      201,  732,  193,  195,  195,  195,  195,  195,   77,   79,
      195,  195,  195,  195,  195,  195,  210,   77,   77,   77,
      732,   79,   77,   77,   77,  732,  732,  732,  211,  732,
       79,   79,   79,  212,  213,   79,   79,   79,  228,  219,
      195,  195,  195,  195,  195,  195,   77,  732,  217,  214,

      215,  732,   77,   77,  226,  218,  229,  732,   77,   79,
      231,   77,  732,  220,  221,   79,   79,  732,  732,  222,
      224,   79,   77,   77,   79,  230,   77,   77,   77,  233,
      223,  232,  732,  225,   77,   79,   79,   77,  732,   79,
       79,   79,   77,  732,  238,  234,  239,   79,  732,  242,
       79,   77,   77,  243,   77,   79,  244,  235,  732,  732,
      236,  237,  247,  240,   79,   79,  249,   79,  250,  251,
      241,  245,  256,   77,  248,  246,   77,  252,  253,  254,
      732,  732,  732,   77,  255,   77,   79,  732,   77,   79,
       77,   77,  732,  258,  259,  260,   79,   77,   79,  261,

      265,   79,  732,   79,   79,  262,  732,   77,  257,  263,
       79,  732,   77,  732,  278,  264,  268,  266,   77,  267,
       79,  269,  270,  277,  271,   79,  272,  279,  732,  280,
      273,   79,   77,  732,   77,   77,   77,  732,  274,   77,
       77,  275,  276,  732,  282,   79,  281,   79,   79,   79,
       77,   77,   79,   79,   77,  291,  286,  284,   77,  292,
      732,   77,  732,   79,   79,  732,  283,   79,  294,   77,
      285,   79,  287,  288,   79,  289,  732,  295,   77,   77,
      296,   77,   79,   77,  297,  732,  732,   77,  293,   77,
      732,   79,   79,  732,   79,  732,   79,  308,   77,   77,

       79,  732,   79,  310,  298,  299,  300,  309,  301,  732,
      302,   79,   79,  311,  313,  303,  312,   77,  304,  305,
      315,   77,  306,   77,   77,   77,  732,   77,  732,  307,
       79,  320,  314,   77,   79,  316,   79,   79,   79,  318,
       79,  319,  321,  322,   77,   77,   79,  732,   77,   77,
      317,   77,   77,  324,  323,   77,  326,   79,   79,  732,
      325,   79,   79,   77,   79,   79,  329,   77,   79,  327,
      328,   77,  333,  335,   77,   77,   79,   77,  330,   77,
       79,   77,  331,  332,   79,   77,  334,   79,   79,   77,
       79,  732,   79,  336,   79,  355,  732,  338,   79,   77,

      337,  340,   79,  339,  341,  342,  347,  345,  343,  344,
       77,  348,   79,  346,  352,  349,   77,   77,   77,   77,
      732,  350,   77,   79,  732,   77,  351,  732,   77,   79,
       79,   79,   79,  353,   77,   79,  358,  359,   79,  732,
       77,   79,  732,  356,  732,  361,  362,   79,  732,  357,
      354,  363,   77,   79,   77,  360,  366,  364,  367,   77,
      365,  368,  369,   77,   77,   79,   77,   79,   77,  732,
       77,  732,   79,  732,  732,  732,   79,   79,   77,   79,
      732,   79,  371,   79,   77,   77,  370,  372,  375,   77,
      376,   79,   77,  374,   77,  373,   77,   79,   79,  377,

       77,   77,   79,   77,   77,   79,   77,   79,   77,   79,
      378,   77,   77,   79,   79,   77,   79,   79,   77,   79,
      732,   79,  382,  381,   79,   79,  732,   77,   79,   77,
      383,   79,   77,  386,   77,   77,  385,   77,  732,  384,
       79,   77,   79,   77,   77,   79,   77,   79,   79,   77,
       79,  387,   77,   77,   79,   77,   79,   79,   77,   79,
      388,  732,   79,  732,   77,   79,   79,   77,   79,   77,
       77,   79,  732,   77,  393,   77,  392,   79,   77,  389,
       79,  732,   79,   79,   77,  390,   79,   77,   79,  732,
      391,   79,   77,   77,  395,   77,   77,   79,  732,   77,

       79,  732,  394,  396,   77,   79,   79,   77,   79,   79,
      732,  399,   79,  400,  397,   77,   77,   79,   77,  732,
       79,  732,   77,  403,   77,  398,   77,  732,   79,   79,
      401,   79,  402,  406,  404,   79,   77,   79,  732,   79,
      405,  409,   77,  410,  411,  413,   77,  732,  407,   79,
       77,  408,  732,   77,  732,   79,   77,   77,  732,   79,
      414,  415,   77,   79,   77,  412,   79,  417,  732,   79,
       79,   77,  732,  418,  732,   79,   77,   79,   77,  732,
      732,  416,  427,  428,   79,  421,   77,  419,  420,   79,
      430,   79,  431,  422,  429,  423,   77,   77,   77,   79,

       77,  433,  424,  732,  732,   77,  425,  732,  432,   79,
       79,   79,   77,   79,   77,  438,  426,  437,   79,   77,
      434,  732,   77,  435,   77,   79,  732,   79,   77,   77,
      439,  436,   79,  732,  442,   79,   77,   79,   77,  440,
       77,   79,   79,  732,   77,   77,  446,  732,  447,   79,
      441,   79,  444,   79,  450,   77,  443,   79,   79,  448,
      445,   77,  449,   77,   77,   77,   77,  454,   79,  452,
      451,  453,   77,  456,   79,  732,   79,   79,   79,   79,
       77,   77,  732,   77,   77,   79,   77,  455,  460,   77,
      461,  458,  464,   79,   79,  459,   79,   79,   77,   79,

      457,  732,   79,   77,  466,   77,  462,   77,   77,  463,
      465,   79,  467,   77,  468,   77,   79,   77,   79,  732,
       79,   79,   77,  732,   77,   77,   79,  471,   79,  469,
       79,   77,  472,   77,   77,   79,  470,   79,   79,   77,
       77,  473,   77,  474,   79,   77,   79,   79,   77,  732,
       77,   77,   79,   79,   77,   79,   77,   77,   79,   77,
       77,   79,  475,   79,   79,   77,   77,   79,   77,   79,
       79,   77,   79,   79,   77,   77,   77,  732,   79,   79,
      732,   79,   77,   77,   79,   77,  476,   79,   79,   79,
      477,  481,   77,  478,  479,   79,   79,   77,   79,   77,

       77,  482,  480,   77,  483,   79,   77,   77,   77,  732,
       79,  732,   79,   79,   77,  484,   79,  732,   77,   79,
       79,   79,  485,  486,  488,   77,  732,   79,   77,  490,
      492,   79,   77,   77,  491,   77,  487,   77,   79,  489,
       77,   79,  732,   77,  732,   79,   79,  732,   79,   77,
       79,  495,  732,   79,   77,  494,   79,  503,  493,  498,
      496,  499,   79,   77,  732,  504,   77,   79,   77,  505,
       77,   77,  497,   77,  500,   77,   79,  501,   77,   79,
      502,   79,   77,   79,   79,   77,   79,   77,   79,  520,
       77,   79,  732,  521,  732,   79,  732,  732,   79,  732,

       79,  506,   77,   79,  507,  508,  509,  510,  732,  511,
      524,  512,  519,   77,   77,   79,  513,  732,  514,  515,
      516,  522,   77,  517,  523,   77,   79,   79,   77,   77,
      518,   77,   77,  732,  732,   79,   77,   77,   79,   77,
       77,   79,   79,   77,   79,   79,  525,  527,   77,   79,
       79,  732,   79,   79,   77,  532,   79,   77,  534,  526,
       77,   79,   77,  528,  531,   77,  530,   79,  529,  535,
       79,   77,  533,   79,   77,   79,  732,  536,   79,   77,
       77,   77,   77,  537,   79,  732,   77,   79,  538,  539,
      732,  732,   79,   79,   79,   79,   77,   77,  541,   79,

      542,  732,   77,  544,  540,   77,  732,  732,   77,   79,
       79,   77,   77,   77,  545,   79,   77,   77,   79,  543,
      546,   79,  549,   77,   79,   79,   79,  732,   77,   79,
       79,   77,   77,   77,  732,   77,   79,  547,   77,   77,
      548,   79,  550,  732,   79,   79,   79,  551,   79,   77,
       77,   79,   79,  732,   77,  732,  555,   77,  732,   77,
      732,  553,   79,   79,   77,   77,  552,   79,  554,  556,
       79,  557,   79,  558,   77,  559,  560,   79,   79,   77,
       77,   77,   77,   77,  732,   77,  561,   79,   77,   77,
       77,  562,   79,   79,   79,   79,   79,  566,   79,   77,

      569,   79,   79,   79,   77,  732,   77,  563,  572,   77,
      565,  570,   79,  564,   77,   77,  568,   79,  571,   79,
      567,   77,   79,  574,  732,   77,  732,   79,   79,  573,
       77,  732,  576,   77,   79,  732,   77,  577,   79,  575,
       77,   77,  579,   79,  580,  582,   79,   77,  583,   79,
      732,  732,   77,   79,   79,  732,   77,  578,  581,   77,
       79,   77,   77,  584,  586,   79,   77,   77,  585,   79,
       77,  588,   79,   77,   79,   79,  587,   77,  591,   79,
       79,   77,  589,   79,   77,   77,   79,   77,   77,  590,
       79,   77,   77,  732,   79,  594,  592,   79,   79,   77,

       79,   79,   77,  593,   79,   79,  599,  596,   77,  597,
      595,  598,   79,  732,   77,   79,   77,   77,   77,   77,
       77,   79,   77,   77,   77,   77,  600,   79,  732,   79,
       79,   79,   79,   79,   77,   79,   79,   79,   79,  732,
       77,  603,   77,   77,   77,   77,   77,   79,  601,   77,
       77,  732,  602,   79,   77,   79,   79,   79,   79,   79,
      604,   77,   79,   79,  606,  605,   77,   79,   77,  732,
       77,  732,   77,   77,   79,  732,   77,  732,   77,   79,
       77,   79,  607,   79,  608,   79,   79,  610,  613,   79,
      614,   79,  619,   79,  620,  732,  611,  618,  732,  623,

      732,  622,   77,  609,   77,   77,   77,  732,  612,  615,
      616,  617,   77,  621,   77,   79,  732,   79,   79,   79,
      624,  628,  626,   77,  629,   79,  630,   79,  732,  632,
       77,   77,   77,   77,   77,   77,   79,  631,   77,  625,
       77,  627,  633,   79,   79,   79,   79,   79,   79,   77,
      732,   79,   77,   79,   77,  732,   77,  732,   77,   77,
       77,   77,   79,  634,  732,   79,   77,   79,  635,   79,
      636,   79,   79,   79,   79,  639,  732,  638,  640,   79,
      641,  732,   77,  732,   77,  642,   77,   77,  732,  637,
      643,  644,  645,   77,  646,   79,  647,   79,   77,   79,

       79,  648,  732,  653,  649,  650,   79,   77,  651,   77,
       77,   79,   77,  654,   77,  652,   77,  732,   77,  732,
       79,   77,   79,   79,   77,   79,   77,   79,   77,   79,
      655,   79,  656,   77,   79,   77,   77,   79,  732,   79,
       77,   79,   77,   77,   77,  732,   79,  732,   79,   79,
       77,  657,   77,   79,  658,   79,   79,   79,  661,   77,
      663,   77,   77,   79,  659,   79,   77,  660,   77,   77,
       77,   77,   79,   77,   79,   79,   77,   77,  662,   79,
       77,   79,   79,   79,   79,   77,   79,   77,  664,   79,
       79,   77,   77,   79,   77,   77,   77,   77,   79,  665,

       79,   77,  732,   77,   79,   79,   77,   79,   79,   79,
       79,  732,   77,   77,   79,  666,   79,   77,   77,   79,
      732,  667,   77,   77,  668,   79,   79,  669,   77,  732,
       79,   79,   77,  670,   77,   79,   79,   77,  676,   77,
      671,   79,  674,   77,  677,   79,   77,   79,   77,  672,
       79,   77,   79,  732,   77,   77,   79,  675,  673,   79,
       77,   79,   77,   77,   79,   77,  679,   79,   79,  732,
      681,   77,  687,   79,   77,   79,   79,  678,   79,   77,
      732,   77,  680,  683,   79,   77,   77,   79,   77,  732,
       77,  682,   79,  686,   79,   77,  685,  684,   79,   79,

      732,   79,  688,   79,  690,   77,   77,   77,   79,   77,
       77,  689,   77,  691,   77,   77,  732,  692,   79,   79,
       79,   77,   79,   79,   77,   79,  732,   79,   79,  696,
       77,  732,   77,   77,   79,  732,   77,   79,   77,  694,
      695,  693,  699,   79,  697,   79,   79,   77,  698,   79,
       77,   79,   77,   77,   77,   77,   77,   77,  732,   77,
       79,   77,   77,   79,   77,   79,   79,   79,   79,   79,
       79,  700,   79,   77,   79,   79,   77,   79,   77,  732,
       77,   77,   77,   77,  702,   77,   79,   77,   77,   79,
      732,   79,  701,   79,   79,   79,   79,   77,   79,  732,

       79,   79,   77,  705,  703,   77,  707,   77,   77,  732,
       79,   77,  704,   77,   77,   79,   77,   77,   79,   77,
       79,   79,  706,   77,   79,  708,   79,   79,   77,   79,
       79,   77,   79,   77,  732,   77,   79,  732,   77,   77,
       77,   79,   77,  709,   79,  732,   79,  710,   79,   77,
      711,   79,   79,   79,   77,   79,   77,  712,  713,   77,
       77,   77,   79,   77,   77,   77,   77,   79,   77,   79,
      732,   77,   79,   79,   79,   77,   79,   79,   79,   79,
       77,   79,   77,  714,   79,   77,   77,   77,   79,   77,
       77,   77,  732,   79,   77,   79,   77,   77,   79,   79,

       79,  716,   79,   79,   79,  715,   77,   79,  732,   79,
       79,   77,   77,   77,   77,   77,  717,   77,   77,   79,
       77,  718,   77,   77,   79,   79,   79,   79,   79,   77,
       79,   79,   77,   79,   77,   79,   79,   77,   77,   77,
       77,   77,   79,  732,   77,   79,   77,   79,   77,   77,
       79,   79,   79,   79,   79,  732,  719,   79,  724,   79,
      732,   79,   79,  732,   77,   77,   77,   77,  720,  732,
      732,   77,   77,  721,   77,   77,  722,   79,   79,   79,
       79,   77,  723,  725,   79,   79,   77,   79,   79,   77,
       77,   77,   77,  727,   79,   77,   77,   77,  732,   79,

       77,   77,   79,   79,   79,   79,  732,   77,   79,   79,
       79,  726,   77,   79,   79,   77,   77,   77,  728,  729,
       79,   77,   77,   77,   77,   79,   77,   77,   79,   79,
       79,   77,  732,   77,   79,   79,   79,   79,   77,   79,
       79,   77,  732,  732,   79,  731,   79,  732,  732,  732,
      732,   79,  732,  732,   79,  732,  732,  732,  730,   60,
       60,   60,   60,   61,   61,   61,   61,   64,   64,   64,
       64,   71,   71,   71,   71,   73,   73,   73,   73,   78,
       78,   78,  194,  194,   77,   77,   17,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,

      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732
    } ;

static const flex_int16_t yy_chk[2452] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    9,   10,    9,   10,   11,  380,
       11,   79,   79,   12,   37,   12,   31,   31,   31,   31,
       31,   32,   32,   32,   32,   32,   36,   37,  195,   37,
       37,  197,   37,  194,   41,   52,  195,   78,   59,   36,

       37,   37,   17,   16,   37,   15,   31,   41,   52,   36,
       78,   37,    9,   10,   52,   36,   11,   42,   52,   36,
       36,   12,   35,   31,   11,   36,   11,   11,   11,   12,
       42,   12,   12,   12,   39,   35,   99,   35,   35,   53,
       35,   14,   13,   42,    0,   54,   81,   39,   35,   99,
       35,    0,   53,   46,   35,   38,   47,   53,   54,   81,
        0,    0,   39,   43,   54,   39,   46,   85,   38,   47,
       38,   38,   39,   38,   38,   47,   43,    0,   38,   81,
       85,   43,   46,  100,    0,   47,   38,    0,   46,   38,
       43,   43,   38,   40,   48,   43,  100,   85,   40,   40,

       40,   40,   40,   40,    0,    0,   40,   48,    0,   40,
       40,   40,   40,   40,   83,   40,   40,   40,   40,   49,
       40,   40,   40,   44,   48,    0,   48,   83,   50,   48,
      103,    0,   49,    0,   49,    0,   44,   83,   44,   44,
       44,   50,   44,  103,   44,   50,   50,   50,   49,   44,
       44,   44,   44,   44,   49,    0,   44,   50,  104,  132,
       55,   50,    0,   44,   45,   75,   75,   75,   75,   75,
        0,  104,  132,   55,    0,   55,   55,   45,  132,   45,
        0,    0,   45,   45,   45,   45,    0,   45,   82,   55,
       45,   45,   55,   45,   86,   84,   87,   45,   45,   51,

        0,   82,    0,    0,    0,   82,   82,   86,   84,   87,
        0,   90,   51,   84,   51,   51,   51,   80,   51,    0,
       51,   51,   51,   56,   90,   51,   51,    0,   86,   97,
       80,   87,   80,   51,   51,   80,   56,    0,   56,    0,
       56,    0,   97,    0,   80,   90,   88,   97,    0,   56,
       80,    0,   56,   76,   76,   76,   76,   76,   93,   88,
       76,   76,   76,   76,   76,   76,   88,   89,   92,   96,
        0,   93,   91,   98,  102,    0,    0,    0,   88,    0,
       89,   92,   96,   88,   89,   91,   98,  102,   98,   93,
       76,   76,   76,   76,   76,   76,   94,    0,   91,   89,

       89,    0,  105,   95,   96,   92,   98,    0,  101,   94,
      102,  106,    0,   94,   94,  105,   95,    0,    0,   94,
       95,  101,  107,  109,  106,  101,  108,  112,  110,  106,
       94,  105,    0,   95,  114,  107,  109,  111,    0,  108,
      112,  110,  115,    0,  110,  106,  110,  114,    0,  112,
      111,  116,  113,  112,  117,  115,  112,  107,    0,    0,
      108,  109,  114,  111,  116,  113,  116,  117,  116,  116,
      111,  113,  117,  118,  115,  113,  119,  116,  116,  116,
        0,    0,    0,  120,  116,  121,  118,    0,  122,  119,
      124,  141,    0,  119,  119,  119,  120,  125,  121,  119,

      121,  122,    0,  124,  141,  119,    0,  123,  118,  119,
      125,    0,  126,    0,  125,  120,  122,  121,  127,  121,
      123,  122,  123,  124,  123,  126,  123,  126,    0,  126,
      123,  127,  128,    0,  129,  130,  133,    0,  123,  131,
      134,  123,  123,    0,  127,  128,  126,  129,  130,  133,
      135,  136,  131,  134,  139,  133,  131,  129,  137,  134,
        0,  138,    0,  135,  136,    0,  128,  139,  136,  143,
      130,  137,  131,  131,  138,  131,    0,  137,  142,  144,
      138,  145,  143,  146,  139,    0,    0,  148,  135,  140,
        0,  142,  144,    0,  145,    0,  146,  142,  152,  147,

      148,    0,  140,  145,  140,  140,  140,  142,  140,    0,
      140,  152,  147,  145,  147,  140,  146,  149,  140,  140,
      148,  150,  140,  151,  155,  153,    0,  154,    0,  140,
      149,  152,  147,  156,  150,  149,  151,  155,  153,  150,
      154,  151,  153,  153,  157,  158,  156,    0,  159,  160,
      149,  161,  162,  154,  153,  163,  155,  157,  158,    0,
      154,  159,  160,  164,  161,  162,  158,  165,  163,  156,
      157,  166,  161,  163,  167,  168,  164,  175,  159,  170,
      165,  169,  159,  160,  166,  198,  162,  167,  168,  171,
      175,    0,  170,  164,  169,  175,    0,  166,  198,  173,

      165,  167,  171,  166,  167,  168,  170,  169,  168,  168,
      172,  171,  173,  169,  173,  171,  174,  176,  177,  178,
        0,  171,  179,  172,    0,  182,  172,    0,  180,  174,
      176,  177,  178,  174,  183,  179,  177,  178,  182,    0,
      181,  180,    0,  176,    0,  180,  180,  183,    0,  176,
      174,  180,  184,  181,  185,  179,  181,  180,  182,  186,
      180,  183,  184,  188,  187,  184,  189,  185,  191,    0,
      190,    0,  186,    0,    0,    0,  188,  187,  193,  189,
        0,  191,  186,  190,  192,  199,  185,  187,  190,  200,
      191,  193,  201,  189,  202,  188,  203,  192,  199,  192,

      204,  205,  200,  206,  207,  201,  208,  202,  209,  203,
      193,  210,  211,  204,  205,  213,  206,  207,  212,  208,
        0,  209,  205,  202,  210,  211,    0,  214,  213,  215,
      207,  212,  216,  212,  217,  218,  209,  219,    0,  208,
      214,  220,  215,  221,  222,  216,  223,  217,  218,  224,
      219,  216,  225,  226,  220,  227,  221,  222,  228,  223,
      217,    0,  224,    0,  229,  225,  226,  230,  227,  231,
      232,  228,    0,  233,  227,  234,  226,  229,  235,  223,
      230,    0,  231,  232,  236,  225,  233,  237,  234,    0,
      225,  235,  238,  239,  234,  240,  241,  236,    0,  242,

      237,    0,  232,  236,  243,  238,  239,  244,  240,  241,
        0,  239,  242,  240,  237,  246,  245,  243,  247,    0,
      244,    0,  251,  243,  248,  238,  249,    0,  246,  245,
      241,  247,  242,  245,  244,  251,  250,  248,    0,  249,
      244,  247,  252,  248,  249,  251,  253,    0,  246,  250,
      254,  246,    0,  255,    0,  252,  257,  258,    0,  253,
      252,  252,  260,  254,  261,  250,  255,  254,    0,  257,
      258,  259,    0,  254,    0,  260,  256,  261,  262,    0,
        0,  253,  257,  258,  259,  256,  263,  255,  255,  256,
      260,  262,  261,  256,  259,  256,  264,  265,  266,  263,

      267,  263,  256,    0,    0,  269,  256,    0,  262,  264,
      265,  266,  268,  267,  270,  267,  256,  266,  269,  271,
      263,    0,  272,  264,  273,  268,    0,  270,  274,  275,
      268,  265,  271,    0,  271,  272,  277,  273,  276,  269,
      278,  274,  275,    0,  279,  280,  275,    0,  275,  277,
      270,  276,  273,  278,  276,  281,  272,  279,  280,  275,
      274,  283,  275,  282,  284,  285,  286,  280,  281,  278,
      277,  279,  287,  282,  283,    0,  282,  284,  285,  286,
      290,  288,    0,  291,  292,  287,  289,  281,  287,  293,
      287,  285,  288,  290,  288,  286,  291,  292,  294,  289,

      284,    0,  293,  295,  289,  296,  287,  297,  298,  287,
      288,  294,  289,  299,  290,  300,  295,  301,  296,    0,
      297,  298,  302,    0,  303,  304,  299,  298,  300,  293,
      301,  305,  299,  306,  307,  302,  294,  303,  304,  308,
      309,  302,  310,  303,  305,  311,  306,  307,  312,    0,
      313,  314,  308,  309,  315,  310,  316,  317,  311,  318,
      319,  312,  310,  313,  314,  320,  321,  315,  322,  316,
      317,  324,  318,  319,  323,  325,  326,    0,  320,  321,
        0,  322,  327,  328,  324,  329,  313,  323,  325,  326,
      316,  321,  330,  318,  319,  327,  328,  331,  329,  333,

      332,  322,  320,  334,  323,  330,  335,  338,  337,    0,
      331,    0,  333,  332,  336,  327,  334,    0,  339,  335,
      338,  337,  327,  332,  335,  340,    0,  336,  341,  336,
      337,  339,  342,  345,  336,  346,  334,  344,  340,  335,
      347,  341,    0,  343,    0,  342,  345,    0,  346,  348,
      344,  342,    0,  347,  349,  341,  343,  344,  340,  343,
      342,  343,  348,  350,    0,  344,  351,  349,  352,  348,
      353,  356,  342,  360,  343,  357,  350,  343,  355,  351,
      343,  352,  361,  353,  356,  362,  360,  358,  357,  356,
      359,  355,    0,  357,    0,  361,    0,    0,  362,    0,

      358,  352,  363,  359,  353,  354,  354,  354,    0,  354,
      360,  354,  355,  364,  365,  363,  354,    0,  354,  354,
      354,  358,  366,  354,  359,  367,  364,  365,  368,  369,
      354,  370,  371,    0,    0,  366,  372,  373,  367,  374,
      375,  368,  369,  377,  370,  371,  364,  368,  376,  372,
      373,    0,  374,  375,  378,  373,  377,  381,  375,  367,
      382,  376,  383,  370,  372,  384,  371,  378,  370,  376,
      381,  385,  374,  382,  386,  383,    0,  377,  384,  387,
      388,  389,  390,  381,  385,    0,  391,  386,  382,  385,
        0,    0,  387,  388,  389,  390,  392,  393,  390,  391,

      390,    0,  394,  391,  386,  395,    0,    0,  396,  392,
      393,  398,  399,  397,  392,  394,  400,  401,  395,  390,
      394,  396,  397,  402,  398,  399,  397,    0,  403,  400,
      401,  404,  405,  407,    0,  406,  402,  395,  409,  408,
      396,  403,  399,    0,  404,  405,  407,  401,  406,  412,
      413,  409,  408,    0,  410,    0,  407,  411,    0,  414,
        0,  404,  412,  413,  415,  416,  403,  410,  406,  408,
      411,  408,  414,  410,  417,  411,  412,  415,  416,  418,
      419,  420,  421,  422,    0,  425,  413,  417,  423,  426,
      424,  416,  418,  419,  420,  421,  422,  420,  425,  427,

      424,  423,  426,  424,  428,    0,  429,  417,  425,  430,
      419,  424,  427,  418,  431,  432,  423,  428,  424,  429,
      422,  433,  430,  428,    0,  434,    0,  431,  432,  427,
      435,    0,  430,  436,  433,    0,  437,  431,  434,  429,
      438,  439,  434,  435,  434,  435,  436,  440,  436,  437,
        0,    0,  441,  438,  439,    0,  442,  433,  434,  443,
      440,  444,  445,  437,  439,  441,  446,  447,  438,  442,
      448,  441,  443,  449,  444,  445,  440,  450,  444,  446,
      447,  451,  442,  448,  452,  453,  449,  454,  456,  443,
      450,  455,  457,    0,  451,  447,  445,  452,  453,  458,

      454,  456,  459,  446,  455,  457,  455,  450,  460,  450,
      449,  452,  458,    0,  461,  459,  462,  463,  464,  465,
      466,  460,  467,  468,  469,  470,  456,  461,    0,  462,
      463,  464,  465,  466,  471,  467,  468,  469,  470,    0,
      472,  468,  473,  474,  475,  476,  477,  471,  462,  478,
      479,    0,  467,  472,  480,  473,  474,  475,  476,  477,
      468,  481,  478,  479,  476,  470,  482,  480,  483,    0,
      486,    0,  484,  485,  481,    0,  487,    0,  488,  482,
      489,  483,  482,  486,  482,  484,  485,  483,  484,  487,
      484,  488,  487,  489,  487,    0,  483,  486,    0,  489,

        0,  488,  490,  482,  491,  493,  492,    0,  483,  484,
      484,  485,  494,  487,  495,  490,    0,  491,  493,  492,
      490,  492,  491,  496,  492,  494,  492,  495,    0,  494,
      497,  498,  499,  500,  501,  502,  496,  493,  503,  490,
      504,  491,  496,  497,  498,  499,  500,  501,  502,  505,
        0,  503,  506,  504,  507,    0,  508,    0,  510,  509,
      511,  512,  505,  496,    0,  506,  513,  507,  506,  508,
      506,  510,  509,  511,  512,  508,    0,  507,  509,  513,
      512,    0,  515,    0,  516,  513,  517,  518,    0,  506,
      514,  514,  514,  519,  514,  515,  514,  516,  520,  517,

      518,  514,    0,  516,  514,  514,  519,  521,  514,  522,
      523,  520,  524,  516,  525,  514,  526,    0,  528,    0,
      521,  527,  522,  523,  529,  524,  530,  525,  531,  526,
      525,  528,  525,  532,  527,  533,  534,  529,    0,  530,
      535,  531,  536,  537,  538,    0,  532,    0,  533,  534,
      539,  525,  540,  535,  527,  536,  537,  538,  536,  541,
      538,  542,  543,  539,  531,  540,  544,  533,  545,  546,
      547,  548,  541,  549,  542,  543,  550,  551,  537,  544,
      552,  545,  546,  547,  548,  553,  549,  554,  544,  550,
      551,  555,  556,  552,  557,  558,  559,  560,  553,  548,

      554,  561,    0,  562,  555,  556,  563,  557,  558,  559,
      560,    0,  564,  565,  561,  553,  562,  566,  567,  563,
        0,  554,  568,  569,  557,  564,  565,  560,  570,    0,
      566,  567,  572,  561,  571,  568,  569,  573,  570,  574,
      563,  570,  569,  575,  571,  572,  576,  571,  577,  566,
      573,  578,  574,    0,  579,  580,  575,  569,  568,  576,
      581,  577,  582,  584,  578,  583,  575,  579,  580,    0,
      578,  585,  584,  581,  586,  582,  584,  574,  583,  587,
        0,  588,  577,  580,  585,  589,  590,  586,  591,    0,
      592,  579,  587,  583,  588,  593,  582,  581,  589,  590,

        0,  591,  586,  592,  589,  594,  595,  596,  593,  597,
      598,  587,  599,  590,  600,  601,    0,  591,  594,  595,
      596,  602,  597,  598,  603,  599,    0,  600,  601,  599,
      604,    0,  605,  606,  602,    0,  607,  603,  608,  597,
      598,  594,  602,  604,  600,  605,  606,  609,  601,  607,
      610,  608,  611,  612,  613,  614,  615,  616,    0,  617,
      609,  618,  619,  610,  620,  611,  612,  613,  614,  615,
      616,  611,  617,  621,  618,  619,  622,  620,  623,    0,
      624,  625,  626,  627,  618,  628,  621,  629,  630,  622,
        0,  623,  611,  624,  625,  626,  627,  631,  628,    0,

      629,  630,  632,  628,  622,  633,  630,  634,  635,    0,
      631,  636,  623,  637,  638,  632,  639,  640,  633,  641,
      634,  635,  628,  642,  636,  630,  637,  638,  643,  639,
      640,  644,  641,  645,    0,  646,  642,    0,  647,  648,
      649,  643,  650,  638,  644,    0,  645,  643,  646,  651,
      644,  647,  648,  649,  652,  650,  653,  647,  648,  654,
      655,  656,  651,  657,  658,  659,  660,  652,  661,  653,
        0,  662,  654,  655,  656,  663,  657,  658,  659,  660,
      664,  661,  665,  659,  662,  666,  667,  668,  663,  669,
      670,  671,    0,  664,  672,  665,  673,  674,  666,  667,

      668,  664,  669,  670,  671,  662,  675,  672,    0,  673,
      674,  676,  677,  678,  679,  680,  667,  681,  682,  675,
      683,  671,  684,  685,  676,  677,  678,  679,  680,  686,
      681,  682,  687,  683,  688,  684,  685,  689,  690,  691,
      692,  693,  686,    0,  694,  687,  695,  688,  696,  697,
      689,  690,  691,  692,  693,    0,  683,  694,  697,  695,
        0,  696,  697,    0,  698,  699,  700,  701,  688,    0,
        0,  702,  703,  692,  704,  705,  695,  698,  699,  700,
      701,  706,  696,  698,  702,  703,  707,  704,  705,  708,
      709,  710,  711,  703,  706,  712,  713,  714,    0,  707,

      715,  716,  708,  709,  710,  711,    0,  717,  712,  713,
      714,  702,  718,  715,  716,  719,  720,  721,  709,  715,
      717,  722,  723,  724,  725,  718,  726,  727,  719,  720,
      721,  728,    0,  729,  722,  723,  724,  725,  730,  726,
      727,  731,    0,    0,  728,  726,  729,    0,    0,    0,
        0,  730,    0,    0,  731,    0,    0,    0,  725,  733,
      733,  733,  733,  734,  734,  734,  734,  735,  735,  735,
      735,  736,  736,  736,  736,  737,  737,  737,  737,  738,
      738,  738,  739,  739,  740,  740,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,

      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "nask.ll"
/* -*- c++ -*- File generated by the BNF Converter (bnfc 2.9.5). */
/* Lexer definition for use with FLex */
/* Additional data for the lexer: a buffer for lexing string literals. */

#line 14 "nask.ll"
#include "scanner.hh"

/* using "token" to make the returns for the tokens shorter to type */
using token = nask_::NaskParser::token;


#include "absyn.hh"
#include "bison.hh"

#define initialize_lexer nask__initialize_lexer

/* BEGIN extensible string buffer */

#include "buffer.hh"

/* The initial size of the buffer to lex string literals. */
#define LITERAL_BUFFER_INITIAL_SIZE 1024

/* The pointer to the literal buffer. */
Buffer literal_buffer = nullptr;

/* Initialize the literal buffer. */
#define LITERAL_BUFFER_CREATE() literal_buffer = newBuffer(LITERAL_BUFFER_INITIAL_SIZE)

/* Append characters at the end of the buffer. */
#define LITERAL_BUFFER_APPEND(s) bufferAppendString(literal_buffer, s)

/* Append a character at the end of the buffer. */
#define LITERAL_BUFFER_APPEND_CHAR(c) bufferAppendChar(literal_buffer, c)

/* Release the buffer, returning a pointer to its content. */
#define LITERAL_BUFFER_HARVEST() releaseBuffer(literal_buffer)

/* In exceptional cases, e.g. when reaching EOF, we have to free the buffer. */
#define LITERAL_BUFFER_FREE() freeBuffer(literal_buffer)

/* END extensible string buffer */

/* update location on matching */
#define YY_USER_ACTION \
loc->begin.line   = loc->end.line; \
loc->begin.column = loc->end.column; \
for(int i = 0; yytext[i] != '\0'; i++) { \
    if(yytext[i] == '\n') { \
        loc->end.line++; \
        loc->end.column = 0; \
    } \
    else { \
        loc->end.column++; \
    } \
}
#line 1256 "lexer.cc"

#line 1258 "lexer.cc"

#define INITIAL 0
#define CHAR 1
#define CHARESC 2
#define CHAREND 3
#define STRING 4
#define ESCAPED 5
#define COMMENT 6
#define COMMENT1 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE Buffer

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 74 "nask.ll"


#line 1398 "lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 733 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2387 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 76 "nask.ll"
return token::_LBRACK;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 77 "nask.ll"
return token::_RBRACK;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 78 "nask.ll"
return token::_COMMA;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 79 "nask.ll"
return token::_PLUS;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 80 "nask.ll"
return token::_MINUS;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 81 "nask.ll"
return token::_STAR;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 82 "nask.ll"
return token::_SLASH;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 83 "nask.ll"
return token::_PERCENT;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 84 "nask.ll"
return token::_LPAREN;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 85 "nask.ll"
return token::_RPAREN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 86 "nask.ll"
return token::_COLON;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 87 "nask.ll"
return token::_KW_AAA;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 88 "nask.ll"
return token::_KW_AAD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 89 "nask.ll"
return token::_KW_AAM;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 90 "nask.ll"
return token::_KW_AAS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 91 "nask.ll"
return token::_KW_ABSOLUTE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 92 "nask.ll"
return token::_KW_ADC;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 93 "nask.ll"
return token::_KW_ADD;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 94 "nask.ll"
return token::_KW_ALIGN;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 95 "nask.ll"
return token::_KW_ALIGNB;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 96 "nask.ll"
return token::_KW_AND;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 97 "nask.ll"
return token::_KW_ARPL;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 98 "nask.ll"
return token::_KW_BITS;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 99 "nask.ll"
return token::_KW_BOUND;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 100 "nask.ll"
return token::_KW_BSF;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 101 "nask.ll"
return token::_KW_BSR;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 102 "nask.ll"
return token::_KW_BSWAP;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 103 "nask.ll"
return token::_KW_BT;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 104 "nask.ll"
return token::_KW_BTC;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 105 "nask.ll"
return token::_KW_BTR;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 106 "nask.ll"
return token::_KW_BTS;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 107 "nask.ll"
return token::_KW_BYTE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 108 "nask.ll"
return token::_KW_CALL;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 109 "nask.ll"
return token::_KW_CBW;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 110 "nask.ll"
return token::_KW_CDQ;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 111 "nask.ll"
return token::_KW_CLC;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 112 "nask.ll"
return token::_KW_CLD;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 113 "nask.ll"
return token::_KW_CLI;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 114 "nask.ll"
return token::_KW_CLTS;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 115 "nask.ll"
return token::_KW_CMC;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 116 "nask.ll"
return token::_KW_CMP;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 117 "nask.ll"
return token::_KW_CMPSB;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 118 "nask.ll"
return token::_KW_CMPSD;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 119 "nask.ll"
return token::_KW_CMPSW;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "nask.ll"
return token::_KW_CMPXCHG;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "nask.ll"
return token::_KW_CPUID;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "nask.ll"
return token::_KW_CWD;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "nask.ll"
return token::_KW_CWDE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "nask.ll"
return token::_KW_DAA;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "nask.ll"
return token::_KW_DAS;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "nask.ll"
return token::_KW_DB;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "nask.ll"
return token::_KW_DD;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "nask.ll"
return token::_KW_DEC;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "nask.ll"
return token::_KW_DIV;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "nask.ll"
return token::_KW_DQ;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "nask.ll"
return token::_KW_DT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 132 "nask.ll"
return token::_KW_DW;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "nask.ll"
return token::_KW_DWORD;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 134 "nask.ll"
return token::_KW_END;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "nask.ll"
return token::_KW_ENTER;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 136 "nask.ll"
return token::_KW_EQU;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 137 "nask.ll"
return token::_KW_EXTERN;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 138 "nask.ll"
return token::_KW_F2XM1;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 139 "nask.ll"
return token::_KW_FABS;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 140 "nask.ll"
return token::_KW_FADD;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 141 "nask.ll"
return token::_KW_FADDP;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 142 "nask.ll"
return token::_KW_FBLD;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 143 "nask.ll"
return token::_KW_FBSTP;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 144 "nask.ll"
return token::_KW_FCHS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 145 "nask.ll"
return token::_KW_FCLEX;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 146 "nask.ll"
return token::_KW_FCOM;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 147 "nask.ll"
return token::_KW_FCOMP;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 148 "nask.ll"
return token::_KW_FCOMPP;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 149 "nask.ll"
return token::_KW_FCOS;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 150 "nask.ll"
return token::_KW_FDECSTP;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 151 "nask.ll"
return token::_KW_FDISI;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 152 "nask.ll"
return token::_KW_FDIV;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 153 "nask.ll"
return token::_KW_FDIVP;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 154 "nask.ll"
return token::_KW_FDIVR;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 155 "nask.ll"
return token::_KW_FDIVRP;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 156 "nask.ll"
return token::_KW_FENI;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 157 "nask.ll"
return token::_KW_FFREE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 158 "nask.ll"
return token::_KW_FIADD;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 159 "nask.ll"
return token::_KW_FICOM;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 160 "nask.ll"
return token::_KW_FICOMP;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 161 "nask.ll"
return token::_KW_FIDIV;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 162 "nask.ll"
return token::_KW_FIDIVR;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 163 "nask.ll"
return token::_KW_FILD;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 164 "nask.ll"
return token::_KW_FILE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 165 "nask.ll"
return token::_KW_FIMUL;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 166 "nask.ll"
return token::_KW_FINCSTP;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 167 "nask.ll"
return token::_KW_FINIT;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 168 "nask.ll"
return token::_KW_FIST;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 169 "nask.ll"
return token::_KW_FISTP;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 170 "nask.ll"
return token::_KW_FISUB;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 171 "nask.ll"
return token::_KW_FISUBR;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 172 "nask.ll"
return token::_KW_FLD;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 173 "nask.ll"
return token::_KW_FLD1;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 174 "nask.ll"
return token::_KW_FLDCW;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 175 "nask.ll"
return token::_KW_FLDENV;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 176 "nask.ll"
return token::_KW_FLDL2E;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 177 "nask.ll"
return token::_KW_FLDL2T;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 178 "nask.ll"
return token::_KW_FLDLG2;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 179 "nask.ll"
return token::_KW_FLDLN2;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 180 "nask.ll"
return token::_KW_FLDPI;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 181 "nask.ll"
return token::_KW_FLDZ;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 182 "nask.ll"
return token::_KW_FMUL;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 183 "nask.ll"
return token::_KW_FMULP;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 184 "nask.ll"
return token::_KW_FNCLEX;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 185 "nask.ll"
return token::_KW_FNDISI;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 186 "nask.ll"
return token::_KW_FNENI;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 187 "nask.ll"
return token::_KW_FNINIT;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 188 "nask.ll"
return token::_KW_FNOP;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 189 "nask.ll"
return token::_KW_FNSAVE;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 190 "nask.ll"
return token::_KW_FNSTCW;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 191 "nask.ll"
return token::_KW_FNSTENV;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 192 "nask.ll"
return token::_KW_FNSTSW;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 193 "nask.ll"
return token::_KW_FORMAT;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 194 "nask.ll"
return token::_KW_FPATAN;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 195 "nask.ll"
return token::_KW_FPREM;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 196 "nask.ll"
return token::_KW_FPREM1;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 197 "nask.ll"
return token::_KW_FPTAN;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 198 "nask.ll"
return token::_KW_FRNDINT;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 199 "nask.ll"
return token::_KW_FRSTOR;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 200 "nask.ll"
return token::_KW_FSAVE;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 201 "nask.ll"
return token::_KW_FSCALE;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 202 "nask.ll"
return token::_KW_FSETPM;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 203 "nask.ll"
return token::_KW_FSIN;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 204 "nask.ll"
return token::_KW_FSINCOS;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 205 "nask.ll"
return token::_KW_FSQRT;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 206 "nask.ll"
return token::_KW_FST;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 207 "nask.ll"
return token::_KW_FSTCW;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 208 "nask.ll"
return token::_KW_FSTENV;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 209 "nask.ll"
return token::_KW_FSTP;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 210 "nask.ll"
return token::_KW_FSTSW;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 211 "nask.ll"
return token::_KW_FSUB;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 212 "nask.ll"
return token::_KW_FSUBP;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 213 "nask.ll"
return token::_KW_FSUBR;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 214 "nask.ll"
return token::_KW_FSUBRP;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 215 "nask.ll"
return token::_KW_FTST;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 216 "nask.ll"
return token::_KW_FUCOM;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 217 "nask.ll"
return token::_KW_FUCOMP;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 218 "nask.ll"
return token::_KW_FUCOMPP;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 219 "nask.ll"
return token::_KW_FXAM;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 220 "nask.ll"
return token::_KW_FXCH;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 221 "nask.ll"
return token::_KW_FXTRACT;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 222 "nask.ll"
return token::_KW_FYL2X;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 223 "nask.ll"
return token::_KW_FYL2XP1;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 224 "nask.ll"
return token::_KW_HLT;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 225 "nask.ll"
return token::_KW_IDIV;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 226 "nask.ll"
return token::_KW_IMUL;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 227 "nask.ll"
return token::_KW_IN;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 228 "nask.ll"
return token::_KW_INC;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 229 "nask.ll"
return token::_KW_INCO;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 230 "nask.ll"
return token::_KW_INSB;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 231 "nask.ll"
return token::_KW_INSD;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 232 "nask.ll"
return token::_KW_INSTRSET;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 233 "nask.ll"
return token::_KW_INSW;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 234 "nask.ll"
return token::_KW_INT;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 235 "nask.ll"
return token::_KW_INT3;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 236 "nask.ll"
return token::_KW_INTO;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 237 "nask.ll"
return token::_KW_INVD;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 238 "nask.ll"
return token::_KW_INVLPG;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 239 "nask.ll"
return token::_KW_IRET;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 240 "nask.ll"
return token::_KW_IRETD;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 241 "nask.ll"
return token::_KW_IRETW;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 242 "nask.ll"
return token::_KW_JA;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 243 "nask.ll"
return token::_KW_JAE;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 244 "nask.ll"
return token::_KW_JB;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 245 "nask.ll"
return token::_KW_JBE;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 246 "nask.ll"
return token::_KW_JC;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 247 "nask.ll"
return token::_KW_JCXZ;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 248 "nask.ll"
return token::_KW_JE;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 249 "nask.ll"
return token::_KW_JECXZ;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 250 "nask.ll"
return token::_KW_JG;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 251 "nask.ll"
return token::_KW_JGE;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 252 "nask.ll"
return token::_KW_JL;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 253 "nask.ll"
return token::_KW_JLE;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 254 "nask.ll"
return token::_KW_JMP;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 255 "nask.ll"
return token::_KW_JNA;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 256 "nask.ll"
return token::_KW_JNAE;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 257 "nask.ll"
return token::_KW_JNB;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 258 "nask.ll"
return token::_KW_JNBE;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 259 "nask.ll"
return token::_KW_JNC;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 260 "nask.ll"
return token::_KW_JNE;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 261 "nask.ll"
return token::_KW_JNG;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 262 "nask.ll"
return token::_KW_JNGE;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 263 "nask.ll"
return token::_KW_JNL;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 264 "nask.ll"
return token::_KW_JNLE;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 265 "nask.ll"
return token::_KW_JNO;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 266 "nask.ll"
return token::_KW_JNP;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 267 "nask.ll"
return token::_KW_JNS;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 268 "nask.ll"
return token::_KW_JNZ;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 269 "nask.ll"
return token::_KW_JO;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 270 "nask.ll"
return token::_KW_JP;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 271 "nask.ll"
return token::_KW_JPE;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 272 "nask.ll"
return token::_KW_JPO;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 273 "nask.ll"
return token::_KW_JS;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 274 "nask.ll"
return token::_KW_JZ;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 275 "nask.ll"
return token::_KW_LAHF;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 276 "nask.ll"
return token::_KW_LAR;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 277 "nask.ll"
return token::_KW_LDS;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 278 "nask.ll"
return token::_KW_LEA;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 279 "nask.ll"
return token::_KW_LEAVE;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 280 "nask.ll"
return token::_KW_LES;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 281 "nask.ll"
return token::_KW_LFS;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 282 "nask.ll"
return token::_KW_LGDT;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 283 "nask.ll"
return token::_KW_LGS;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 284 "nask.ll"
return token::_KW_LIDT;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 285 "nask.ll"
return token::_KW_LLDT;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 286 "nask.ll"
return token::_KW_LMSW;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 287 "nask.ll"
return token::_KW_LOCK;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 288 "nask.ll"
return token::_KW_LODSB;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 289 "nask.ll"
return token::_KW_LODSD;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 290 "nask.ll"
return token::_KW_LODSW;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 291 "nask.ll"
return token::_KW_LOOP;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 292 "nask.ll"
return token::_KW_LOOPE;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 293 "nask.ll"
return token::_KW_LOOPNE;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 294 "nask.ll"
return token::_KW_LOOPNZ;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 295 "nask.ll"
return token::_KW_LOOPZ;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 296 "nask.ll"
return token::_KW_LSL;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 297 "nask.ll"
return token::_KW_LSS;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 298 "nask.ll"
return token::_KW_LTR;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 299 "nask.ll"
return token::_KW_MOV;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 300 "nask.ll"
return token::_KW_MOVSB;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 301 "nask.ll"
return token::_KW_MOVSD;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 302 "nask.ll"
return token::_KW_MOVSW;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 303 "nask.ll"
return token::_KW_MOVSX;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 304 "nask.ll"
return token::_KW_MOVZX;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 305 "nask.ll"
return token::_KW_MUL;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 306 "nask.ll"
return token::_KW_NEG;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 307 "nask.ll"
return token::_KW_NOP;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 308 "nask.ll"
return token::_KW_NOT;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 309 "nask.ll"
return token::_KW_OPTIMIZE;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 310 "nask.ll"
return token::_KW_OR;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 311 "nask.ll"
return token::_KW_ORG;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 312 "nask.ll"
return token::_KW_OUT;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 313 "nask.ll"
return token::_KW_OUTSB;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 314 "nask.ll"
return token::_KW_OUTSD;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 315 "nask.ll"
return token::_KW_OUTSW;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 316 "nask.ll"
return token::_KW_PADDING;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 317 "nask.ll"
return token::_KW_PADSET;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 318 "nask.ll"
return token::_KW_POP;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 319 "nask.ll"
return token::_KW_POPA;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 320 "nask.ll"
return token::_KW_POPAD;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 321 "nask.ll"
return token::_KW_POPAW;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 322 "nask.ll"
return token::_KW_POPF;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 323 "nask.ll"
return token::_KW_POPFD;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 324 "nask.ll"
return token::_KW_POPFW;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 325 "nask.ll"
return token::_KW_PUSH;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 326 "nask.ll"
return token::_KW_PUSHA;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 327 "nask.ll"
return token::_KW_PUSHAD;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 328 "nask.ll"
return token::_KW_PUSHAW;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 329 "nask.ll"
return token::_KW_PUSHD;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 330 "nask.ll"
return token::_KW_PUSHF;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 331 "nask.ll"
return token::_KW_PUSHFD;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 332 "nask.ll"
return token::_KW_PUSHFW;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 333 "nask.ll"
return token::_KW_RCL;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 334 "nask.ll"
return token::_KW_RCR;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 335 "nask.ll"
return token::_KW_RDMSR;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 336 "nask.ll"
return token::_KW_RDPMC;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 337 "nask.ll"
return token::_KW_REP;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 338 "nask.ll"
return token::_KW_REPE;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 339 "nask.ll"
return token::_KW_REPNE;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 340 "nask.ll"
return token::_KW_REPNZ;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 341 "nask.ll"
return token::_KW_REPZ;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 342 "nask.ll"
return token::_KW_RESB;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 343 "nask.ll"
return token::_KW_RESD;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 344 "nask.ll"
return token::_KW_RESQ;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 345 "nask.ll"
return token::_KW_REST;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 346 "nask.ll"
return token::_KW_RESW;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 347 "nask.ll"
return token::_KW_RET;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 348 "nask.ll"
return token::_KW_RETF;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 349 "nask.ll"
return token::_KW_RETN;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 350 "nask.ll"
return token::_KW_ROL;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 351 "nask.ll"
return token::_KW_ROR;
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 352 "nask.ll"
return token::_KW_RSM;
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 353 "nask.ll"
return token::_KW_SAHF;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 354 "nask.ll"
return token::_KW_SAL;
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 355 "nask.ll"
return token::_KW_SAR;
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 356 "nask.ll"
return token::_KW_SBB;
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 357 "nask.ll"
return token::_KW_SCASB;
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 358 "nask.ll"
return token::_KW_SCASD;
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 359 "nask.ll"
return token::_KW_SCASW;
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 360 "nask.ll"
return token::_KW_SECTION;
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 361 "nask.ll"
return token::_KW_SETA;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 362 "nask.ll"
return token::_KW_SETAE;
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 363 "nask.ll"
return token::_KW_SETB;
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 364 "nask.ll"
return token::_KW_SETBE;
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 365 "nask.ll"
return token::_KW_SETC;
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 366 "nask.ll"
return token::_KW_SETE;
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 367 "nask.ll"
return token::_KW_SETG;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 368 "nask.ll"
return token::_KW_SETGE;
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 369 "nask.ll"
return token::_KW_SETL;
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 370 "nask.ll"
return token::_KW_SETLE;
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 371 "nask.ll"
return token::_KW_SETNA;
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 372 "nask.ll"
return token::_KW_SETNAE;
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 373 "nask.ll"
return token::_KW_SETNB;
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 374 "nask.ll"
return token::_KW_SETNBE;
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 375 "nask.ll"
return token::_KW_SETNC;
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 376 "nask.ll"
return token::_KW_SETNE;
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 377 "nask.ll"
return token::_KW_SETNG;
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 378 "nask.ll"
return token::_KW_SETNGE;
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 379 "nask.ll"
return token::_KW_SETNL;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 380 "nask.ll"
return token::_KW_SETNLE;
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 381 "nask.ll"
return token::_KW_SETNO;
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 382 "nask.ll"
return token::_KW_SETNP;
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 383 "nask.ll"
return token::_KW_SETNS;
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 384 "nask.ll"
return token::_KW_SETNZ;
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 385 "nask.ll"
return token::_KW_SETO;
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 386 "nask.ll"
return token::_KW_SETP;
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 387 "nask.ll"
return token::_KW_SETPE;
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 388 "nask.ll"
return token::_KW_SETPO;
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 389 "nask.ll"
return token::_KW_SETS;
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 390 "nask.ll"
return token::_KW_SETZ;
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 391 "nask.ll"
return token::_KW_SGDT;
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 392 "nask.ll"
return token::_KW_SHL;
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 393 "nask.ll"
return token::_KW_SHLD;
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 394 "nask.ll"
return token::_KW_SHR;
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 395 "nask.ll"
return token::_KW_SHRD;
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 396 "nask.ll"
return token::_KW_SIDT;
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 397 "nask.ll"
return token::_KW_SLDT;
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 398 "nask.ll"
return token::_KW_SMSW;
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 399 "nask.ll"
return token::_KW_STC;
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 400 "nask.ll"
return token::_KW_STD;
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 401 "nask.ll"
return token::_KW_STI;
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 402 "nask.ll"
return token::_KW_STOSB;
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 403 "nask.ll"
return token::_KW_STOSD;
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 404 "nask.ll"
return token::_KW_STOSW;
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 405 "nask.ll"
return token::_KW_STR;
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 406 "nask.ll"
return token::_KW_SUB;
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 407 "nask.ll"
return token::_KW_TEST;
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 408 "nask.ll"
return token::_KW_TIMES;
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 409 "nask.ll"
return token::_KW_UD2;
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 410 "nask.ll"
return token::_KW_VERR;
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 411 "nask.ll"
return token::_KW_VERW;
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 412 "nask.ll"
return token::_KW_WAIT;
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 413 "nask.ll"
return token::_KW_WBINVD;
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 414 "nask.ll"
return token::_KW_WORD;
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 415 "nask.ll"
return token::_KW_WRMSR;
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 416 "nask.ll"
return token::_KW_XADD;
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 417 "nask.ll"
return token::_KW_XCHG;
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 418 "nask.ll"
return token::_KW_XLATB;
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 419 "nask.ll"
return token::_KW_XOR;
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 421 "nask.ll"
BEGIN COMMENT; /* BNFC: block comment "#" "\\n" */
	YY_BREAK
case 346:
/* rule 346 can match eol */
YY_RULE_SETUP
#line 422 "nask.ll"
BEGIN INITIAL;
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 423 "nask.ll"
/* skip */;
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 424 "nask.ll"
BEGIN COMMENT1; /* BNFC: block comment ";" "\\n" */
	YY_BREAK
case 349:
/* rule 349 can match eol */
YY_RULE_SETUP
#line 425 "nask.ll"
BEGIN INITIAL;
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 426 "nask.ll"
/* skip */;
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 428 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_Hex;
	YY_BREAK
case 352:
/* rule 352 can match eol */
YY_RULE_SETUP
#line 429 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_Label;
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 430 "nask.ll"
LITERAL_BUFFER_CREATE(); BEGIN STRING;
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 431 "nask.ll"
BEGIN ESCAPED;
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 432 "nask.ll"
yylval->emplace<std::string>(LITERAL_BUFFER_HARVEST()); BEGIN INITIAL; return token::_STRING_;
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 433 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR(yytext[0]);
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 434 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\f'); BEGIN STRING;
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 435 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\n'); BEGIN STRING;
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 436 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\r'); BEGIN STRING;
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 437 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\t'); BEGIN STRING;
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 438 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('"');  BEGIN STRING;
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 439 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\\'); BEGIN STRING;
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 440 "nask.ll"
LITERAL_BUFFER_APPEND(yytext);    BEGIN STRING;
	YY_BREAK
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(ESCAPED):
#line 441 "nask.ll"
LITERAL_BUFFER_FREE(); return token::_ERROR_;
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 442 "nask.ll"
yylval->emplace<int>(atoi(yytext)); return token::_INTEGER_;
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 443 "nask.ll"
yylval->emplace<std::string>(yytext); return token::_IDENT_;
	YY_BREAK
case 366:
/* rule 366 can match eol */
YY_RULE_SETUP
#line 444 "nask.ll"
/* ignore white space. */;
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 445 "nask.ll"
return token::_ERROR_;
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 447 "nask.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3304 "lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CHAR):
case YY_STATE_EOF(CHARESC):
case YY_STATE_EOF(CHAREND):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(COMMENT1):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 733 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 733 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 732);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 447 "nask.ll"



NaskScanner::NaskScanner(std::istream *in)
    : yyFlexLexer(in)
{
    loc = new nask_::NaskParser::location_type();
}

NaskScanner::~NaskScanner()
{
    delete loc;
    delete yylval;
}

/* This implementation of NaskFlexLexer::yylex() is required to fill the
 * vtable of the class NaskFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */



#ifdef yylex
#undef yylex
#endif

int yyFlexLexer::yylex()
{
    std::cerr << "in yyFlexLexer::yylex() !" << std::endl;
    return 0;
}



