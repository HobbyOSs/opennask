#line 2 "lexer.cc"
#include <memory>

#line 5 "lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer nask_FlexLexer

#ifdef yyalloc
#define nask_alloc_ALREADY_DEFINED
#else
#define yyalloc nask_alloc
#endif

#ifdef yyrealloc
#define nask_realloc_ALREADY_DEFINED
#else
#define yyrealloc nask_realloc
#endif

#ifdef yyfree
#define nask_free_ALREADY_DEFINED
#else
#define yyfree nask_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 368
#define YY_END_OF_BUFFER 369
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[735] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  369,  367,  366,  366,
      353,  343,    8,    6,    4,    3,    5,    7,  364,  364,
        9,  347,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,    1,    2,  367,  368,  356,  355,
      354,  363,  361,  362,  357,  358,  359,  360,  345,  346,
      345,  349,  350,  349,  364,    0,  365,  365,    0,  365,
      365,  365,  365,  365,  365,  365,  365,  365,   26,  365,
      365,  365,  365,  365,  365,  365,  365,  365,   49,   50,

      365,  365,   53,   54,   55,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      150,  365,  165,  167,  169,  171,  173,  175,  365,  365,
      192,  193,  196,  197,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      233,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,    0,  344,  348,  351,  352,    0,   10,

       11,   12,   13,  365,   15,   16,  365,   19,  365,  365,
      365,   23,   24,  365,   27,   28,   29,  365,  365,   32,
       33,   34,   35,   36,  365,   38,   39,  365,   45,   47,
       48,   51,   52,  365,   57,  365,   59,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,   95,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  129,  365,  365,  365,
      365,  365,  365,  365,  147,  365,  365,  151,  365,  157,
      365,  365,  166,  168,  365,  365,  174,  176,  177,  178,

      180,  182,  183,  184,  186,  188,  189,  190,  191,  194,
      195,  365,  199,  200,  201,  203,  204,  365,  206,  365,
      365,  365,  365,  365,  365,  219,  220,  221,  222,  228,
      229,  230,  231,  365,  234,  235,  365,  241,  365,  256,
      257,  365,  365,  260,  365,  270,  273,  274,  275,  365,
      277,  278,  279,  365,  365,  365,  365,  315,  317,  365,
      365,  365,  322,  323,  324,  365,  328,  329,  365,  365,
      332,  365,  365,  365,  365,  365,  365,  365,  365,  342,
      351,  351,  365,  365,   20,   21,  365,  365,   30,   31,
       37,  365,  365,  365,   46,  365,  365,  365,  365,   62,

       63,   65,  365,   67,  365,   69,   72,  365,  365,   75,
       79,  365,  365,  365,  365,   86,   87,  365,  365,  365,
       91,  365,   96,  365,  365,  365,  365,  104,  105,  365,
      365,  365,  365,  111,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  126,  365,  365,  365,  132,
      365,  134,  138,  365,  142,  143,  365,  365,  148,  149,
      152,  153,  154,  365,  156,  158,  159,  160,  365,  162,
      170,  365,  179,  181,  185,  187,  198,  365,  205,  207,
      208,  209,  210,  365,  214,  365,  365,  365,  365,  365,
      365,  242,  245,  248,  365,  365,  261,  365,  264,  265,

      266,  267,  268,  269,  271,  272,  276,  365,  365,  284,
      286,  288,  289,  290,  292,  365,  308,  309,  312,  313,
      314,  316,  318,  319,  320,  321,  365,  330,  365,  333,
      334,  335,  365,  337,  365,  339,  340,  365,  365,   17,
       22,   25,   40,   41,   42,  365,   44,   56,   58,  365,
       61,   64,   66,   68,   70,  365,   74,   76,   77,   80,
       81,   82,   84,   88,  365,   90,   92,   93,   97,  365,
      365,  365,  365,  103,  106,  365,  365,  109,  365,  365,
      365,  365,  365,  365,  365,  118,  120,  365,  365,  123,
      365,  365,  365,  128,  130,  365,  133,  135,  136,  139,

      365,  145,  365,  365,  163,  164,  172,  202,  211,  212,
      213,  215,  365,  218,  223,  224,  225,  226,  227,  365,
      236,  237,  238,  365,  365,  243,  244,  246,  247,  249,
      252,  253,  258,  259,  262,  263,  280,  281,  282,  365,
      285,  287,  291,  293,  294,  296,  298,  299,  300,  302,
      304,  305,  306,  307,  310,  311,  325,  326,  327,  331,
      365,  338,  341,  365,   18,  365,   60,   71,  365,   78,
       83,   85,  365,   94,   98,   99,  100,  101,  102,  107,
      108,  110,  112,  113,  365,  115,  116,  117,  119,  365,
      122,  124,  125,  365,  131,  137,  140,  365,  365,  365,

      161,  216,  217,  365,  365,  240,  250,  251,  254,  255,
      365,  295,  297,  301,  303,  336,  365,   43,   73,   89,
      114,  121,  127,  141,  144,  146,  365,  365,  239,  283,
       14,  155,  232,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    7,    8,    1,    9,    1,
        1,   10,   11,   12,   13,    1,   14,   15,   16,   17,
       18,   19,   19,   19,   19,   19,   19,   20,   21,    1,
        1,    1,    1,    1,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,    1,   51,    1,   52,   53,   54,   55,

       56,   57,   58,   58,   58,   58,   58,   58,   58,   59,
       58,   58,   58,   60,   58,   61,   58,   58,   58,   62,
       58,   58,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[63] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    1,
        1,    1,    1,    1,    3,    3,    3,    3,    3,    4,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3
    } ;

static const flex_int16_t yy_base[743] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   60,   61,
       64,   69,   65,   67,   68,   70,  152, 2400, 2400, 2400,
     2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400,   60,   65,
     2400, 2400,  111,  118,  140,  176,  131,  204,   76,   78,
      136,  242,  281,  158,  171,  173,  183,  233,  314,   77,
       79,   80,  263,  296, 2400, 2400,  127, 2400, 2400, 2400,
     2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400,
       80, 2400, 2400,   78,   75,  342,    0,   92,  138,  353,
      148,  271,  123,  170,  215,  163,  213,  254,  361,  247,
      227,  310,  315,  382,  368,  330,  354,  394,  332,  362,

      395,  400,  401,  402,  404,  408,  409,  416,  417,  421,
      430,  436,  422,  418,  438,  451,  458,  446,  470,  472,
      492,  473,  496,  489,  495,  508,  515,  516,  530,  531,
      534,  533,  535,  536,  543,  556,  558,  559,  561,  590,
      562,  581,  563,  577,  580,  582,  584,  585,  611,  583,
      619,  612,  625,  620,  626,  634,  638,  639,  646,  648,
      653,  654,  655,  670,  673,  676,  677,  679,  685,  683,
      692,  713,  682,  714,  717,  719,  720,  721,  723,  740,
      739,  741,  748,  757,  747,  760,  763,  764,  776,  769,
      778,  779,  782,  115, 2400, 2400,   95, 2400,  112,  786,

      788,  791,  795,  796,  800,  803,  805,  804,  808,  809,
      810,  817,  818,  822,  826,  827,  830,  831,  834,  839,
      843,  844,  846,  849,  851,  852,  853,  856,  859,  861,
      868,  869,  874,  875,  881,  883,  887,  890,  888,  891,
      893,  895,  897,  903,  910,  912,  915,  917,  920,  925,
      924,  933,  938,  939,  946,  947,  952,  954,  953,  970,
      972,  975,  976,  980,  996,  988,  989,  995, 1003, 1004,
     1011, 1018, 1019, 1023, 1024, 1026, 1031, 1025, 1033, 1027,
     1047, 1040, 1053, 1063, 1057, 1066, 1067, 1069, 1070, 1076,
     1082, 1079, 1088, 1097, 1101, 1104, 1107, 1109, 1110, 1113,

     1114, 1116, 1117, 1126, 1133, 1123, 1135, 1136, 1138, 1141,
     1142, 1145, 1148, 1151, 1154, 1155, 1157, 1158, 1160, 1161,
     1164, 1167, 1174, 1170, 1176, 1173, 1180, 1183, 1189, 1192,
     1195, 1198, 1199, 1205, 1207, 1208, 1212, 1211, 1214, 1221,
     1230, 1231, 1233, 1235, 1237, 1238, 1236, 1254, 1257, 1259,
     1260, 1263, 1267, 1275, 1276, 1296, 1280, 1279, 1281, 1282,
     1285, 1283, 1288, 1289, 1305, 1319, 1321, 1325, 1326, 1328,
     1329, 1331, 1333, 1338, 1335, 1341, 1343, 1356, 1357, 1360,
     2400,   88, 1362, 1369, 1363, 1370, 1376, 1377, 1379, 1382,
     1383, 1385, 1391, 1397, 1398, 1400, 1403, 1404, 1410, 1407,

     1412, 1419, 1424, 1425, 1426, 1427, 1428, 1432, 1445, 1431,
     1446, 1447, 1449, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
     1476, 1474, 1475, 1489, 1490, 1499, 1498, 1497, 1506, 1511,
     1512, 1515, 1520, 1521, 1527, 1529, 1537, 1542, 1545, 1547,
     1551, 1552, 1554, 1557, 1564, 1567, 1566, 1569, 1574, 1576,
     1583, 1584, 1586, 1588, 1590, 1591, 1596, 1605, 1606, 1608,
     1610, 1611, 1615, 1620, 1623, 1624, 1625, 1627, 1628, 1629,
     1632, 1633, 1637, 1642, 1646, 1647, 1649, 1651, 1652, 1654,
     1655, 1659, 1661, 1667, 1669, 1673, 1674, 1679, 1677, 1692,
     1694, 1706, 1714, 1715, 1716, 1721, 1718, 1723, 1724, 1737,

     1739, 1742, 1743, 1744, 1745, 1747, 1751, 1752, 1759, 1760,
     1764, 1765, 1767, 1772, 1773, 1778, 1774, 1796, 1788, 1800,
     1801, 1803, 1804, 1808, 1810, 1817, 1818, 1820, 1824, 1822,
     1825, 1826, 1827, 1830, 1839, 1840, 1843, 1845, 1846, 1849,
     1847, 1862, 1864, 1865, 1866, 1867, 1870, 1871, 1872, 1874,
     1880, 1884, 1886, 1888, 1890, 1892, 1893, 1894, 1898, 1896,
     1902, 1906, 1908, 1910, 1911, 1912, 1914, 1916, 1920, 1928,
     1933, 1929, 1941, 1936, 1942, 1945, 1948, 1955, 1957, 1960,
     1961, 1964, 1963, 1967, 1976, 1973, 1982, 1983, 1986, 1992,
     1995, 2000, 2004, 2007, 2008, 2010, 2013, 2017, 2022, 2023,

     2026, 2027, 2029, 2035, 2032, 2036, 2042, 2045, 2048, 2052,
     2057, 2058, 2061, 2062, 2064, 2065, 2066, 2070, 2071, 2074,
     2079, 2080, 2083, 2086, 2087, 2089, 2092, 2093, 2096, 2102,
     2105, 2106, 2109, 2110, 2114, 2115, 2123, 2124, 2127, 2128,
     2129, 2131, 2132, 2133, 2136, 2145, 2146, 2148, 2149, 2150,
     2152, 2154, 2158, 2164, 2168, 2170, 2171, 2172, 2173, 2174,
     2176, 2177, 2178, 2180, 2186, 2190, 2193, 2194, 2195, 2196,
     2199, 2200, 2202, 2203, 2208, 2215, 2216, 2217, 2218, 2220,
     2221, 2222, 2224, 2225, 2234, 2237, 2238, 2239, 2240, 2241,
     2242, 2243, 2244, 2246, 2247, 2256, 2259, 2260, 2265, 2263,

     2264, 2278, 2279, 2282, 2283, 2284, 2285, 2286, 2288, 2298,
     2300, 2301, 2303, 2304, 2305, 2306, 2307, 2308, 2310, 2322,
     2323, 2325, 2327, 2328, 2329, 2330, 2331, 2332, 2335, 2337,
     2344, 2345, 2347, 2400, 2372, 2376, 2380, 2384, 2388, 2391,
     2393, 2396
    } ;

static const flex_int16_t yy_def[743] =
    {   0,
      734,    1,  735,  735,  735,  735,  735,  735,  736,  736,
      737,  737,  738,  738,  739,  739,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  740,  740,  740,  740,  740,   35,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  734,  734,  741,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  742,  740,  734,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  741,  734,  734,   76,  734,  734,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  140,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      734,  734,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  140,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,    0,  734,  734,  734,  734,  734,  734,
      734,  734
    } ;

static const flex_int16_t yy_nxt[2463] =
    {   0,
       18,   19,   20,   19,   21,   22,   18,   23,   18,   24,
       25,   26,   27,   28,   29,   30,   30,   30,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   39,   43,   44,   45,   46,   47,   39,   48,   49,
       50,   51,   52,   53,   54,   39,   39,   55,   18,   56,
       57,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   58,   58,   60,   60,   58,   70,   63,   70,
       73,   58,   73,   63,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   77,   77,   77,   77,   77,   75,
       75,   75,   75,   75,  381,   79,   79,   79,   79,   79,

       77,  381,  182,  184,   76,  185,  183,  382,   61,   61,
      128,   79,   64,   71,  198,   71,   74,   64,   74,   77,
       65,   76,   66,   67,   68,   65,   77,   66,   67,   68,
       79,   77,   80,   81,   79,   82,  196,   79,  195,   77,
      198,  199,   79,   83,   77,   84,   79,   86,   77,   85,
       79,  734,  207,   87,  734,   79,   77,   88,   89,   79,
      129,   91,   92,   90,   93,  106,   77,   79,  107,  130,
      131,   77,   94,   95,  132,  108,   96,   79,   77,   77,
      734,   77,   79,   97,   77,  734,  734,  204,  734,   79,
       79,   77,   79,  156,  208,   79,  158,   98,   99,  157,

      100,  101,   79,  210,  163,  102,  159,  734,  734,  160,
      734,  161,  734,  103,  162,  734,  104,  734,  164,  105,
      109,   77,  734,   77,  165,  110,  111,  112,  113,  114,
      115,  734,   79,  116,   79,   77,  117,  118,  119,  120,
      121,   77,  122,  123,  124,  125,   79,   78,  126,  127,
       77,  209,   79,  734,  211,   77,  166,  167,  168,  219,
      734,   79,   77,  133,  134,  135,   79,  136,  169,  137,
      734,   77,  170,   79,  138,  139,  140,  141,  142,   77,
      212,  143,   79,  734,  186,  187,  734,  218,  144,   77,
       79,  734,  213,  734,  205,  206,  734,  214,  188,  734,

       79,  189,  145,  734,   77,  146,  147,  148,  149,  734,
      150,  734,  734,  151,  152,   79,  153,  190,   77,  191,
      154,  155,   77,   77,  734,  734,  734,  734,  192,   79,
      734,  193,  734,   79,   79,  171,  172,  173,   77,  174,
       77,  175,  176,  177,  734,  734,  178,  179,  734,   79,
      734,   79,  221,  220,  180,  181,  197,  197,  197,  197,
      197,   77,   77,  197,  197,  197,  197,  197,  197,   77,
       77,  228,   79,   79,  200,  734,   77,  201,  229,  734,
       79,   79,  734,  734,  215,  734,  202,   79,  734,  734,
       77,  226,  203,  197,  197,  197,  197,  197,  197,  216,

      217,   79,   77,   77,  227,  222,  223,  734,   77,   77,
       77,  224,   77,   79,   79,  230,   77,   77,  232,   79,
       79,   79,  225,   79,   77,   77,   77,   79,   79,   77,
       77,  734,  235,  231,  734,   79,   79,   79,   77,  234,
       79,   79,  233,  240,   77,  241,   77,  247,  236,   79,
      237,  248,  249,  734,   77,   79,  238,   79,  734,   77,
      734,  239,  242,  734,  244,   79,   77,  734,  245,  243,
       79,  246,  251,  734,  252,  253,  250,   79,   77,  734,
       77,   77,  258,  254,  255,  256,  734,  259,  734,   79,
      257,   79,   79,  260,  261,  262,  734,   77,  734,  263,

       77,  734,  734,   77,   77,  264,  734,  270,   79,  265,
      266,   79,  271,  267,   79,   79,   77,  272,  280,  273,
      734,  274,  734,   77,   77,  275,  734,   79,  279,  281,
      268,  282,  269,  276,   79,   79,  277,  278,   77,   77,
      734,   77,   77,   77,   77,  734,  734,  284,  283,   79,
       79,   77,   79,   79,   79,   79,  285,  288,  292,  286,
      293,  294,   79,  734,   77,  734,   77,   77,  734,   77,
       77,   77,  287,  289,  290,   79,  291,   79,   79,  296,
       79,   79,   79,  297,  298,   77,  734,  295,   77,   77,
       77,   77,   77,   77,  734,  734,   79,  299,   77,   79,

       79,   79,   79,   79,   79,  315,  310,  320,  312,   79,
      734,  300,  301,  302,  734,  303,  311,  304,  313,   77,
       77,  314,  305,  316,  317,  306,  307,   77,   77,  308,
       79,   79,  734,   77,   77,  318,  309,  734,   79,   79,
      734,  734,   77,  321,   79,   79,   77,   77,  323,  324,
      319,  322,  326,   79,   77,  734,   77,   79,   79,  327,
      325,   77,   77,   77,  328,   79,  331,   79,  734,  734,
      330,  734,   79,   79,   79,  734,  329,  734,   77,  337,
      335,   77,  332,  734,   77,   77,  333,   77,  334,   79,
       77,   77,   79,   77,  336,   79,   79,  734,   79,  734,

       77,   79,   79,  354,   79,  734,  338,  734,  340,  734,
      342,   79,  339,  343,  341,  344,  349,  347,  345,  346,
      350,   77,   77,  348,  351,   77,  734,   77,   77,   77,
      352,   77,   79,   79,  734,  353,   79,  355,   79,   79,
       79,  357,   79,  734,  360,  361,  734,   77,   77,   77,
      734,  358,  734,  734,  356,   77,   77,  359,   79,   79,
       79,  368,  362,  363,  364,   77,   79,   79,   77,  365,
      734,   77,   77,  371,  734,  366,   79,   77,  367,   79,
      369,  370,   79,   79,   77,  372,   77,   77,   79,  373,
       77,  734,  374,  377,   77,   79,   77,   79,   79,   77,

      379,   79,  375,   77,   77,   79,  378,   79,   77,  376,
       79,   77,   77,   77,   79,   79,   77,   77,   77,   79,
      380,  734,   79,   79,   79,   77,   77,   79,   79,   79,
       77,  383,  384,  734,   77,   77,   79,   79,   77,   77,
      385,   79,   77,  388,  387,   79,   79,   77,  386,   79,
       79,   77,   77,   79,   77,  734,  389,   77,   79,   77,
       77,   77,   79,   79,   77,   79,  390,   77,   79,   77,
       79,   79,   79,  734,  734,   79,   77,   77,   79,  734,
       79,  734,   77,   77,  395,  394,  734,   79,   79,   77,
      391,   77,  392,   79,   79,   77,   77,  393,   77,   77,

       79,   77,   79,   77,  734,   77,   79,   79,  397,   79,
       79,   77,   79,  396,   79,  398,   79,  401,   77,  402,
       77,  399,   79,   77,  734,   77,  734,  734,   77,   79,
      400,   79,   77,   77,   79,  405,   79,  403,  408,   79,
      734,   77,  404,   79,   79,  406,   77,   77,  413,  411,
      412,  407,   79,  734,   77,   77,  409,   79,   79,  410,
       77,   77,   77,  416,  417,   79,   79,  415,  414,  423,
      419,   79,   79,   79,  734,  734,  420,  424,   77,  425,
       77,  734,  734,   77,   77,  429,  426,  418,   77,   79,
      427,   79,  421,  422,   79,   79,   77,   77,  734,   79,

      428,  431,  430,   77,   77,  734,  734,   79,   79,  432,
      433,   77,   77,  734,   79,   79,  434,  435,  734,   77,
      439,  437,   79,   79,  440,  734,   77,   77,  441,  438,
       79,   77,   77,   77,   77,   77,  436,   79,   79,   77,
      444,   77,   79,   79,   79,   79,   79,  452,   77,  734,
       79,  442,   79,  734,  448,   77,  449,  734,  446,   79,
      443,   77,  454,  445,  447,   77,   79,  450,  456,  734,
      451,   77,   79,  453,   77,   77,   79,   77,   77,  458,
      455,  734,   79,  734,   77,   79,   79,   77,   79,   79,
       77,  457,  462,  466,  463,   79,   77,  734,   79,  460,

      734,   79,  734,  734,  461,   77,  468,   79,  459,   77,
      464,  467,   77,  465,  469,   77,   79,   77,   77,  470,
       79,   77,   77,   79,   77,   77,   79,  734,   79,   79,
      734,   77,   79,   79,   77,   79,   79,  734,  473,  474,
      734,   77,   79,   77,   77,   79,   77,  471,  472,   77,
       77,  475,   79,   77,   79,   79,   77,   79,  476,   77,
       79,   79,   77,   77,   79,   77,   77,   79,   77,   77,
       79,  477,   77,   79,   79,   77,   79,   79,   77,   79,
       79,   77,   77,   79,   77,  734,   79,  734,   77,   79,
      734,   77,   79,   79,  734,   79,  478,   77,  479,   79,

       77,  480,   79,   77,  481,  483,   77,   77,   79,  484,
      482,   79,  485,   77,   79,   77,   77,   79,   79,   77,
       77,  734,   77,  734,   79,  734,   79,   79,  486,   77,
       79,   79,  492,   79,  488,  487,  490,  493,   77,   77,
       79,   77,  494,   77,   77,   77,   77,  489,  734,   79,
       79,  491,   79,  734,   79,   79,   79,   79,  734,  500,
      497,  501,   77,  734,  505,   77,  496,   77,   77,  498,
      495,   77,  506,   79,  502,   77,   79,  503,   79,   79,
      504,  499,   79,   77,   77,  507,   79,   77,   77,   77,
       77,   77,  734,   77,   79,   79,   77,   77,   79,   79,

       79,   79,   79,  522,   79,  523,  734,   79,   79,  734,
      734,  734,  734,   77,  508,  734,  509,  510,  511,  512,
      521,  513,  524,  514,   79,  525,  526,   77,  515,   77,
      516,  517,  518,   77,   77,  519,   77,   77,   79,   77,
       79,   77,  520,   77,   79,   79,   77,   79,   79,   77,
       79,   77,   79,  529,   79,  734,  734,   79,  527,  534,
       79,  734,   79,  734,   77,   77,  528,  536,   77,  530,
       77,   77,  533,  532,  531,   79,   79,   77,   77,   79,
      535,   79,   79,  537,   77,   77,  734,   77,   79,   79,
       77,   77,  734,   77,  539,   79,   79,  538,   79,   77,

      541,   79,   79,  540,   79,   77,   77,  543,   77,  544,
       79,   77,   77,  542,  546,   77,   79,   79,   77,   79,
       77,  547,   79,   79,  548,  551,   79,   77,  545,   79,
      734,   79,   77,   77,   77,   77,   77,  734,   79,   77,
       77,  549,  550,   79,   79,   79,   79,   79,  552,  734,
       79,   79,  734,   77,   77,   77,  734,   77,  734,  734,
      553,  734,  734,  555,   79,   79,   79,  558,   79,  559,
      554,  556,  560,  561,  557,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,  734,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,  568,   77,   77,  734,

      562,  734,  734,  564,  734,   77,   77,   77,   79,   79,
      563,  565,  567,  566,   77,  571,   79,   79,   79,   77,
       77,  734,  734,   77,  570,   79,  572,  574,   77,   77,
       79,   79,  569,  573,   79,   77,  576,   77,  734,   79,
       79,  734,  575,  734,  578,   77,   79,  734,   79,  579,
       77,  577,  581,   77,  582,   77,   79,  734,  584,   77,
       77,   79,   77,  585,   79,   77,   79,  734,  583,  580,
       79,   79,   77,   79,   77,   77,   79,   77,  586,  590,
      588,  587,   77,   79,   77,   79,   79,  589,   79,  591,
      593,   77,   77,   79,   77,   79,   77,  734,   77,   77,

      592,  734,   79,   79,   77,   79,  594,   79,  596,   79,
       79,  734,  595,   77,   77,   79,   77,  601,   77,   77,
      598,  600,  599,   77,   79,   79,  597,   79,   77,   79,
       79,   77,   77,   77,   79,   77,   77,   77,  734,   79,
       77,   77,   79,   79,   79,   77,   79,   79,   79,  602,
       77,   79,   79,  605,   77,   77,   79,   77,  603,   77,
       77,   79,   77,   77,  604,   79,   79,   77,   79,   77,
       79,   79,  606,   79,   79,   77,  608,   77,   79,  607,
       79,   77,   77,  734,  734,   77,   79,   77,   79,  609,
      734,  610,   79,   79,  612,  615,   79,  616,   79,  621,

       77,  622,   77,  613,  734,  734,  734,  734,  734,  734,
      611,   79,  620,   79,   77,  614,  617,  618,  619,  625,
      623,  624,   77,   77,   77,   79,   77,  734,  734,   77,
      626,   77,   77,   79,   79,   79,  630,   79,  628,  631,
       79,  632,   79,   79,  634,   77,  734,   77,  635,  627,
       77,   77,   77,   77,  633,   77,   79,  629,   79,   77,
       77,   79,   79,   79,   79,  734,   79,   77,   77,  636,
       79,   79,   77,   77,  637,   77,  638,  734,   79,   79,
       77,   77,   77,   79,   79,  641,   79,  734,  640,  642,
      734,   79,   79,   79,  734,  639,   77,  643,  644,  645,

      646,  647,  734,  648,   77,  649,  734,   79,   77,   77,
      650,   77,   77,  651,  652,   79,   77,  653,   77,   79,
       79,  655,   79,   79,  654,   77,   77,   79,   77,   79,
       77,  656,   77,   77,   77,   77,   79,   79,   77,   79,
      657,   79,  658,   79,   79,   79,   79,   77,   77,   79,
      734,   77,  734,   77,   77,   77,  734,   77,   79,   79,
      734,  659,   79,  660,   79,   79,   79,  663,   79,  661,
       77,  665,   77,   77,   77,   77,  734,  662,   77,   77,
       77,   79,   77,   79,   79,   79,   79,  664,   77,   79,
       79,   79,   77,   79,   77,  666,   77,  734,   77,   79,

       77,   77,   77,   79,   77,   79,   77,   79,  667,   79,
       77,   79,   79,   79,   77,   79,   77,   79,   77,   77,
       77,   79,   77,  734,   77,   79,  668,   79,   77,   79,
       79,   79,  669,   79,  670,   79,   77,   77,  734,   79,
      734,   77,  671,  734,   77,  678,  672,   79,   79,   77,
       77,  673,   79,   77,  674,   79,   77,  679,  676,  734,
       79,   79,  734,   77,   79,   77,  734,   79,   77,   77,
      675,   77,   77,  677,   79,   77,   79,  681,  734,   79,
       79,   77,   79,   79,   77,  683,   79,  734,  689,  680,
       77,   77,   79,  734,   77,   79,  734,  682,  685,  734,

       77,   79,   79,   77,  684,   79,  686,  687,   77,  734,
      688,   79,   77,  734,   79,   77,   77,  690,   77,   79,
      692,   77,  734,   79,  691,   77,   79,   79,  734,   79,
       77,   77,   79,  693,   77,   77,   79,   77,  734,  694,
       77,   79,   79,   77,   77,   79,   79,  734,   79,  698,
       77,   79,  695,   77,   79,   79,   77,  734,  696,  697,
       77,   79,  701,  699,   79,   77,   77,   79,  700,   77,
       77,   79,   77,   77,   77,  734,   79,   79,   77,   77,
       79,   79,   77,   79,   79,   79,  702,   77,   77,   79,
       79,   77,  734,   79,   77,   77,  734,   77,   79,   79,

       77,   77,   79,  704,   77,   79,   79,  703,   79,  734,
       77,   79,   79,   77,   77,   79,  734,   77,   77,  734,
      705,   79,   77,   77,   79,   79,  707,  706,   79,   79,
      709,   77,   77,   79,   79,   77,   77,   77,  734,   77,
       77,   77,   79,   79,   77,  708,   79,   79,   79,  710,
       79,   79,   79,   77,   77,   79,   77,   77,   77,  734,
       77,  712,   77,  711,   79,   79,   77,   79,   79,   79,
      713,   79,   77,   79,  714,  715,   77,   79,   77,   77,
       77,   77,   77,   79,   77,   77,   77,   79,   77,   79,
       79,   79,   79,   79,   77,   79,   79,   79,   77,   79,

      716,   77,   77,   77,   77,   79,  734,   77,   77,   79,
       77,   77,   79,   79,   79,   79,   77,  718,   79,   79,
      717,   79,   79,   77,   77,   77,   77,   79,   77,   77,
       77,  719,   77,   77,   79,   79,   79,   79,  720,   79,
       79,   79,   77,   79,   79,   77,   77,   77,   77,   77,
       77,   77,   77,   79,   77,   77,   79,   79,   79,   79,
       79,   79,   79,   79,   77,   79,   79,   77,   77,  734,
      734,   77,   77,   77,  734,   79,  721,  734,   79,   79,
      726,  722,   79,   79,   79,  723,   77,   77,  727,  734,
       77,   77,   77,   77,   77,  724,   77,   79,   79,  734,

      725,   79,   79,   79,   79,   79,   77,   79,   77,   77,
      729,   77,   77,   77,   77,   77,   77,   79,   77,   79,
       79,  734,   79,   79,   79,   79,   79,   79,  728,   79,
       77,   77,  731,   77,  730,   77,   77,   77,   77,   77,
       77,   79,   79,   77,   79,   77,   79,   79,   79,   79,
       79,   79,   77,   77,   79,   77,   79,  733,  734,  734,
      734,  734,  734,   79,   79,  734,   79,  734,  734,  734,
      734,  732,   58,   58,   58,   58,   59,   59,   59,   59,
       62,   62,   62,   62,   69,   69,   69,   69,   72,   72,
       72,   72,   78,   78,   78,  194,  194,   77,   77,   17,

      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734
    } ;

static const flex_int16_t yy_chk[2463] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    9,   10,    9,   10,   11,   13,   11,   14,
       15,   12,   16,   12,   29,   29,   29,   29,   29,   30,
       30,   30,   30,   30,   39,   50,   40,   51,   52,   75,
       75,   75,   75,   75,  382,   39,   50,   40,   51,   52,

       78,  197,   50,   51,   29,   52,   50,  197,    9,   10,
       40,   78,   11,   13,  199,   14,   15,   12,   16,   33,
       11,   29,   11,   11,   11,   12,   34,   12,   12,   12,
       33,   83,   33,   33,  194,   33,   74,   34,   71,   37,
       79,   79,   83,   33,   41,   33,   57,   34,   35,   33,
       37,   17,   83,   34,    0,   41,   81,   34,   34,   35,
       41,   35,   35,   34,   35,   37,   44,   81,   37,   41,
       41,   86,   35,   35,   41,   37,   35,   44,   84,   45,
        0,   46,   86,   35,   36,    0,    0,   81,    0,   84,
       45,   47,   46,   44,   84,   36,   45,   36,   36,   44,

       36,   36,   47,   86,   47,   36,   45,    0,    0,   46,
        0,   46,    0,   36,   46,    0,   36,    0,   47,   36,
       38,   87,    0,   85,   47,   38,   38,   38,   38,   38,
       38,    0,   87,   38,   85,   91,   38,   38,   38,   38,
       38,   48,   38,   38,   38,   38,   91,   38,   38,   38,
       42,   85,   48,    0,   87,   90,   48,   48,   48,   91,
        0,   42,   88,   42,   42,   42,   90,   42,   48,   42,
        0,   53,   48,   88,   42,   42,   42,   42,   42,   82,
       88,   42,   53,    0,   53,   53,    0,   90,   42,   43,
       82,    0,   88,    0,   82,   82,    0,   88,   53,    0,

       43,   53,   43,    0,   54,   43,   43,   43,   43,    0,
       43,    0,    0,   43,   43,   54,   43,   54,   92,   54,
       43,   43,   49,   93,    0,    0,    0,    0,   54,   92,
        0,   54,    0,   49,   93,   49,   49,   49,   96,   49,
       99,   49,   49,   49,    0,    0,   49,   49,    0,   96,
        0,   99,   93,   92,   49,   49,   76,   76,   76,   76,
       76,   80,   97,   76,   76,   76,   76,   76,   76,   89,
      100,   96,   80,   97,   80,    0,   95,   80,   97,    0,
       89,  100,    0,    0,   89,    0,   80,   95,    0,    0,
       94,   95,   80,   76,   76,   76,   76,   76,   76,   89,

       89,   94,   98,  101,   95,   94,   94,    0,  102,  103,
      104,   94,  105,   98,  101,   98,  106,  107,  101,  102,
      103,  104,   94,  105,  108,  109,  114,  106,  107,  110,
      113,    0,  106,   98,    0,  108,  109,  114,  111,  105,
      110,  113,  102,  110,  112,  110,  115,  113,  106,  111,
      107,  113,  114,    0,  118,  112,  108,  115,    0,  116,
        0,  109,  111,    0,  112,  118,  117,    0,  112,  111,
      116,  112,  116,    0,  116,  116,  115,  117,  119,    0,
      120,  122,  117,  116,  116,  116,    0,  118,    0,  119,
      116,  120,  122,  119,  119,  119,    0,  124,    0,  119,

      121,    0,    0,  125,  123,  119,    0,  122,  124,  119,
      120,  121,  122,  121,  125,  123,  126,  123,  125,  123,
        0,  123,    0,  127,  128,  123,    0,  126,  124,  126,
      121,  126,  121,  123,  127,  128,  123,  123,  129,  130,
        0,  132,  131,  133,  134,    0,    0,  127,  126,  129,
      130,  135,  132,  131,  133,  134,  128,  131,  132,  129,
      133,  134,  135,    0,  136,    0,  137,  138,    0,  139,
      141,  143,  130,  131,  131,  136,  131,  137,  138,  136,
      139,  141,  143,  137,  138,  144,    0,  135,  145,  142,
      146,  150,  147,  148,    0,    0,  144,  139,  140,  145,

      142,  146,  150,  147,  148,  147,  142,  150,  145,  140,
        0,  140,  140,  140,    0,  140,  142,  140,  145,  149,
      152,  146,  140,  147,  148,  140,  140,  151,  154,  140,
      149,  152,    0,  153,  155,  149,  140,    0,  151,  154,
        0,    0,  156,  151,  153,  155,  157,  158,  153,  153,
      149,  152,  154,  156,  159,    0,  160,  157,  158,  154,
      153,  161,  162,  163,  155,  159,  158,  160,    0,    0,
      157,    0,  161,  162,  163,    0,  156,    0,  164,  163,
      161,  165,  159,    0,  166,  167,  159,  168,  160,  164,
      173,  170,  165,  169,  162,  166,  167,    0,  168,    0,

      171,  173,  170,  173,  169,    0,  164,    0,  166,    0,
      167,  171,  165,  167,  166,  168,  170,  169,  168,  168,
      171,  172,  174,  169,  171,  175,    0,  176,  177,  178,
      171,  179,  172,  174,    0,  172,  175,  174,  176,  177,
      178,  175,  179,    0,  177,  178,    0,  181,  180,  182,
        0,  176,    0,    0,  174,  185,  183,  176,  181,  180,
      182,  181,  179,  180,  180,  184,  185,  183,  186,  180,
        0,  187,  188,  184,    0,  180,  184,  190,  180,  186,
      182,  183,  187,  188,  189,  185,  191,  192,  190,  186,
      193,    0,  187,  190,  200,  189,  201,  191,  192,  202,

      192,  193,  188,  203,  204,  200,  191,  201,  205,  189,
      202,  206,  208,  207,  203,  204,  209,  210,  211,  205,
      193,    0,  206,  208,  207,  212,  213,  209,  210,  211,
      214,  204,  207,    0,  215,  216,  212,  213,  217,  218,
      209,  214,  219,  214,  211,  215,  216,  220,  210,  217,
      218,  221,  222,  219,  223,    0,  218,  224,  220,  225,
      226,  227,  221,  222,  228,  223,  219,  229,  224,  230,
      225,  226,  227,    0,    0,  228,  231,  232,  229,    0,
      230,    0,  233,  234,  229,  228,    0,  231,  232,  235,
      225,  236,  227,  233,  234,  237,  239,  227,  238,  240,

      235,  241,  236,  242,    0,  243,  237,  239,  236,  238,
      240,  244,  241,  234,  242,  238,  243,  241,  245,  242,
      246,  239,  244,  247,    0,  248,    0,    0,  249,  245,
      240,  246,  251,  250,  247,  245,  248,  243,  247,  249,
        0,  252,  244,  251,  250,  246,  253,  254,  251,  249,
      250,  246,  252,    0,  255,  256,  248,  253,  254,  248,
      257,  259,  258,  254,  254,  255,  256,  253,  252,  258,
      256,  257,  259,  258,    0,    0,  256,  258,  260,  258,
      261,    0,    0,  262,  263,  259,  258,  255,  264,  260,
      258,  261,  257,  257,  262,  263,  266,  267,    0,  264,

      258,  261,  260,  268,  265,    0,    0,  266,  267,  262,
      263,  269,  270,    0,  268,  265,  264,  265,    0,  271,
      268,  266,  269,  270,  269,    0,  272,  273,  270,  267,
      271,  274,  275,  278,  276,  280,  265,  272,  273,  277,
      273,  279,  274,  275,  278,  276,  280,  278,  282,    0,
      277,  271,  279,    0,  277,  281,  277,    0,  275,  282,
      272,  283,  280,  274,  276,  285,  281,  277,  282,    0,
      277,  284,  283,  279,  286,  287,  285,  288,  289,  284,
      281,    0,  284,    0,  290,  286,  287,  292,  288,  289,
      291,  283,  289,  290,  289,  290,  293,    0,  292,  287,

        0,  291,    0,    0,  288,  294,  291,  293,  286,  295,
      289,  290,  296,  289,  291,  297,  294,  298,  299,  292,
      295,  300,  301,  296,  302,  303,  297,    0,  298,  299,
        0,  306,  300,  301,  304,  302,  303,    0,  300,  301,
        0,  305,  306,  307,  308,  304,  309,  295,  296,  310,
      311,  304,  305,  312,  307,  308,  313,  309,  305,  314,
      310,  311,  315,  316,  312,  317,  318,  313,  319,  320,
      314,  312,  321,  315,  316,  322,  317,  318,  324,  319,
      320,  326,  323,  321,  325,    0,  322,    0,  327,  324,
        0,  328,  326,  323,    0,  325,  315,  329,  318,  327,

      330,  320,  328,  331,  321,  323,  332,  333,  329,  324,
      322,  330,  325,  334,  331,  335,  336,  332,  333,  338,
      337,    0,  339,    0,  334,    0,  335,  336,  329,  340,
      338,  337,  338,  339,  334,  329,  337,  338,  341,  342,
      340,  343,  339,  344,  347,  345,  346,  336,    0,  341,
      342,  337,  343,    0,  344,  347,  345,  346,    0,  345,
      344,  345,  348,    0,  346,  349,  343,  350,  351,  344,
      342,  352,  346,  348,  345,  353,  349,  345,  350,  351,
      345,  344,  352,  354,  355,  350,  353,  358,  357,  359,
      360,  362,    0,  361,  354,  355,  363,  364,  358,  357,

      359,  360,  362,  358,  361,  359,    0,  363,  364,    0,
        0,    0,    0,  365,  354,    0,  355,  356,  356,  356,
      357,  356,  360,  356,  365,  361,  362,  366,  356,  367,
      356,  356,  356,  368,  369,  356,  370,  371,  366,  372,
      367,  373,  356,  375,  368,  369,  374,  370,  371,  376,
      372,  377,  373,  370,  375,    0,    0,  374,  366,  375,
      376,    0,  377,    0,  378,  379,  369,  377,  380,  372,
      383,  385,  374,  373,  372,  378,  379,  384,  386,  380,
      376,  383,  385,  378,  387,  388,    0,  389,  384,  386,
      390,  391,    0,  392,  383,  387,  388,  379,  389,  393,

      387,  390,  391,  384,  392,  394,  395,  392,  396,  392,
      393,  397,  398,  388,  393,  400,  394,  395,  399,  396,
      401,  394,  397,  398,  396,  399,  400,  402,  392,  399,
        0,  401,  403,  404,  405,  406,  407,    0,  402,  410,
      408,  397,  398,  403,  404,  405,  406,  407,  401,    0,
      410,  408,    0,  409,  411,  412,    0,  413,    0,    0,
      403,    0,    0,  406,  409,  411,  412,  410,  413,  410,
      405,  408,  412,  413,  409,  414,  415,  416,  417,  418,
      419,  420,  422,  423,  421,    0,  414,  415,  416,  417,
      418,  419,  420,  422,  423,  421,  422,  424,  425,    0,

      414,    0,    0,  418,    0,  428,  427,  426,  424,  425,
      415,  419,  421,  420,  429,  426,  428,  427,  426,  430,
      431,    0,    0,  432,  425,  429,  426,  427,  433,  434,
      430,  431,  424,  426,  432,  435,  430,  436,    0,  433,
      434,    0,  429,    0,  432,  437,  435,    0,  436,  433,
      438,  431,  436,  439,  436,  440,  437,    0,  437,  441,
      442,  438,  443,  438,  439,  444,  440,    0,  436,  435,
      441,  442,  445,  443,  447,  446,  444,  448,  439,  443,
      441,  440,  449,  445,  450,  447,  446,  442,  448,  444,
      446,  451,  452,  449,  453,  450,  454,    0,  455,  456,

      445,    0,  451,  452,  457,  453,  447,  454,  449,  455,
      456,    0,  448,  458,  459,  457,  460,  457,  461,  462,
      452,  454,  452,  463,  458,  459,  451,  460,  464,  461,
      462,  465,  466,  467,  463,  468,  469,  470,    0,  464,
      471,  472,  465,  466,  467,  473,  468,  469,  470,  458,
      474,  471,  472,  470,  475,  476,  473,  477,  464,  478,
      479,  474,  480,  481,  469,  475,  476,  482,  477,  483,
      478,  479,  470,  480,  481,  484,  478,  485,  482,  472,
      483,  486,  487,    0,    0,  489,  484,  488,  485,  484,
        0,  484,  486,  487,  485,  486,  489,  486,  488,  489,

      490,  489,  491,  485,    0,    0,    0,    0,    0,    0,
      484,  490,  488,  491,  492,  485,  486,  486,  487,  491,
      489,  490,  493,  494,  495,  492,  497,    0,    0,  496,
      492,  498,  499,  493,  494,  495,  494,  497,  493,  494,
      496,  494,  498,  499,  496,  500,    0,  501,  498,  492,
      502,  503,  504,  505,  495,  506,  500,  493,  501,  507,
      508,  502,  503,  504,  505,    0,  506,  509,  510,  498,
      507,  508,  511,  512,  508,  513,  508,    0,  509,  510,
      514,  515,  517,  511,  512,  510,  513,    0,  509,  511,
        0,  514,  515,  517,    0,  508,  519,  514,  515,  516,

      516,  516,    0,  516,  518,  516,    0,  519,  520,  521,
      516,  522,  523,  516,  516,  518,  524,  516,  525,  520,
      521,  518,  522,  523,  516,  526,  527,  524,  528,  525,
      530,  518,  529,  531,  532,  533,  526,  527,  534,  528,
      527,  530,  527,  529,  531,  532,  533,  535,  536,  534,
        0,  537,    0,  538,  539,  541,    0,  540,  535,  536,
        0,  527,  537,  529,  538,  539,  541,  538,  540,  533,
      542,  540,  543,  544,  545,  546,    0,  535,  547,  548,
      549,  542,  550,  543,  544,  545,  546,  539,  551,  547,
      548,  549,  552,  550,  553,  546,  554,    0,  555,  551,

      556,  557,  558,  552,  560,  553,  559,  554,  550,  555,
      561,  556,  557,  558,  562,  560,  563,  559,  564,  565,
      566,  561,  567,    0,  568,  562,  555,  563,  569,  564,
      565,  566,  556,  567,  559,  568,  570,  572,    0,  569,
        0,  571,  562,    0,  574,  572,  563,  570,  572,  573,
      575,  565,  571,  576,  568,  574,  577,  573,  571,    0,
      573,  575,    0,  578,  576,  579,    0,  577,  580,  581,
      570,  583,  582,  571,  578,  584,  579,  577,    0,  580,
      581,  586,  583,  582,  585,  580,  584,    0,  586,  576,
      587,  588,  586,    0,  589,  585,    0,  579,  582,    0,

      590,  587,  588,  591,  581,  589,  583,  584,  592,    0,
      585,  590,  593,    0,  591,  594,  595,  588,  596,  592,
      591,  597,    0,  593,  589,  598,  594,  595,    0,  596,
      599,  600,  597,  592,  601,  602,  598,  603,    0,  593,
      605,  599,  600,  604,  606,  601,  602,    0,  603,  601,
      607,  605,  596,  608,  604,  606,  609,    0,  599,  600,
      610,  607,  604,  602,  608,  611,  612,  609,  603,  613,
      614,  610,  615,  616,  617,    0,  611,  612,  618,  619,
      613,  614,  620,  615,  616,  617,  613,  621,  622,  618,
      619,  623,    0,  620,  624,  625,    0,  626,  621,  622,

      627,  628,  623,  620,  629,  624,  625,  613,  626,    0,
      630,  627,  628,  631,  632,  629,    0,  633,  634,    0,
      624,  630,  635,  636,  631,  632,  630,  625,  633,  634,
      632,  637,  638,  635,  636,  639,  640,  641,    0,  642,
      643,  644,  637,  638,  645,  630,  639,  640,  641,  632,
      642,  643,  644,  646,  647,  645,  648,  649,  650,    0,
      651,  645,  652,  640,  646,  647,  653,  648,  649,  650,
      646,  651,  654,  652,  649,  650,  655,  653,  656,  657,
      658,  659,  660,  654,  661,  662,  663,  655,  664,  656,
      657,  658,  659,  660,  665,  661,  662,  663,  666,  664,

      661,  667,  668,  669,  670,  665,    0,  671,  672,  666,
      673,  674,  667,  668,  669,  670,  675,  666,  671,  672,
      664,  673,  674,  676,  677,  678,  679,  675,  680,  681,
      682,  669,  683,  684,  676,  677,  678,  679,  673,  680,
      681,  682,  685,  683,  684,  686,  687,  688,  689,  690,
      691,  692,  693,  685,  694,  695,  686,  687,  688,  689,
      690,  691,  692,  693,  696,  694,  695,  697,  698,    0,
        0,  700,  701,  699,    0,  696,  685,    0,  697,  698,
      699,  690,  700,  701,  699,  694,  702,  703,  700,    0,
      704,  705,  706,  707,  708,  697,  709,  702,  703,    0,

      698,  704,  705,  706,  707,  708,  710,  709,  711,  712,
      705,  713,  714,  715,  716,  717,  718,  710,  719,  711,
      712,    0,  713,  714,  715,  716,  717,  718,  704,  719,
      720,  721,  717,  722,  711,  723,  724,  725,  726,  727,
      728,  720,  721,  729,  722,  730,  723,  724,  725,  726,
      727,  728,  731,  732,  729,  733,  730,  728,    0,    0,
        0,    0,    0,  731,  732,    0,  733,    0,    0,    0,
        0,  727,  735,  735,  735,  735,  736,  736,  736,  736,
      737,  737,  737,  737,  738,  738,  738,  738,  739,  739,
      739,  739,  740,  740,  740,  741,  741,  742,  742,  734,

      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "nask.ll"
/* -*- c++ -*- File generated by the BNF Converter (bnfc 2.9.5). */
/* Lexer definition for use with FLex */
/* Additional data for the lexer: a buffer for lexing string literals. */

#line 14 "nask.ll"
#include "scanner.hh"

/* using "token" to make the returns for the tokens shorter to type */
using token = nask_::NaskParser::token;


#include "absyn.hh"
#include "bison.hh"

#define initialize_lexer nask__initialize_lexer

/* BEGIN extensible string buffer */

#include "buffer.hh"

/* The initial size of the buffer to lex string literals. */
#define LITERAL_BUFFER_INITIAL_SIZE 1024

/* The pointer to the literal buffer. */
Buffer literal_buffer = nullptr;

/* Initialize the literal buffer. */
#define LITERAL_BUFFER_CREATE() literal_buffer = newBuffer(LITERAL_BUFFER_INITIAL_SIZE)

/* Append characters at the end of the buffer. */
#define LITERAL_BUFFER_APPEND(s) bufferAppendString(literal_buffer, s)

/* Append a character at the end of the buffer. */
#define LITERAL_BUFFER_APPEND_CHAR(c) bufferAppendChar(literal_buffer, c)

/* Release the buffer, returning a pointer to its content. */
#define LITERAL_BUFFER_HARVEST() releaseBuffer(literal_buffer)

/* In exceptional cases, e.g. when reaching EOF, we have to free the buffer. */
#define LITERAL_BUFFER_FREE() freeBuffer(literal_buffer)

/* END extensible string buffer */

/* update location on matching */
#define YY_USER_ACTION \
loc->begin.line   = loc->end.line; \
loc->begin.column = loc->end.column; \
for(int i = 0; yytext[i] != '\0'; i++) { \
    if(yytext[i] == '\n') { \
        loc->end.line++; \
        loc->end.column = 0; \
    } \
    else { \
        loc->end.column++; \
    } \
}
#line 1260 "lexer.cc"

#line 1262 "lexer.cc"

#define INITIAL 0
#define CHAR 1
#define CHARESC 2
#define CHAREND 3
#define STRING 4
#define ESCAPED 5
#define COMMENT 6
#define COMMENT1 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE Buffer

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 74 "nask.ll"


#line 1402 "lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 735 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2400 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 76 "nask.ll"
return token::_LBRACK;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 77 "nask.ll"
return token::_RBRACK;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 78 "nask.ll"
return token::_COMMA;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 79 "nask.ll"
return token::_PLUS;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 80 "nask.ll"
return token::_MINUS;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 81 "nask.ll"
return token::_STAR;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 82 "nask.ll"
return token::_SLASH;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 83 "nask.ll"
return token::_PERCENT;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 84 "nask.ll"
return token::_COLON;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 85 "nask.ll"
return token::_KW_AAA;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 86 "nask.ll"
return token::_KW_AAD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 87 "nask.ll"
return token::_KW_AAM;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 88 "nask.ll"
return token::_KW_AAS;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 89 "nask.ll"
return token::_KW_ABSOLUTE;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 90 "nask.ll"
return token::_KW_ADC;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 91 "nask.ll"
return token::_KW_ADD;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 92 "nask.ll"
return token::_KW_ALIGN;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 93 "nask.ll"
return token::_KW_ALIGNB;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 94 "nask.ll"
return token::_KW_AND;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 95 "nask.ll"
return token::_KW_ARPL;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 96 "nask.ll"
return token::_KW_BITS;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 97 "nask.ll"
return token::_KW_BOUND;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 98 "nask.ll"
return token::_KW_BSF;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 99 "nask.ll"
return token::_KW_BSR;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 100 "nask.ll"
return token::_KW_BSWAP;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 101 "nask.ll"
return token::_KW_BT;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 102 "nask.ll"
return token::_KW_BTC;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 103 "nask.ll"
return token::_KW_BTR;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 104 "nask.ll"
return token::_KW_BTS;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 105 "nask.ll"
return token::_KW_BYTE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 106 "nask.ll"
return token::_KW_CALL;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 107 "nask.ll"
return token::_KW_CBW;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 108 "nask.ll"
return token::_KW_CDQ;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 109 "nask.ll"
return token::_KW_CLC;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 110 "nask.ll"
return token::_KW_CLD;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 111 "nask.ll"
return token::_KW_CLI;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 112 "nask.ll"
return token::_KW_CLTS;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 113 "nask.ll"
return token::_KW_CMC;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 114 "nask.ll"
return token::_KW_CMP;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 115 "nask.ll"
return token::_KW_CMPSB;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 116 "nask.ll"
return token::_KW_CMPSD;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 117 "nask.ll"
return token::_KW_CMPSW;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 118 "nask.ll"
return token::_KW_CMPXCHG;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 119 "nask.ll"
return token::_KW_CPUID;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "nask.ll"
return token::_KW_CWD;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "nask.ll"
return token::_KW_CWDE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "nask.ll"
return token::_KW_DAA;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "nask.ll"
return token::_KW_DAS;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "nask.ll"
return token::_KW_DB;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "nask.ll"
return token::_KW_DD;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "nask.ll"
return token::_KW_DEC;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "nask.ll"
return token::_KW_DIV;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "nask.ll"
return token::_KW_DQ;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "nask.ll"
return token::_KW_DT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "nask.ll"
return token::_KW_DW;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "nask.ll"
return token::_KW_DWORD;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 132 "nask.ll"
return token::_KW_END;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "nask.ll"
return token::_KW_ENTER;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 134 "nask.ll"
return token::_KW_EQU;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "nask.ll"
return token::_KW_EXTERN;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 136 "nask.ll"
return token::_KW_F2XM1;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 137 "nask.ll"
return token::_KW_FABS;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 138 "nask.ll"
return token::_KW_FADD;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 139 "nask.ll"
return token::_KW_FADDP;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 140 "nask.ll"
return token::_KW_FBLD;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 141 "nask.ll"
return token::_KW_FBSTP;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 142 "nask.ll"
return token::_KW_FCHS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 143 "nask.ll"
return token::_KW_FCLEX;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 144 "nask.ll"
return token::_KW_FCOM;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 145 "nask.ll"
return token::_KW_FCOMP;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 146 "nask.ll"
return token::_KW_FCOMPP;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 147 "nask.ll"
return token::_KW_FCOS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 148 "nask.ll"
return token::_KW_FDECSTP;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 149 "nask.ll"
return token::_KW_FDISI;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 150 "nask.ll"
return token::_KW_FDIV;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 151 "nask.ll"
return token::_KW_FDIVP;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 152 "nask.ll"
return token::_KW_FDIVR;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 153 "nask.ll"
return token::_KW_FDIVRP;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 154 "nask.ll"
return token::_KW_FENI;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 155 "nask.ll"
return token::_KW_FFREE;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 156 "nask.ll"
return token::_KW_FIADD;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 157 "nask.ll"
return token::_KW_FICOM;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 158 "nask.ll"
return token::_KW_FICOMP;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 159 "nask.ll"
return token::_KW_FIDIV;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 160 "nask.ll"
return token::_KW_FIDIVR;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 161 "nask.ll"
return token::_KW_FILD;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 162 "nask.ll"
return token::_KW_FILE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 163 "nask.ll"
return token::_KW_FIMUL;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 164 "nask.ll"
return token::_KW_FINCSTP;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 165 "nask.ll"
return token::_KW_FINIT;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 166 "nask.ll"
return token::_KW_FIST;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 167 "nask.ll"
return token::_KW_FISTP;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 168 "nask.ll"
return token::_KW_FISUB;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 169 "nask.ll"
return token::_KW_FISUBR;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 170 "nask.ll"
return token::_KW_FLD;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 171 "nask.ll"
return token::_KW_FLD1;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 172 "nask.ll"
return token::_KW_FLDCW;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 173 "nask.ll"
return token::_KW_FLDENV;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 174 "nask.ll"
return token::_KW_FLDL2E;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 175 "nask.ll"
return token::_KW_FLDL2T;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 176 "nask.ll"
return token::_KW_FLDLG2;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 177 "nask.ll"
return token::_KW_FLDLN2;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 178 "nask.ll"
return token::_KW_FLDPI;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 179 "nask.ll"
return token::_KW_FLDZ;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 180 "nask.ll"
return token::_KW_FMUL;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 181 "nask.ll"
return token::_KW_FMULP;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 182 "nask.ll"
return token::_KW_FNCLEX;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 183 "nask.ll"
return token::_KW_FNDISI;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 184 "nask.ll"
return token::_KW_FNENI;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 185 "nask.ll"
return token::_KW_FNINIT;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 186 "nask.ll"
return token::_KW_FNOP;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 187 "nask.ll"
return token::_KW_FNSAVE;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 188 "nask.ll"
return token::_KW_FNSTCW;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 189 "nask.ll"
return token::_KW_FNSTENV;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 190 "nask.ll"
return token::_KW_FNSTSW;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 191 "nask.ll"
return token::_KW_FORMAT;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 192 "nask.ll"
return token::_KW_FPATAN;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 193 "nask.ll"
return token::_KW_FPREM;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 194 "nask.ll"
return token::_KW_FPREM1;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 195 "nask.ll"
return token::_KW_FPTAN;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 196 "nask.ll"
return token::_KW_FRNDINT;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 197 "nask.ll"
return token::_KW_FRSTOR;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 198 "nask.ll"
return token::_KW_FSAVE;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 199 "nask.ll"
return token::_KW_FSCALE;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 200 "nask.ll"
return token::_KW_FSETPM;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 201 "nask.ll"
return token::_KW_FSIN;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 202 "nask.ll"
return token::_KW_FSINCOS;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 203 "nask.ll"
return token::_KW_FSQRT;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 204 "nask.ll"
return token::_KW_FST;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 205 "nask.ll"
return token::_KW_FSTCW;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 206 "nask.ll"
return token::_KW_FSTENV;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 207 "nask.ll"
return token::_KW_FSTP;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 208 "nask.ll"
return token::_KW_FSTSW;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 209 "nask.ll"
return token::_KW_FSUB;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 210 "nask.ll"
return token::_KW_FSUBP;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 211 "nask.ll"
return token::_KW_FSUBR;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 212 "nask.ll"
return token::_KW_FSUBRP;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 213 "nask.ll"
return token::_KW_FTST;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 214 "nask.ll"
return token::_KW_FUCOM;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 215 "nask.ll"
return token::_KW_FUCOMP;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 216 "nask.ll"
return token::_KW_FUCOMPP;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 217 "nask.ll"
return token::_KW_FXAM;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 218 "nask.ll"
return token::_KW_FXCH;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 219 "nask.ll"
return token::_KW_FXTRACT;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 220 "nask.ll"
return token::_KW_FYL2X;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 221 "nask.ll"
return token::_KW_FYL2XP1;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 222 "nask.ll"
return token::_KW_HLT;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 223 "nask.ll"
return token::_KW_IDIV;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 224 "nask.ll"
return token::_KW_IMUL;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 225 "nask.ll"
return token::_KW_IN;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 226 "nask.ll"
return token::_KW_INC;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 227 "nask.ll"
return token::_KW_INCO;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 228 "nask.ll"
return token::_KW_INSB;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 229 "nask.ll"
return token::_KW_INSD;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 230 "nask.ll"
return token::_KW_INSTRSET;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 231 "nask.ll"
return token::_KW_INSW;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 232 "nask.ll"
return token::_KW_INT;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 233 "nask.ll"
return token::_KW_INT3;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 234 "nask.ll"
return token::_KW_INTO;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 235 "nask.ll"
return token::_KW_INVD;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 236 "nask.ll"
return token::_KW_INVLPG;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 237 "nask.ll"
return token::_KW_IRET;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 238 "nask.ll"
return token::_KW_IRETD;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 239 "nask.ll"
return token::_KW_IRETW;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 240 "nask.ll"
return token::_KW_JA;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 241 "nask.ll"
return token::_KW_JAE;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 242 "nask.ll"
return token::_KW_JB;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 243 "nask.ll"
return token::_KW_JBE;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 244 "nask.ll"
return token::_KW_JC;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 245 "nask.ll"
return token::_KW_JCXZ;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 246 "nask.ll"
return token::_KW_JE;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 247 "nask.ll"
return token::_KW_JECXZ;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 248 "nask.ll"
return token::_KW_JG;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 249 "nask.ll"
return token::_KW_JGE;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 250 "nask.ll"
return token::_KW_JL;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 251 "nask.ll"
return token::_KW_JLE;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 252 "nask.ll"
return token::_KW_JMP;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 253 "nask.ll"
return token::_KW_JNA;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 254 "nask.ll"
return token::_KW_JNAE;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 255 "nask.ll"
return token::_KW_JNB;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 256 "nask.ll"
return token::_KW_JNBE;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 257 "nask.ll"
return token::_KW_JNC;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 258 "nask.ll"
return token::_KW_JNE;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 259 "nask.ll"
return token::_KW_JNG;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 260 "nask.ll"
return token::_KW_JNGE;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 261 "nask.ll"
return token::_KW_JNL;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 262 "nask.ll"
return token::_KW_JNLE;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 263 "nask.ll"
return token::_KW_JNO;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 264 "nask.ll"
return token::_KW_JNP;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 265 "nask.ll"
return token::_KW_JNS;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 266 "nask.ll"
return token::_KW_JNZ;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 267 "nask.ll"
return token::_KW_JO;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 268 "nask.ll"
return token::_KW_JP;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 269 "nask.ll"
return token::_KW_JPE;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 270 "nask.ll"
return token::_KW_JPO;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 271 "nask.ll"
return token::_KW_JS;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 272 "nask.ll"
return token::_KW_JZ;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 273 "nask.ll"
return token::_KW_LAHF;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 274 "nask.ll"
return token::_KW_LAR;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 275 "nask.ll"
return token::_KW_LDS;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 276 "nask.ll"
return token::_KW_LEA;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 277 "nask.ll"
return token::_KW_LEAVE;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 278 "nask.ll"
return token::_KW_LES;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 279 "nask.ll"
return token::_KW_LFS;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 280 "nask.ll"
return token::_KW_LGDT;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 281 "nask.ll"
return token::_KW_LGS;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 282 "nask.ll"
return token::_KW_LIDT;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 283 "nask.ll"
return token::_KW_LLDT;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 284 "nask.ll"
return token::_KW_LMSW;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 285 "nask.ll"
return token::_KW_LOCK;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 286 "nask.ll"
return token::_KW_LODSB;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 287 "nask.ll"
return token::_KW_LODSD;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 288 "nask.ll"
return token::_KW_LODSW;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 289 "nask.ll"
return token::_KW_LOOP;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 290 "nask.ll"
return token::_KW_LOOPE;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 291 "nask.ll"
return token::_KW_LOOPNE;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 292 "nask.ll"
return token::_KW_LOOPNZ;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 293 "nask.ll"
return token::_KW_LOOPZ;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 294 "nask.ll"
return token::_KW_LSL;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 295 "nask.ll"
return token::_KW_LSS;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 296 "nask.ll"
return token::_KW_LTR;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 297 "nask.ll"
return token::_KW_MOV;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 298 "nask.ll"
return token::_KW_MOVSB;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 299 "nask.ll"
return token::_KW_MOVSD;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 300 "nask.ll"
return token::_KW_MOVSW;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 301 "nask.ll"
return token::_KW_MOVSX;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 302 "nask.ll"
return token::_KW_MOVZX;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 303 "nask.ll"
return token::_KW_MUL;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 304 "nask.ll"
return token::_KW_NEG;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 305 "nask.ll"
return token::_KW_NOP;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 306 "nask.ll"
return token::_KW_NOT;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 307 "nask.ll"
return token::_KW_OPTIMIZE;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 308 "nask.ll"
return token::_KW_OR;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 309 "nask.ll"
return token::_KW_ORG;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 310 "nask.ll"
return token::_KW_OUT;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 311 "nask.ll"
return token::_KW_OUTSB;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 312 "nask.ll"
return token::_KW_OUTSD;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 313 "nask.ll"
return token::_KW_OUTSW;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 314 "nask.ll"
return token::_KW_PADDING;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 315 "nask.ll"
return token::_KW_PADSET;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 316 "nask.ll"
return token::_KW_POP;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 317 "nask.ll"
return token::_KW_POPA;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 318 "nask.ll"
return token::_KW_POPAD;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 319 "nask.ll"
return token::_KW_POPAW;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 320 "nask.ll"
return token::_KW_POPF;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 321 "nask.ll"
return token::_KW_POPFD;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 322 "nask.ll"
return token::_KW_POPFW;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 323 "nask.ll"
return token::_KW_PUSH;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 324 "nask.ll"
return token::_KW_PUSHA;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 325 "nask.ll"
return token::_KW_PUSHAD;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 326 "nask.ll"
return token::_KW_PUSHAW;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 327 "nask.ll"
return token::_KW_PUSHD;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 328 "nask.ll"
return token::_KW_PUSHF;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 329 "nask.ll"
return token::_KW_PUSHFD;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 330 "nask.ll"
return token::_KW_PUSHFW;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 331 "nask.ll"
return token::_KW_RCL;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 332 "nask.ll"
return token::_KW_RCR;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 333 "nask.ll"
return token::_KW_RDMSR;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 334 "nask.ll"
return token::_KW_RDPMC;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 335 "nask.ll"
return token::_KW_REP;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 336 "nask.ll"
return token::_KW_REPE;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 337 "nask.ll"
return token::_KW_REPNE;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 338 "nask.ll"
return token::_KW_REPNZ;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 339 "nask.ll"
return token::_KW_REPZ;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 340 "nask.ll"
return token::_KW_RESB;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 341 "nask.ll"
return token::_KW_RESD;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 342 "nask.ll"
return token::_KW_RESQ;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 343 "nask.ll"
return token::_KW_REST;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 344 "nask.ll"
return token::_KW_RESW;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 345 "nask.ll"
return token::_KW_RET;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 346 "nask.ll"
return token::_KW_RETF;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 347 "nask.ll"
return token::_KW_RETN;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 348 "nask.ll"
return token::_KW_ROL;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 349 "nask.ll"
return token::_KW_ROR;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 350 "nask.ll"
return token::_KW_RSM;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 351 "nask.ll"
return token::_KW_SAHF;
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 352 "nask.ll"
return token::_KW_SAL;
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 353 "nask.ll"
return token::_KW_SAR;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 354 "nask.ll"
return token::_KW_SBB;
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 355 "nask.ll"
return token::_KW_SCASB;
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 356 "nask.ll"
return token::_KW_SCASD;
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 357 "nask.ll"
return token::_KW_SCASW;
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 358 "nask.ll"
return token::_KW_SECTION;
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 359 "nask.ll"
return token::_KW_SETA;
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 360 "nask.ll"
return token::_KW_SETAE;
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 361 "nask.ll"
return token::_KW_SETB;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 362 "nask.ll"
return token::_KW_SETBE;
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 363 "nask.ll"
return token::_KW_SETC;
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 364 "nask.ll"
return token::_KW_SETE;
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 365 "nask.ll"
return token::_KW_SETG;
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 366 "nask.ll"
return token::_KW_SETGE;
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 367 "nask.ll"
return token::_KW_SETL;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 368 "nask.ll"
return token::_KW_SETLE;
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 369 "nask.ll"
return token::_KW_SETNA;
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 370 "nask.ll"
return token::_KW_SETNAE;
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 371 "nask.ll"
return token::_KW_SETNB;
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 372 "nask.ll"
return token::_KW_SETNBE;
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 373 "nask.ll"
return token::_KW_SETNC;
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 374 "nask.ll"
return token::_KW_SETNE;
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 375 "nask.ll"
return token::_KW_SETNG;
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 376 "nask.ll"
return token::_KW_SETNGE;
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 377 "nask.ll"
return token::_KW_SETNL;
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 378 "nask.ll"
return token::_KW_SETNLE;
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 379 "nask.ll"
return token::_KW_SETNO;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 380 "nask.ll"
return token::_KW_SETNP;
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 381 "nask.ll"
return token::_KW_SETNS;
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 382 "nask.ll"
return token::_KW_SETNZ;
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 383 "nask.ll"
return token::_KW_SETO;
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 384 "nask.ll"
return token::_KW_SETP;
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 385 "nask.ll"
return token::_KW_SETPE;
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 386 "nask.ll"
return token::_KW_SETPO;
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 387 "nask.ll"
return token::_KW_SETS;
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 388 "nask.ll"
return token::_KW_SETZ;
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 389 "nask.ll"
return token::_KW_SGDT;
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 390 "nask.ll"
return token::_KW_SHL;
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 391 "nask.ll"
return token::_KW_SHLD;
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 392 "nask.ll"
return token::_KW_SHR;
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 393 "nask.ll"
return token::_KW_SHRD;
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 394 "nask.ll"
return token::_KW_SIDT;
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 395 "nask.ll"
return token::_KW_SLDT;
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 396 "nask.ll"
return token::_KW_SMSW;
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 397 "nask.ll"
return token::_KW_STC;
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 398 "nask.ll"
return token::_KW_STD;
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 399 "nask.ll"
return token::_KW_STI;
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 400 "nask.ll"
return token::_KW_STOSB;
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 401 "nask.ll"
return token::_KW_STOSD;
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 402 "nask.ll"
return token::_KW_STOSW;
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 403 "nask.ll"
return token::_KW_STR;
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 404 "nask.ll"
return token::_KW_SUB;
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 405 "nask.ll"
return token::_KW_TEST;
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 406 "nask.ll"
return token::_KW_TIMES;
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 407 "nask.ll"
return token::_KW_UD2;
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 408 "nask.ll"
return token::_KW_VERR;
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 409 "nask.ll"
return token::_KW_VERW;
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 410 "nask.ll"
return token::_KW_WAIT;
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 411 "nask.ll"
return token::_KW_WBINVD;
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 412 "nask.ll"
return token::_KW_WORD;
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 413 "nask.ll"
return token::_KW_WRMSR;
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 414 "nask.ll"
return token::_KW_XADD;
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 415 "nask.ll"
return token::_KW_XCHG;
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 416 "nask.ll"
return token::_KW_XLATB;
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 417 "nask.ll"
return token::_KW_XOR;
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 419 "nask.ll"
BEGIN COMMENT; /* BNFC: block comment "#" "\\n" */
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 420 "nask.ll"
BEGIN INITIAL;
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 421 "nask.ll"
/* skip */;
	YY_BREAK
case 346:
/* rule 346 can match eol */
YY_RULE_SETUP
#line 422 "nask.ll"
/* skip */;
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 423 "nask.ll"
BEGIN COMMENT1; /* BNFC: block comment ";" "\\n" */
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 424 "nask.ll"
BEGIN INITIAL;
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 425 "nask.ll"
/* skip */;
	YY_BREAK
case 350:
/* rule 350 can match eol */
YY_RULE_SETUP
#line 426 "nask.ll"
/* skip */;
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 428 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_Hex;
	YY_BREAK
case 352:
/* rule 352 can match eol */
YY_RULE_SETUP
#line 429 "nask.ll"
yylval->emplace<std::string>(yytext); return token::T_Label;
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 430 "nask.ll"
LITERAL_BUFFER_CREATE(); BEGIN STRING;
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 431 "nask.ll"
BEGIN ESCAPED;
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 432 "nask.ll"
yylval->emplace<std::string>(LITERAL_BUFFER_HARVEST()); BEGIN INITIAL; return token::_STRING_;
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 433 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR(yytext[0]);
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 434 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\f'); BEGIN STRING;
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 435 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\n'); BEGIN STRING;
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 436 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\r'); BEGIN STRING;
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 437 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\t'); BEGIN STRING;
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 438 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('"');  BEGIN STRING;
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 439 "nask.ll"
LITERAL_BUFFER_APPEND_CHAR('\\'); BEGIN STRING;
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 440 "nask.ll"
LITERAL_BUFFER_APPEND(yytext);    BEGIN STRING;
	YY_BREAK
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(ESCAPED):
#line 441 "nask.ll"
LITERAL_BUFFER_FREE(); return token::_ERROR_;
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 442 "nask.ll"
yylval->emplace<int>(atoi(yytext)); return token::_INTEGER_;
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 443 "nask.ll"
yylval->emplace<std::string>(yytext); return token::_IDENT_;
	YY_BREAK
case 366:
/* rule 366 can match eol */
YY_RULE_SETUP
#line 444 "nask.ll"
/* ignore white space. */;
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 445 "nask.ll"
return token::_ERROR_;
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 447 "nask.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3308 "lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CHAR):
case YY_STATE_EOF(CHARESC):
case YY_STATE_EOF(CHAREND):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(COMMENT1):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 735 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 735 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 734);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 447 "nask.ll"



NaskScanner::NaskScanner(std::istream *in)
    : yyFlexLexer(in)
{
    loc = new nask_::NaskParser::location_type();
}

NaskScanner::~NaskScanner()
{
}

/* This implementation of NaskFlexLexer::yylex() is required to fill the
 * vtable of the class NaskFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */



#ifdef yylex
#undef yylex
#endif

int yyFlexLexer::yylex()
{
    std::cerr << "in yyFlexLexer::yylex() !" << std::endl;
    return 0;
}



