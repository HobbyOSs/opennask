/* File generated by the BNF Converter (bnfc 2.9.5). */

//C++ Abstract Syntax Implementation.
#include <algorithm>
#include <string>
#include <vector>
#include "absyn.hh"

/********************   Prog    ********************/



void Prog::accept(Visitor *v)
{
    v->visitProg(this);
}

std::shared_ptr<Program> Prog::clone() const
{
    return std::make_shared<Prog>(*this);
}



/********************   LabelStmt    ********************/



void LabelStmt::accept(Visitor *v)
{
    v->visitLabelStmt(this);
}

std::shared_ptr<Statement> LabelStmt::clone() const
{
    return std::make_shared<LabelStmt>(*this);
}



/********************   DeclareStmt    ********************/



void DeclareStmt::accept(Visitor *v)
{
    v->visitDeclareStmt(this);
}

std::shared_ptr<Statement> DeclareStmt::clone() const
{
    return std::make_shared<DeclareStmt>(*this);
}



/********************   ExportSymStmt    ********************/



void ExportSymStmt::accept(Visitor *v)
{
    v->visitExportSymStmt(this);
}

std::shared_ptr<Statement> ExportSymStmt::clone() const
{
    return std::make_shared<ExportSymStmt>(*this);
}



/********************   ExternSymStmt    ********************/



void ExternSymStmt::accept(Visitor *v)
{
    v->visitExternSymStmt(this);
}

std::shared_ptr<Statement> ExternSymStmt::clone() const
{
    return std::make_shared<ExternSymStmt>(*this);
}



/********************   ConfigStmt    ********************/



void ConfigStmt::accept(Visitor *v)
{
    v->visitConfigStmt(this);
}

std::shared_ptr<Statement> ConfigStmt::clone() const
{
    return std::make_shared<ConfigStmt>(*this);
}



/********************   MnemonicStmt    ********************/



void MnemonicStmt::accept(Visitor *v)
{
    v->visitMnemonicStmt(this);
}

std::shared_ptr<Statement> MnemonicStmt::clone() const
{
    return std::make_shared<MnemonicStmt>(*this);
}



/********************   MnemoArg    ********************/



void MnemoArg::accept(Visitor *v)
{
    v->visitMnemoArg(this);
}

std::shared_ptr<MnemonicArgs> MnemoArg::clone() const
{
    return std::make_shared<MnemoArg>(*this);
}



/********************   PlusExp    ********************/



void PlusExp::accept(Visitor *v)
{
    v->visitPlusExp(this);
}

std::shared_ptr<Exp> PlusExp::clone() const
{
    return std::make_shared<PlusExp>(*this);
}



/********************   MinusExp    ********************/



void MinusExp::accept(Visitor *v)
{
    v->visitMinusExp(this);
}

std::shared_ptr<Exp> MinusExp::clone() const
{
    return std::make_shared<MinusExp>(*this);
}



/********************   MulExp    ********************/



void MulExp::accept(Visitor *v)
{
    v->visitMulExp(this);
}

std::shared_ptr<Exp> MulExp::clone() const
{
    return std::make_shared<MulExp>(*this);
}



/********************   DivExp    ********************/



void DivExp::accept(Visitor *v)
{
    v->visitDivExp(this);
}

std::shared_ptr<Exp> DivExp::clone() const
{
    return std::make_shared<DivExp>(*this);
}



/********************   ModExp    ********************/



void ModExp::accept(Visitor *v)
{
    v->visitModExp(this);
}

std::shared_ptr<Exp> ModExp::clone() const
{
    return std::make_shared<ModExp>(*this);
}



/********************   ImmExp    ********************/



void ImmExp::accept(Visitor *v)
{
    v->visitImmExp(this);
}

std::shared_ptr<Exp> ImmExp::clone() const
{
    return std::make_shared<ImmExp>(*this);
}



/********************   DatatypeExp    ********************/



void DatatypeExp::accept(Visitor *v)
{
    v->visitDatatypeExp(this);
}

std::shared_ptr<Exp> DatatypeExp::clone() const
{
    return std::make_shared<DatatypeExp>(*this);
}



/********************   SegmentOffsetExp    ********************/



void SegmentOffsetExp::accept(Visitor *v)
{
    v->visitSegmentOffsetExp(this);
}

std::shared_ptr<Exp> SegmentOffsetExp::clone() const
{
    return std::make_shared<SegmentOffsetExp>(*this);
}



/********************   MemoryAddrExp    ********************/



void MemoryAddrExp::accept(Visitor *v)
{
    v->visitMemoryAddrExp(this);
}

std::shared_ptr<Exp> MemoryAddrExp::clone() const
{
    return std::make_shared<MemoryAddrExp>(*this);
}



/********************   Direct    ********************/



void Direct::accept(Visitor *v)
{
    v->visitDirect(this);
}

std::shared_ptr<MemoryAddr> Direct::clone() const
{
    return std::make_shared<Direct>(*this);
}



/********************   BasedOrIndexed    ********************/



void BasedOrIndexed::accept(Visitor *v)
{
    v->visitBasedOrIndexed(this);
}

std::shared_ptr<MemoryAddr> BasedOrIndexed::clone() const
{
    return std::make_shared<BasedOrIndexed>(*this);
}



/********************   Indexed    ********************/



void Indexed::accept(Visitor *v)
{
    v->visitIndexed(this);
}

std::shared_ptr<MemoryAddr> Indexed::clone() const
{
    return std::make_shared<Indexed>(*this);
}



/********************   BasedIndexed    ********************/



void BasedIndexed::accept(Visitor *v)
{
    v->visitBasedIndexed(this);
}

std::shared_ptr<MemoryAddr> BasedIndexed::clone() const
{
    return std::make_shared<BasedIndexed>(*this);
}



/********************   BasedIndexedDisp    ********************/



void BasedIndexedDisp::accept(Visitor *v)
{
    v->visitBasedIndexedDisp(this);
}

std::shared_ptr<MemoryAddr> BasedIndexedDisp::clone() const
{
    return std::make_shared<BasedIndexedDisp>(*this);
}



/********************   BasedIndexedDispScale    ********************/



void BasedIndexedDispScale::accept(Visitor *v)
{
    v->visitBasedIndexedDispScale(this);
}

std::shared_ptr<MemoryAddr> BasedIndexedDispScale::clone() const
{
    return std::make_shared<BasedIndexedDispScale>(*this);
}



/********************   IndexScaleExp    ********************/



void IndexScaleExp::accept(Visitor *v)
{
    v->visitIndexScaleExp(this);
}

std::shared_ptr<IndexExp> IndexScaleExp::clone() const
{
    return std::make_shared<IndexScaleExp>(*this);
}



/********************   NumberFactor    ********************/



void NumberFactor::accept(Visitor *v)
{
    v->visitNumberFactor(this);
}

std::shared_ptr<Factor> NumberFactor::clone() const
{
    return std::make_shared<NumberFactor>(*this);
}



/********************   HexFactor    ********************/



void HexFactor::accept(Visitor *v)
{
    v->visitHexFactor(this);
}

std::shared_ptr<Factor> HexFactor::clone() const
{
    return std::make_shared<HexFactor>(*this);
}



/********************   IdentFactor    ********************/



void IdentFactor::accept(Visitor *v)
{
    v->visitIdentFactor(this);
}

std::shared_ptr<Factor> IdentFactor::clone() const
{
    return std::make_shared<IdentFactor>(*this);
}



/********************   StringFactor    ********************/



void StringFactor::accept(Visitor *v)
{
    v->visitStringFactor(this);
}

std::shared_ptr<Factor> StringFactor::clone() const
{
    return std::make_shared<StringFactor>(*this);
}



/********************   CharFactor    ********************/



void CharFactor::accept(Visitor *v)
{
    v->visitCharFactor(this);
}

std::shared_ptr<Factor> CharFactor::clone() const
{
    return std::make_shared<CharFactor>(*this);
}



/********************   BitsConfig    ********************/



void BitsConfig::accept(Visitor *v)
{
    v->visitBitsConfig(this);
}

std::shared_ptr<ConfigType> BitsConfig::clone() const
{
    return std::make_shared<BitsConfig>(*this);
}



/********************   InstConfig    ********************/



void InstConfig::accept(Visitor *v)
{
    v->visitInstConfig(this);
}

std::shared_ptr<ConfigType> InstConfig::clone() const
{
    return std::make_shared<InstConfig>(*this);
}



/********************   OptiConfig    ********************/



void OptiConfig::accept(Visitor *v)
{
    v->visitOptiConfig(this);
}

std::shared_ptr<ConfigType> OptiConfig::clone() const
{
    return std::make_shared<OptiConfig>(*this);
}



/********************   FormConfig    ********************/



void FormConfig::accept(Visitor *v)
{
    v->visitFormConfig(this);
}

std::shared_ptr<ConfigType> FormConfig::clone() const
{
    return std::make_shared<FormConfig>(*this);
}



/********************   PaddConfig    ********************/



void PaddConfig::accept(Visitor *v)
{
    v->visitPaddConfig(this);
}

std::shared_ptr<ConfigType> PaddConfig::clone() const
{
    return std::make_shared<PaddConfig>(*this);
}



/********************   PadsConfig    ********************/



void PadsConfig::accept(Visitor *v)
{
    v->visitPadsConfig(this);
}

std::shared_ptr<ConfigType> PadsConfig::clone() const
{
    return std::make_shared<PadsConfig>(*this);
}



/********************   SectConfig    ********************/



void SectConfig::accept(Visitor *v)
{
    v->visitSectConfig(this);
}

std::shared_ptr<ConfigType> SectConfig::clone() const
{
    return std::make_shared<SectConfig>(*this);
}



/********************   AbsoConfig    ********************/



void AbsoConfig::accept(Visitor *v)
{
    v->visitAbsoConfig(this);
}

std::shared_ptr<ConfigType> AbsoConfig::clone() const
{
    return std::make_shared<AbsoConfig>(*this);
}



/********************   FileConfig    ********************/



void FileConfig::accept(Visitor *v)
{
    v->visitFileConfig(this);
}

std::shared_ptr<ConfigType> FileConfig::clone() const
{
    return std::make_shared<FileConfig>(*this);
}



/********************   ByteDataType    ********************/



void ByteDataType::accept(Visitor *v)
{
    v->visitByteDataType(this);
}

std::shared_ptr<DataType> ByteDataType::clone() const
{
    return std::make_shared<ByteDataType>(*this);
}



/********************   WordDataType    ********************/



void WordDataType::accept(Visitor *v)
{
    v->visitWordDataType(this);
}

std::shared_ptr<DataType> WordDataType::clone() const
{
    return std::make_shared<WordDataType>(*this);
}



/********************   DwordDataType    ********************/



void DwordDataType::accept(Visitor *v)
{
    v->visitDwordDataType(this);
}

std::shared_ptr<DataType> DwordDataType::clone() const
{
    return std::make_shared<DwordDataType>(*this);
}



/********************   OpcodesAAA    ********************/



void OpcodesAAA::accept(Visitor *v)
{
    v->visitOpcodesAAA(this);
}

std::shared_ptr<Opcode> OpcodesAAA::clone() const
{
    return std::make_shared<OpcodesAAA>(*this);
}



/********************   OpcodesAAD    ********************/



void OpcodesAAD::accept(Visitor *v)
{
    v->visitOpcodesAAD(this);
}

std::shared_ptr<Opcode> OpcodesAAD::clone() const
{
    return std::make_shared<OpcodesAAD>(*this);
}



/********************   OpcodesAAS    ********************/



void OpcodesAAS::accept(Visitor *v)
{
    v->visitOpcodesAAS(this);
}

std::shared_ptr<Opcode> OpcodesAAS::clone() const
{
    return std::make_shared<OpcodesAAS>(*this);
}



/********************   OpcodesAAM    ********************/



void OpcodesAAM::accept(Visitor *v)
{
    v->visitOpcodesAAM(this);
}

std::shared_ptr<Opcode> OpcodesAAM::clone() const
{
    return std::make_shared<OpcodesAAM>(*this);
}



/********************   OpcodesADC    ********************/



void OpcodesADC::accept(Visitor *v)
{
    v->visitOpcodesADC(this);
}

std::shared_ptr<Opcode> OpcodesADC::clone() const
{
    return std::make_shared<OpcodesADC>(*this);
}



/********************   OpcodesADD    ********************/



void OpcodesADD::accept(Visitor *v)
{
    v->visitOpcodesADD(this);
}

std::shared_ptr<Opcode> OpcodesADD::clone() const
{
    return std::make_shared<OpcodesADD>(*this);
}



/********************   OpcodesAND    ********************/



void OpcodesAND::accept(Visitor *v)
{
    v->visitOpcodesAND(this);
}

std::shared_ptr<Opcode> OpcodesAND::clone() const
{
    return std::make_shared<OpcodesAND>(*this);
}



/********************   OpcodesALIGN    ********************/



void OpcodesALIGN::accept(Visitor *v)
{
    v->visitOpcodesALIGN(this);
}

std::shared_ptr<Opcode> OpcodesALIGN::clone() const
{
    return std::make_shared<OpcodesALIGN>(*this);
}



/********************   OpcodesALIGNB    ********************/



void OpcodesALIGNB::accept(Visitor *v)
{
    v->visitOpcodesALIGNB(this);
}

std::shared_ptr<Opcode> OpcodesALIGNB::clone() const
{
    return std::make_shared<OpcodesALIGNB>(*this);
}



/********************   OpcodesARPL    ********************/



void OpcodesARPL::accept(Visitor *v)
{
    v->visitOpcodesARPL(this);
}

std::shared_ptr<Opcode> OpcodesARPL::clone() const
{
    return std::make_shared<OpcodesARPL>(*this);
}



/********************   OpcodesBOUND    ********************/



void OpcodesBOUND::accept(Visitor *v)
{
    v->visitOpcodesBOUND(this);
}

std::shared_ptr<Opcode> OpcodesBOUND::clone() const
{
    return std::make_shared<OpcodesBOUND>(*this);
}



/********************   OpcodesBSF    ********************/



void OpcodesBSF::accept(Visitor *v)
{
    v->visitOpcodesBSF(this);
}

std::shared_ptr<Opcode> OpcodesBSF::clone() const
{
    return std::make_shared<OpcodesBSF>(*this);
}



/********************   OpcodesBSR    ********************/



void OpcodesBSR::accept(Visitor *v)
{
    v->visitOpcodesBSR(this);
}

std::shared_ptr<Opcode> OpcodesBSR::clone() const
{
    return std::make_shared<OpcodesBSR>(*this);
}



/********************   OpcodesBSWAP    ********************/



void OpcodesBSWAP::accept(Visitor *v)
{
    v->visitOpcodesBSWAP(this);
}

std::shared_ptr<Opcode> OpcodesBSWAP::clone() const
{
    return std::make_shared<OpcodesBSWAP>(*this);
}



/********************   OpcodesBT    ********************/



void OpcodesBT::accept(Visitor *v)
{
    v->visitOpcodesBT(this);
}

std::shared_ptr<Opcode> OpcodesBT::clone() const
{
    return std::make_shared<OpcodesBT>(*this);
}



/********************   OpcodesBTC    ********************/



void OpcodesBTC::accept(Visitor *v)
{
    v->visitOpcodesBTC(this);
}

std::shared_ptr<Opcode> OpcodesBTC::clone() const
{
    return std::make_shared<OpcodesBTC>(*this);
}



/********************   OpcodesBTR    ********************/



void OpcodesBTR::accept(Visitor *v)
{
    v->visitOpcodesBTR(this);
}

std::shared_ptr<Opcode> OpcodesBTR::clone() const
{
    return std::make_shared<OpcodesBTR>(*this);
}



/********************   OpcodesBTS    ********************/



void OpcodesBTS::accept(Visitor *v)
{
    v->visitOpcodesBTS(this);
}

std::shared_ptr<Opcode> OpcodesBTS::clone() const
{
    return std::make_shared<OpcodesBTS>(*this);
}



/********************   OpcodesCALL    ********************/



void OpcodesCALL::accept(Visitor *v)
{
    v->visitOpcodesCALL(this);
}

std::shared_ptr<Opcode> OpcodesCALL::clone() const
{
    return std::make_shared<OpcodesCALL>(*this);
}



/********************   OpcodesCBW    ********************/



void OpcodesCBW::accept(Visitor *v)
{
    v->visitOpcodesCBW(this);
}

std::shared_ptr<Opcode> OpcodesCBW::clone() const
{
    return std::make_shared<OpcodesCBW>(*this);
}



/********************   OpcodesCDQ    ********************/



void OpcodesCDQ::accept(Visitor *v)
{
    v->visitOpcodesCDQ(this);
}

std::shared_ptr<Opcode> OpcodesCDQ::clone() const
{
    return std::make_shared<OpcodesCDQ>(*this);
}



/********************   OpcodesCLC    ********************/



void OpcodesCLC::accept(Visitor *v)
{
    v->visitOpcodesCLC(this);
}

std::shared_ptr<Opcode> OpcodesCLC::clone() const
{
    return std::make_shared<OpcodesCLC>(*this);
}



/********************   OpcodesCLD    ********************/



void OpcodesCLD::accept(Visitor *v)
{
    v->visitOpcodesCLD(this);
}

std::shared_ptr<Opcode> OpcodesCLD::clone() const
{
    return std::make_shared<OpcodesCLD>(*this);
}



/********************   OpcodesCLI    ********************/



void OpcodesCLI::accept(Visitor *v)
{
    v->visitOpcodesCLI(this);
}

std::shared_ptr<Opcode> OpcodesCLI::clone() const
{
    return std::make_shared<OpcodesCLI>(*this);
}



/********************   OpcodesCLTS    ********************/



void OpcodesCLTS::accept(Visitor *v)
{
    v->visitOpcodesCLTS(this);
}

std::shared_ptr<Opcode> OpcodesCLTS::clone() const
{
    return std::make_shared<OpcodesCLTS>(*this);
}



/********************   OpcodesCMC    ********************/



void OpcodesCMC::accept(Visitor *v)
{
    v->visitOpcodesCMC(this);
}

std::shared_ptr<Opcode> OpcodesCMC::clone() const
{
    return std::make_shared<OpcodesCMC>(*this);
}



/********************   OpcodesCMP    ********************/



void OpcodesCMP::accept(Visitor *v)
{
    v->visitOpcodesCMP(this);
}

std::shared_ptr<Opcode> OpcodesCMP::clone() const
{
    return std::make_shared<OpcodesCMP>(*this);
}



/********************   OpcodesCMPSB    ********************/



void OpcodesCMPSB::accept(Visitor *v)
{
    v->visitOpcodesCMPSB(this);
}

std::shared_ptr<Opcode> OpcodesCMPSB::clone() const
{
    return std::make_shared<OpcodesCMPSB>(*this);
}



/********************   OpcodesCMPSD    ********************/



void OpcodesCMPSD::accept(Visitor *v)
{
    v->visitOpcodesCMPSD(this);
}

std::shared_ptr<Opcode> OpcodesCMPSD::clone() const
{
    return std::make_shared<OpcodesCMPSD>(*this);
}



/********************   OpcodesCMPSW    ********************/



void OpcodesCMPSW::accept(Visitor *v)
{
    v->visitOpcodesCMPSW(this);
}

std::shared_ptr<Opcode> OpcodesCMPSW::clone() const
{
    return std::make_shared<OpcodesCMPSW>(*this);
}



/********************   OpcodesCMPXCHG    ********************/



void OpcodesCMPXCHG::accept(Visitor *v)
{
    v->visitOpcodesCMPXCHG(this);
}

std::shared_ptr<Opcode> OpcodesCMPXCHG::clone() const
{
    return std::make_shared<OpcodesCMPXCHG>(*this);
}



/********************   OpcodesCPUID    ********************/



void OpcodesCPUID::accept(Visitor *v)
{
    v->visitOpcodesCPUID(this);
}

std::shared_ptr<Opcode> OpcodesCPUID::clone() const
{
    return std::make_shared<OpcodesCPUID>(*this);
}



/********************   OpcodesCWD    ********************/



void OpcodesCWD::accept(Visitor *v)
{
    v->visitOpcodesCWD(this);
}

std::shared_ptr<Opcode> OpcodesCWD::clone() const
{
    return std::make_shared<OpcodesCWD>(*this);
}



/********************   OpcodesCWDE    ********************/



void OpcodesCWDE::accept(Visitor *v)
{
    v->visitOpcodesCWDE(this);
}

std::shared_ptr<Opcode> OpcodesCWDE::clone() const
{
    return std::make_shared<OpcodesCWDE>(*this);
}



/********************   OpcodesDAA    ********************/



void OpcodesDAA::accept(Visitor *v)
{
    v->visitOpcodesDAA(this);
}

std::shared_ptr<Opcode> OpcodesDAA::clone() const
{
    return std::make_shared<OpcodesDAA>(*this);
}



/********************   OpcodesDAS    ********************/



void OpcodesDAS::accept(Visitor *v)
{
    v->visitOpcodesDAS(this);
}

std::shared_ptr<Opcode> OpcodesDAS::clone() const
{
    return std::make_shared<OpcodesDAS>(*this);
}



/********************   OpcodesDB    ********************/



void OpcodesDB::accept(Visitor *v)
{
    v->visitOpcodesDB(this);
}

std::shared_ptr<Opcode> OpcodesDB::clone() const
{
    return std::make_shared<OpcodesDB>(*this);
}



/********************   OpcodesDD    ********************/



void OpcodesDD::accept(Visitor *v)
{
    v->visitOpcodesDD(this);
}

std::shared_ptr<Opcode> OpcodesDD::clone() const
{
    return std::make_shared<OpcodesDD>(*this);
}



/********************   OpcodesDEC    ********************/



void OpcodesDEC::accept(Visitor *v)
{
    v->visitOpcodesDEC(this);
}

std::shared_ptr<Opcode> OpcodesDEC::clone() const
{
    return std::make_shared<OpcodesDEC>(*this);
}



/********************   OpcodesDIV    ********************/



void OpcodesDIV::accept(Visitor *v)
{
    v->visitOpcodesDIV(this);
}

std::shared_ptr<Opcode> OpcodesDIV::clone() const
{
    return std::make_shared<OpcodesDIV>(*this);
}



/********************   OpcodesDQ    ********************/



void OpcodesDQ::accept(Visitor *v)
{
    v->visitOpcodesDQ(this);
}

std::shared_ptr<Opcode> OpcodesDQ::clone() const
{
    return std::make_shared<OpcodesDQ>(*this);
}



/********************   OpcodesDT    ********************/



void OpcodesDT::accept(Visitor *v)
{
    v->visitOpcodesDT(this);
}

std::shared_ptr<Opcode> OpcodesDT::clone() const
{
    return std::make_shared<OpcodesDT>(*this);
}



/********************   OpcodesDW    ********************/



void OpcodesDW::accept(Visitor *v)
{
    v->visitOpcodesDW(this);
}

std::shared_ptr<Opcode> OpcodesDW::clone() const
{
    return std::make_shared<OpcodesDW>(*this);
}



/********************   OpcodesEND    ********************/



void OpcodesEND::accept(Visitor *v)
{
    v->visitOpcodesEND(this);
}

std::shared_ptr<Opcode> OpcodesEND::clone() const
{
    return std::make_shared<OpcodesEND>(*this);
}



/********************   OpcodesENTER    ********************/



void OpcodesENTER::accept(Visitor *v)
{
    v->visitOpcodesENTER(this);
}

std::shared_ptr<Opcode> OpcodesENTER::clone() const
{
    return std::make_shared<OpcodesENTER>(*this);
}



/********************   OpcodesF2XM1    ********************/



void OpcodesF2XM1::accept(Visitor *v)
{
    v->visitOpcodesF2XM1(this);
}

std::shared_ptr<Opcode> OpcodesF2XM1::clone() const
{
    return std::make_shared<OpcodesF2XM1>(*this);
}



/********************   OpcodesFABS    ********************/



void OpcodesFABS::accept(Visitor *v)
{
    v->visitOpcodesFABS(this);
}

std::shared_ptr<Opcode> OpcodesFABS::clone() const
{
    return std::make_shared<OpcodesFABS>(*this);
}



/********************   OpcodesFADD    ********************/



void OpcodesFADD::accept(Visitor *v)
{
    v->visitOpcodesFADD(this);
}

std::shared_ptr<Opcode> OpcodesFADD::clone() const
{
    return std::make_shared<OpcodesFADD>(*this);
}



/********************   OpcodesFADDP    ********************/



void OpcodesFADDP::accept(Visitor *v)
{
    v->visitOpcodesFADDP(this);
}

std::shared_ptr<Opcode> OpcodesFADDP::clone() const
{
    return std::make_shared<OpcodesFADDP>(*this);
}



/********************   OpcodesFBLD    ********************/



void OpcodesFBLD::accept(Visitor *v)
{
    v->visitOpcodesFBLD(this);
}

std::shared_ptr<Opcode> OpcodesFBLD::clone() const
{
    return std::make_shared<OpcodesFBLD>(*this);
}



/********************   OpcodesFBSTP    ********************/



void OpcodesFBSTP::accept(Visitor *v)
{
    v->visitOpcodesFBSTP(this);
}

std::shared_ptr<Opcode> OpcodesFBSTP::clone() const
{
    return std::make_shared<OpcodesFBSTP>(*this);
}



/********************   OpcodesFCHS    ********************/



void OpcodesFCHS::accept(Visitor *v)
{
    v->visitOpcodesFCHS(this);
}

std::shared_ptr<Opcode> OpcodesFCHS::clone() const
{
    return std::make_shared<OpcodesFCHS>(*this);
}



/********************   OpcodesFCLEX    ********************/



void OpcodesFCLEX::accept(Visitor *v)
{
    v->visitOpcodesFCLEX(this);
}

std::shared_ptr<Opcode> OpcodesFCLEX::clone() const
{
    return std::make_shared<OpcodesFCLEX>(*this);
}



/********************   OpcodesFCOM    ********************/



void OpcodesFCOM::accept(Visitor *v)
{
    v->visitOpcodesFCOM(this);
}

std::shared_ptr<Opcode> OpcodesFCOM::clone() const
{
    return std::make_shared<OpcodesFCOM>(*this);
}



/********************   OpcodesFCOMP    ********************/



void OpcodesFCOMP::accept(Visitor *v)
{
    v->visitOpcodesFCOMP(this);
}

std::shared_ptr<Opcode> OpcodesFCOMP::clone() const
{
    return std::make_shared<OpcodesFCOMP>(*this);
}



/********************   OpcodesFCOMPP    ********************/



void OpcodesFCOMPP::accept(Visitor *v)
{
    v->visitOpcodesFCOMPP(this);
}

std::shared_ptr<Opcode> OpcodesFCOMPP::clone() const
{
    return std::make_shared<OpcodesFCOMPP>(*this);
}



/********************   OpcodesFCOS    ********************/



void OpcodesFCOS::accept(Visitor *v)
{
    v->visitOpcodesFCOS(this);
}

std::shared_ptr<Opcode> OpcodesFCOS::clone() const
{
    return std::make_shared<OpcodesFCOS>(*this);
}



/********************   OpcodesFDECSTP    ********************/



void OpcodesFDECSTP::accept(Visitor *v)
{
    v->visitOpcodesFDECSTP(this);
}

std::shared_ptr<Opcode> OpcodesFDECSTP::clone() const
{
    return std::make_shared<OpcodesFDECSTP>(*this);
}



/********************   OpcodesFDISI    ********************/



void OpcodesFDISI::accept(Visitor *v)
{
    v->visitOpcodesFDISI(this);
}

std::shared_ptr<Opcode> OpcodesFDISI::clone() const
{
    return std::make_shared<OpcodesFDISI>(*this);
}



/********************   OpcodesFDIV    ********************/



void OpcodesFDIV::accept(Visitor *v)
{
    v->visitOpcodesFDIV(this);
}

std::shared_ptr<Opcode> OpcodesFDIV::clone() const
{
    return std::make_shared<OpcodesFDIV>(*this);
}



/********************   OpcodesFDIVP    ********************/



void OpcodesFDIVP::accept(Visitor *v)
{
    v->visitOpcodesFDIVP(this);
}

std::shared_ptr<Opcode> OpcodesFDIVP::clone() const
{
    return std::make_shared<OpcodesFDIVP>(*this);
}



/********************   OpcodesFDIVR    ********************/



void OpcodesFDIVR::accept(Visitor *v)
{
    v->visitOpcodesFDIVR(this);
}

std::shared_ptr<Opcode> OpcodesFDIVR::clone() const
{
    return std::make_shared<OpcodesFDIVR>(*this);
}



/********************   OpcodesFDIVRP    ********************/



void OpcodesFDIVRP::accept(Visitor *v)
{
    v->visitOpcodesFDIVRP(this);
}

std::shared_ptr<Opcode> OpcodesFDIVRP::clone() const
{
    return std::make_shared<OpcodesFDIVRP>(*this);
}



/********************   OpcodesFENI    ********************/



void OpcodesFENI::accept(Visitor *v)
{
    v->visitOpcodesFENI(this);
}

std::shared_ptr<Opcode> OpcodesFENI::clone() const
{
    return std::make_shared<OpcodesFENI>(*this);
}



/********************   OpcodesFFREE    ********************/



void OpcodesFFREE::accept(Visitor *v)
{
    v->visitOpcodesFFREE(this);
}

std::shared_ptr<Opcode> OpcodesFFREE::clone() const
{
    return std::make_shared<OpcodesFFREE>(*this);
}



/********************   OpcodesFIADD    ********************/



void OpcodesFIADD::accept(Visitor *v)
{
    v->visitOpcodesFIADD(this);
}

std::shared_ptr<Opcode> OpcodesFIADD::clone() const
{
    return std::make_shared<OpcodesFIADD>(*this);
}



/********************   OpcodesFICOM    ********************/



void OpcodesFICOM::accept(Visitor *v)
{
    v->visitOpcodesFICOM(this);
}

std::shared_ptr<Opcode> OpcodesFICOM::clone() const
{
    return std::make_shared<OpcodesFICOM>(*this);
}



/********************   OpcodesFICOMP    ********************/



void OpcodesFICOMP::accept(Visitor *v)
{
    v->visitOpcodesFICOMP(this);
}

std::shared_ptr<Opcode> OpcodesFICOMP::clone() const
{
    return std::make_shared<OpcodesFICOMP>(*this);
}



/********************   OpcodesFIDIV    ********************/



void OpcodesFIDIV::accept(Visitor *v)
{
    v->visitOpcodesFIDIV(this);
}

std::shared_ptr<Opcode> OpcodesFIDIV::clone() const
{
    return std::make_shared<OpcodesFIDIV>(*this);
}



/********************   OpcodesFIDIVR    ********************/



void OpcodesFIDIVR::accept(Visitor *v)
{
    v->visitOpcodesFIDIVR(this);
}

std::shared_ptr<Opcode> OpcodesFIDIVR::clone() const
{
    return std::make_shared<OpcodesFIDIVR>(*this);
}



/********************   OpcodesFILD    ********************/



void OpcodesFILD::accept(Visitor *v)
{
    v->visitOpcodesFILD(this);
}

std::shared_ptr<Opcode> OpcodesFILD::clone() const
{
    return std::make_shared<OpcodesFILD>(*this);
}



/********************   OpcodesFIMUL    ********************/



void OpcodesFIMUL::accept(Visitor *v)
{
    v->visitOpcodesFIMUL(this);
}

std::shared_ptr<Opcode> OpcodesFIMUL::clone() const
{
    return std::make_shared<OpcodesFIMUL>(*this);
}



/********************   OpcodesFINCSTP    ********************/



void OpcodesFINCSTP::accept(Visitor *v)
{
    v->visitOpcodesFINCSTP(this);
}

std::shared_ptr<Opcode> OpcodesFINCSTP::clone() const
{
    return std::make_shared<OpcodesFINCSTP>(*this);
}



/********************   OpcodesFINIT    ********************/



void OpcodesFINIT::accept(Visitor *v)
{
    v->visitOpcodesFINIT(this);
}

std::shared_ptr<Opcode> OpcodesFINIT::clone() const
{
    return std::make_shared<OpcodesFINIT>(*this);
}



/********************   OpcodesFIST    ********************/



void OpcodesFIST::accept(Visitor *v)
{
    v->visitOpcodesFIST(this);
}

std::shared_ptr<Opcode> OpcodesFIST::clone() const
{
    return std::make_shared<OpcodesFIST>(*this);
}



/********************   OpcodesFISTP    ********************/



void OpcodesFISTP::accept(Visitor *v)
{
    v->visitOpcodesFISTP(this);
}

std::shared_ptr<Opcode> OpcodesFISTP::clone() const
{
    return std::make_shared<OpcodesFISTP>(*this);
}



/********************   OpcodesFISUB    ********************/



void OpcodesFISUB::accept(Visitor *v)
{
    v->visitOpcodesFISUB(this);
}

std::shared_ptr<Opcode> OpcodesFISUB::clone() const
{
    return std::make_shared<OpcodesFISUB>(*this);
}



/********************   OpcodesFISUBR    ********************/



void OpcodesFISUBR::accept(Visitor *v)
{
    v->visitOpcodesFISUBR(this);
}

std::shared_ptr<Opcode> OpcodesFISUBR::clone() const
{
    return std::make_shared<OpcodesFISUBR>(*this);
}



/********************   OpcodesFLD    ********************/



void OpcodesFLD::accept(Visitor *v)
{
    v->visitOpcodesFLD(this);
}

std::shared_ptr<Opcode> OpcodesFLD::clone() const
{
    return std::make_shared<OpcodesFLD>(*this);
}



/********************   OpcodesFLD1    ********************/



void OpcodesFLD1::accept(Visitor *v)
{
    v->visitOpcodesFLD1(this);
}

std::shared_ptr<Opcode> OpcodesFLD1::clone() const
{
    return std::make_shared<OpcodesFLD1>(*this);
}



/********************   OpcodesFLDCW    ********************/



void OpcodesFLDCW::accept(Visitor *v)
{
    v->visitOpcodesFLDCW(this);
}

std::shared_ptr<Opcode> OpcodesFLDCW::clone() const
{
    return std::make_shared<OpcodesFLDCW>(*this);
}



/********************   OpcodesFLDENV    ********************/



void OpcodesFLDENV::accept(Visitor *v)
{
    v->visitOpcodesFLDENV(this);
}

std::shared_ptr<Opcode> OpcodesFLDENV::clone() const
{
    return std::make_shared<OpcodesFLDENV>(*this);
}



/********************   OpcodesFLDL2E    ********************/



void OpcodesFLDL2E::accept(Visitor *v)
{
    v->visitOpcodesFLDL2E(this);
}

std::shared_ptr<Opcode> OpcodesFLDL2E::clone() const
{
    return std::make_shared<OpcodesFLDL2E>(*this);
}



/********************   OpcodesFLDL2T    ********************/



void OpcodesFLDL2T::accept(Visitor *v)
{
    v->visitOpcodesFLDL2T(this);
}

std::shared_ptr<Opcode> OpcodesFLDL2T::clone() const
{
    return std::make_shared<OpcodesFLDL2T>(*this);
}



/********************   OpcodesFLDLG2    ********************/



void OpcodesFLDLG2::accept(Visitor *v)
{
    v->visitOpcodesFLDLG2(this);
}

std::shared_ptr<Opcode> OpcodesFLDLG2::clone() const
{
    return std::make_shared<OpcodesFLDLG2>(*this);
}



/********************   OpcodesFLDLN2    ********************/



void OpcodesFLDLN2::accept(Visitor *v)
{
    v->visitOpcodesFLDLN2(this);
}

std::shared_ptr<Opcode> OpcodesFLDLN2::clone() const
{
    return std::make_shared<OpcodesFLDLN2>(*this);
}



/********************   OpcodesFLDPI    ********************/



void OpcodesFLDPI::accept(Visitor *v)
{
    v->visitOpcodesFLDPI(this);
}

std::shared_ptr<Opcode> OpcodesFLDPI::clone() const
{
    return std::make_shared<OpcodesFLDPI>(*this);
}



/********************   OpcodesFLDZ    ********************/



void OpcodesFLDZ::accept(Visitor *v)
{
    v->visitOpcodesFLDZ(this);
}

std::shared_ptr<Opcode> OpcodesFLDZ::clone() const
{
    return std::make_shared<OpcodesFLDZ>(*this);
}



/********************   OpcodesFMUL    ********************/



void OpcodesFMUL::accept(Visitor *v)
{
    v->visitOpcodesFMUL(this);
}

std::shared_ptr<Opcode> OpcodesFMUL::clone() const
{
    return std::make_shared<OpcodesFMUL>(*this);
}



/********************   OpcodesFMULP    ********************/



void OpcodesFMULP::accept(Visitor *v)
{
    v->visitOpcodesFMULP(this);
}

std::shared_ptr<Opcode> OpcodesFMULP::clone() const
{
    return std::make_shared<OpcodesFMULP>(*this);
}



/********************   OpcodesFNCLEX    ********************/



void OpcodesFNCLEX::accept(Visitor *v)
{
    v->visitOpcodesFNCLEX(this);
}

std::shared_ptr<Opcode> OpcodesFNCLEX::clone() const
{
    return std::make_shared<OpcodesFNCLEX>(*this);
}



/********************   OpcodesFNDISI    ********************/



void OpcodesFNDISI::accept(Visitor *v)
{
    v->visitOpcodesFNDISI(this);
}

std::shared_ptr<Opcode> OpcodesFNDISI::clone() const
{
    return std::make_shared<OpcodesFNDISI>(*this);
}



/********************   OpcodesFNENI    ********************/



void OpcodesFNENI::accept(Visitor *v)
{
    v->visitOpcodesFNENI(this);
}

std::shared_ptr<Opcode> OpcodesFNENI::clone() const
{
    return std::make_shared<OpcodesFNENI>(*this);
}



/********************   OpcodesFNINIT    ********************/



void OpcodesFNINIT::accept(Visitor *v)
{
    v->visitOpcodesFNINIT(this);
}

std::shared_ptr<Opcode> OpcodesFNINIT::clone() const
{
    return std::make_shared<OpcodesFNINIT>(*this);
}



/********************   OpcodesFNOP    ********************/



void OpcodesFNOP::accept(Visitor *v)
{
    v->visitOpcodesFNOP(this);
}

std::shared_ptr<Opcode> OpcodesFNOP::clone() const
{
    return std::make_shared<OpcodesFNOP>(*this);
}



/********************   OpcodesFNSAVE    ********************/



void OpcodesFNSAVE::accept(Visitor *v)
{
    v->visitOpcodesFNSAVE(this);
}

std::shared_ptr<Opcode> OpcodesFNSAVE::clone() const
{
    return std::make_shared<OpcodesFNSAVE>(*this);
}



/********************   OpcodesFNSTCW    ********************/



void OpcodesFNSTCW::accept(Visitor *v)
{
    v->visitOpcodesFNSTCW(this);
}

std::shared_ptr<Opcode> OpcodesFNSTCW::clone() const
{
    return std::make_shared<OpcodesFNSTCW>(*this);
}



/********************   OpcodesFNSTENV    ********************/



void OpcodesFNSTENV::accept(Visitor *v)
{
    v->visitOpcodesFNSTENV(this);
}

std::shared_ptr<Opcode> OpcodesFNSTENV::clone() const
{
    return std::make_shared<OpcodesFNSTENV>(*this);
}



/********************   OpcodesFNSTSW    ********************/



void OpcodesFNSTSW::accept(Visitor *v)
{
    v->visitOpcodesFNSTSW(this);
}

std::shared_ptr<Opcode> OpcodesFNSTSW::clone() const
{
    return std::make_shared<OpcodesFNSTSW>(*this);
}



/********************   OpcodesFPATAN    ********************/



void OpcodesFPATAN::accept(Visitor *v)
{
    v->visitOpcodesFPATAN(this);
}

std::shared_ptr<Opcode> OpcodesFPATAN::clone() const
{
    return std::make_shared<OpcodesFPATAN>(*this);
}



/********************   OpcodesFPTAN    ********************/



void OpcodesFPTAN::accept(Visitor *v)
{
    v->visitOpcodesFPTAN(this);
}

std::shared_ptr<Opcode> OpcodesFPTAN::clone() const
{
    return std::make_shared<OpcodesFPTAN>(*this);
}



/********************   OpcodesFPREM    ********************/



void OpcodesFPREM::accept(Visitor *v)
{
    v->visitOpcodesFPREM(this);
}

std::shared_ptr<Opcode> OpcodesFPREM::clone() const
{
    return std::make_shared<OpcodesFPREM>(*this);
}



/********************   OpcodesFPREM1    ********************/



void OpcodesFPREM1::accept(Visitor *v)
{
    v->visitOpcodesFPREM1(this);
}

std::shared_ptr<Opcode> OpcodesFPREM1::clone() const
{
    return std::make_shared<OpcodesFPREM1>(*this);
}



/********************   OpcodesFRNDINT    ********************/



void OpcodesFRNDINT::accept(Visitor *v)
{
    v->visitOpcodesFRNDINT(this);
}

std::shared_ptr<Opcode> OpcodesFRNDINT::clone() const
{
    return std::make_shared<OpcodesFRNDINT>(*this);
}



/********************   OpcodesFRSTOR    ********************/



void OpcodesFRSTOR::accept(Visitor *v)
{
    v->visitOpcodesFRSTOR(this);
}

std::shared_ptr<Opcode> OpcodesFRSTOR::clone() const
{
    return std::make_shared<OpcodesFRSTOR>(*this);
}



/********************   OpcodesFSAVE    ********************/



void OpcodesFSAVE::accept(Visitor *v)
{
    v->visitOpcodesFSAVE(this);
}

std::shared_ptr<Opcode> OpcodesFSAVE::clone() const
{
    return std::make_shared<OpcodesFSAVE>(*this);
}



/********************   OpcodesFSCALE    ********************/



void OpcodesFSCALE::accept(Visitor *v)
{
    v->visitOpcodesFSCALE(this);
}

std::shared_ptr<Opcode> OpcodesFSCALE::clone() const
{
    return std::make_shared<OpcodesFSCALE>(*this);
}



/********************   OpcodesFSETPM    ********************/



void OpcodesFSETPM::accept(Visitor *v)
{
    v->visitOpcodesFSETPM(this);
}

std::shared_ptr<Opcode> OpcodesFSETPM::clone() const
{
    return std::make_shared<OpcodesFSETPM>(*this);
}



/********************   OpcodesFSIN    ********************/



void OpcodesFSIN::accept(Visitor *v)
{
    v->visitOpcodesFSIN(this);
}

std::shared_ptr<Opcode> OpcodesFSIN::clone() const
{
    return std::make_shared<OpcodesFSIN>(*this);
}



/********************   OpcodesFSINCOS    ********************/



void OpcodesFSINCOS::accept(Visitor *v)
{
    v->visitOpcodesFSINCOS(this);
}

std::shared_ptr<Opcode> OpcodesFSINCOS::clone() const
{
    return std::make_shared<OpcodesFSINCOS>(*this);
}



/********************   OpcodesFSQRT    ********************/



void OpcodesFSQRT::accept(Visitor *v)
{
    v->visitOpcodesFSQRT(this);
}

std::shared_ptr<Opcode> OpcodesFSQRT::clone() const
{
    return std::make_shared<OpcodesFSQRT>(*this);
}



/********************   OpcodesFST    ********************/



void OpcodesFST::accept(Visitor *v)
{
    v->visitOpcodesFST(this);
}

std::shared_ptr<Opcode> OpcodesFST::clone() const
{
    return std::make_shared<OpcodesFST>(*this);
}



/********************   OpcodesFSTCW    ********************/



void OpcodesFSTCW::accept(Visitor *v)
{
    v->visitOpcodesFSTCW(this);
}

std::shared_ptr<Opcode> OpcodesFSTCW::clone() const
{
    return std::make_shared<OpcodesFSTCW>(*this);
}



/********************   OpcodesFSTENV    ********************/



void OpcodesFSTENV::accept(Visitor *v)
{
    v->visitOpcodesFSTENV(this);
}

std::shared_ptr<Opcode> OpcodesFSTENV::clone() const
{
    return std::make_shared<OpcodesFSTENV>(*this);
}



/********************   OpcodesFSTP    ********************/



void OpcodesFSTP::accept(Visitor *v)
{
    v->visitOpcodesFSTP(this);
}

std::shared_ptr<Opcode> OpcodesFSTP::clone() const
{
    return std::make_shared<OpcodesFSTP>(*this);
}



/********************   OpcodesFSTSW    ********************/



void OpcodesFSTSW::accept(Visitor *v)
{
    v->visitOpcodesFSTSW(this);
}

std::shared_ptr<Opcode> OpcodesFSTSW::clone() const
{
    return std::make_shared<OpcodesFSTSW>(*this);
}



/********************   OpcodesFSUB    ********************/



void OpcodesFSUB::accept(Visitor *v)
{
    v->visitOpcodesFSUB(this);
}

std::shared_ptr<Opcode> OpcodesFSUB::clone() const
{
    return std::make_shared<OpcodesFSUB>(*this);
}



/********************   OpcodesFSUBP    ********************/



void OpcodesFSUBP::accept(Visitor *v)
{
    v->visitOpcodesFSUBP(this);
}

std::shared_ptr<Opcode> OpcodesFSUBP::clone() const
{
    return std::make_shared<OpcodesFSUBP>(*this);
}



/********************   OpcodesFSUBR    ********************/



void OpcodesFSUBR::accept(Visitor *v)
{
    v->visitOpcodesFSUBR(this);
}

std::shared_ptr<Opcode> OpcodesFSUBR::clone() const
{
    return std::make_shared<OpcodesFSUBR>(*this);
}



/********************   OpcodesFSUBRP    ********************/



void OpcodesFSUBRP::accept(Visitor *v)
{
    v->visitOpcodesFSUBRP(this);
}

std::shared_ptr<Opcode> OpcodesFSUBRP::clone() const
{
    return std::make_shared<OpcodesFSUBRP>(*this);
}



/********************   OpcodesFTST    ********************/



void OpcodesFTST::accept(Visitor *v)
{
    v->visitOpcodesFTST(this);
}

std::shared_ptr<Opcode> OpcodesFTST::clone() const
{
    return std::make_shared<OpcodesFTST>(*this);
}



/********************   OpcodesFUCOM    ********************/



void OpcodesFUCOM::accept(Visitor *v)
{
    v->visitOpcodesFUCOM(this);
}

std::shared_ptr<Opcode> OpcodesFUCOM::clone() const
{
    return std::make_shared<OpcodesFUCOM>(*this);
}



/********************   OpcodesFUCOMP    ********************/



void OpcodesFUCOMP::accept(Visitor *v)
{
    v->visitOpcodesFUCOMP(this);
}

std::shared_ptr<Opcode> OpcodesFUCOMP::clone() const
{
    return std::make_shared<OpcodesFUCOMP>(*this);
}



/********************   OpcodesFUCOMPP    ********************/



void OpcodesFUCOMPP::accept(Visitor *v)
{
    v->visitOpcodesFUCOMPP(this);
}

std::shared_ptr<Opcode> OpcodesFUCOMPP::clone() const
{
    return std::make_shared<OpcodesFUCOMPP>(*this);
}



/********************   OpcodesFXAM    ********************/



void OpcodesFXAM::accept(Visitor *v)
{
    v->visitOpcodesFXAM(this);
}

std::shared_ptr<Opcode> OpcodesFXAM::clone() const
{
    return std::make_shared<OpcodesFXAM>(*this);
}



/********************   OpcodesFXCH    ********************/



void OpcodesFXCH::accept(Visitor *v)
{
    v->visitOpcodesFXCH(this);
}

std::shared_ptr<Opcode> OpcodesFXCH::clone() const
{
    return std::make_shared<OpcodesFXCH>(*this);
}



/********************   OpcodesFXTRACT    ********************/



void OpcodesFXTRACT::accept(Visitor *v)
{
    v->visitOpcodesFXTRACT(this);
}

std::shared_ptr<Opcode> OpcodesFXTRACT::clone() const
{
    return std::make_shared<OpcodesFXTRACT>(*this);
}



/********************   OpcodesFYL2X    ********************/



void OpcodesFYL2X::accept(Visitor *v)
{
    v->visitOpcodesFYL2X(this);
}

std::shared_ptr<Opcode> OpcodesFYL2X::clone() const
{
    return std::make_shared<OpcodesFYL2X>(*this);
}



/********************   OpcodesFYL2XP1    ********************/



void OpcodesFYL2XP1::accept(Visitor *v)
{
    v->visitOpcodesFYL2XP1(this);
}

std::shared_ptr<Opcode> OpcodesFYL2XP1::clone() const
{
    return std::make_shared<OpcodesFYL2XP1>(*this);
}



/********************   OpcodesHLT    ********************/



void OpcodesHLT::accept(Visitor *v)
{
    v->visitOpcodesHLT(this);
}

std::shared_ptr<Opcode> OpcodesHLT::clone() const
{
    return std::make_shared<OpcodesHLT>(*this);
}



/********************   OpcodesIDIV    ********************/



void OpcodesIDIV::accept(Visitor *v)
{
    v->visitOpcodesIDIV(this);
}

std::shared_ptr<Opcode> OpcodesIDIV::clone() const
{
    return std::make_shared<OpcodesIDIV>(*this);
}



/********************   OpcodesIMUL    ********************/



void OpcodesIMUL::accept(Visitor *v)
{
    v->visitOpcodesIMUL(this);
}

std::shared_ptr<Opcode> OpcodesIMUL::clone() const
{
    return std::make_shared<OpcodesIMUL>(*this);
}



/********************   OpcodesIN    ********************/



void OpcodesIN::accept(Visitor *v)
{
    v->visitOpcodesIN(this);
}

std::shared_ptr<Opcode> OpcodesIN::clone() const
{
    return std::make_shared<OpcodesIN>(*this);
}



/********************   OpcodesINC    ********************/



void OpcodesINC::accept(Visitor *v)
{
    v->visitOpcodesINC(this);
}

std::shared_ptr<Opcode> OpcodesINC::clone() const
{
    return std::make_shared<OpcodesINC>(*this);
}



/********************   OpcodesINCO    ********************/



void OpcodesINCO::accept(Visitor *v)
{
    v->visitOpcodesINCO(this);
}

std::shared_ptr<Opcode> OpcodesINCO::clone() const
{
    return std::make_shared<OpcodesINCO>(*this);
}



/********************   OpcodesINSB    ********************/



void OpcodesINSB::accept(Visitor *v)
{
    v->visitOpcodesINSB(this);
}

std::shared_ptr<Opcode> OpcodesINSB::clone() const
{
    return std::make_shared<OpcodesINSB>(*this);
}



/********************   OpcodesINSD    ********************/



void OpcodesINSD::accept(Visitor *v)
{
    v->visitOpcodesINSD(this);
}

std::shared_ptr<Opcode> OpcodesINSD::clone() const
{
    return std::make_shared<OpcodesINSD>(*this);
}



/********************   OpcodesINSW    ********************/



void OpcodesINSW::accept(Visitor *v)
{
    v->visitOpcodesINSW(this);
}

std::shared_ptr<Opcode> OpcodesINSW::clone() const
{
    return std::make_shared<OpcodesINSW>(*this);
}



/********************   OpcodesINT    ********************/



void OpcodesINT::accept(Visitor *v)
{
    v->visitOpcodesINT(this);
}

std::shared_ptr<Opcode> OpcodesINT::clone() const
{
    return std::make_shared<OpcodesINT>(*this);
}



/********************   OpcodesINT3    ********************/



void OpcodesINT3::accept(Visitor *v)
{
    v->visitOpcodesINT3(this);
}

std::shared_ptr<Opcode> OpcodesINT3::clone() const
{
    return std::make_shared<OpcodesINT3>(*this);
}



/********************   OpcodesINTO    ********************/



void OpcodesINTO::accept(Visitor *v)
{
    v->visitOpcodesINTO(this);
}

std::shared_ptr<Opcode> OpcodesINTO::clone() const
{
    return std::make_shared<OpcodesINTO>(*this);
}



/********************   OpcodesINVD    ********************/



void OpcodesINVD::accept(Visitor *v)
{
    v->visitOpcodesINVD(this);
}

std::shared_ptr<Opcode> OpcodesINVD::clone() const
{
    return std::make_shared<OpcodesINVD>(*this);
}



/********************   OpcodesINVLPG    ********************/



void OpcodesINVLPG::accept(Visitor *v)
{
    v->visitOpcodesINVLPG(this);
}

std::shared_ptr<Opcode> OpcodesINVLPG::clone() const
{
    return std::make_shared<OpcodesINVLPG>(*this);
}



/********************   OpcodesIRET    ********************/



void OpcodesIRET::accept(Visitor *v)
{
    v->visitOpcodesIRET(this);
}

std::shared_ptr<Opcode> OpcodesIRET::clone() const
{
    return std::make_shared<OpcodesIRET>(*this);
}



/********************   OpcodesIRETD    ********************/



void OpcodesIRETD::accept(Visitor *v)
{
    v->visitOpcodesIRETD(this);
}

std::shared_ptr<Opcode> OpcodesIRETD::clone() const
{
    return std::make_shared<OpcodesIRETD>(*this);
}



/********************   OpcodesIRETW    ********************/



void OpcodesIRETW::accept(Visitor *v)
{
    v->visitOpcodesIRETW(this);
}

std::shared_ptr<Opcode> OpcodesIRETW::clone() const
{
    return std::make_shared<OpcodesIRETW>(*this);
}



/********************   OpcodesJA    ********************/



void OpcodesJA::accept(Visitor *v)
{
    v->visitOpcodesJA(this);
}

std::shared_ptr<Opcode> OpcodesJA::clone() const
{
    return std::make_shared<OpcodesJA>(*this);
}



/********************   OpcodesJAE    ********************/



void OpcodesJAE::accept(Visitor *v)
{
    v->visitOpcodesJAE(this);
}

std::shared_ptr<Opcode> OpcodesJAE::clone() const
{
    return std::make_shared<OpcodesJAE>(*this);
}



/********************   OpcodesJB    ********************/



void OpcodesJB::accept(Visitor *v)
{
    v->visitOpcodesJB(this);
}

std::shared_ptr<Opcode> OpcodesJB::clone() const
{
    return std::make_shared<OpcodesJB>(*this);
}



/********************   OpcodesJBE    ********************/



void OpcodesJBE::accept(Visitor *v)
{
    v->visitOpcodesJBE(this);
}

std::shared_ptr<Opcode> OpcodesJBE::clone() const
{
    return std::make_shared<OpcodesJBE>(*this);
}



/********************   OpcodesJC    ********************/



void OpcodesJC::accept(Visitor *v)
{
    v->visitOpcodesJC(this);
}

std::shared_ptr<Opcode> OpcodesJC::clone() const
{
    return std::make_shared<OpcodesJC>(*this);
}



/********************   OpcodesJCXZ    ********************/



void OpcodesJCXZ::accept(Visitor *v)
{
    v->visitOpcodesJCXZ(this);
}

std::shared_ptr<Opcode> OpcodesJCXZ::clone() const
{
    return std::make_shared<OpcodesJCXZ>(*this);
}



/********************   OpcodesJE    ********************/



void OpcodesJE::accept(Visitor *v)
{
    v->visitOpcodesJE(this);
}

std::shared_ptr<Opcode> OpcodesJE::clone() const
{
    return std::make_shared<OpcodesJE>(*this);
}



/********************   OpcodesJECXZ    ********************/



void OpcodesJECXZ::accept(Visitor *v)
{
    v->visitOpcodesJECXZ(this);
}

std::shared_ptr<Opcode> OpcodesJECXZ::clone() const
{
    return std::make_shared<OpcodesJECXZ>(*this);
}



/********************   OpcodesJG    ********************/



void OpcodesJG::accept(Visitor *v)
{
    v->visitOpcodesJG(this);
}

std::shared_ptr<Opcode> OpcodesJG::clone() const
{
    return std::make_shared<OpcodesJG>(*this);
}



/********************   OpcodesJGE    ********************/



void OpcodesJGE::accept(Visitor *v)
{
    v->visitOpcodesJGE(this);
}

std::shared_ptr<Opcode> OpcodesJGE::clone() const
{
    return std::make_shared<OpcodesJGE>(*this);
}



/********************   OpcodesJL    ********************/



void OpcodesJL::accept(Visitor *v)
{
    v->visitOpcodesJL(this);
}

std::shared_ptr<Opcode> OpcodesJL::clone() const
{
    return std::make_shared<OpcodesJL>(*this);
}



/********************   OpcodesJLE    ********************/



void OpcodesJLE::accept(Visitor *v)
{
    v->visitOpcodesJLE(this);
}

std::shared_ptr<Opcode> OpcodesJLE::clone() const
{
    return std::make_shared<OpcodesJLE>(*this);
}



/********************   OpcodesJMP    ********************/



void OpcodesJMP::accept(Visitor *v)
{
    v->visitOpcodesJMP(this);
}

std::shared_ptr<Opcode> OpcodesJMP::clone() const
{
    return std::make_shared<OpcodesJMP>(*this);
}



/********************   OpcodesJNA    ********************/



void OpcodesJNA::accept(Visitor *v)
{
    v->visitOpcodesJNA(this);
}

std::shared_ptr<Opcode> OpcodesJNA::clone() const
{
    return std::make_shared<OpcodesJNA>(*this);
}



/********************   OpcodesJNAE    ********************/



void OpcodesJNAE::accept(Visitor *v)
{
    v->visitOpcodesJNAE(this);
}

std::shared_ptr<Opcode> OpcodesJNAE::clone() const
{
    return std::make_shared<OpcodesJNAE>(*this);
}



/********************   OpcodesJNB    ********************/



void OpcodesJNB::accept(Visitor *v)
{
    v->visitOpcodesJNB(this);
}

std::shared_ptr<Opcode> OpcodesJNB::clone() const
{
    return std::make_shared<OpcodesJNB>(*this);
}



/********************   OpcodesJNBE    ********************/



void OpcodesJNBE::accept(Visitor *v)
{
    v->visitOpcodesJNBE(this);
}

std::shared_ptr<Opcode> OpcodesJNBE::clone() const
{
    return std::make_shared<OpcodesJNBE>(*this);
}



/********************   OpcodesJNC    ********************/



void OpcodesJNC::accept(Visitor *v)
{
    v->visitOpcodesJNC(this);
}

std::shared_ptr<Opcode> OpcodesJNC::clone() const
{
    return std::make_shared<OpcodesJNC>(*this);
}



/********************   OpcodesJNE    ********************/



void OpcodesJNE::accept(Visitor *v)
{
    v->visitOpcodesJNE(this);
}

std::shared_ptr<Opcode> OpcodesJNE::clone() const
{
    return std::make_shared<OpcodesJNE>(*this);
}



/********************   OpcodesJNG    ********************/



void OpcodesJNG::accept(Visitor *v)
{
    v->visitOpcodesJNG(this);
}

std::shared_ptr<Opcode> OpcodesJNG::clone() const
{
    return std::make_shared<OpcodesJNG>(*this);
}



/********************   OpcodesJNGE    ********************/



void OpcodesJNGE::accept(Visitor *v)
{
    v->visitOpcodesJNGE(this);
}

std::shared_ptr<Opcode> OpcodesJNGE::clone() const
{
    return std::make_shared<OpcodesJNGE>(*this);
}



/********************   OpcodesJNL    ********************/



void OpcodesJNL::accept(Visitor *v)
{
    v->visitOpcodesJNL(this);
}

std::shared_ptr<Opcode> OpcodesJNL::clone() const
{
    return std::make_shared<OpcodesJNL>(*this);
}



/********************   OpcodesJNLE    ********************/



void OpcodesJNLE::accept(Visitor *v)
{
    v->visitOpcodesJNLE(this);
}

std::shared_ptr<Opcode> OpcodesJNLE::clone() const
{
    return std::make_shared<OpcodesJNLE>(*this);
}



/********************   OpcodesJNO    ********************/



void OpcodesJNO::accept(Visitor *v)
{
    v->visitOpcodesJNO(this);
}

std::shared_ptr<Opcode> OpcodesJNO::clone() const
{
    return std::make_shared<OpcodesJNO>(*this);
}



/********************   OpcodesJNP    ********************/



void OpcodesJNP::accept(Visitor *v)
{
    v->visitOpcodesJNP(this);
}

std::shared_ptr<Opcode> OpcodesJNP::clone() const
{
    return std::make_shared<OpcodesJNP>(*this);
}



/********************   OpcodesJNS    ********************/



void OpcodesJNS::accept(Visitor *v)
{
    v->visitOpcodesJNS(this);
}

std::shared_ptr<Opcode> OpcodesJNS::clone() const
{
    return std::make_shared<OpcodesJNS>(*this);
}



/********************   OpcodesJNZ    ********************/



void OpcodesJNZ::accept(Visitor *v)
{
    v->visitOpcodesJNZ(this);
}

std::shared_ptr<Opcode> OpcodesJNZ::clone() const
{
    return std::make_shared<OpcodesJNZ>(*this);
}



/********************   OpcodesJO    ********************/



void OpcodesJO::accept(Visitor *v)
{
    v->visitOpcodesJO(this);
}

std::shared_ptr<Opcode> OpcodesJO::clone() const
{
    return std::make_shared<OpcodesJO>(*this);
}



/********************   OpcodesJP    ********************/



void OpcodesJP::accept(Visitor *v)
{
    v->visitOpcodesJP(this);
}

std::shared_ptr<Opcode> OpcodesJP::clone() const
{
    return std::make_shared<OpcodesJP>(*this);
}



/********************   OpcodesJPE    ********************/



void OpcodesJPE::accept(Visitor *v)
{
    v->visitOpcodesJPE(this);
}

std::shared_ptr<Opcode> OpcodesJPE::clone() const
{
    return std::make_shared<OpcodesJPE>(*this);
}



/********************   OpcodesJPO    ********************/



void OpcodesJPO::accept(Visitor *v)
{
    v->visitOpcodesJPO(this);
}

std::shared_ptr<Opcode> OpcodesJPO::clone() const
{
    return std::make_shared<OpcodesJPO>(*this);
}



/********************   OpcodesJS    ********************/



void OpcodesJS::accept(Visitor *v)
{
    v->visitOpcodesJS(this);
}

std::shared_ptr<Opcode> OpcodesJS::clone() const
{
    return std::make_shared<OpcodesJS>(*this);
}



/********************   OpcodesJZ    ********************/



void OpcodesJZ::accept(Visitor *v)
{
    v->visitOpcodesJZ(this);
}

std::shared_ptr<Opcode> OpcodesJZ::clone() const
{
    return std::make_shared<OpcodesJZ>(*this);
}



/********************   OpcodesLAHF    ********************/



void OpcodesLAHF::accept(Visitor *v)
{
    v->visitOpcodesLAHF(this);
}

std::shared_ptr<Opcode> OpcodesLAHF::clone() const
{
    return std::make_shared<OpcodesLAHF>(*this);
}



/********************   OpcodesLAR    ********************/



void OpcodesLAR::accept(Visitor *v)
{
    v->visitOpcodesLAR(this);
}

std::shared_ptr<Opcode> OpcodesLAR::clone() const
{
    return std::make_shared<OpcodesLAR>(*this);
}



/********************   OpcodesLDS    ********************/



void OpcodesLDS::accept(Visitor *v)
{
    v->visitOpcodesLDS(this);
}

std::shared_ptr<Opcode> OpcodesLDS::clone() const
{
    return std::make_shared<OpcodesLDS>(*this);
}



/********************   OpcodesLEA    ********************/



void OpcodesLEA::accept(Visitor *v)
{
    v->visitOpcodesLEA(this);
}

std::shared_ptr<Opcode> OpcodesLEA::clone() const
{
    return std::make_shared<OpcodesLEA>(*this);
}



/********************   OpcodesLEAVE    ********************/



void OpcodesLEAVE::accept(Visitor *v)
{
    v->visitOpcodesLEAVE(this);
}

std::shared_ptr<Opcode> OpcodesLEAVE::clone() const
{
    return std::make_shared<OpcodesLEAVE>(*this);
}



/********************   OpcodesLES    ********************/



void OpcodesLES::accept(Visitor *v)
{
    v->visitOpcodesLES(this);
}

std::shared_ptr<Opcode> OpcodesLES::clone() const
{
    return std::make_shared<OpcodesLES>(*this);
}



/********************   OpcodesLFS    ********************/



void OpcodesLFS::accept(Visitor *v)
{
    v->visitOpcodesLFS(this);
}

std::shared_ptr<Opcode> OpcodesLFS::clone() const
{
    return std::make_shared<OpcodesLFS>(*this);
}



/********************   OpcodesLGDT    ********************/



void OpcodesLGDT::accept(Visitor *v)
{
    v->visitOpcodesLGDT(this);
}

std::shared_ptr<Opcode> OpcodesLGDT::clone() const
{
    return std::make_shared<OpcodesLGDT>(*this);
}



/********************   OpcodesLGS    ********************/



void OpcodesLGS::accept(Visitor *v)
{
    v->visitOpcodesLGS(this);
}

std::shared_ptr<Opcode> OpcodesLGS::clone() const
{
    return std::make_shared<OpcodesLGS>(*this);
}



/********************   OpcodesLIDT    ********************/



void OpcodesLIDT::accept(Visitor *v)
{
    v->visitOpcodesLIDT(this);
}

std::shared_ptr<Opcode> OpcodesLIDT::clone() const
{
    return std::make_shared<OpcodesLIDT>(*this);
}



/********************   OpcodesLLDT    ********************/



void OpcodesLLDT::accept(Visitor *v)
{
    v->visitOpcodesLLDT(this);
}

std::shared_ptr<Opcode> OpcodesLLDT::clone() const
{
    return std::make_shared<OpcodesLLDT>(*this);
}



/********************   OpcodesLMSW    ********************/



void OpcodesLMSW::accept(Visitor *v)
{
    v->visitOpcodesLMSW(this);
}

std::shared_ptr<Opcode> OpcodesLMSW::clone() const
{
    return std::make_shared<OpcodesLMSW>(*this);
}



/********************   OpcodesLOCK    ********************/



void OpcodesLOCK::accept(Visitor *v)
{
    v->visitOpcodesLOCK(this);
}

std::shared_ptr<Opcode> OpcodesLOCK::clone() const
{
    return std::make_shared<OpcodesLOCK>(*this);
}



/********************   OpcodesLODSB    ********************/



void OpcodesLODSB::accept(Visitor *v)
{
    v->visitOpcodesLODSB(this);
}

std::shared_ptr<Opcode> OpcodesLODSB::clone() const
{
    return std::make_shared<OpcodesLODSB>(*this);
}



/********************   OpcodesLODSD    ********************/



void OpcodesLODSD::accept(Visitor *v)
{
    v->visitOpcodesLODSD(this);
}

std::shared_ptr<Opcode> OpcodesLODSD::clone() const
{
    return std::make_shared<OpcodesLODSD>(*this);
}



/********************   OpcodesLODSW    ********************/



void OpcodesLODSW::accept(Visitor *v)
{
    v->visitOpcodesLODSW(this);
}

std::shared_ptr<Opcode> OpcodesLODSW::clone() const
{
    return std::make_shared<OpcodesLODSW>(*this);
}



/********************   OpcodesLOOP    ********************/



void OpcodesLOOP::accept(Visitor *v)
{
    v->visitOpcodesLOOP(this);
}

std::shared_ptr<Opcode> OpcodesLOOP::clone() const
{
    return std::make_shared<OpcodesLOOP>(*this);
}



/********************   OpcodesLOOPE    ********************/



void OpcodesLOOPE::accept(Visitor *v)
{
    v->visitOpcodesLOOPE(this);
}

std::shared_ptr<Opcode> OpcodesLOOPE::clone() const
{
    return std::make_shared<OpcodesLOOPE>(*this);
}



/********************   OpcodesLOOPNE    ********************/



void OpcodesLOOPNE::accept(Visitor *v)
{
    v->visitOpcodesLOOPNE(this);
}

std::shared_ptr<Opcode> OpcodesLOOPNE::clone() const
{
    return std::make_shared<OpcodesLOOPNE>(*this);
}



/********************   OpcodesLOOPNZ    ********************/



void OpcodesLOOPNZ::accept(Visitor *v)
{
    v->visitOpcodesLOOPNZ(this);
}

std::shared_ptr<Opcode> OpcodesLOOPNZ::clone() const
{
    return std::make_shared<OpcodesLOOPNZ>(*this);
}



/********************   OpcodesLOOPZ    ********************/



void OpcodesLOOPZ::accept(Visitor *v)
{
    v->visitOpcodesLOOPZ(this);
}

std::shared_ptr<Opcode> OpcodesLOOPZ::clone() const
{
    return std::make_shared<OpcodesLOOPZ>(*this);
}



/********************   OpcodesLSL    ********************/



void OpcodesLSL::accept(Visitor *v)
{
    v->visitOpcodesLSL(this);
}

std::shared_ptr<Opcode> OpcodesLSL::clone() const
{
    return std::make_shared<OpcodesLSL>(*this);
}



/********************   OpcodesLSS    ********************/



void OpcodesLSS::accept(Visitor *v)
{
    v->visitOpcodesLSS(this);
}

std::shared_ptr<Opcode> OpcodesLSS::clone() const
{
    return std::make_shared<OpcodesLSS>(*this);
}



/********************   OpcodesLTR    ********************/



void OpcodesLTR::accept(Visitor *v)
{
    v->visitOpcodesLTR(this);
}

std::shared_ptr<Opcode> OpcodesLTR::clone() const
{
    return std::make_shared<OpcodesLTR>(*this);
}



/********************   OpcodesMOV    ********************/



void OpcodesMOV::accept(Visitor *v)
{
    v->visitOpcodesMOV(this);
}

std::shared_ptr<Opcode> OpcodesMOV::clone() const
{
    return std::make_shared<OpcodesMOV>(*this);
}



/********************   OpcodesMOVSB    ********************/



void OpcodesMOVSB::accept(Visitor *v)
{
    v->visitOpcodesMOVSB(this);
}

std::shared_ptr<Opcode> OpcodesMOVSB::clone() const
{
    return std::make_shared<OpcodesMOVSB>(*this);
}



/********************   OpcodesMOVSD    ********************/



void OpcodesMOVSD::accept(Visitor *v)
{
    v->visitOpcodesMOVSD(this);
}

std::shared_ptr<Opcode> OpcodesMOVSD::clone() const
{
    return std::make_shared<OpcodesMOVSD>(*this);
}



/********************   OpcodesMOVSW    ********************/



void OpcodesMOVSW::accept(Visitor *v)
{
    v->visitOpcodesMOVSW(this);
}

std::shared_ptr<Opcode> OpcodesMOVSW::clone() const
{
    return std::make_shared<OpcodesMOVSW>(*this);
}



/********************   OpcodesMOVSX    ********************/



void OpcodesMOVSX::accept(Visitor *v)
{
    v->visitOpcodesMOVSX(this);
}

std::shared_ptr<Opcode> OpcodesMOVSX::clone() const
{
    return std::make_shared<OpcodesMOVSX>(*this);
}



/********************   OpcodesMOVZX    ********************/



void OpcodesMOVZX::accept(Visitor *v)
{
    v->visitOpcodesMOVZX(this);
}

std::shared_ptr<Opcode> OpcodesMOVZX::clone() const
{
    return std::make_shared<OpcodesMOVZX>(*this);
}



/********************   OpcodesMUL    ********************/



void OpcodesMUL::accept(Visitor *v)
{
    v->visitOpcodesMUL(this);
}

std::shared_ptr<Opcode> OpcodesMUL::clone() const
{
    return std::make_shared<OpcodesMUL>(*this);
}



/********************   OpcodesNEG    ********************/



void OpcodesNEG::accept(Visitor *v)
{
    v->visitOpcodesNEG(this);
}

std::shared_ptr<Opcode> OpcodesNEG::clone() const
{
    return std::make_shared<OpcodesNEG>(*this);
}



/********************   OpcodesNOP    ********************/



void OpcodesNOP::accept(Visitor *v)
{
    v->visitOpcodesNOP(this);
}

std::shared_ptr<Opcode> OpcodesNOP::clone() const
{
    return std::make_shared<OpcodesNOP>(*this);
}



/********************   OpcodesNOT    ********************/



void OpcodesNOT::accept(Visitor *v)
{
    v->visitOpcodesNOT(this);
}

std::shared_ptr<Opcode> OpcodesNOT::clone() const
{
    return std::make_shared<OpcodesNOT>(*this);
}



/********************   OpcodesOR    ********************/



void OpcodesOR::accept(Visitor *v)
{
    v->visitOpcodesOR(this);
}

std::shared_ptr<Opcode> OpcodesOR::clone() const
{
    return std::make_shared<OpcodesOR>(*this);
}



/********************   OpcodesORG    ********************/



void OpcodesORG::accept(Visitor *v)
{
    v->visitOpcodesORG(this);
}

std::shared_ptr<Opcode> OpcodesORG::clone() const
{
    return std::make_shared<OpcodesORG>(*this);
}



/********************   OpcodesOUT    ********************/



void OpcodesOUT::accept(Visitor *v)
{
    v->visitOpcodesOUT(this);
}

std::shared_ptr<Opcode> OpcodesOUT::clone() const
{
    return std::make_shared<OpcodesOUT>(*this);
}



/********************   OpcodesOUTSB    ********************/



void OpcodesOUTSB::accept(Visitor *v)
{
    v->visitOpcodesOUTSB(this);
}

std::shared_ptr<Opcode> OpcodesOUTSB::clone() const
{
    return std::make_shared<OpcodesOUTSB>(*this);
}



/********************   OpcodesOUTSD    ********************/



void OpcodesOUTSD::accept(Visitor *v)
{
    v->visitOpcodesOUTSD(this);
}

std::shared_ptr<Opcode> OpcodesOUTSD::clone() const
{
    return std::make_shared<OpcodesOUTSD>(*this);
}



/********************   OpcodesOUTSW    ********************/



void OpcodesOUTSW::accept(Visitor *v)
{
    v->visitOpcodesOUTSW(this);
}

std::shared_ptr<Opcode> OpcodesOUTSW::clone() const
{
    return std::make_shared<OpcodesOUTSW>(*this);
}



/********************   OpcodesPOP    ********************/



void OpcodesPOP::accept(Visitor *v)
{
    v->visitOpcodesPOP(this);
}

std::shared_ptr<Opcode> OpcodesPOP::clone() const
{
    return std::make_shared<OpcodesPOP>(*this);
}



/********************   OpcodesPOPA    ********************/



void OpcodesPOPA::accept(Visitor *v)
{
    v->visitOpcodesPOPA(this);
}

std::shared_ptr<Opcode> OpcodesPOPA::clone() const
{
    return std::make_shared<OpcodesPOPA>(*this);
}



/********************   OpcodesPOPAD    ********************/



void OpcodesPOPAD::accept(Visitor *v)
{
    v->visitOpcodesPOPAD(this);
}

std::shared_ptr<Opcode> OpcodesPOPAD::clone() const
{
    return std::make_shared<OpcodesPOPAD>(*this);
}



/********************   OpcodesPOPAW    ********************/



void OpcodesPOPAW::accept(Visitor *v)
{
    v->visitOpcodesPOPAW(this);
}

std::shared_ptr<Opcode> OpcodesPOPAW::clone() const
{
    return std::make_shared<OpcodesPOPAW>(*this);
}



/********************   OpcodesPOPF    ********************/



void OpcodesPOPF::accept(Visitor *v)
{
    v->visitOpcodesPOPF(this);
}

std::shared_ptr<Opcode> OpcodesPOPF::clone() const
{
    return std::make_shared<OpcodesPOPF>(*this);
}



/********************   OpcodesPOPFD    ********************/



void OpcodesPOPFD::accept(Visitor *v)
{
    v->visitOpcodesPOPFD(this);
}

std::shared_ptr<Opcode> OpcodesPOPFD::clone() const
{
    return std::make_shared<OpcodesPOPFD>(*this);
}



/********************   OpcodesPOPFW    ********************/



void OpcodesPOPFW::accept(Visitor *v)
{
    v->visitOpcodesPOPFW(this);
}

std::shared_ptr<Opcode> OpcodesPOPFW::clone() const
{
    return std::make_shared<OpcodesPOPFW>(*this);
}



/********************   OpcodesPUSH    ********************/



void OpcodesPUSH::accept(Visitor *v)
{
    v->visitOpcodesPUSH(this);
}

std::shared_ptr<Opcode> OpcodesPUSH::clone() const
{
    return std::make_shared<OpcodesPUSH>(*this);
}



/********************   OpcodesPUSHA    ********************/



void OpcodesPUSHA::accept(Visitor *v)
{
    v->visitOpcodesPUSHA(this);
}

std::shared_ptr<Opcode> OpcodesPUSHA::clone() const
{
    return std::make_shared<OpcodesPUSHA>(*this);
}



/********************   OpcodesPUSHD    ********************/



void OpcodesPUSHD::accept(Visitor *v)
{
    v->visitOpcodesPUSHD(this);
}

std::shared_ptr<Opcode> OpcodesPUSHD::clone() const
{
    return std::make_shared<OpcodesPUSHD>(*this);
}



/********************   OpcodesPUSHAD    ********************/



void OpcodesPUSHAD::accept(Visitor *v)
{
    v->visitOpcodesPUSHAD(this);
}

std::shared_ptr<Opcode> OpcodesPUSHAD::clone() const
{
    return std::make_shared<OpcodesPUSHAD>(*this);
}



/********************   OpcodesPUSHAW    ********************/



void OpcodesPUSHAW::accept(Visitor *v)
{
    v->visitOpcodesPUSHAW(this);
}

std::shared_ptr<Opcode> OpcodesPUSHAW::clone() const
{
    return std::make_shared<OpcodesPUSHAW>(*this);
}



/********************   OpcodesPUSHF    ********************/



void OpcodesPUSHF::accept(Visitor *v)
{
    v->visitOpcodesPUSHF(this);
}

std::shared_ptr<Opcode> OpcodesPUSHF::clone() const
{
    return std::make_shared<OpcodesPUSHF>(*this);
}



/********************   OpcodesPUSHFD    ********************/



void OpcodesPUSHFD::accept(Visitor *v)
{
    v->visitOpcodesPUSHFD(this);
}

std::shared_ptr<Opcode> OpcodesPUSHFD::clone() const
{
    return std::make_shared<OpcodesPUSHFD>(*this);
}



/********************   OpcodesPUSHFW    ********************/



void OpcodesPUSHFW::accept(Visitor *v)
{
    v->visitOpcodesPUSHFW(this);
}

std::shared_ptr<Opcode> OpcodesPUSHFW::clone() const
{
    return std::make_shared<OpcodesPUSHFW>(*this);
}



/********************   OpcodesRCL    ********************/



void OpcodesRCL::accept(Visitor *v)
{
    v->visitOpcodesRCL(this);
}

std::shared_ptr<Opcode> OpcodesRCL::clone() const
{
    return std::make_shared<OpcodesRCL>(*this);
}



/********************   OpcodesRCR    ********************/



void OpcodesRCR::accept(Visitor *v)
{
    v->visitOpcodesRCR(this);
}

std::shared_ptr<Opcode> OpcodesRCR::clone() const
{
    return std::make_shared<OpcodesRCR>(*this);
}



/********************   OpcodesRDMSR    ********************/



void OpcodesRDMSR::accept(Visitor *v)
{
    v->visitOpcodesRDMSR(this);
}

std::shared_ptr<Opcode> OpcodesRDMSR::clone() const
{
    return std::make_shared<OpcodesRDMSR>(*this);
}



/********************   OpcodesRDPMC    ********************/



void OpcodesRDPMC::accept(Visitor *v)
{
    v->visitOpcodesRDPMC(this);
}

std::shared_ptr<Opcode> OpcodesRDPMC::clone() const
{
    return std::make_shared<OpcodesRDPMC>(*this);
}



/********************   OpcodesREP    ********************/



void OpcodesREP::accept(Visitor *v)
{
    v->visitOpcodesREP(this);
}

std::shared_ptr<Opcode> OpcodesREP::clone() const
{
    return std::make_shared<OpcodesREP>(*this);
}



/********************   OpcodesREPE    ********************/



void OpcodesREPE::accept(Visitor *v)
{
    v->visitOpcodesREPE(this);
}

std::shared_ptr<Opcode> OpcodesREPE::clone() const
{
    return std::make_shared<OpcodesREPE>(*this);
}



/********************   OpcodesREPNE    ********************/



void OpcodesREPNE::accept(Visitor *v)
{
    v->visitOpcodesREPNE(this);
}

std::shared_ptr<Opcode> OpcodesREPNE::clone() const
{
    return std::make_shared<OpcodesREPNE>(*this);
}



/********************   OpcodesREPNZ    ********************/



void OpcodesREPNZ::accept(Visitor *v)
{
    v->visitOpcodesREPNZ(this);
}

std::shared_ptr<Opcode> OpcodesREPNZ::clone() const
{
    return std::make_shared<OpcodesREPNZ>(*this);
}



/********************   OpcodesREPZ    ********************/



void OpcodesREPZ::accept(Visitor *v)
{
    v->visitOpcodesREPZ(this);
}

std::shared_ptr<Opcode> OpcodesREPZ::clone() const
{
    return std::make_shared<OpcodesREPZ>(*this);
}



/********************   OpcodesRESB    ********************/



void OpcodesRESB::accept(Visitor *v)
{
    v->visitOpcodesRESB(this);
}

std::shared_ptr<Opcode> OpcodesRESB::clone() const
{
    return std::make_shared<OpcodesRESB>(*this);
}



/********************   OpcodesRESD    ********************/



void OpcodesRESD::accept(Visitor *v)
{
    v->visitOpcodesRESD(this);
}

std::shared_ptr<Opcode> OpcodesRESD::clone() const
{
    return std::make_shared<OpcodesRESD>(*this);
}



/********************   OpcodesRESQ    ********************/



void OpcodesRESQ::accept(Visitor *v)
{
    v->visitOpcodesRESQ(this);
}

std::shared_ptr<Opcode> OpcodesRESQ::clone() const
{
    return std::make_shared<OpcodesRESQ>(*this);
}



/********************   OpcodesREST    ********************/



void OpcodesREST::accept(Visitor *v)
{
    v->visitOpcodesREST(this);
}

std::shared_ptr<Opcode> OpcodesREST::clone() const
{
    return std::make_shared<OpcodesREST>(*this);
}



/********************   OpcodesRESW    ********************/



void OpcodesRESW::accept(Visitor *v)
{
    v->visitOpcodesRESW(this);
}

std::shared_ptr<Opcode> OpcodesRESW::clone() const
{
    return std::make_shared<OpcodesRESW>(*this);
}



/********************   OpcodesRET    ********************/



void OpcodesRET::accept(Visitor *v)
{
    v->visitOpcodesRET(this);
}

std::shared_ptr<Opcode> OpcodesRET::clone() const
{
    return std::make_shared<OpcodesRET>(*this);
}



/********************   OpcodesRETF    ********************/



void OpcodesRETF::accept(Visitor *v)
{
    v->visitOpcodesRETF(this);
}

std::shared_ptr<Opcode> OpcodesRETF::clone() const
{
    return std::make_shared<OpcodesRETF>(*this);
}



/********************   OpcodesRETN    ********************/



void OpcodesRETN::accept(Visitor *v)
{
    v->visitOpcodesRETN(this);
}

std::shared_ptr<Opcode> OpcodesRETN::clone() const
{
    return std::make_shared<OpcodesRETN>(*this);
}



/********************   OpcodesROL    ********************/



void OpcodesROL::accept(Visitor *v)
{
    v->visitOpcodesROL(this);
}

std::shared_ptr<Opcode> OpcodesROL::clone() const
{
    return std::make_shared<OpcodesROL>(*this);
}



/********************   OpcodesROR    ********************/



void OpcodesROR::accept(Visitor *v)
{
    v->visitOpcodesROR(this);
}

std::shared_ptr<Opcode> OpcodesROR::clone() const
{
    return std::make_shared<OpcodesROR>(*this);
}



/********************   OpcodesRSM    ********************/



void OpcodesRSM::accept(Visitor *v)
{
    v->visitOpcodesRSM(this);
}

std::shared_ptr<Opcode> OpcodesRSM::clone() const
{
    return std::make_shared<OpcodesRSM>(*this);
}



/********************   OpcodesSAHF    ********************/



void OpcodesSAHF::accept(Visitor *v)
{
    v->visitOpcodesSAHF(this);
}

std::shared_ptr<Opcode> OpcodesSAHF::clone() const
{
    return std::make_shared<OpcodesSAHF>(*this);
}



/********************   OpcodesSAL    ********************/



void OpcodesSAL::accept(Visitor *v)
{
    v->visitOpcodesSAL(this);
}

std::shared_ptr<Opcode> OpcodesSAL::clone() const
{
    return std::make_shared<OpcodesSAL>(*this);
}



/********************   OpcodesSAR    ********************/



void OpcodesSAR::accept(Visitor *v)
{
    v->visitOpcodesSAR(this);
}

std::shared_ptr<Opcode> OpcodesSAR::clone() const
{
    return std::make_shared<OpcodesSAR>(*this);
}



/********************   OpcodesSBB    ********************/



void OpcodesSBB::accept(Visitor *v)
{
    v->visitOpcodesSBB(this);
}

std::shared_ptr<Opcode> OpcodesSBB::clone() const
{
    return std::make_shared<OpcodesSBB>(*this);
}



/********************   OpcodesSCASB    ********************/



void OpcodesSCASB::accept(Visitor *v)
{
    v->visitOpcodesSCASB(this);
}

std::shared_ptr<Opcode> OpcodesSCASB::clone() const
{
    return std::make_shared<OpcodesSCASB>(*this);
}



/********************   OpcodesSCASD    ********************/



void OpcodesSCASD::accept(Visitor *v)
{
    v->visitOpcodesSCASD(this);
}

std::shared_ptr<Opcode> OpcodesSCASD::clone() const
{
    return std::make_shared<OpcodesSCASD>(*this);
}



/********************   OpcodesSCASW    ********************/



void OpcodesSCASW::accept(Visitor *v)
{
    v->visitOpcodesSCASW(this);
}

std::shared_ptr<Opcode> OpcodesSCASW::clone() const
{
    return std::make_shared<OpcodesSCASW>(*this);
}



/********************   OpcodesSETA    ********************/



void OpcodesSETA::accept(Visitor *v)
{
    v->visitOpcodesSETA(this);
}

std::shared_ptr<Opcode> OpcodesSETA::clone() const
{
    return std::make_shared<OpcodesSETA>(*this);
}



/********************   OpcodesSETAE    ********************/



void OpcodesSETAE::accept(Visitor *v)
{
    v->visitOpcodesSETAE(this);
}

std::shared_ptr<Opcode> OpcodesSETAE::clone() const
{
    return std::make_shared<OpcodesSETAE>(*this);
}



/********************   OpcodesSETB    ********************/



void OpcodesSETB::accept(Visitor *v)
{
    v->visitOpcodesSETB(this);
}

std::shared_ptr<Opcode> OpcodesSETB::clone() const
{
    return std::make_shared<OpcodesSETB>(*this);
}



/********************   OpcodesSETBE    ********************/



void OpcodesSETBE::accept(Visitor *v)
{
    v->visitOpcodesSETBE(this);
}

std::shared_ptr<Opcode> OpcodesSETBE::clone() const
{
    return std::make_shared<OpcodesSETBE>(*this);
}



/********************   OpcodesSETC    ********************/



void OpcodesSETC::accept(Visitor *v)
{
    v->visitOpcodesSETC(this);
}

std::shared_ptr<Opcode> OpcodesSETC::clone() const
{
    return std::make_shared<OpcodesSETC>(*this);
}



/********************   OpcodesSETE    ********************/



void OpcodesSETE::accept(Visitor *v)
{
    v->visitOpcodesSETE(this);
}

std::shared_ptr<Opcode> OpcodesSETE::clone() const
{
    return std::make_shared<OpcodesSETE>(*this);
}



/********************   OpcodesSETG    ********************/



void OpcodesSETG::accept(Visitor *v)
{
    v->visitOpcodesSETG(this);
}

std::shared_ptr<Opcode> OpcodesSETG::clone() const
{
    return std::make_shared<OpcodesSETG>(*this);
}



/********************   OpcodesSETGE    ********************/



void OpcodesSETGE::accept(Visitor *v)
{
    v->visitOpcodesSETGE(this);
}

std::shared_ptr<Opcode> OpcodesSETGE::clone() const
{
    return std::make_shared<OpcodesSETGE>(*this);
}



/********************   OpcodesSETL    ********************/



void OpcodesSETL::accept(Visitor *v)
{
    v->visitOpcodesSETL(this);
}

std::shared_ptr<Opcode> OpcodesSETL::clone() const
{
    return std::make_shared<OpcodesSETL>(*this);
}



/********************   OpcodesSETLE    ********************/



void OpcodesSETLE::accept(Visitor *v)
{
    v->visitOpcodesSETLE(this);
}

std::shared_ptr<Opcode> OpcodesSETLE::clone() const
{
    return std::make_shared<OpcodesSETLE>(*this);
}



/********************   OpcodesSETNA    ********************/



void OpcodesSETNA::accept(Visitor *v)
{
    v->visitOpcodesSETNA(this);
}

std::shared_ptr<Opcode> OpcodesSETNA::clone() const
{
    return std::make_shared<OpcodesSETNA>(*this);
}



/********************   OpcodesSETNAE    ********************/



void OpcodesSETNAE::accept(Visitor *v)
{
    v->visitOpcodesSETNAE(this);
}

std::shared_ptr<Opcode> OpcodesSETNAE::clone() const
{
    return std::make_shared<OpcodesSETNAE>(*this);
}



/********************   OpcodesSETNB    ********************/



void OpcodesSETNB::accept(Visitor *v)
{
    v->visitOpcodesSETNB(this);
}

std::shared_ptr<Opcode> OpcodesSETNB::clone() const
{
    return std::make_shared<OpcodesSETNB>(*this);
}



/********************   OpcodesSETNBE    ********************/



void OpcodesSETNBE::accept(Visitor *v)
{
    v->visitOpcodesSETNBE(this);
}

std::shared_ptr<Opcode> OpcodesSETNBE::clone() const
{
    return std::make_shared<OpcodesSETNBE>(*this);
}



/********************   OpcodesSETNC    ********************/



void OpcodesSETNC::accept(Visitor *v)
{
    v->visitOpcodesSETNC(this);
}

std::shared_ptr<Opcode> OpcodesSETNC::clone() const
{
    return std::make_shared<OpcodesSETNC>(*this);
}



/********************   OpcodesSETNE    ********************/



void OpcodesSETNE::accept(Visitor *v)
{
    v->visitOpcodesSETNE(this);
}

std::shared_ptr<Opcode> OpcodesSETNE::clone() const
{
    return std::make_shared<OpcodesSETNE>(*this);
}



/********************   OpcodesSETNG    ********************/



void OpcodesSETNG::accept(Visitor *v)
{
    v->visitOpcodesSETNG(this);
}

std::shared_ptr<Opcode> OpcodesSETNG::clone() const
{
    return std::make_shared<OpcodesSETNG>(*this);
}



/********************   OpcodesSETNGE    ********************/



void OpcodesSETNGE::accept(Visitor *v)
{
    v->visitOpcodesSETNGE(this);
}

std::shared_ptr<Opcode> OpcodesSETNGE::clone() const
{
    return std::make_shared<OpcodesSETNGE>(*this);
}



/********************   OpcodesSETNL    ********************/



void OpcodesSETNL::accept(Visitor *v)
{
    v->visitOpcodesSETNL(this);
}

std::shared_ptr<Opcode> OpcodesSETNL::clone() const
{
    return std::make_shared<OpcodesSETNL>(*this);
}



/********************   OpcodesSETNLE    ********************/



void OpcodesSETNLE::accept(Visitor *v)
{
    v->visitOpcodesSETNLE(this);
}

std::shared_ptr<Opcode> OpcodesSETNLE::clone() const
{
    return std::make_shared<OpcodesSETNLE>(*this);
}



/********************   OpcodesSETNO    ********************/



void OpcodesSETNO::accept(Visitor *v)
{
    v->visitOpcodesSETNO(this);
}

std::shared_ptr<Opcode> OpcodesSETNO::clone() const
{
    return std::make_shared<OpcodesSETNO>(*this);
}



/********************   OpcodesSETNP    ********************/



void OpcodesSETNP::accept(Visitor *v)
{
    v->visitOpcodesSETNP(this);
}

std::shared_ptr<Opcode> OpcodesSETNP::clone() const
{
    return std::make_shared<OpcodesSETNP>(*this);
}



/********************   OpcodesSETNS    ********************/



void OpcodesSETNS::accept(Visitor *v)
{
    v->visitOpcodesSETNS(this);
}

std::shared_ptr<Opcode> OpcodesSETNS::clone() const
{
    return std::make_shared<OpcodesSETNS>(*this);
}



/********************   OpcodesSETNZ    ********************/



void OpcodesSETNZ::accept(Visitor *v)
{
    v->visitOpcodesSETNZ(this);
}

std::shared_ptr<Opcode> OpcodesSETNZ::clone() const
{
    return std::make_shared<OpcodesSETNZ>(*this);
}



/********************   OpcodesSETO    ********************/



void OpcodesSETO::accept(Visitor *v)
{
    v->visitOpcodesSETO(this);
}

std::shared_ptr<Opcode> OpcodesSETO::clone() const
{
    return std::make_shared<OpcodesSETO>(*this);
}



/********************   OpcodesSETP    ********************/



void OpcodesSETP::accept(Visitor *v)
{
    v->visitOpcodesSETP(this);
}

std::shared_ptr<Opcode> OpcodesSETP::clone() const
{
    return std::make_shared<OpcodesSETP>(*this);
}



/********************   OpcodesSETPE    ********************/



void OpcodesSETPE::accept(Visitor *v)
{
    v->visitOpcodesSETPE(this);
}

std::shared_ptr<Opcode> OpcodesSETPE::clone() const
{
    return std::make_shared<OpcodesSETPE>(*this);
}



/********************   OpcodesSETPO    ********************/



void OpcodesSETPO::accept(Visitor *v)
{
    v->visitOpcodesSETPO(this);
}

std::shared_ptr<Opcode> OpcodesSETPO::clone() const
{
    return std::make_shared<OpcodesSETPO>(*this);
}



/********************   OpcodesSETS    ********************/



void OpcodesSETS::accept(Visitor *v)
{
    v->visitOpcodesSETS(this);
}

std::shared_ptr<Opcode> OpcodesSETS::clone() const
{
    return std::make_shared<OpcodesSETS>(*this);
}



/********************   OpcodesSETZ    ********************/



void OpcodesSETZ::accept(Visitor *v)
{
    v->visitOpcodesSETZ(this);
}

std::shared_ptr<Opcode> OpcodesSETZ::clone() const
{
    return std::make_shared<OpcodesSETZ>(*this);
}



/********************   OpcodesSGDT    ********************/



void OpcodesSGDT::accept(Visitor *v)
{
    v->visitOpcodesSGDT(this);
}

std::shared_ptr<Opcode> OpcodesSGDT::clone() const
{
    return std::make_shared<OpcodesSGDT>(*this);
}



/********************   OpcodesSHL    ********************/



void OpcodesSHL::accept(Visitor *v)
{
    v->visitOpcodesSHL(this);
}

std::shared_ptr<Opcode> OpcodesSHL::clone() const
{
    return std::make_shared<OpcodesSHL>(*this);
}



/********************   OpcodesSHLD    ********************/



void OpcodesSHLD::accept(Visitor *v)
{
    v->visitOpcodesSHLD(this);
}

std::shared_ptr<Opcode> OpcodesSHLD::clone() const
{
    return std::make_shared<OpcodesSHLD>(*this);
}



/********************   OpcodesSHR    ********************/



void OpcodesSHR::accept(Visitor *v)
{
    v->visitOpcodesSHR(this);
}

std::shared_ptr<Opcode> OpcodesSHR::clone() const
{
    return std::make_shared<OpcodesSHR>(*this);
}



/********************   OpcodesSHRD    ********************/



void OpcodesSHRD::accept(Visitor *v)
{
    v->visitOpcodesSHRD(this);
}

std::shared_ptr<Opcode> OpcodesSHRD::clone() const
{
    return std::make_shared<OpcodesSHRD>(*this);
}



/********************   OpcodesSIDT    ********************/



void OpcodesSIDT::accept(Visitor *v)
{
    v->visitOpcodesSIDT(this);
}

std::shared_ptr<Opcode> OpcodesSIDT::clone() const
{
    return std::make_shared<OpcodesSIDT>(*this);
}



/********************   OpcodesSLDT    ********************/



void OpcodesSLDT::accept(Visitor *v)
{
    v->visitOpcodesSLDT(this);
}

std::shared_ptr<Opcode> OpcodesSLDT::clone() const
{
    return std::make_shared<OpcodesSLDT>(*this);
}



/********************   OpcodesSMSW    ********************/



void OpcodesSMSW::accept(Visitor *v)
{
    v->visitOpcodesSMSW(this);
}

std::shared_ptr<Opcode> OpcodesSMSW::clone() const
{
    return std::make_shared<OpcodesSMSW>(*this);
}



/********************   OpcodesSTC    ********************/



void OpcodesSTC::accept(Visitor *v)
{
    v->visitOpcodesSTC(this);
}

std::shared_ptr<Opcode> OpcodesSTC::clone() const
{
    return std::make_shared<OpcodesSTC>(*this);
}



/********************   OpcodesSTD    ********************/



void OpcodesSTD::accept(Visitor *v)
{
    v->visitOpcodesSTD(this);
}

std::shared_ptr<Opcode> OpcodesSTD::clone() const
{
    return std::make_shared<OpcodesSTD>(*this);
}



/********************   OpcodesSTI    ********************/



void OpcodesSTI::accept(Visitor *v)
{
    v->visitOpcodesSTI(this);
}

std::shared_ptr<Opcode> OpcodesSTI::clone() const
{
    return std::make_shared<OpcodesSTI>(*this);
}



/********************   OpcodesSTOSB    ********************/



void OpcodesSTOSB::accept(Visitor *v)
{
    v->visitOpcodesSTOSB(this);
}

std::shared_ptr<Opcode> OpcodesSTOSB::clone() const
{
    return std::make_shared<OpcodesSTOSB>(*this);
}



/********************   OpcodesSTOSD    ********************/



void OpcodesSTOSD::accept(Visitor *v)
{
    v->visitOpcodesSTOSD(this);
}

std::shared_ptr<Opcode> OpcodesSTOSD::clone() const
{
    return std::make_shared<OpcodesSTOSD>(*this);
}



/********************   OpcodesSTOSW    ********************/



void OpcodesSTOSW::accept(Visitor *v)
{
    v->visitOpcodesSTOSW(this);
}

std::shared_ptr<Opcode> OpcodesSTOSW::clone() const
{
    return std::make_shared<OpcodesSTOSW>(*this);
}



/********************   OpcodesSTR    ********************/



void OpcodesSTR::accept(Visitor *v)
{
    v->visitOpcodesSTR(this);
}

std::shared_ptr<Opcode> OpcodesSTR::clone() const
{
    return std::make_shared<OpcodesSTR>(*this);
}



/********************   OpcodesSUB    ********************/



void OpcodesSUB::accept(Visitor *v)
{
    v->visitOpcodesSUB(this);
}

std::shared_ptr<Opcode> OpcodesSUB::clone() const
{
    return std::make_shared<OpcodesSUB>(*this);
}



/********************   OpcodesTEST    ********************/



void OpcodesTEST::accept(Visitor *v)
{
    v->visitOpcodesTEST(this);
}

std::shared_ptr<Opcode> OpcodesTEST::clone() const
{
    return std::make_shared<OpcodesTEST>(*this);
}



/********************   OpcodesTIMES    ********************/



void OpcodesTIMES::accept(Visitor *v)
{
    v->visitOpcodesTIMES(this);
}

std::shared_ptr<Opcode> OpcodesTIMES::clone() const
{
    return std::make_shared<OpcodesTIMES>(*this);
}



/********************   OpcodesUD2    ********************/



void OpcodesUD2::accept(Visitor *v)
{
    v->visitOpcodesUD2(this);
}

std::shared_ptr<Opcode> OpcodesUD2::clone() const
{
    return std::make_shared<OpcodesUD2>(*this);
}



/********************   OpcodesVERR    ********************/



void OpcodesVERR::accept(Visitor *v)
{
    v->visitOpcodesVERR(this);
}

std::shared_ptr<Opcode> OpcodesVERR::clone() const
{
    return std::make_shared<OpcodesVERR>(*this);
}



/********************   OpcodesVERW    ********************/



void OpcodesVERW::accept(Visitor *v)
{
    v->visitOpcodesVERW(this);
}

std::shared_ptr<Opcode> OpcodesVERW::clone() const
{
    return std::make_shared<OpcodesVERW>(*this);
}



/********************   OpcodesWAIT    ********************/



void OpcodesWAIT::accept(Visitor *v)
{
    v->visitOpcodesWAIT(this);
}

std::shared_ptr<Opcode> OpcodesWAIT::clone() const
{
    return std::make_shared<OpcodesWAIT>(*this);
}



/********************   OpcodesWBINVD    ********************/



void OpcodesWBINVD::accept(Visitor *v)
{
    v->visitOpcodesWBINVD(this);
}

std::shared_ptr<Opcode> OpcodesWBINVD::clone() const
{
    return std::make_shared<OpcodesWBINVD>(*this);
}



/********************   OpcodesWRMSR    ********************/



void OpcodesWRMSR::accept(Visitor *v)
{
    v->visitOpcodesWRMSR(this);
}

std::shared_ptr<Opcode> OpcodesWRMSR::clone() const
{
    return std::make_shared<OpcodesWRMSR>(*this);
}



/********************   OpcodesXADD    ********************/



void OpcodesXADD::accept(Visitor *v)
{
    v->visitOpcodesXADD(this);
}

std::shared_ptr<Opcode> OpcodesXADD::clone() const
{
    return std::make_shared<OpcodesXADD>(*this);
}



/********************   OpcodesXCHG    ********************/



void OpcodesXCHG::accept(Visitor *v)
{
    v->visitOpcodesXCHG(this);
}

std::shared_ptr<Opcode> OpcodesXCHG::clone() const
{
    return std::make_shared<OpcodesXCHG>(*this);
}



/********************   OpcodesXLATB    ********************/



void OpcodesXLATB::accept(Visitor *v)
{
    v->visitOpcodesXLATB(this);
}

std::shared_ptr<Opcode> OpcodesXLATB::clone() const
{
    return std::make_shared<OpcodesXLATB>(*this);
}



/********************   OpcodesXOR    ********************/



void OpcodesXOR::accept(Visitor *v)
{
    v->visitOpcodesXOR(this);
}

std::shared_ptr<Opcode> OpcodesXOR::clone() const
{
    return std::make_shared<OpcodesXOR>(*this);
}




/********************   ListStatement    ********************/
void ListStatement::accept(Visitor *v)
{
    v->visitListStatement(this);
}

std::shared_ptr<ListStatement> ListStatement::clone() const
{
    return std::make_shared<ListStatement>(*this);
}

void ListStatement::cons(std::shared_ptr<Statement> x) {
    liststatement_.push_back(x);
}

std::shared_ptr<ListStatement> consListStatement(std::shared_ptr<Statement> x, std::shared_ptr<ListStatement> xs) {
    xs->liststatement_.push_front(x);
    return xs;
}

void ListStatement::reverse() {
    std::reverse(liststatement_.begin(), liststatement_.end());
}


/********************   ListFactor    ********************/
void ListFactor::accept(Visitor *v)
{
    v->visitListFactor(this);
}

std::shared_ptr<ListFactor> ListFactor::clone() const
{
    return std::make_shared<ListFactor>(*this);
}

void ListFactor::cons(std::shared_ptr<Factor> x) {
    listfactor_.push_back(x);
}

std::shared_ptr<ListFactor> consListFactor(std::shared_ptr<Factor> x, std::shared_ptr<ListFactor> xs) {
    xs->listfactor_.push_front(x);
    return xs;
}

void ListFactor::reverse() {
    std::reverse(listfactor_.begin(), listfactor_.end());
}


/********************   ListMnemonicArgs    ********************/
void ListMnemonicArgs::accept(Visitor *v)
{
    v->visitListMnemonicArgs(this);
}

std::shared_ptr<ListMnemonicArgs> ListMnemonicArgs::clone() const
{
    return std::make_shared<ListMnemonicArgs>(*this);
}

void ListMnemonicArgs::cons(std::shared_ptr<MnemonicArgs> x) {
    listmnemonicargs_.push_back(x);
}

std::shared_ptr<ListMnemonicArgs> consListMnemonicArgs(std::shared_ptr<MnemonicArgs> x, std::shared_ptr<ListMnemonicArgs> xs) {
    xs->listmnemonicargs_.push_front(x);
    return xs;
}

void ListMnemonicArgs::reverse() {
    std::reverse(listmnemonicargs_.begin(), listmnemonicargs_.end());
}





