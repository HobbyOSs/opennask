//C++ Abstract Syntax Implementation generated by the BNF Converter.
#include <algorithm>
#include <string>
#include <vector>
#include "Absyn.H"

/********************   Prog    ********************/
Prog::Prog(ListStatement *p1)
{
  liststatement_ = p1;

}

Prog::Prog(const Prog & other)
{
  liststatement_ = other.liststatement_->clone();

}

Prog &Prog::operator=(const Prog & other)
{
  Prog tmp(other);
  swap(tmp);
  return *this;
}

void Prog::swap(Prog & other)
{
  std::swap(liststatement_, other.liststatement_);

}

Prog::~Prog()
{
  delete(liststatement_);

}

void Prog::accept(Visitor *v)
{
  v->visitProg(this);
}

Prog *Prog::clone() const
{
  return new Prog(*this);
}



/********************   LabelStmt    ********************/
LabelStmt::LabelStmt(Ident p1)
{
  ident_ = p1;

}

LabelStmt::LabelStmt(const LabelStmt & other)
{
  ident_ = other.ident_;

}

LabelStmt &LabelStmt::operator=(const LabelStmt & other)
{
  LabelStmt tmp(other);
  swap(tmp);
  return *this;
}

void LabelStmt::swap(LabelStmt & other)
{
  std::swap(ident_, other.ident_);

}

LabelStmt::~LabelStmt()
{

}

void LabelStmt::accept(Visitor *v)
{
  v->visitLabelStmt(this);
}

LabelStmt *LabelStmt::clone() const
{
  return new LabelStmt(*this);
}



/********************   DeclareStmt    ********************/
DeclareStmt::DeclareStmt(Ident p1, Exp *p2)
{
  ident_ = p1;
  exp_ = p2;

}

DeclareStmt::DeclareStmt(const DeclareStmt & other)
{
  ident_ = other.ident_;
  exp_ = other.exp_->clone();

}

DeclareStmt &DeclareStmt::operator=(const DeclareStmt & other)
{
  DeclareStmt tmp(other);
  swap(tmp);
  return *this;
}

void DeclareStmt::swap(DeclareStmt & other)
{
  std::swap(ident_, other.ident_);
  std::swap(exp_, other.exp_);

}

DeclareStmt::~DeclareStmt()
{
  delete(exp_);

}

void DeclareStmt::accept(Visitor *v)
{
  v->visitDeclareStmt(this);
}

DeclareStmt *DeclareStmt::clone() const
{
  return new DeclareStmt(*this);
}



/********************   ConfigStmt    ********************/
ConfigStmt::ConfigStmt(ConfigType *p1, String p2)
{
  configtype_ = p1;
  string_ = p2;

}

ConfigStmt::ConfigStmt(const ConfigStmt & other)
{
  configtype_ = other.configtype_->clone();
  string_ = other.string_;

}

ConfigStmt &ConfigStmt::operator=(const ConfigStmt & other)
{
  ConfigStmt tmp(other);
  swap(tmp);
  return *this;
}

void ConfigStmt::swap(ConfigStmt & other)
{
  std::swap(configtype_, other.configtype_);
  std::swap(string_, other.string_);

}

ConfigStmt::~ConfigStmt()
{
  delete(configtype_);

}

void ConfigStmt::accept(Visitor *v)
{
  v->visitConfigStmt(this);
}

ConfigStmt *ConfigStmt::clone() const
{
  return new ConfigStmt(*this);
}



/********************   MnemonicStmt    ********************/
MnemonicStmt::MnemonicStmt(Opcode *p1, ListMnemonicArgs *p2)
{
  opcode_ = p1;
  listmnemonicargs_ = p2;

}

MnemonicStmt::MnemonicStmt(const MnemonicStmt & other)
{
  opcode_ = other.opcode_->clone();
  listmnemonicargs_ = other.listmnemonicargs_->clone();

}

MnemonicStmt &MnemonicStmt::operator=(const MnemonicStmt & other)
{
  MnemonicStmt tmp(other);
  swap(tmp);
  return *this;
}

void MnemonicStmt::swap(MnemonicStmt & other)
{
  std::swap(opcode_, other.opcode_);
  std::swap(listmnemonicargs_, other.listmnemonicargs_);

}

MnemonicStmt::~MnemonicStmt()
{
  delete(opcode_);
  delete(listmnemonicargs_);

}

void MnemonicStmt::accept(Visitor *v)
{
  v->visitMnemonicStmt(this);
}

MnemonicStmt *MnemonicStmt::clone() const
{
  return new MnemonicStmt(*this);
}



/********************   MnemoArgs    ********************/
MnemoArgs::MnemoArgs(Exp *p1)
{
  exp_ = p1;

}

MnemoArgs::MnemoArgs(const MnemoArgs & other)
{
  exp_ = other.exp_->clone();

}

MnemoArgs &MnemoArgs::operator=(const MnemoArgs & other)
{
  MnemoArgs tmp(other);
  swap(tmp);
  return *this;
}

void MnemoArgs::swap(MnemoArgs & other)
{
  std::swap(exp_, other.exp_);

}

MnemoArgs::~MnemoArgs()
{
  delete(exp_);

}

void MnemoArgs::accept(Visitor *v)
{
  v->visitMnemoArgs(this);
}

MnemoArgs *MnemoArgs::clone() const
{
  return new MnemoArgs(*this);
}



/********************   EqExp    ********************/
EqExp::EqExp(Factor *p1, Factor *p2)
{
  factor_1 = p1;
  factor_2 = p2;

}

EqExp::EqExp(const EqExp & other)
{
  factor_1 = other.factor_1->clone();
  factor_2 = other.factor_2->clone();

}

EqExp &EqExp::operator=(const EqExp & other)
{
  EqExp tmp(other);
  swap(tmp);
  return *this;
}

void EqExp::swap(EqExp & other)
{
  std::swap(factor_1, other.factor_1);
  std::swap(factor_2, other.factor_2);

}

EqExp::~EqExp()
{
  delete(factor_1);
  delete(factor_2);

}

void EqExp::accept(Visitor *v)
{
  v->visitEqExp(this);
}

EqExp *EqExp::clone() const
{
  return new EqExp(*this);
}



/********************   NeqExp    ********************/
NeqExp::NeqExp(Factor *p1, Factor *p2)
{
  factor_1 = p1;
  factor_2 = p2;

}

NeqExp::NeqExp(const NeqExp & other)
{
  factor_1 = other.factor_1->clone();
  factor_2 = other.factor_2->clone();

}

NeqExp &NeqExp::operator=(const NeqExp & other)
{
  NeqExp tmp(other);
  swap(tmp);
  return *this;
}

void NeqExp::swap(NeqExp & other)
{
  std::swap(factor_1, other.factor_1);
  std::swap(factor_2, other.factor_2);

}

NeqExp::~NeqExp()
{
  delete(factor_1);
  delete(factor_2);

}

void NeqExp::accept(Visitor *v)
{
  v->visitNeqExp(this);
}

NeqExp *NeqExp::clone() const
{
  return new NeqExp(*this);
}



/********************   LtExp    ********************/
LtExp::LtExp(Factor *p1, Factor *p2)
{
  factor_1 = p1;
  factor_2 = p2;

}

LtExp::LtExp(const LtExp & other)
{
  factor_1 = other.factor_1->clone();
  factor_2 = other.factor_2->clone();

}

LtExp &LtExp::operator=(const LtExp & other)
{
  LtExp tmp(other);
  swap(tmp);
  return *this;
}

void LtExp::swap(LtExp & other)
{
  std::swap(factor_1, other.factor_1);
  std::swap(factor_2, other.factor_2);

}

LtExp::~LtExp()
{
  delete(factor_1);
  delete(factor_2);

}

void LtExp::accept(Visitor *v)
{
  v->visitLtExp(this);
}

LtExp *LtExp::clone() const
{
  return new LtExp(*this);
}



/********************   GtExp    ********************/
GtExp::GtExp(Factor *p1, Factor *p2)
{
  factor_1 = p1;
  factor_2 = p2;

}

GtExp::GtExp(const GtExp & other)
{
  factor_1 = other.factor_1->clone();
  factor_2 = other.factor_2->clone();

}

GtExp &GtExp::operator=(const GtExp & other)
{
  GtExp tmp(other);
  swap(tmp);
  return *this;
}

void GtExp::swap(GtExp & other)
{
  std::swap(factor_1, other.factor_1);
  std::swap(factor_2, other.factor_2);

}

GtExp::~GtExp()
{
  delete(factor_1);
  delete(factor_2);

}

void GtExp::accept(Visitor *v)
{
  v->visitGtExp(this);
}

GtExp *GtExp::clone() const
{
  return new GtExp(*this);
}



/********************   LteExp    ********************/
LteExp::LteExp(Factor *p1, Factor *p2)
{
  factor_1 = p1;
  factor_2 = p2;

}

LteExp::LteExp(const LteExp & other)
{
  factor_1 = other.factor_1->clone();
  factor_2 = other.factor_2->clone();

}

LteExp &LteExp::operator=(const LteExp & other)
{
  LteExp tmp(other);
  swap(tmp);
  return *this;
}

void LteExp::swap(LteExp & other)
{
  std::swap(factor_1, other.factor_1);
  std::swap(factor_2, other.factor_2);

}

LteExp::~LteExp()
{
  delete(factor_1);
  delete(factor_2);

}

void LteExp::accept(Visitor *v)
{
  v->visitLteExp(this);
}

LteExp *LteExp::clone() const
{
  return new LteExp(*this);
}



/********************   GteExp    ********************/
GteExp::GteExp(Factor *p1, Factor *p2)
{
  factor_1 = p1;
  factor_2 = p2;

}

GteExp::GteExp(const GteExp & other)
{
  factor_1 = other.factor_1->clone();
  factor_2 = other.factor_2->clone();

}

GteExp &GteExp::operator=(const GteExp & other)
{
  GteExp tmp(other);
  swap(tmp);
  return *this;
}

void GteExp::swap(GteExp & other)
{
  std::swap(factor_1, other.factor_1);
  std::swap(factor_2, other.factor_2);

}

GteExp::~GteExp()
{
  delete(factor_1);
  delete(factor_2);

}

void GteExp::accept(Visitor *v)
{
  v->visitGteExp(this);
}

GteExp *GteExp::clone() const
{
  return new GteExp(*this);
}



/********************   PlusExp    ********************/
PlusExp::PlusExp(Factor *p1, Factor *p2)
{
  factor_1 = p1;
  factor_2 = p2;

}

PlusExp::PlusExp(const PlusExp & other)
{
  factor_1 = other.factor_1->clone();
  factor_2 = other.factor_2->clone();

}

PlusExp &PlusExp::operator=(const PlusExp & other)
{
  PlusExp tmp(other);
  swap(tmp);
  return *this;
}

void PlusExp::swap(PlusExp & other)
{
  std::swap(factor_1, other.factor_1);
  std::swap(factor_2, other.factor_2);

}

PlusExp::~PlusExp()
{
  delete(factor_1);
  delete(factor_2);

}

void PlusExp::accept(Visitor *v)
{
  v->visitPlusExp(this);
}

PlusExp *PlusExp::clone() const
{
  return new PlusExp(*this);
}



/********************   MinusExp    ********************/
MinusExp::MinusExp(Factor *p1, Factor *p2)
{
  factor_1 = p1;
  factor_2 = p2;

}

MinusExp::MinusExp(const MinusExp & other)
{
  factor_1 = other.factor_1->clone();
  factor_2 = other.factor_2->clone();

}

MinusExp &MinusExp::operator=(const MinusExp & other)
{
  MinusExp tmp(other);
  swap(tmp);
  return *this;
}

void MinusExp::swap(MinusExp & other)
{
  std::swap(factor_1, other.factor_1);
  std::swap(factor_2, other.factor_2);

}

MinusExp::~MinusExp()
{
  delete(factor_1);
  delete(factor_2);

}

void MinusExp::accept(Visitor *v)
{
  v->visitMinusExp(this);
}

MinusExp *MinusExp::clone() const
{
  return new MinusExp(*this);
}



/********************   MulExp    ********************/
MulExp::MulExp(Factor *p1, Factor *p2)
{
  factor_1 = p1;
  factor_2 = p2;

}

MulExp::MulExp(const MulExp & other)
{
  factor_1 = other.factor_1->clone();
  factor_2 = other.factor_2->clone();

}

MulExp &MulExp::operator=(const MulExp & other)
{
  MulExp tmp(other);
  swap(tmp);
  return *this;
}

void MulExp::swap(MulExp & other)
{
  std::swap(factor_1, other.factor_1);
  std::swap(factor_2, other.factor_2);

}

MulExp::~MulExp()
{
  delete(factor_1);
  delete(factor_2);

}

void MulExp::accept(Visitor *v)
{
  v->visitMulExp(this);
}

MulExp *MulExp::clone() const
{
  return new MulExp(*this);
}



/********************   DivExp    ********************/
DivExp::DivExp(Factor *p1, Factor *p2)
{
  factor_1 = p1;
  factor_2 = p2;

}

DivExp::DivExp(const DivExp & other)
{
  factor_1 = other.factor_1->clone();
  factor_2 = other.factor_2->clone();

}

DivExp &DivExp::operator=(const DivExp & other)
{
  DivExp tmp(other);
  swap(tmp);
  return *this;
}

void DivExp::swap(DivExp & other)
{
  std::swap(factor_1, other.factor_1);
  std::swap(factor_2, other.factor_2);

}

DivExp::~DivExp()
{
  delete(factor_1);
  delete(factor_2);

}

void DivExp::accept(Visitor *v)
{
  v->visitDivExp(this);
}

DivExp *DivExp::clone() const
{
  return new DivExp(*this);
}



/********************   ModExp    ********************/
ModExp::ModExp(Factor *p1, Factor *p2)
{
  factor_1 = p1;
  factor_2 = p2;

}

ModExp::ModExp(const ModExp & other)
{
  factor_1 = other.factor_1->clone();
  factor_2 = other.factor_2->clone();

}

ModExp &ModExp::operator=(const ModExp & other)
{
  ModExp tmp(other);
  swap(tmp);
  return *this;
}

void ModExp::swap(ModExp & other)
{
  std::swap(factor_1, other.factor_1);
  std::swap(factor_2, other.factor_2);

}

ModExp::~ModExp()
{
  delete(factor_1);
  delete(factor_2);

}

void ModExp::accept(Visitor *v)
{
  v->visitModExp(this);
}

ModExp *ModExp::clone() const
{
  return new ModExp(*this);
}



/********************   ImmExp    ********************/
ImmExp::ImmExp(Factor *p1)
{
  factor_ = p1;

}

ImmExp::ImmExp(const ImmExp & other)
{
  factor_ = other.factor_->clone();

}

ImmExp &ImmExp::operator=(const ImmExp & other)
{
  ImmExp tmp(other);
  swap(tmp);
  return *this;
}

void ImmExp::swap(ImmExp & other)
{
  std::swap(factor_, other.factor_);

}

ImmExp::~ImmExp()
{
  delete(factor_);

}

void ImmExp::accept(Visitor *v)
{
  v->visitImmExp(this);
}

ImmExp *ImmExp::clone() const
{
  return new ImmExp(*this);
}



/********************   NumberFactor    ********************/
NumberFactor::NumberFactor(Integer p1)
{
  integer_ = p1;

}

NumberFactor::NumberFactor(const NumberFactor & other)
{
  integer_ = other.integer_;

}

NumberFactor &NumberFactor::operator=(const NumberFactor & other)
{
  NumberFactor tmp(other);
  swap(tmp);
  return *this;
}

void NumberFactor::swap(NumberFactor & other)
{
  std::swap(integer_, other.integer_);

}

NumberFactor::~NumberFactor()
{

}

void NumberFactor::accept(Visitor *v)
{
  v->visitNumberFactor(this);
}

NumberFactor *NumberFactor::clone() const
{
  return new NumberFactor(*this);
}



/********************   HexFactor    ********************/
HexFactor::HexFactor(Hex p1)
{
  hex_ = p1;

}

HexFactor::HexFactor(const HexFactor & other)
{
  hex_ = other.hex_;

}

HexFactor &HexFactor::operator=(const HexFactor & other)
{
  HexFactor tmp(other);
  swap(tmp);
  return *this;
}

void HexFactor::swap(HexFactor & other)
{
  std::swap(hex_, other.hex_);

}

HexFactor::~HexFactor()
{

}

void HexFactor::accept(Visitor *v)
{
  v->visitHexFactor(this);
}

HexFactor *HexFactor::clone() const
{
  return new HexFactor(*this);
}



/********************   IdentFactor    ********************/
IdentFactor::IdentFactor(Ident p1)
{
  ident_ = p1;

}

IdentFactor::IdentFactor(const IdentFactor & other)
{
  ident_ = other.ident_;

}

IdentFactor &IdentFactor::operator=(const IdentFactor & other)
{
  IdentFactor tmp(other);
  swap(tmp);
  return *this;
}

void IdentFactor::swap(IdentFactor & other)
{
  std::swap(ident_, other.ident_);

}

IdentFactor::~IdentFactor()
{

}

void IdentFactor::accept(Visitor *v)
{
  v->visitIdentFactor(this);
}

IdentFactor *IdentFactor::clone() const
{
  return new IdentFactor(*this);
}



/********************   StringFactor    ********************/
StringFactor::StringFactor(String p1)
{
  string_ = p1;

}

StringFactor::StringFactor(const StringFactor & other)
{
  string_ = other.string_;

}

StringFactor &StringFactor::operator=(const StringFactor & other)
{
  StringFactor tmp(other);
  swap(tmp);
  return *this;
}

void StringFactor::swap(StringFactor & other)
{
  std::swap(string_, other.string_);

}

StringFactor::~StringFactor()
{

}

void StringFactor::accept(Visitor *v)
{
  v->visitStringFactor(this);
}

StringFactor *StringFactor::clone() const
{
  return new StringFactor(*this);
}



/********************   BitsConfig    ********************/
BitsConfig::BitsConfig()
{

}

BitsConfig::BitsConfig(const BitsConfig & other)
{

}

BitsConfig &BitsConfig::operator=(const BitsConfig & other)
{
  BitsConfig tmp(other);
  swap(tmp);
  return *this;
}

void BitsConfig::swap(BitsConfig & other)
{

}

BitsConfig::~BitsConfig()
{

}

void BitsConfig::accept(Visitor *v)
{
  v->visitBitsConfig(this);
}

BitsConfig *BitsConfig::clone() const
{
  return new BitsConfig(*this);
}



/********************   InstConfig    ********************/
InstConfig::InstConfig()
{

}

InstConfig::InstConfig(const InstConfig & other)
{

}

InstConfig &InstConfig::operator=(const InstConfig & other)
{
  InstConfig tmp(other);
  swap(tmp);
  return *this;
}

void InstConfig::swap(InstConfig & other)
{

}

InstConfig::~InstConfig()
{

}

void InstConfig::accept(Visitor *v)
{
  v->visitInstConfig(this);
}

InstConfig *InstConfig::clone() const
{
  return new InstConfig(*this);
}



/********************   OptiConfig    ********************/
OptiConfig::OptiConfig()
{

}

OptiConfig::OptiConfig(const OptiConfig & other)
{

}

OptiConfig &OptiConfig::operator=(const OptiConfig & other)
{
  OptiConfig tmp(other);
  swap(tmp);
  return *this;
}

void OptiConfig::swap(OptiConfig & other)
{

}

OptiConfig::~OptiConfig()
{

}

void OptiConfig::accept(Visitor *v)
{
  v->visitOptiConfig(this);
}

OptiConfig *OptiConfig::clone() const
{
  return new OptiConfig(*this);
}



/********************   FormConfig    ********************/
FormConfig::FormConfig()
{

}

FormConfig::FormConfig(const FormConfig & other)
{

}

FormConfig &FormConfig::operator=(const FormConfig & other)
{
  FormConfig tmp(other);
  swap(tmp);
  return *this;
}

void FormConfig::swap(FormConfig & other)
{

}

FormConfig::~FormConfig()
{

}

void FormConfig::accept(Visitor *v)
{
  v->visitFormConfig(this);
}

FormConfig *FormConfig::clone() const
{
  return new FormConfig(*this);
}



/********************   PaddConfig    ********************/
PaddConfig::PaddConfig()
{

}

PaddConfig::PaddConfig(const PaddConfig & other)
{

}

PaddConfig &PaddConfig::operator=(const PaddConfig & other)
{
  PaddConfig tmp(other);
  swap(tmp);
  return *this;
}

void PaddConfig::swap(PaddConfig & other)
{

}

PaddConfig::~PaddConfig()
{

}

void PaddConfig::accept(Visitor *v)
{
  v->visitPaddConfig(this);
}

PaddConfig *PaddConfig::clone() const
{
  return new PaddConfig(*this);
}



/********************   PadsConfig    ********************/
PadsConfig::PadsConfig()
{

}

PadsConfig::PadsConfig(const PadsConfig & other)
{

}

PadsConfig &PadsConfig::operator=(const PadsConfig & other)
{
  PadsConfig tmp(other);
  swap(tmp);
  return *this;
}

void PadsConfig::swap(PadsConfig & other)
{

}

PadsConfig::~PadsConfig()
{

}

void PadsConfig::accept(Visitor *v)
{
  v->visitPadsConfig(this);
}

PadsConfig *PadsConfig::clone() const
{
  return new PadsConfig(*this);
}



/********************   SectConfig    ********************/
SectConfig::SectConfig()
{

}

SectConfig::SectConfig(const SectConfig & other)
{

}

SectConfig &SectConfig::operator=(const SectConfig & other)
{
  SectConfig tmp(other);
  swap(tmp);
  return *this;
}

void SectConfig::swap(SectConfig & other)
{

}

SectConfig::~SectConfig()
{

}

void SectConfig::accept(Visitor *v)
{
  v->visitSectConfig(this);
}

SectConfig *SectConfig::clone() const
{
  return new SectConfig(*this);
}



/********************   AbsoConfig    ********************/
AbsoConfig::AbsoConfig()
{

}

AbsoConfig::AbsoConfig(const AbsoConfig & other)
{

}

AbsoConfig &AbsoConfig::operator=(const AbsoConfig & other)
{
  AbsoConfig tmp(other);
  swap(tmp);
  return *this;
}

void AbsoConfig::swap(AbsoConfig & other)
{

}

AbsoConfig::~AbsoConfig()
{

}

void AbsoConfig::accept(Visitor *v)
{
  v->visitAbsoConfig(this);
}

AbsoConfig *AbsoConfig::clone() const
{
  return new AbsoConfig(*this);
}



/********************   FileConfig    ********************/
FileConfig::FileConfig()
{

}

FileConfig::FileConfig(const FileConfig & other)
{

}

FileConfig &FileConfig::operator=(const FileConfig & other)
{
  FileConfig tmp(other);
  swap(tmp);
  return *this;
}

void FileConfig::swap(FileConfig & other)
{

}

FileConfig::~FileConfig()
{

}

void FileConfig::accept(Visitor *v)
{
  v->visitFileConfig(this);
}

FileConfig *FileConfig::clone() const
{
  return new FileConfig(*this);
}



/********************   OpcodesAAA    ********************/
OpcodesAAA::OpcodesAAA()
{

}

OpcodesAAA::OpcodesAAA(const OpcodesAAA & other)
{

}

OpcodesAAA &OpcodesAAA::operator=(const OpcodesAAA & other)
{
  OpcodesAAA tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesAAA::swap(OpcodesAAA & other)
{

}

OpcodesAAA::~OpcodesAAA()
{

}

void OpcodesAAA::accept(Visitor *v)
{
  v->visitOpcodesAAA(this);
}

OpcodesAAA *OpcodesAAA::clone() const
{
  return new OpcodesAAA(*this);
}



/********************   OpcodesAAD    ********************/
OpcodesAAD::OpcodesAAD()
{

}

OpcodesAAD::OpcodesAAD(const OpcodesAAD & other)
{

}

OpcodesAAD &OpcodesAAD::operator=(const OpcodesAAD & other)
{
  OpcodesAAD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesAAD::swap(OpcodesAAD & other)
{

}

OpcodesAAD::~OpcodesAAD()
{

}

void OpcodesAAD::accept(Visitor *v)
{
  v->visitOpcodesAAD(this);
}

OpcodesAAD *OpcodesAAD::clone() const
{
  return new OpcodesAAD(*this);
}



/********************   OpcodesAAS    ********************/
OpcodesAAS::OpcodesAAS()
{

}

OpcodesAAS::OpcodesAAS(const OpcodesAAS & other)
{

}

OpcodesAAS &OpcodesAAS::operator=(const OpcodesAAS & other)
{
  OpcodesAAS tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesAAS::swap(OpcodesAAS & other)
{

}

OpcodesAAS::~OpcodesAAS()
{

}

void OpcodesAAS::accept(Visitor *v)
{
  v->visitOpcodesAAS(this);
}

OpcodesAAS *OpcodesAAS::clone() const
{
  return new OpcodesAAS(*this);
}



/********************   OpcodesAAM    ********************/
OpcodesAAM::OpcodesAAM()
{

}

OpcodesAAM::OpcodesAAM(const OpcodesAAM & other)
{

}

OpcodesAAM &OpcodesAAM::operator=(const OpcodesAAM & other)
{
  OpcodesAAM tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesAAM::swap(OpcodesAAM & other)
{

}

OpcodesAAM::~OpcodesAAM()
{

}

void OpcodesAAM::accept(Visitor *v)
{
  v->visitOpcodesAAM(this);
}

OpcodesAAM *OpcodesAAM::clone() const
{
  return new OpcodesAAM(*this);
}



/********************   OpcodesADC    ********************/
OpcodesADC::OpcodesADC()
{

}

OpcodesADC::OpcodesADC(const OpcodesADC & other)
{

}

OpcodesADC &OpcodesADC::operator=(const OpcodesADC & other)
{
  OpcodesADC tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesADC::swap(OpcodesADC & other)
{

}

OpcodesADC::~OpcodesADC()
{

}

void OpcodesADC::accept(Visitor *v)
{
  v->visitOpcodesADC(this);
}

OpcodesADC *OpcodesADC::clone() const
{
  return new OpcodesADC(*this);
}



/********************   OpcodesADD    ********************/
OpcodesADD::OpcodesADD()
{

}

OpcodesADD::OpcodesADD(const OpcodesADD & other)
{

}

OpcodesADD &OpcodesADD::operator=(const OpcodesADD & other)
{
  OpcodesADD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesADD::swap(OpcodesADD & other)
{

}

OpcodesADD::~OpcodesADD()
{

}

void OpcodesADD::accept(Visitor *v)
{
  v->visitOpcodesADD(this);
}

OpcodesADD *OpcodesADD::clone() const
{
  return new OpcodesADD(*this);
}



/********************   OpcodesAND    ********************/
OpcodesAND::OpcodesAND()
{

}

OpcodesAND::OpcodesAND(const OpcodesAND & other)
{

}

OpcodesAND &OpcodesAND::operator=(const OpcodesAND & other)
{
  OpcodesAND tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesAND::swap(OpcodesAND & other)
{

}

OpcodesAND::~OpcodesAND()
{

}

void OpcodesAND::accept(Visitor *v)
{
  v->visitOpcodesAND(this);
}

OpcodesAND *OpcodesAND::clone() const
{
  return new OpcodesAND(*this);
}



/********************   OpcodesALIGN    ********************/
OpcodesALIGN::OpcodesALIGN()
{

}

OpcodesALIGN::OpcodesALIGN(const OpcodesALIGN & other)
{

}

OpcodesALIGN &OpcodesALIGN::operator=(const OpcodesALIGN & other)
{
  OpcodesALIGN tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesALIGN::swap(OpcodesALIGN & other)
{

}

OpcodesALIGN::~OpcodesALIGN()
{

}

void OpcodesALIGN::accept(Visitor *v)
{
  v->visitOpcodesALIGN(this);
}

OpcodesALIGN *OpcodesALIGN::clone() const
{
  return new OpcodesALIGN(*this);
}



/********************   OpcodesALIGNB    ********************/
OpcodesALIGNB::OpcodesALIGNB()
{

}

OpcodesALIGNB::OpcodesALIGNB(const OpcodesALIGNB & other)
{

}

OpcodesALIGNB &OpcodesALIGNB::operator=(const OpcodesALIGNB & other)
{
  OpcodesALIGNB tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesALIGNB::swap(OpcodesALIGNB & other)
{

}

OpcodesALIGNB::~OpcodesALIGNB()
{

}

void OpcodesALIGNB::accept(Visitor *v)
{
  v->visitOpcodesALIGNB(this);
}

OpcodesALIGNB *OpcodesALIGNB::clone() const
{
  return new OpcodesALIGNB(*this);
}



/********************   OpcodesARPL    ********************/
OpcodesARPL::OpcodesARPL()
{

}

OpcodesARPL::OpcodesARPL(const OpcodesARPL & other)
{

}

OpcodesARPL &OpcodesARPL::operator=(const OpcodesARPL & other)
{
  OpcodesARPL tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesARPL::swap(OpcodesARPL & other)
{

}

OpcodesARPL::~OpcodesARPL()
{

}

void OpcodesARPL::accept(Visitor *v)
{
  v->visitOpcodesARPL(this);
}

OpcodesARPL *OpcodesARPL::clone() const
{
  return new OpcodesARPL(*this);
}



/********************   OpcodesBOUND    ********************/
OpcodesBOUND::OpcodesBOUND()
{

}

OpcodesBOUND::OpcodesBOUND(const OpcodesBOUND & other)
{

}

OpcodesBOUND &OpcodesBOUND::operator=(const OpcodesBOUND & other)
{
  OpcodesBOUND tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesBOUND::swap(OpcodesBOUND & other)
{

}

OpcodesBOUND::~OpcodesBOUND()
{

}

void OpcodesBOUND::accept(Visitor *v)
{
  v->visitOpcodesBOUND(this);
}

OpcodesBOUND *OpcodesBOUND::clone() const
{
  return new OpcodesBOUND(*this);
}



/********************   OpcodesBSF    ********************/
OpcodesBSF::OpcodesBSF()
{

}

OpcodesBSF::OpcodesBSF(const OpcodesBSF & other)
{

}

OpcodesBSF &OpcodesBSF::operator=(const OpcodesBSF & other)
{
  OpcodesBSF tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesBSF::swap(OpcodesBSF & other)
{

}

OpcodesBSF::~OpcodesBSF()
{

}

void OpcodesBSF::accept(Visitor *v)
{
  v->visitOpcodesBSF(this);
}

OpcodesBSF *OpcodesBSF::clone() const
{
  return new OpcodesBSF(*this);
}



/********************   OpcodesBSR    ********************/
OpcodesBSR::OpcodesBSR()
{

}

OpcodesBSR::OpcodesBSR(const OpcodesBSR & other)
{

}

OpcodesBSR &OpcodesBSR::operator=(const OpcodesBSR & other)
{
  OpcodesBSR tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesBSR::swap(OpcodesBSR & other)
{

}

OpcodesBSR::~OpcodesBSR()
{

}

void OpcodesBSR::accept(Visitor *v)
{
  v->visitOpcodesBSR(this);
}

OpcodesBSR *OpcodesBSR::clone() const
{
  return new OpcodesBSR(*this);
}



/********************   OpcodesBSWAP    ********************/
OpcodesBSWAP::OpcodesBSWAP()
{

}

OpcodesBSWAP::OpcodesBSWAP(const OpcodesBSWAP & other)
{

}

OpcodesBSWAP &OpcodesBSWAP::operator=(const OpcodesBSWAP & other)
{
  OpcodesBSWAP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesBSWAP::swap(OpcodesBSWAP & other)
{

}

OpcodesBSWAP::~OpcodesBSWAP()
{

}

void OpcodesBSWAP::accept(Visitor *v)
{
  v->visitOpcodesBSWAP(this);
}

OpcodesBSWAP *OpcodesBSWAP::clone() const
{
  return new OpcodesBSWAP(*this);
}



/********************   OpcodesBT    ********************/
OpcodesBT::OpcodesBT()
{

}

OpcodesBT::OpcodesBT(const OpcodesBT & other)
{

}

OpcodesBT &OpcodesBT::operator=(const OpcodesBT & other)
{
  OpcodesBT tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesBT::swap(OpcodesBT & other)
{

}

OpcodesBT::~OpcodesBT()
{

}

void OpcodesBT::accept(Visitor *v)
{
  v->visitOpcodesBT(this);
}

OpcodesBT *OpcodesBT::clone() const
{
  return new OpcodesBT(*this);
}



/********************   OpcodesBTC    ********************/
OpcodesBTC::OpcodesBTC()
{

}

OpcodesBTC::OpcodesBTC(const OpcodesBTC & other)
{

}

OpcodesBTC &OpcodesBTC::operator=(const OpcodesBTC & other)
{
  OpcodesBTC tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesBTC::swap(OpcodesBTC & other)
{

}

OpcodesBTC::~OpcodesBTC()
{

}

void OpcodesBTC::accept(Visitor *v)
{
  v->visitOpcodesBTC(this);
}

OpcodesBTC *OpcodesBTC::clone() const
{
  return new OpcodesBTC(*this);
}



/********************   OpcodesBTR    ********************/
OpcodesBTR::OpcodesBTR()
{

}

OpcodesBTR::OpcodesBTR(const OpcodesBTR & other)
{

}

OpcodesBTR &OpcodesBTR::operator=(const OpcodesBTR & other)
{
  OpcodesBTR tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesBTR::swap(OpcodesBTR & other)
{

}

OpcodesBTR::~OpcodesBTR()
{

}

void OpcodesBTR::accept(Visitor *v)
{
  v->visitOpcodesBTR(this);
}

OpcodesBTR *OpcodesBTR::clone() const
{
  return new OpcodesBTR(*this);
}



/********************   OpcodesBTS    ********************/
OpcodesBTS::OpcodesBTS()
{

}

OpcodesBTS::OpcodesBTS(const OpcodesBTS & other)
{

}

OpcodesBTS &OpcodesBTS::operator=(const OpcodesBTS & other)
{
  OpcodesBTS tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesBTS::swap(OpcodesBTS & other)
{

}

OpcodesBTS::~OpcodesBTS()
{

}

void OpcodesBTS::accept(Visitor *v)
{
  v->visitOpcodesBTS(this);
}

OpcodesBTS *OpcodesBTS::clone() const
{
  return new OpcodesBTS(*this);
}



/********************   OpcodesCALL    ********************/
OpcodesCALL::OpcodesCALL()
{

}

OpcodesCALL::OpcodesCALL(const OpcodesCALL & other)
{

}

OpcodesCALL &OpcodesCALL::operator=(const OpcodesCALL & other)
{
  OpcodesCALL tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesCALL::swap(OpcodesCALL & other)
{

}

OpcodesCALL::~OpcodesCALL()
{

}

void OpcodesCALL::accept(Visitor *v)
{
  v->visitOpcodesCALL(this);
}

OpcodesCALL *OpcodesCALL::clone() const
{
  return new OpcodesCALL(*this);
}



/********************   OpcodesCBW    ********************/
OpcodesCBW::OpcodesCBW()
{

}

OpcodesCBW::OpcodesCBW(const OpcodesCBW & other)
{

}

OpcodesCBW &OpcodesCBW::operator=(const OpcodesCBW & other)
{
  OpcodesCBW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesCBW::swap(OpcodesCBW & other)
{

}

OpcodesCBW::~OpcodesCBW()
{

}

void OpcodesCBW::accept(Visitor *v)
{
  v->visitOpcodesCBW(this);
}

OpcodesCBW *OpcodesCBW::clone() const
{
  return new OpcodesCBW(*this);
}



/********************   OpcodesCDQ    ********************/
OpcodesCDQ::OpcodesCDQ()
{

}

OpcodesCDQ::OpcodesCDQ(const OpcodesCDQ & other)
{

}

OpcodesCDQ &OpcodesCDQ::operator=(const OpcodesCDQ & other)
{
  OpcodesCDQ tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesCDQ::swap(OpcodesCDQ & other)
{

}

OpcodesCDQ::~OpcodesCDQ()
{

}

void OpcodesCDQ::accept(Visitor *v)
{
  v->visitOpcodesCDQ(this);
}

OpcodesCDQ *OpcodesCDQ::clone() const
{
  return new OpcodesCDQ(*this);
}



/********************   OpcodesCLC    ********************/
OpcodesCLC::OpcodesCLC()
{

}

OpcodesCLC::OpcodesCLC(const OpcodesCLC & other)
{

}

OpcodesCLC &OpcodesCLC::operator=(const OpcodesCLC & other)
{
  OpcodesCLC tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesCLC::swap(OpcodesCLC & other)
{

}

OpcodesCLC::~OpcodesCLC()
{

}

void OpcodesCLC::accept(Visitor *v)
{
  v->visitOpcodesCLC(this);
}

OpcodesCLC *OpcodesCLC::clone() const
{
  return new OpcodesCLC(*this);
}



/********************   OpcodesCLD    ********************/
OpcodesCLD::OpcodesCLD()
{

}

OpcodesCLD::OpcodesCLD(const OpcodesCLD & other)
{

}

OpcodesCLD &OpcodesCLD::operator=(const OpcodesCLD & other)
{
  OpcodesCLD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesCLD::swap(OpcodesCLD & other)
{

}

OpcodesCLD::~OpcodesCLD()
{

}

void OpcodesCLD::accept(Visitor *v)
{
  v->visitOpcodesCLD(this);
}

OpcodesCLD *OpcodesCLD::clone() const
{
  return new OpcodesCLD(*this);
}



/********************   OpcodesCLI    ********************/
OpcodesCLI::OpcodesCLI()
{

}

OpcodesCLI::OpcodesCLI(const OpcodesCLI & other)
{

}

OpcodesCLI &OpcodesCLI::operator=(const OpcodesCLI & other)
{
  OpcodesCLI tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesCLI::swap(OpcodesCLI & other)
{

}

OpcodesCLI::~OpcodesCLI()
{

}

void OpcodesCLI::accept(Visitor *v)
{
  v->visitOpcodesCLI(this);
}

OpcodesCLI *OpcodesCLI::clone() const
{
  return new OpcodesCLI(*this);
}



/********************   OpcodesCLTS    ********************/
OpcodesCLTS::OpcodesCLTS()
{

}

OpcodesCLTS::OpcodesCLTS(const OpcodesCLTS & other)
{

}

OpcodesCLTS &OpcodesCLTS::operator=(const OpcodesCLTS & other)
{
  OpcodesCLTS tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesCLTS::swap(OpcodesCLTS & other)
{

}

OpcodesCLTS::~OpcodesCLTS()
{

}

void OpcodesCLTS::accept(Visitor *v)
{
  v->visitOpcodesCLTS(this);
}

OpcodesCLTS *OpcodesCLTS::clone() const
{
  return new OpcodesCLTS(*this);
}



/********************   OpcodesCMC    ********************/
OpcodesCMC::OpcodesCMC()
{

}

OpcodesCMC::OpcodesCMC(const OpcodesCMC & other)
{

}

OpcodesCMC &OpcodesCMC::operator=(const OpcodesCMC & other)
{
  OpcodesCMC tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesCMC::swap(OpcodesCMC & other)
{

}

OpcodesCMC::~OpcodesCMC()
{

}

void OpcodesCMC::accept(Visitor *v)
{
  v->visitOpcodesCMC(this);
}

OpcodesCMC *OpcodesCMC::clone() const
{
  return new OpcodesCMC(*this);
}



/********************   OpcodesCMP    ********************/
OpcodesCMP::OpcodesCMP()
{

}

OpcodesCMP::OpcodesCMP(const OpcodesCMP & other)
{

}

OpcodesCMP &OpcodesCMP::operator=(const OpcodesCMP & other)
{
  OpcodesCMP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesCMP::swap(OpcodesCMP & other)
{

}

OpcodesCMP::~OpcodesCMP()
{

}

void OpcodesCMP::accept(Visitor *v)
{
  v->visitOpcodesCMP(this);
}

OpcodesCMP *OpcodesCMP::clone() const
{
  return new OpcodesCMP(*this);
}



/********************   OpcodesCMPSB    ********************/
OpcodesCMPSB::OpcodesCMPSB()
{

}

OpcodesCMPSB::OpcodesCMPSB(const OpcodesCMPSB & other)
{

}

OpcodesCMPSB &OpcodesCMPSB::operator=(const OpcodesCMPSB & other)
{
  OpcodesCMPSB tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesCMPSB::swap(OpcodesCMPSB & other)
{

}

OpcodesCMPSB::~OpcodesCMPSB()
{

}

void OpcodesCMPSB::accept(Visitor *v)
{
  v->visitOpcodesCMPSB(this);
}

OpcodesCMPSB *OpcodesCMPSB::clone() const
{
  return new OpcodesCMPSB(*this);
}



/********************   OpcodesCMPSD    ********************/
OpcodesCMPSD::OpcodesCMPSD()
{

}

OpcodesCMPSD::OpcodesCMPSD(const OpcodesCMPSD & other)
{

}

OpcodesCMPSD &OpcodesCMPSD::operator=(const OpcodesCMPSD & other)
{
  OpcodesCMPSD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesCMPSD::swap(OpcodesCMPSD & other)
{

}

OpcodesCMPSD::~OpcodesCMPSD()
{

}

void OpcodesCMPSD::accept(Visitor *v)
{
  v->visitOpcodesCMPSD(this);
}

OpcodesCMPSD *OpcodesCMPSD::clone() const
{
  return new OpcodesCMPSD(*this);
}



/********************   OpcodesCMPSW    ********************/
OpcodesCMPSW::OpcodesCMPSW()
{

}

OpcodesCMPSW::OpcodesCMPSW(const OpcodesCMPSW & other)
{

}

OpcodesCMPSW &OpcodesCMPSW::operator=(const OpcodesCMPSW & other)
{
  OpcodesCMPSW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesCMPSW::swap(OpcodesCMPSW & other)
{

}

OpcodesCMPSW::~OpcodesCMPSW()
{

}

void OpcodesCMPSW::accept(Visitor *v)
{
  v->visitOpcodesCMPSW(this);
}

OpcodesCMPSW *OpcodesCMPSW::clone() const
{
  return new OpcodesCMPSW(*this);
}



/********************   OpcodesCMPXCHG    ********************/
OpcodesCMPXCHG::OpcodesCMPXCHG()
{

}

OpcodesCMPXCHG::OpcodesCMPXCHG(const OpcodesCMPXCHG & other)
{

}

OpcodesCMPXCHG &OpcodesCMPXCHG::operator=(const OpcodesCMPXCHG & other)
{
  OpcodesCMPXCHG tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesCMPXCHG::swap(OpcodesCMPXCHG & other)
{

}

OpcodesCMPXCHG::~OpcodesCMPXCHG()
{

}

void OpcodesCMPXCHG::accept(Visitor *v)
{
  v->visitOpcodesCMPXCHG(this);
}

OpcodesCMPXCHG *OpcodesCMPXCHG::clone() const
{
  return new OpcodesCMPXCHG(*this);
}



/********************   OpcodesCPUID    ********************/
OpcodesCPUID::OpcodesCPUID()
{

}

OpcodesCPUID::OpcodesCPUID(const OpcodesCPUID & other)
{

}

OpcodesCPUID &OpcodesCPUID::operator=(const OpcodesCPUID & other)
{
  OpcodesCPUID tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesCPUID::swap(OpcodesCPUID & other)
{

}

OpcodesCPUID::~OpcodesCPUID()
{

}

void OpcodesCPUID::accept(Visitor *v)
{
  v->visitOpcodesCPUID(this);
}

OpcodesCPUID *OpcodesCPUID::clone() const
{
  return new OpcodesCPUID(*this);
}



/********************   OpcodesCWD    ********************/
OpcodesCWD::OpcodesCWD()
{

}

OpcodesCWD::OpcodesCWD(const OpcodesCWD & other)
{

}

OpcodesCWD &OpcodesCWD::operator=(const OpcodesCWD & other)
{
  OpcodesCWD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesCWD::swap(OpcodesCWD & other)
{

}

OpcodesCWD::~OpcodesCWD()
{

}

void OpcodesCWD::accept(Visitor *v)
{
  v->visitOpcodesCWD(this);
}

OpcodesCWD *OpcodesCWD::clone() const
{
  return new OpcodesCWD(*this);
}



/********************   OpcodesCWDE    ********************/
OpcodesCWDE::OpcodesCWDE()
{

}

OpcodesCWDE::OpcodesCWDE(const OpcodesCWDE & other)
{

}

OpcodesCWDE &OpcodesCWDE::operator=(const OpcodesCWDE & other)
{
  OpcodesCWDE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesCWDE::swap(OpcodesCWDE & other)
{

}

OpcodesCWDE::~OpcodesCWDE()
{

}

void OpcodesCWDE::accept(Visitor *v)
{
  v->visitOpcodesCWDE(this);
}

OpcodesCWDE *OpcodesCWDE::clone() const
{
  return new OpcodesCWDE(*this);
}



/********************   OpcodesDAA    ********************/
OpcodesDAA::OpcodesDAA()
{

}

OpcodesDAA::OpcodesDAA(const OpcodesDAA & other)
{

}

OpcodesDAA &OpcodesDAA::operator=(const OpcodesDAA & other)
{
  OpcodesDAA tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesDAA::swap(OpcodesDAA & other)
{

}

OpcodesDAA::~OpcodesDAA()
{

}

void OpcodesDAA::accept(Visitor *v)
{
  v->visitOpcodesDAA(this);
}

OpcodesDAA *OpcodesDAA::clone() const
{
  return new OpcodesDAA(*this);
}



/********************   OpcodesDAS    ********************/
OpcodesDAS::OpcodesDAS()
{

}

OpcodesDAS::OpcodesDAS(const OpcodesDAS & other)
{

}

OpcodesDAS &OpcodesDAS::operator=(const OpcodesDAS & other)
{
  OpcodesDAS tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesDAS::swap(OpcodesDAS & other)
{

}

OpcodesDAS::~OpcodesDAS()
{

}

void OpcodesDAS::accept(Visitor *v)
{
  v->visitOpcodesDAS(this);
}

OpcodesDAS *OpcodesDAS::clone() const
{
  return new OpcodesDAS(*this);
}



/********************   OpcodesDB    ********************/
OpcodesDB::OpcodesDB()
{

}

OpcodesDB::OpcodesDB(const OpcodesDB & other)
{

}

OpcodesDB &OpcodesDB::operator=(const OpcodesDB & other)
{
  OpcodesDB tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesDB::swap(OpcodesDB & other)
{

}

OpcodesDB::~OpcodesDB()
{

}

void OpcodesDB::accept(Visitor *v)
{
  v->visitOpcodesDB(this);
}

OpcodesDB *OpcodesDB::clone() const
{
  return new OpcodesDB(*this);
}



/********************   OpcodesDD    ********************/
OpcodesDD::OpcodesDD()
{

}

OpcodesDD::OpcodesDD(const OpcodesDD & other)
{

}

OpcodesDD &OpcodesDD::operator=(const OpcodesDD & other)
{
  OpcodesDD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesDD::swap(OpcodesDD & other)
{

}

OpcodesDD::~OpcodesDD()
{

}

void OpcodesDD::accept(Visitor *v)
{
  v->visitOpcodesDD(this);
}

OpcodesDD *OpcodesDD::clone() const
{
  return new OpcodesDD(*this);
}



/********************   OpcodesDEC    ********************/
OpcodesDEC::OpcodesDEC()
{

}

OpcodesDEC::OpcodesDEC(const OpcodesDEC & other)
{

}

OpcodesDEC &OpcodesDEC::operator=(const OpcodesDEC & other)
{
  OpcodesDEC tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesDEC::swap(OpcodesDEC & other)
{

}

OpcodesDEC::~OpcodesDEC()
{

}

void OpcodesDEC::accept(Visitor *v)
{
  v->visitOpcodesDEC(this);
}

OpcodesDEC *OpcodesDEC::clone() const
{
  return new OpcodesDEC(*this);
}



/********************   OpcodesDIV    ********************/
OpcodesDIV::OpcodesDIV()
{

}

OpcodesDIV::OpcodesDIV(const OpcodesDIV & other)
{

}

OpcodesDIV &OpcodesDIV::operator=(const OpcodesDIV & other)
{
  OpcodesDIV tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesDIV::swap(OpcodesDIV & other)
{

}

OpcodesDIV::~OpcodesDIV()
{

}

void OpcodesDIV::accept(Visitor *v)
{
  v->visitOpcodesDIV(this);
}

OpcodesDIV *OpcodesDIV::clone() const
{
  return new OpcodesDIV(*this);
}



/********************   OpcodesDQ    ********************/
OpcodesDQ::OpcodesDQ()
{

}

OpcodesDQ::OpcodesDQ(const OpcodesDQ & other)
{

}

OpcodesDQ &OpcodesDQ::operator=(const OpcodesDQ & other)
{
  OpcodesDQ tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesDQ::swap(OpcodesDQ & other)
{

}

OpcodesDQ::~OpcodesDQ()
{

}

void OpcodesDQ::accept(Visitor *v)
{
  v->visitOpcodesDQ(this);
}

OpcodesDQ *OpcodesDQ::clone() const
{
  return new OpcodesDQ(*this);
}



/********************   OpcodesDT    ********************/
OpcodesDT::OpcodesDT()
{

}

OpcodesDT::OpcodesDT(const OpcodesDT & other)
{

}

OpcodesDT &OpcodesDT::operator=(const OpcodesDT & other)
{
  OpcodesDT tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesDT::swap(OpcodesDT & other)
{

}

OpcodesDT::~OpcodesDT()
{

}

void OpcodesDT::accept(Visitor *v)
{
  v->visitOpcodesDT(this);
}

OpcodesDT *OpcodesDT::clone() const
{
  return new OpcodesDT(*this);
}



/********************   OpcodesDW    ********************/
OpcodesDW::OpcodesDW()
{

}

OpcodesDW::OpcodesDW(const OpcodesDW & other)
{

}

OpcodesDW &OpcodesDW::operator=(const OpcodesDW & other)
{
  OpcodesDW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesDW::swap(OpcodesDW & other)
{

}

OpcodesDW::~OpcodesDW()
{

}

void OpcodesDW::accept(Visitor *v)
{
  v->visitOpcodesDW(this);
}

OpcodesDW *OpcodesDW::clone() const
{
  return new OpcodesDW(*this);
}



/********************   OpcodesEND    ********************/
OpcodesEND::OpcodesEND()
{

}

OpcodesEND::OpcodesEND(const OpcodesEND & other)
{

}

OpcodesEND &OpcodesEND::operator=(const OpcodesEND & other)
{
  OpcodesEND tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesEND::swap(OpcodesEND & other)
{

}

OpcodesEND::~OpcodesEND()
{

}

void OpcodesEND::accept(Visitor *v)
{
  v->visitOpcodesEND(this);
}

OpcodesEND *OpcodesEND::clone() const
{
  return new OpcodesEND(*this);
}



/********************   OpcodesENTER    ********************/
OpcodesENTER::OpcodesENTER()
{

}

OpcodesENTER::OpcodesENTER(const OpcodesENTER & other)
{

}

OpcodesENTER &OpcodesENTER::operator=(const OpcodesENTER & other)
{
  OpcodesENTER tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesENTER::swap(OpcodesENTER & other)
{

}

OpcodesENTER::~OpcodesENTER()
{

}

void OpcodesENTER::accept(Visitor *v)
{
  v->visitOpcodesENTER(this);
}

OpcodesENTER *OpcodesENTER::clone() const
{
  return new OpcodesENTER(*this);
}



/********************   OpcodesEXTERN    ********************/
OpcodesEXTERN::OpcodesEXTERN()
{

}

OpcodesEXTERN::OpcodesEXTERN(const OpcodesEXTERN & other)
{

}

OpcodesEXTERN &OpcodesEXTERN::operator=(const OpcodesEXTERN & other)
{
  OpcodesEXTERN tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesEXTERN::swap(OpcodesEXTERN & other)
{

}

OpcodesEXTERN::~OpcodesEXTERN()
{

}

void OpcodesEXTERN::accept(Visitor *v)
{
  v->visitOpcodesEXTERN(this);
}

OpcodesEXTERN *OpcodesEXTERN::clone() const
{
  return new OpcodesEXTERN(*this);
}



/********************   OpcodesF2XM1    ********************/
OpcodesF2XM1::OpcodesF2XM1()
{

}

OpcodesF2XM1::OpcodesF2XM1(const OpcodesF2XM1 & other)
{

}

OpcodesF2XM1 &OpcodesF2XM1::operator=(const OpcodesF2XM1 & other)
{
  OpcodesF2XM1 tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesF2XM1::swap(OpcodesF2XM1 & other)
{

}

OpcodesF2XM1::~OpcodesF2XM1()
{

}

void OpcodesF2XM1::accept(Visitor *v)
{
  v->visitOpcodesF2XM1(this);
}

OpcodesF2XM1 *OpcodesF2XM1::clone() const
{
  return new OpcodesF2XM1(*this);
}



/********************   OpcodesFABS    ********************/
OpcodesFABS::OpcodesFABS()
{

}

OpcodesFABS::OpcodesFABS(const OpcodesFABS & other)
{

}

OpcodesFABS &OpcodesFABS::operator=(const OpcodesFABS & other)
{
  OpcodesFABS tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFABS::swap(OpcodesFABS & other)
{

}

OpcodesFABS::~OpcodesFABS()
{

}

void OpcodesFABS::accept(Visitor *v)
{
  v->visitOpcodesFABS(this);
}

OpcodesFABS *OpcodesFABS::clone() const
{
  return new OpcodesFABS(*this);
}



/********************   OpcodesFADD    ********************/
OpcodesFADD::OpcodesFADD()
{

}

OpcodesFADD::OpcodesFADD(const OpcodesFADD & other)
{

}

OpcodesFADD &OpcodesFADD::operator=(const OpcodesFADD & other)
{
  OpcodesFADD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFADD::swap(OpcodesFADD & other)
{

}

OpcodesFADD::~OpcodesFADD()
{

}

void OpcodesFADD::accept(Visitor *v)
{
  v->visitOpcodesFADD(this);
}

OpcodesFADD *OpcodesFADD::clone() const
{
  return new OpcodesFADD(*this);
}



/********************   OpcodesFADDP    ********************/
OpcodesFADDP::OpcodesFADDP()
{

}

OpcodesFADDP::OpcodesFADDP(const OpcodesFADDP & other)
{

}

OpcodesFADDP &OpcodesFADDP::operator=(const OpcodesFADDP & other)
{
  OpcodesFADDP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFADDP::swap(OpcodesFADDP & other)
{

}

OpcodesFADDP::~OpcodesFADDP()
{

}

void OpcodesFADDP::accept(Visitor *v)
{
  v->visitOpcodesFADDP(this);
}

OpcodesFADDP *OpcodesFADDP::clone() const
{
  return new OpcodesFADDP(*this);
}



/********************   OpcodesFBLD    ********************/
OpcodesFBLD::OpcodesFBLD()
{

}

OpcodesFBLD::OpcodesFBLD(const OpcodesFBLD & other)
{

}

OpcodesFBLD &OpcodesFBLD::operator=(const OpcodesFBLD & other)
{
  OpcodesFBLD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFBLD::swap(OpcodesFBLD & other)
{

}

OpcodesFBLD::~OpcodesFBLD()
{

}

void OpcodesFBLD::accept(Visitor *v)
{
  v->visitOpcodesFBLD(this);
}

OpcodesFBLD *OpcodesFBLD::clone() const
{
  return new OpcodesFBLD(*this);
}



/********************   OpcodesFBSTP    ********************/
OpcodesFBSTP::OpcodesFBSTP()
{

}

OpcodesFBSTP::OpcodesFBSTP(const OpcodesFBSTP & other)
{

}

OpcodesFBSTP &OpcodesFBSTP::operator=(const OpcodesFBSTP & other)
{
  OpcodesFBSTP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFBSTP::swap(OpcodesFBSTP & other)
{

}

OpcodesFBSTP::~OpcodesFBSTP()
{

}

void OpcodesFBSTP::accept(Visitor *v)
{
  v->visitOpcodesFBSTP(this);
}

OpcodesFBSTP *OpcodesFBSTP::clone() const
{
  return new OpcodesFBSTP(*this);
}



/********************   OpcodesFCHS    ********************/
OpcodesFCHS::OpcodesFCHS()
{

}

OpcodesFCHS::OpcodesFCHS(const OpcodesFCHS & other)
{

}

OpcodesFCHS &OpcodesFCHS::operator=(const OpcodesFCHS & other)
{
  OpcodesFCHS tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFCHS::swap(OpcodesFCHS & other)
{

}

OpcodesFCHS::~OpcodesFCHS()
{

}

void OpcodesFCHS::accept(Visitor *v)
{
  v->visitOpcodesFCHS(this);
}

OpcodesFCHS *OpcodesFCHS::clone() const
{
  return new OpcodesFCHS(*this);
}



/********************   OpcodesFCLEX    ********************/
OpcodesFCLEX::OpcodesFCLEX()
{

}

OpcodesFCLEX::OpcodesFCLEX(const OpcodesFCLEX & other)
{

}

OpcodesFCLEX &OpcodesFCLEX::operator=(const OpcodesFCLEX & other)
{
  OpcodesFCLEX tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFCLEX::swap(OpcodesFCLEX & other)
{

}

OpcodesFCLEX::~OpcodesFCLEX()
{

}

void OpcodesFCLEX::accept(Visitor *v)
{
  v->visitOpcodesFCLEX(this);
}

OpcodesFCLEX *OpcodesFCLEX::clone() const
{
  return new OpcodesFCLEX(*this);
}



/********************   OpcodesFCOM    ********************/
OpcodesFCOM::OpcodesFCOM()
{

}

OpcodesFCOM::OpcodesFCOM(const OpcodesFCOM & other)
{

}

OpcodesFCOM &OpcodesFCOM::operator=(const OpcodesFCOM & other)
{
  OpcodesFCOM tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFCOM::swap(OpcodesFCOM & other)
{

}

OpcodesFCOM::~OpcodesFCOM()
{

}

void OpcodesFCOM::accept(Visitor *v)
{
  v->visitOpcodesFCOM(this);
}

OpcodesFCOM *OpcodesFCOM::clone() const
{
  return new OpcodesFCOM(*this);
}



/********************   OpcodesFCOMP    ********************/
OpcodesFCOMP::OpcodesFCOMP()
{

}

OpcodesFCOMP::OpcodesFCOMP(const OpcodesFCOMP & other)
{

}

OpcodesFCOMP &OpcodesFCOMP::operator=(const OpcodesFCOMP & other)
{
  OpcodesFCOMP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFCOMP::swap(OpcodesFCOMP & other)
{

}

OpcodesFCOMP::~OpcodesFCOMP()
{

}

void OpcodesFCOMP::accept(Visitor *v)
{
  v->visitOpcodesFCOMP(this);
}

OpcodesFCOMP *OpcodesFCOMP::clone() const
{
  return new OpcodesFCOMP(*this);
}



/********************   OpcodesFCOMPP    ********************/
OpcodesFCOMPP::OpcodesFCOMPP()
{

}

OpcodesFCOMPP::OpcodesFCOMPP(const OpcodesFCOMPP & other)
{

}

OpcodesFCOMPP &OpcodesFCOMPP::operator=(const OpcodesFCOMPP & other)
{
  OpcodesFCOMPP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFCOMPP::swap(OpcodesFCOMPP & other)
{

}

OpcodesFCOMPP::~OpcodesFCOMPP()
{

}

void OpcodesFCOMPP::accept(Visitor *v)
{
  v->visitOpcodesFCOMPP(this);
}

OpcodesFCOMPP *OpcodesFCOMPP::clone() const
{
  return new OpcodesFCOMPP(*this);
}



/********************   OpcodesFCOS    ********************/
OpcodesFCOS::OpcodesFCOS()
{

}

OpcodesFCOS::OpcodesFCOS(const OpcodesFCOS & other)
{

}

OpcodesFCOS &OpcodesFCOS::operator=(const OpcodesFCOS & other)
{
  OpcodesFCOS tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFCOS::swap(OpcodesFCOS & other)
{

}

OpcodesFCOS::~OpcodesFCOS()
{

}

void OpcodesFCOS::accept(Visitor *v)
{
  v->visitOpcodesFCOS(this);
}

OpcodesFCOS *OpcodesFCOS::clone() const
{
  return new OpcodesFCOS(*this);
}



/********************   OpcodesFDECSTP    ********************/
OpcodesFDECSTP::OpcodesFDECSTP()
{

}

OpcodesFDECSTP::OpcodesFDECSTP(const OpcodesFDECSTP & other)
{

}

OpcodesFDECSTP &OpcodesFDECSTP::operator=(const OpcodesFDECSTP & other)
{
  OpcodesFDECSTP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFDECSTP::swap(OpcodesFDECSTP & other)
{

}

OpcodesFDECSTP::~OpcodesFDECSTP()
{

}

void OpcodesFDECSTP::accept(Visitor *v)
{
  v->visitOpcodesFDECSTP(this);
}

OpcodesFDECSTP *OpcodesFDECSTP::clone() const
{
  return new OpcodesFDECSTP(*this);
}



/********************   OpcodesFDISI    ********************/
OpcodesFDISI::OpcodesFDISI()
{

}

OpcodesFDISI::OpcodesFDISI(const OpcodesFDISI & other)
{

}

OpcodesFDISI &OpcodesFDISI::operator=(const OpcodesFDISI & other)
{
  OpcodesFDISI tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFDISI::swap(OpcodesFDISI & other)
{

}

OpcodesFDISI::~OpcodesFDISI()
{

}

void OpcodesFDISI::accept(Visitor *v)
{
  v->visitOpcodesFDISI(this);
}

OpcodesFDISI *OpcodesFDISI::clone() const
{
  return new OpcodesFDISI(*this);
}



/********************   OpcodesFDIV    ********************/
OpcodesFDIV::OpcodesFDIV()
{

}

OpcodesFDIV::OpcodesFDIV(const OpcodesFDIV & other)
{

}

OpcodesFDIV &OpcodesFDIV::operator=(const OpcodesFDIV & other)
{
  OpcodesFDIV tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFDIV::swap(OpcodesFDIV & other)
{

}

OpcodesFDIV::~OpcodesFDIV()
{

}

void OpcodesFDIV::accept(Visitor *v)
{
  v->visitOpcodesFDIV(this);
}

OpcodesFDIV *OpcodesFDIV::clone() const
{
  return new OpcodesFDIV(*this);
}



/********************   OpcodesFDIVP    ********************/
OpcodesFDIVP::OpcodesFDIVP()
{

}

OpcodesFDIVP::OpcodesFDIVP(const OpcodesFDIVP & other)
{

}

OpcodesFDIVP &OpcodesFDIVP::operator=(const OpcodesFDIVP & other)
{
  OpcodesFDIVP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFDIVP::swap(OpcodesFDIVP & other)
{

}

OpcodesFDIVP::~OpcodesFDIVP()
{

}

void OpcodesFDIVP::accept(Visitor *v)
{
  v->visitOpcodesFDIVP(this);
}

OpcodesFDIVP *OpcodesFDIVP::clone() const
{
  return new OpcodesFDIVP(*this);
}



/********************   OpcodesFDIVR    ********************/
OpcodesFDIVR::OpcodesFDIVR()
{

}

OpcodesFDIVR::OpcodesFDIVR(const OpcodesFDIVR & other)
{

}

OpcodesFDIVR &OpcodesFDIVR::operator=(const OpcodesFDIVR & other)
{
  OpcodesFDIVR tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFDIVR::swap(OpcodesFDIVR & other)
{

}

OpcodesFDIVR::~OpcodesFDIVR()
{

}

void OpcodesFDIVR::accept(Visitor *v)
{
  v->visitOpcodesFDIVR(this);
}

OpcodesFDIVR *OpcodesFDIVR::clone() const
{
  return new OpcodesFDIVR(*this);
}



/********************   OpcodesFDIVRP    ********************/
OpcodesFDIVRP::OpcodesFDIVRP()
{

}

OpcodesFDIVRP::OpcodesFDIVRP(const OpcodesFDIVRP & other)
{

}

OpcodesFDIVRP &OpcodesFDIVRP::operator=(const OpcodesFDIVRP & other)
{
  OpcodesFDIVRP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFDIVRP::swap(OpcodesFDIVRP & other)
{

}

OpcodesFDIVRP::~OpcodesFDIVRP()
{

}

void OpcodesFDIVRP::accept(Visitor *v)
{
  v->visitOpcodesFDIVRP(this);
}

OpcodesFDIVRP *OpcodesFDIVRP::clone() const
{
  return new OpcodesFDIVRP(*this);
}



/********************   OpcodesFENI    ********************/
OpcodesFENI::OpcodesFENI()
{

}

OpcodesFENI::OpcodesFENI(const OpcodesFENI & other)
{

}

OpcodesFENI &OpcodesFENI::operator=(const OpcodesFENI & other)
{
  OpcodesFENI tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFENI::swap(OpcodesFENI & other)
{

}

OpcodesFENI::~OpcodesFENI()
{

}

void OpcodesFENI::accept(Visitor *v)
{
  v->visitOpcodesFENI(this);
}

OpcodesFENI *OpcodesFENI::clone() const
{
  return new OpcodesFENI(*this);
}



/********************   OpcodesFFREE    ********************/
OpcodesFFREE::OpcodesFFREE()
{

}

OpcodesFFREE::OpcodesFFREE(const OpcodesFFREE & other)
{

}

OpcodesFFREE &OpcodesFFREE::operator=(const OpcodesFFREE & other)
{
  OpcodesFFREE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFFREE::swap(OpcodesFFREE & other)
{

}

OpcodesFFREE::~OpcodesFFREE()
{

}

void OpcodesFFREE::accept(Visitor *v)
{
  v->visitOpcodesFFREE(this);
}

OpcodesFFREE *OpcodesFFREE::clone() const
{
  return new OpcodesFFREE(*this);
}



/********************   OpcodesFIADD    ********************/
OpcodesFIADD::OpcodesFIADD()
{

}

OpcodesFIADD::OpcodesFIADD(const OpcodesFIADD & other)
{

}

OpcodesFIADD &OpcodesFIADD::operator=(const OpcodesFIADD & other)
{
  OpcodesFIADD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFIADD::swap(OpcodesFIADD & other)
{

}

OpcodesFIADD::~OpcodesFIADD()
{

}

void OpcodesFIADD::accept(Visitor *v)
{
  v->visitOpcodesFIADD(this);
}

OpcodesFIADD *OpcodesFIADD::clone() const
{
  return new OpcodesFIADD(*this);
}



/********************   OpcodesFICOM    ********************/
OpcodesFICOM::OpcodesFICOM()
{

}

OpcodesFICOM::OpcodesFICOM(const OpcodesFICOM & other)
{

}

OpcodesFICOM &OpcodesFICOM::operator=(const OpcodesFICOM & other)
{
  OpcodesFICOM tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFICOM::swap(OpcodesFICOM & other)
{

}

OpcodesFICOM::~OpcodesFICOM()
{

}

void OpcodesFICOM::accept(Visitor *v)
{
  v->visitOpcodesFICOM(this);
}

OpcodesFICOM *OpcodesFICOM::clone() const
{
  return new OpcodesFICOM(*this);
}



/********************   OpcodesFICOMP    ********************/
OpcodesFICOMP::OpcodesFICOMP()
{

}

OpcodesFICOMP::OpcodesFICOMP(const OpcodesFICOMP & other)
{

}

OpcodesFICOMP &OpcodesFICOMP::operator=(const OpcodesFICOMP & other)
{
  OpcodesFICOMP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFICOMP::swap(OpcodesFICOMP & other)
{

}

OpcodesFICOMP::~OpcodesFICOMP()
{

}

void OpcodesFICOMP::accept(Visitor *v)
{
  v->visitOpcodesFICOMP(this);
}

OpcodesFICOMP *OpcodesFICOMP::clone() const
{
  return new OpcodesFICOMP(*this);
}



/********************   OpcodesFIDIV    ********************/
OpcodesFIDIV::OpcodesFIDIV()
{

}

OpcodesFIDIV::OpcodesFIDIV(const OpcodesFIDIV & other)
{

}

OpcodesFIDIV &OpcodesFIDIV::operator=(const OpcodesFIDIV & other)
{
  OpcodesFIDIV tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFIDIV::swap(OpcodesFIDIV & other)
{

}

OpcodesFIDIV::~OpcodesFIDIV()
{

}

void OpcodesFIDIV::accept(Visitor *v)
{
  v->visitOpcodesFIDIV(this);
}

OpcodesFIDIV *OpcodesFIDIV::clone() const
{
  return new OpcodesFIDIV(*this);
}



/********************   OpcodesFIDIVR    ********************/
OpcodesFIDIVR::OpcodesFIDIVR()
{

}

OpcodesFIDIVR::OpcodesFIDIVR(const OpcodesFIDIVR & other)
{

}

OpcodesFIDIVR &OpcodesFIDIVR::operator=(const OpcodesFIDIVR & other)
{
  OpcodesFIDIVR tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFIDIVR::swap(OpcodesFIDIVR & other)
{

}

OpcodesFIDIVR::~OpcodesFIDIVR()
{

}

void OpcodesFIDIVR::accept(Visitor *v)
{
  v->visitOpcodesFIDIVR(this);
}

OpcodesFIDIVR *OpcodesFIDIVR::clone() const
{
  return new OpcodesFIDIVR(*this);
}



/********************   OpcodesFILD    ********************/
OpcodesFILD::OpcodesFILD()
{

}

OpcodesFILD::OpcodesFILD(const OpcodesFILD & other)
{

}

OpcodesFILD &OpcodesFILD::operator=(const OpcodesFILD & other)
{
  OpcodesFILD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFILD::swap(OpcodesFILD & other)
{

}

OpcodesFILD::~OpcodesFILD()
{

}

void OpcodesFILD::accept(Visitor *v)
{
  v->visitOpcodesFILD(this);
}

OpcodesFILD *OpcodesFILD::clone() const
{
  return new OpcodesFILD(*this);
}



/********************   OpcodesFIMUL    ********************/
OpcodesFIMUL::OpcodesFIMUL()
{

}

OpcodesFIMUL::OpcodesFIMUL(const OpcodesFIMUL & other)
{

}

OpcodesFIMUL &OpcodesFIMUL::operator=(const OpcodesFIMUL & other)
{
  OpcodesFIMUL tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFIMUL::swap(OpcodesFIMUL & other)
{

}

OpcodesFIMUL::~OpcodesFIMUL()
{

}

void OpcodesFIMUL::accept(Visitor *v)
{
  v->visitOpcodesFIMUL(this);
}

OpcodesFIMUL *OpcodesFIMUL::clone() const
{
  return new OpcodesFIMUL(*this);
}



/********************   OpcodesFINCSTP    ********************/
OpcodesFINCSTP::OpcodesFINCSTP()
{

}

OpcodesFINCSTP::OpcodesFINCSTP(const OpcodesFINCSTP & other)
{

}

OpcodesFINCSTP &OpcodesFINCSTP::operator=(const OpcodesFINCSTP & other)
{
  OpcodesFINCSTP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFINCSTP::swap(OpcodesFINCSTP & other)
{

}

OpcodesFINCSTP::~OpcodesFINCSTP()
{

}

void OpcodesFINCSTP::accept(Visitor *v)
{
  v->visitOpcodesFINCSTP(this);
}

OpcodesFINCSTP *OpcodesFINCSTP::clone() const
{
  return new OpcodesFINCSTP(*this);
}



/********************   OpcodesFINIT    ********************/
OpcodesFINIT::OpcodesFINIT()
{

}

OpcodesFINIT::OpcodesFINIT(const OpcodesFINIT & other)
{

}

OpcodesFINIT &OpcodesFINIT::operator=(const OpcodesFINIT & other)
{
  OpcodesFINIT tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFINIT::swap(OpcodesFINIT & other)
{

}

OpcodesFINIT::~OpcodesFINIT()
{

}

void OpcodesFINIT::accept(Visitor *v)
{
  v->visitOpcodesFINIT(this);
}

OpcodesFINIT *OpcodesFINIT::clone() const
{
  return new OpcodesFINIT(*this);
}



/********************   OpcodesFIST    ********************/
OpcodesFIST::OpcodesFIST()
{

}

OpcodesFIST::OpcodesFIST(const OpcodesFIST & other)
{

}

OpcodesFIST &OpcodesFIST::operator=(const OpcodesFIST & other)
{
  OpcodesFIST tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFIST::swap(OpcodesFIST & other)
{

}

OpcodesFIST::~OpcodesFIST()
{

}

void OpcodesFIST::accept(Visitor *v)
{
  v->visitOpcodesFIST(this);
}

OpcodesFIST *OpcodesFIST::clone() const
{
  return new OpcodesFIST(*this);
}



/********************   OpcodesFISTP    ********************/
OpcodesFISTP::OpcodesFISTP()
{

}

OpcodesFISTP::OpcodesFISTP(const OpcodesFISTP & other)
{

}

OpcodesFISTP &OpcodesFISTP::operator=(const OpcodesFISTP & other)
{
  OpcodesFISTP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFISTP::swap(OpcodesFISTP & other)
{

}

OpcodesFISTP::~OpcodesFISTP()
{

}

void OpcodesFISTP::accept(Visitor *v)
{
  v->visitOpcodesFISTP(this);
}

OpcodesFISTP *OpcodesFISTP::clone() const
{
  return new OpcodesFISTP(*this);
}



/********************   OpcodesFISUB    ********************/
OpcodesFISUB::OpcodesFISUB()
{

}

OpcodesFISUB::OpcodesFISUB(const OpcodesFISUB & other)
{

}

OpcodesFISUB &OpcodesFISUB::operator=(const OpcodesFISUB & other)
{
  OpcodesFISUB tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFISUB::swap(OpcodesFISUB & other)
{

}

OpcodesFISUB::~OpcodesFISUB()
{

}

void OpcodesFISUB::accept(Visitor *v)
{
  v->visitOpcodesFISUB(this);
}

OpcodesFISUB *OpcodesFISUB::clone() const
{
  return new OpcodesFISUB(*this);
}



/********************   OpcodesFISUBR    ********************/
OpcodesFISUBR::OpcodesFISUBR()
{

}

OpcodesFISUBR::OpcodesFISUBR(const OpcodesFISUBR & other)
{

}

OpcodesFISUBR &OpcodesFISUBR::operator=(const OpcodesFISUBR & other)
{
  OpcodesFISUBR tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFISUBR::swap(OpcodesFISUBR & other)
{

}

OpcodesFISUBR::~OpcodesFISUBR()
{

}

void OpcodesFISUBR::accept(Visitor *v)
{
  v->visitOpcodesFISUBR(this);
}

OpcodesFISUBR *OpcodesFISUBR::clone() const
{
  return new OpcodesFISUBR(*this);
}



/********************   OpcodesFLD    ********************/
OpcodesFLD::OpcodesFLD()
{

}

OpcodesFLD::OpcodesFLD(const OpcodesFLD & other)
{

}

OpcodesFLD &OpcodesFLD::operator=(const OpcodesFLD & other)
{
  OpcodesFLD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFLD::swap(OpcodesFLD & other)
{

}

OpcodesFLD::~OpcodesFLD()
{

}

void OpcodesFLD::accept(Visitor *v)
{
  v->visitOpcodesFLD(this);
}

OpcodesFLD *OpcodesFLD::clone() const
{
  return new OpcodesFLD(*this);
}



/********************   OpcodesFLD1    ********************/
OpcodesFLD1::OpcodesFLD1()
{

}

OpcodesFLD1::OpcodesFLD1(const OpcodesFLD1 & other)
{

}

OpcodesFLD1 &OpcodesFLD1::operator=(const OpcodesFLD1 & other)
{
  OpcodesFLD1 tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFLD1::swap(OpcodesFLD1 & other)
{

}

OpcodesFLD1::~OpcodesFLD1()
{

}

void OpcodesFLD1::accept(Visitor *v)
{
  v->visitOpcodesFLD1(this);
}

OpcodesFLD1 *OpcodesFLD1::clone() const
{
  return new OpcodesFLD1(*this);
}



/********************   OpcodesFLDCW    ********************/
OpcodesFLDCW::OpcodesFLDCW()
{

}

OpcodesFLDCW::OpcodesFLDCW(const OpcodesFLDCW & other)
{

}

OpcodesFLDCW &OpcodesFLDCW::operator=(const OpcodesFLDCW & other)
{
  OpcodesFLDCW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFLDCW::swap(OpcodesFLDCW & other)
{

}

OpcodesFLDCW::~OpcodesFLDCW()
{

}

void OpcodesFLDCW::accept(Visitor *v)
{
  v->visitOpcodesFLDCW(this);
}

OpcodesFLDCW *OpcodesFLDCW::clone() const
{
  return new OpcodesFLDCW(*this);
}



/********************   OpcodesFLDENV    ********************/
OpcodesFLDENV::OpcodesFLDENV()
{

}

OpcodesFLDENV::OpcodesFLDENV(const OpcodesFLDENV & other)
{

}

OpcodesFLDENV &OpcodesFLDENV::operator=(const OpcodesFLDENV & other)
{
  OpcodesFLDENV tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFLDENV::swap(OpcodesFLDENV & other)
{

}

OpcodesFLDENV::~OpcodesFLDENV()
{

}

void OpcodesFLDENV::accept(Visitor *v)
{
  v->visitOpcodesFLDENV(this);
}

OpcodesFLDENV *OpcodesFLDENV::clone() const
{
  return new OpcodesFLDENV(*this);
}



/********************   OpcodesFLDL2E    ********************/
OpcodesFLDL2E::OpcodesFLDL2E()
{

}

OpcodesFLDL2E::OpcodesFLDL2E(const OpcodesFLDL2E & other)
{

}

OpcodesFLDL2E &OpcodesFLDL2E::operator=(const OpcodesFLDL2E & other)
{
  OpcodesFLDL2E tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFLDL2E::swap(OpcodesFLDL2E & other)
{

}

OpcodesFLDL2E::~OpcodesFLDL2E()
{

}

void OpcodesFLDL2E::accept(Visitor *v)
{
  v->visitOpcodesFLDL2E(this);
}

OpcodesFLDL2E *OpcodesFLDL2E::clone() const
{
  return new OpcodesFLDL2E(*this);
}



/********************   OpcodesFLDL2T    ********************/
OpcodesFLDL2T::OpcodesFLDL2T()
{

}

OpcodesFLDL2T::OpcodesFLDL2T(const OpcodesFLDL2T & other)
{

}

OpcodesFLDL2T &OpcodesFLDL2T::operator=(const OpcodesFLDL2T & other)
{
  OpcodesFLDL2T tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFLDL2T::swap(OpcodesFLDL2T & other)
{

}

OpcodesFLDL2T::~OpcodesFLDL2T()
{

}

void OpcodesFLDL2T::accept(Visitor *v)
{
  v->visitOpcodesFLDL2T(this);
}

OpcodesFLDL2T *OpcodesFLDL2T::clone() const
{
  return new OpcodesFLDL2T(*this);
}



/********************   OpcodesFLDLG2    ********************/
OpcodesFLDLG2::OpcodesFLDLG2()
{

}

OpcodesFLDLG2::OpcodesFLDLG2(const OpcodesFLDLG2 & other)
{

}

OpcodesFLDLG2 &OpcodesFLDLG2::operator=(const OpcodesFLDLG2 & other)
{
  OpcodesFLDLG2 tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFLDLG2::swap(OpcodesFLDLG2 & other)
{

}

OpcodesFLDLG2::~OpcodesFLDLG2()
{

}

void OpcodesFLDLG2::accept(Visitor *v)
{
  v->visitOpcodesFLDLG2(this);
}

OpcodesFLDLG2 *OpcodesFLDLG2::clone() const
{
  return new OpcodesFLDLG2(*this);
}



/********************   OpcodesFLDLN2    ********************/
OpcodesFLDLN2::OpcodesFLDLN2()
{

}

OpcodesFLDLN2::OpcodesFLDLN2(const OpcodesFLDLN2 & other)
{

}

OpcodesFLDLN2 &OpcodesFLDLN2::operator=(const OpcodesFLDLN2 & other)
{
  OpcodesFLDLN2 tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFLDLN2::swap(OpcodesFLDLN2 & other)
{

}

OpcodesFLDLN2::~OpcodesFLDLN2()
{

}

void OpcodesFLDLN2::accept(Visitor *v)
{
  v->visitOpcodesFLDLN2(this);
}

OpcodesFLDLN2 *OpcodesFLDLN2::clone() const
{
  return new OpcodesFLDLN2(*this);
}



/********************   OpcodesFLDPI    ********************/
OpcodesFLDPI::OpcodesFLDPI()
{

}

OpcodesFLDPI::OpcodesFLDPI(const OpcodesFLDPI & other)
{

}

OpcodesFLDPI &OpcodesFLDPI::operator=(const OpcodesFLDPI & other)
{
  OpcodesFLDPI tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFLDPI::swap(OpcodesFLDPI & other)
{

}

OpcodesFLDPI::~OpcodesFLDPI()
{

}

void OpcodesFLDPI::accept(Visitor *v)
{
  v->visitOpcodesFLDPI(this);
}

OpcodesFLDPI *OpcodesFLDPI::clone() const
{
  return new OpcodesFLDPI(*this);
}



/********************   OpcodesFLDZ    ********************/
OpcodesFLDZ::OpcodesFLDZ()
{

}

OpcodesFLDZ::OpcodesFLDZ(const OpcodesFLDZ & other)
{

}

OpcodesFLDZ &OpcodesFLDZ::operator=(const OpcodesFLDZ & other)
{
  OpcodesFLDZ tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFLDZ::swap(OpcodesFLDZ & other)
{

}

OpcodesFLDZ::~OpcodesFLDZ()
{

}

void OpcodesFLDZ::accept(Visitor *v)
{
  v->visitOpcodesFLDZ(this);
}

OpcodesFLDZ *OpcodesFLDZ::clone() const
{
  return new OpcodesFLDZ(*this);
}



/********************   OpcodesFMUL    ********************/
OpcodesFMUL::OpcodesFMUL()
{

}

OpcodesFMUL::OpcodesFMUL(const OpcodesFMUL & other)
{

}

OpcodesFMUL &OpcodesFMUL::operator=(const OpcodesFMUL & other)
{
  OpcodesFMUL tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFMUL::swap(OpcodesFMUL & other)
{

}

OpcodesFMUL::~OpcodesFMUL()
{

}

void OpcodesFMUL::accept(Visitor *v)
{
  v->visitOpcodesFMUL(this);
}

OpcodesFMUL *OpcodesFMUL::clone() const
{
  return new OpcodesFMUL(*this);
}



/********************   OpcodesFMULP    ********************/
OpcodesFMULP::OpcodesFMULP()
{

}

OpcodesFMULP::OpcodesFMULP(const OpcodesFMULP & other)
{

}

OpcodesFMULP &OpcodesFMULP::operator=(const OpcodesFMULP & other)
{
  OpcodesFMULP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFMULP::swap(OpcodesFMULP & other)
{

}

OpcodesFMULP::~OpcodesFMULP()
{

}

void OpcodesFMULP::accept(Visitor *v)
{
  v->visitOpcodesFMULP(this);
}

OpcodesFMULP *OpcodesFMULP::clone() const
{
  return new OpcodesFMULP(*this);
}



/********************   OpcodesFNCLEX    ********************/
OpcodesFNCLEX::OpcodesFNCLEX()
{

}

OpcodesFNCLEX::OpcodesFNCLEX(const OpcodesFNCLEX & other)
{

}

OpcodesFNCLEX &OpcodesFNCLEX::operator=(const OpcodesFNCLEX & other)
{
  OpcodesFNCLEX tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFNCLEX::swap(OpcodesFNCLEX & other)
{

}

OpcodesFNCLEX::~OpcodesFNCLEX()
{

}

void OpcodesFNCLEX::accept(Visitor *v)
{
  v->visitOpcodesFNCLEX(this);
}

OpcodesFNCLEX *OpcodesFNCLEX::clone() const
{
  return new OpcodesFNCLEX(*this);
}



/********************   OpcodesFNDISI    ********************/
OpcodesFNDISI::OpcodesFNDISI()
{

}

OpcodesFNDISI::OpcodesFNDISI(const OpcodesFNDISI & other)
{

}

OpcodesFNDISI &OpcodesFNDISI::operator=(const OpcodesFNDISI & other)
{
  OpcodesFNDISI tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFNDISI::swap(OpcodesFNDISI & other)
{

}

OpcodesFNDISI::~OpcodesFNDISI()
{

}

void OpcodesFNDISI::accept(Visitor *v)
{
  v->visitOpcodesFNDISI(this);
}

OpcodesFNDISI *OpcodesFNDISI::clone() const
{
  return new OpcodesFNDISI(*this);
}



/********************   OpcodesFNENI    ********************/
OpcodesFNENI::OpcodesFNENI()
{

}

OpcodesFNENI::OpcodesFNENI(const OpcodesFNENI & other)
{

}

OpcodesFNENI &OpcodesFNENI::operator=(const OpcodesFNENI & other)
{
  OpcodesFNENI tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFNENI::swap(OpcodesFNENI & other)
{

}

OpcodesFNENI::~OpcodesFNENI()
{

}

void OpcodesFNENI::accept(Visitor *v)
{
  v->visitOpcodesFNENI(this);
}

OpcodesFNENI *OpcodesFNENI::clone() const
{
  return new OpcodesFNENI(*this);
}



/********************   OpcodesFNINIT    ********************/
OpcodesFNINIT::OpcodesFNINIT()
{

}

OpcodesFNINIT::OpcodesFNINIT(const OpcodesFNINIT & other)
{

}

OpcodesFNINIT &OpcodesFNINIT::operator=(const OpcodesFNINIT & other)
{
  OpcodesFNINIT tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFNINIT::swap(OpcodesFNINIT & other)
{

}

OpcodesFNINIT::~OpcodesFNINIT()
{

}

void OpcodesFNINIT::accept(Visitor *v)
{
  v->visitOpcodesFNINIT(this);
}

OpcodesFNINIT *OpcodesFNINIT::clone() const
{
  return new OpcodesFNINIT(*this);
}



/********************   OpcodesFNOP    ********************/
OpcodesFNOP::OpcodesFNOP()
{

}

OpcodesFNOP::OpcodesFNOP(const OpcodesFNOP & other)
{

}

OpcodesFNOP &OpcodesFNOP::operator=(const OpcodesFNOP & other)
{
  OpcodesFNOP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFNOP::swap(OpcodesFNOP & other)
{

}

OpcodesFNOP::~OpcodesFNOP()
{

}

void OpcodesFNOP::accept(Visitor *v)
{
  v->visitOpcodesFNOP(this);
}

OpcodesFNOP *OpcodesFNOP::clone() const
{
  return new OpcodesFNOP(*this);
}



/********************   OpcodesFNSAVE    ********************/
OpcodesFNSAVE::OpcodesFNSAVE()
{

}

OpcodesFNSAVE::OpcodesFNSAVE(const OpcodesFNSAVE & other)
{

}

OpcodesFNSAVE &OpcodesFNSAVE::operator=(const OpcodesFNSAVE & other)
{
  OpcodesFNSAVE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFNSAVE::swap(OpcodesFNSAVE & other)
{

}

OpcodesFNSAVE::~OpcodesFNSAVE()
{

}

void OpcodesFNSAVE::accept(Visitor *v)
{
  v->visitOpcodesFNSAVE(this);
}

OpcodesFNSAVE *OpcodesFNSAVE::clone() const
{
  return new OpcodesFNSAVE(*this);
}



/********************   OpcodesFNSTCW    ********************/
OpcodesFNSTCW::OpcodesFNSTCW()
{

}

OpcodesFNSTCW::OpcodesFNSTCW(const OpcodesFNSTCW & other)
{

}

OpcodesFNSTCW &OpcodesFNSTCW::operator=(const OpcodesFNSTCW & other)
{
  OpcodesFNSTCW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFNSTCW::swap(OpcodesFNSTCW & other)
{

}

OpcodesFNSTCW::~OpcodesFNSTCW()
{

}

void OpcodesFNSTCW::accept(Visitor *v)
{
  v->visitOpcodesFNSTCW(this);
}

OpcodesFNSTCW *OpcodesFNSTCW::clone() const
{
  return new OpcodesFNSTCW(*this);
}



/********************   OpcodesFNSTENV    ********************/
OpcodesFNSTENV::OpcodesFNSTENV()
{

}

OpcodesFNSTENV::OpcodesFNSTENV(const OpcodesFNSTENV & other)
{

}

OpcodesFNSTENV &OpcodesFNSTENV::operator=(const OpcodesFNSTENV & other)
{
  OpcodesFNSTENV tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFNSTENV::swap(OpcodesFNSTENV & other)
{

}

OpcodesFNSTENV::~OpcodesFNSTENV()
{

}

void OpcodesFNSTENV::accept(Visitor *v)
{
  v->visitOpcodesFNSTENV(this);
}

OpcodesFNSTENV *OpcodesFNSTENV::clone() const
{
  return new OpcodesFNSTENV(*this);
}



/********************   OpcodesFNSTSW    ********************/
OpcodesFNSTSW::OpcodesFNSTSW()
{

}

OpcodesFNSTSW::OpcodesFNSTSW(const OpcodesFNSTSW & other)
{

}

OpcodesFNSTSW &OpcodesFNSTSW::operator=(const OpcodesFNSTSW & other)
{
  OpcodesFNSTSW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFNSTSW::swap(OpcodesFNSTSW & other)
{

}

OpcodesFNSTSW::~OpcodesFNSTSW()
{

}

void OpcodesFNSTSW::accept(Visitor *v)
{
  v->visitOpcodesFNSTSW(this);
}

OpcodesFNSTSW *OpcodesFNSTSW::clone() const
{
  return new OpcodesFNSTSW(*this);
}



/********************   OpcodesFPATAN    ********************/
OpcodesFPATAN::OpcodesFPATAN()
{

}

OpcodesFPATAN::OpcodesFPATAN(const OpcodesFPATAN & other)
{

}

OpcodesFPATAN &OpcodesFPATAN::operator=(const OpcodesFPATAN & other)
{
  OpcodesFPATAN tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFPATAN::swap(OpcodesFPATAN & other)
{

}

OpcodesFPATAN::~OpcodesFPATAN()
{

}

void OpcodesFPATAN::accept(Visitor *v)
{
  v->visitOpcodesFPATAN(this);
}

OpcodesFPATAN *OpcodesFPATAN::clone() const
{
  return new OpcodesFPATAN(*this);
}



/********************   OpcodesFPTAN    ********************/
OpcodesFPTAN::OpcodesFPTAN()
{

}

OpcodesFPTAN::OpcodesFPTAN(const OpcodesFPTAN & other)
{

}

OpcodesFPTAN &OpcodesFPTAN::operator=(const OpcodesFPTAN & other)
{
  OpcodesFPTAN tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFPTAN::swap(OpcodesFPTAN & other)
{

}

OpcodesFPTAN::~OpcodesFPTAN()
{

}

void OpcodesFPTAN::accept(Visitor *v)
{
  v->visitOpcodesFPTAN(this);
}

OpcodesFPTAN *OpcodesFPTAN::clone() const
{
  return new OpcodesFPTAN(*this);
}



/********************   OpcodesFPREM    ********************/
OpcodesFPREM::OpcodesFPREM()
{

}

OpcodesFPREM::OpcodesFPREM(const OpcodesFPREM & other)
{

}

OpcodesFPREM &OpcodesFPREM::operator=(const OpcodesFPREM & other)
{
  OpcodesFPREM tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFPREM::swap(OpcodesFPREM & other)
{

}

OpcodesFPREM::~OpcodesFPREM()
{

}

void OpcodesFPREM::accept(Visitor *v)
{
  v->visitOpcodesFPREM(this);
}

OpcodesFPREM *OpcodesFPREM::clone() const
{
  return new OpcodesFPREM(*this);
}



/********************   OpcodesFPREM1    ********************/
OpcodesFPREM1::OpcodesFPREM1()
{

}

OpcodesFPREM1::OpcodesFPREM1(const OpcodesFPREM1 & other)
{

}

OpcodesFPREM1 &OpcodesFPREM1::operator=(const OpcodesFPREM1 & other)
{
  OpcodesFPREM1 tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFPREM1::swap(OpcodesFPREM1 & other)
{

}

OpcodesFPREM1::~OpcodesFPREM1()
{

}

void OpcodesFPREM1::accept(Visitor *v)
{
  v->visitOpcodesFPREM1(this);
}

OpcodesFPREM1 *OpcodesFPREM1::clone() const
{
  return new OpcodesFPREM1(*this);
}



/********************   OpcodesFRNDINT    ********************/
OpcodesFRNDINT::OpcodesFRNDINT()
{

}

OpcodesFRNDINT::OpcodesFRNDINT(const OpcodesFRNDINT & other)
{

}

OpcodesFRNDINT &OpcodesFRNDINT::operator=(const OpcodesFRNDINT & other)
{
  OpcodesFRNDINT tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFRNDINT::swap(OpcodesFRNDINT & other)
{

}

OpcodesFRNDINT::~OpcodesFRNDINT()
{

}

void OpcodesFRNDINT::accept(Visitor *v)
{
  v->visitOpcodesFRNDINT(this);
}

OpcodesFRNDINT *OpcodesFRNDINT::clone() const
{
  return new OpcodesFRNDINT(*this);
}



/********************   OpcodesFRSTOR    ********************/
OpcodesFRSTOR::OpcodesFRSTOR()
{

}

OpcodesFRSTOR::OpcodesFRSTOR(const OpcodesFRSTOR & other)
{

}

OpcodesFRSTOR &OpcodesFRSTOR::operator=(const OpcodesFRSTOR & other)
{
  OpcodesFRSTOR tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFRSTOR::swap(OpcodesFRSTOR & other)
{

}

OpcodesFRSTOR::~OpcodesFRSTOR()
{

}

void OpcodesFRSTOR::accept(Visitor *v)
{
  v->visitOpcodesFRSTOR(this);
}

OpcodesFRSTOR *OpcodesFRSTOR::clone() const
{
  return new OpcodesFRSTOR(*this);
}



/********************   OpcodesFSAVE    ********************/
OpcodesFSAVE::OpcodesFSAVE()
{

}

OpcodesFSAVE::OpcodesFSAVE(const OpcodesFSAVE & other)
{

}

OpcodesFSAVE &OpcodesFSAVE::operator=(const OpcodesFSAVE & other)
{
  OpcodesFSAVE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFSAVE::swap(OpcodesFSAVE & other)
{

}

OpcodesFSAVE::~OpcodesFSAVE()
{

}

void OpcodesFSAVE::accept(Visitor *v)
{
  v->visitOpcodesFSAVE(this);
}

OpcodesFSAVE *OpcodesFSAVE::clone() const
{
  return new OpcodesFSAVE(*this);
}



/********************   OpcodesFSCALE    ********************/
OpcodesFSCALE::OpcodesFSCALE()
{

}

OpcodesFSCALE::OpcodesFSCALE(const OpcodesFSCALE & other)
{

}

OpcodesFSCALE &OpcodesFSCALE::operator=(const OpcodesFSCALE & other)
{
  OpcodesFSCALE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFSCALE::swap(OpcodesFSCALE & other)
{

}

OpcodesFSCALE::~OpcodesFSCALE()
{

}

void OpcodesFSCALE::accept(Visitor *v)
{
  v->visitOpcodesFSCALE(this);
}

OpcodesFSCALE *OpcodesFSCALE::clone() const
{
  return new OpcodesFSCALE(*this);
}



/********************   OpcodesFSETPM    ********************/
OpcodesFSETPM::OpcodesFSETPM()
{

}

OpcodesFSETPM::OpcodesFSETPM(const OpcodesFSETPM & other)
{

}

OpcodesFSETPM &OpcodesFSETPM::operator=(const OpcodesFSETPM & other)
{
  OpcodesFSETPM tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFSETPM::swap(OpcodesFSETPM & other)
{

}

OpcodesFSETPM::~OpcodesFSETPM()
{

}

void OpcodesFSETPM::accept(Visitor *v)
{
  v->visitOpcodesFSETPM(this);
}

OpcodesFSETPM *OpcodesFSETPM::clone() const
{
  return new OpcodesFSETPM(*this);
}



/********************   OpcodesFSIN    ********************/
OpcodesFSIN::OpcodesFSIN()
{

}

OpcodesFSIN::OpcodesFSIN(const OpcodesFSIN & other)
{

}

OpcodesFSIN &OpcodesFSIN::operator=(const OpcodesFSIN & other)
{
  OpcodesFSIN tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFSIN::swap(OpcodesFSIN & other)
{

}

OpcodesFSIN::~OpcodesFSIN()
{

}

void OpcodesFSIN::accept(Visitor *v)
{
  v->visitOpcodesFSIN(this);
}

OpcodesFSIN *OpcodesFSIN::clone() const
{
  return new OpcodesFSIN(*this);
}



/********************   OpcodesFSINCOS    ********************/
OpcodesFSINCOS::OpcodesFSINCOS()
{

}

OpcodesFSINCOS::OpcodesFSINCOS(const OpcodesFSINCOS & other)
{

}

OpcodesFSINCOS &OpcodesFSINCOS::operator=(const OpcodesFSINCOS & other)
{
  OpcodesFSINCOS tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFSINCOS::swap(OpcodesFSINCOS & other)
{

}

OpcodesFSINCOS::~OpcodesFSINCOS()
{

}

void OpcodesFSINCOS::accept(Visitor *v)
{
  v->visitOpcodesFSINCOS(this);
}

OpcodesFSINCOS *OpcodesFSINCOS::clone() const
{
  return new OpcodesFSINCOS(*this);
}



/********************   OpcodesFSQRT    ********************/
OpcodesFSQRT::OpcodesFSQRT()
{

}

OpcodesFSQRT::OpcodesFSQRT(const OpcodesFSQRT & other)
{

}

OpcodesFSQRT &OpcodesFSQRT::operator=(const OpcodesFSQRT & other)
{
  OpcodesFSQRT tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFSQRT::swap(OpcodesFSQRT & other)
{

}

OpcodesFSQRT::~OpcodesFSQRT()
{

}

void OpcodesFSQRT::accept(Visitor *v)
{
  v->visitOpcodesFSQRT(this);
}

OpcodesFSQRT *OpcodesFSQRT::clone() const
{
  return new OpcodesFSQRT(*this);
}



/********************   OpcodesFST    ********************/
OpcodesFST::OpcodesFST()
{

}

OpcodesFST::OpcodesFST(const OpcodesFST & other)
{

}

OpcodesFST &OpcodesFST::operator=(const OpcodesFST & other)
{
  OpcodesFST tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFST::swap(OpcodesFST & other)
{

}

OpcodesFST::~OpcodesFST()
{

}

void OpcodesFST::accept(Visitor *v)
{
  v->visitOpcodesFST(this);
}

OpcodesFST *OpcodesFST::clone() const
{
  return new OpcodesFST(*this);
}



/********************   OpcodesFSTCW    ********************/
OpcodesFSTCW::OpcodesFSTCW()
{

}

OpcodesFSTCW::OpcodesFSTCW(const OpcodesFSTCW & other)
{

}

OpcodesFSTCW &OpcodesFSTCW::operator=(const OpcodesFSTCW & other)
{
  OpcodesFSTCW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFSTCW::swap(OpcodesFSTCW & other)
{

}

OpcodesFSTCW::~OpcodesFSTCW()
{

}

void OpcodesFSTCW::accept(Visitor *v)
{
  v->visitOpcodesFSTCW(this);
}

OpcodesFSTCW *OpcodesFSTCW::clone() const
{
  return new OpcodesFSTCW(*this);
}



/********************   OpcodesFSTENV    ********************/
OpcodesFSTENV::OpcodesFSTENV()
{

}

OpcodesFSTENV::OpcodesFSTENV(const OpcodesFSTENV & other)
{

}

OpcodesFSTENV &OpcodesFSTENV::operator=(const OpcodesFSTENV & other)
{
  OpcodesFSTENV tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFSTENV::swap(OpcodesFSTENV & other)
{

}

OpcodesFSTENV::~OpcodesFSTENV()
{

}

void OpcodesFSTENV::accept(Visitor *v)
{
  v->visitOpcodesFSTENV(this);
}

OpcodesFSTENV *OpcodesFSTENV::clone() const
{
  return new OpcodesFSTENV(*this);
}



/********************   OpcodesFSTP    ********************/
OpcodesFSTP::OpcodesFSTP()
{

}

OpcodesFSTP::OpcodesFSTP(const OpcodesFSTP & other)
{

}

OpcodesFSTP &OpcodesFSTP::operator=(const OpcodesFSTP & other)
{
  OpcodesFSTP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFSTP::swap(OpcodesFSTP & other)
{

}

OpcodesFSTP::~OpcodesFSTP()
{

}

void OpcodesFSTP::accept(Visitor *v)
{
  v->visitOpcodesFSTP(this);
}

OpcodesFSTP *OpcodesFSTP::clone() const
{
  return new OpcodesFSTP(*this);
}



/********************   OpcodesFSTSW    ********************/
OpcodesFSTSW::OpcodesFSTSW()
{

}

OpcodesFSTSW::OpcodesFSTSW(const OpcodesFSTSW & other)
{

}

OpcodesFSTSW &OpcodesFSTSW::operator=(const OpcodesFSTSW & other)
{
  OpcodesFSTSW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFSTSW::swap(OpcodesFSTSW & other)
{

}

OpcodesFSTSW::~OpcodesFSTSW()
{

}

void OpcodesFSTSW::accept(Visitor *v)
{
  v->visitOpcodesFSTSW(this);
}

OpcodesFSTSW *OpcodesFSTSW::clone() const
{
  return new OpcodesFSTSW(*this);
}



/********************   OpcodesFSUB    ********************/
OpcodesFSUB::OpcodesFSUB()
{

}

OpcodesFSUB::OpcodesFSUB(const OpcodesFSUB & other)
{

}

OpcodesFSUB &OpcodesFSUB::operator=(const OpcodesFSUB & other)
{
  OpcodesFSUB tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFSUB::swap(OpcodesFSUB & other)
{

}

OpcodesFSUB::~OpcodesFSUB()
{

}

void OpcodesFSUB::accept(Visitor *v)
{
  v->visitOpcodesFSUB(this);
}

OpcodesFSUB *OpcodesFSUB::clone() const
{
  return new OpcodesFSUB(*this);
}



/********************   OpcodesFSUBP    ********************/
OpcodesFSUBP::OpcodesFSUBP()
{

}

OpcodesFSUBP::OpcodesFSUBP(const OpcodesFSUBP & other)
{

}

OpcodesFSUBP &OpcodesFSUBP::operator=(const OpcodesFSUBP & other)
{
  OpcodesFSUBP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFSUBP::swap(OpcodesFSUBP & other)
{

}

OpcodesFSUBP::~OpcodesFSUBP()
{

}

void OpcodesFSUBP::accept(Visitor *v)
{
  v->visitOpcodesFSUBP(this);
}

OpcodesFSUBP *OpcodesFSUBP::clone() const
{
  return new OpcodesFSUBP(*this);
}



/********************   OpcodesFSUBR    ********************/
OpcodesFSUBR::OpcodesFSUBR()
{

}

OpcodesFSUBR::OpcodesFSUBR(const OpcodesFSUBR & other)
{

}

OpcodesFSUBR &OpcodesFSUBR::operator=(const OpcodesFSUBR & other)
{
  OpcodesFSUBR tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFSUBR::swap(OpcodesFSUBR & other)
{

}

OpcodesFSUBR::~OpcodesFSUBR()
{

}

void OpcodesFSUBR::accept(Visitor *v)
{
  v->visitOpcodesFSUBR(this);
}

OpcodesFSUBR *OpcodesFSUBR::clone() const
{
  return new OpcodesFSUBR(*this);
}



/********************   OpcodesFSUBRP    ********************/
OpcodesFSUBRP::OpcodesFSUBRP()
{

}

OpcodesFSUBRP::OpcodesFSUBRP(const OpcodesFSUBRP & other)
{

}

OpcodesFSUBRP &OpcodesFSUBRP::operator=(const OpcodesFSUBRP & other)
{
  OpcodesFSUBRP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFSUBRP::swap(OpcodesFSUBRP & other)
{

}

OpcodesFSUBRP::~OpcodesFSUBRP()
{

}

void OpcodesFSUBRP::accept(Visitor *v)
{
  v->visitOpcodesFSUBRP(this);
}

OpcodesFSUBRP *OpcodesFSUBRP::clone() const
{
  return new OpcodesFSUBRP(*this);
}



/********************   OpcodesFTST    ********************/
OpcodesFTST::OpcodesFTST()
{

}

OpcodesFTST::OpcodesFTST(const OpcodesFTST & other)
{

}

OpcodesFTST &OpcodesFTST::operator=(const OpcodesFTST & other)
{
  OpcodesFTST tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFTST::swap(OpcodesFTST & other)
{

}

OpcodesFTST::~OpcodesFTST()
{

}

void OpcodesFTST::accept(Visitor *v)
{
  v->visitOpcodesFTST(this);
}

OpcodesFTST *OpcodesFTST::clone() const
{
  return new OpcodesFTST(*this);
}



/********************   OpcodesFUCOM    ********************/
OpcodesFUCOM::OpcodesFUCOM()
{

}

OpcodesFUCOM::OpcodesFUCOM(const OpcodesFUCOM & other)
{

}

OpcodesFUCOM &OpcodesFUCOM::operator=(const OpcodesFUCOM & other)
{
  OpcodesFUCOM tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFUCOM::swap(OpcodesFUCOM & other)
{

}

OpcodesFUCOM::~OpcodesFUCOM()
{

}

void OpcodesFUCOM::accept(Visitor *v)
{
  v->visitOpcodesFUCOM(this);
}

OpcodesFUCOM *OpcodesFUCOM::clone() const
{
  return new OpcodesFUCOM(*this);
}



/********************   OpcodesFUCOMP    ********************/
OpcodesFUCOMP::OpcodesFUCOMP()
{

}

OpcodesFUCOMP::OpcodesFUCOMP(const OpcodesFUCOMP & other)
{

}

OpcodesFUCOMP &OpcodesFUCOMP::operator=(const OpcodesFUCOMP & other)
{
  OpcodesFUCOMP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFUCOMP::swap(OpcodesFUCOMP & other)
{

}

OpcodesFUCOMP::~OpcodesFUCOMP()
{

}

void OpcodesFUCOMP::accept(Visitor *v)
{
  v->visitOpcodesFUCOMP(this);
}

OpcodesFUCOMP *OpcodesFUCOMP::clone() const
{
  return new OpcodesFUCOMP(*this);
}



/********************   OpcodesFUCOMPP    ********************/
OpcodesFUCOMPP::OpcodesFUCOMPP()
{

}

OpcodesFUCOMPP::OpcodesFUCOMPP(const OpcodesFUCOMPP & other)
{

}

OpcodesFUCOMPP &OpcodesFUCOMPP::operator=(const OpcodesFUCOMPP & other)
{
  OpcodesFUCOMPP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFUCOMPP::swap(OpcodesFUCOMPP & other)
{

}

OpcodesFUCOMPP::~OpcodesFUCOMPP()
{

}

void OpcodesFUCOMPP::accept(Visitor *v)
{
  v->visitOpcodesFUCOMPP(this);
}

OpcodesFUCOMPP *OpcodesFUCOMPP::clone() const
{
  return new OpcodesFUCOMPP(*this);
}



/********************   OpcodesFXAM    ********************/
OpcodesFXAM::OpcodesFXAM()
{

}

OpcodesFXAM::OpcodesFXAM(const OpcodesFXAM & other)
{

}

OpcodesFXAM &OpcodesFXAM::operator=(const OpcodesFXAM & other)
{
  OpcodesFXAM tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFXAM::swap(OpcodesFXAM & other)
{

}

OpcodesFXAM::~OpcodesFXAM()
{

}

void OpcodesFXAM::accept(Visitor *v)
{
  v->visitOpcodesFXAM(this);
}

OpcodesFXAM *OpcodesFXAM::clone() const
{
  return new OpcodesFXAM(*this);
}



/********************   OpcodesFXCH    ********************/
OpcodesFXCH::OpcodesFXCH()
{

}

OpcodesFXCH::OpcodesFXCH(const OpcodesFXCH & other)
{

}

OpcodesFXCH &OpcodesFXCH::operator=(const OpcodesFXCH & other)
{
  OpcodesFXCH tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFXCH::swap(OpcodesFXCH & other)
{

}

OpcodesFXCH::~OpcodesFXCH()
{

}

void OpcodesFXCH::accept(Visitor *v)
{
  v->visitOpcodesFXCH(this);
}

OpcodesFXCH *OpcodesFXCH::clone() const
{
  return new OpcodesFXCH(*this);
}



/********************   OpcodesFXTRACT    ********************/
OpcodesFXTRACT::OpcodesFXTRACT()
{

}

OpcodesFXTRACT::OpcodesFXTRACT(const OpcodesFXTRACT & other)
{

}

OpcodesFXTRACT &OpcodesFXTRACT::operator=(const OpcodesFXTRACT & other)
{
  OpcodesFXTRACT tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFXTRACT::swap(OpcodesFXTRACT & other)
{

}

OpcodesFXTRACT::~OpcodesFXTRACT()
{

}

void OpcodesFXTRACT::accept(Visitor *v)
{
  v->visitOpcodesFXTRACT(this);
}

OpcodesFXTRACT *OpcodesFXTRACT::clone() const
{
  return new OpcodesFXTRACT(*this);
}



/********************   OpcodesFYL2X    ********************/
OpcodesFYL2X::OpcodesFYL2X()
{

}

OpcodesFYL2X::OpcodesFYL2X(const OpcodesFYL2X & other)
{

}

OpcodesFYL2X &OpcodesFYL2X::operator=(const OpcodesFYL2X & other)
{
  OpcodesFYL2X tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFYL2X::swap(OpcodesFYL2X & other)
{

}

OpcodesFYL2X::~OpcodesFYL2X()
{

}

void OpcodesFYL2X::accept(Visitor *v)
{
  v->visitOpcodesFYL2X(this);
}

OpcodesFYL2X *OpcodesFYL2X::clone() const
{
  return new OpcodesFYL2X(*this);
}



/********************   OpcodesFYL2XP1    ********************/
OpcodesFYL2XP1::OpcodesFYL2XP1()
{

}

OpcodesFYL2XP1::OpcodesFYL2XP1(const OpcodesFYL2XP1 & other)
{

}

OpcodesFYL2XP1 &OpcodesFYL2XP1::operator=(const OpcodesFYL2XP1 & other)
{
  OpcodesFYL2XP1 tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesFYL2XP1::swap(OpcodesFYL2XP1 & other)
{

}

OpcodesFYL2XP1::~OpcodesFYL2XP1()
{

}

void OpcodesFYL2XP1::accept(Visitor *v)
{
  v->visitOpcodesFYL2XP1(this);
}

OpcodesFYL2XP1 *OpcodesFYL2XP1::clone() const
{
  return new OpcodesFYL2XP1(*this);
}



/********************   OpcodesHLT    ********************/
OpcodesHLT::OpcodesHLT()
{

}

OpcodesHLT::OpcodesHLT(const OpcodesHLT & other)
{

}

OpcodesHLT &OpcodesHLT::operator=(const OpcodesHLT & other)
{
  OpcodesHLT tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesHLT::swap(OpcodesHLT & other)
{

}

OpcodesHLT::~OpcodesHLT()
{

}

void OpcodesHLT::accept(Visitor *v)
{
  v->visitOpcodesHLT(this);
}

OpcodesHLT *OpcodesHLT::clone() const
{
  return new OpcodesHLT(*this);
}



/********************   OpcodesIDIV    ********************/
OpcodesIDIV::OpcodesIDIV()
{

}

OpcodesIDIV::OpcodesIDIV(const OpcodesIDIV & other)
{

}

OpcodesIDIV &OpcodesIDIV::operator=(const OpcodesIDIV & other)
{
  OpcodesIDIV tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesIDIV::swap(OpcodesIDIV & other)
{

}

OpcodesIDIV::~OpcodesIDIV()
{

}

void OpcodesIDIV::accept(Visitor *v)
{
  v->visitOpcodesIDIV(this);
}

OpcodesIDIV *OpcodesIDIV::clone() const
{
  return new OpcodesIDIV(*this);
}



/********************   OpcodesIMUL    ********************/
OpcodesIMUL::OpcodesIMUL()
{

}

OpcodesIMUL::OpcodesIMUL(const OpcodesIMUL & other)
{

}

OpcodesIMUL &OpcodesIMUL::operator=(const OpcodesIMUL & other)
{
  OpcodesIMUL tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesIMUL::swap(OpcodesIMUL & other)
{

}

OpcodesIMUL::~OpcodesIMUL()
{

}

void OpcodesIMUL::accept(Visitor *v)
{
  v->visitOpcodesIMUL(this);
}

OpcodesIMUL *OpcodesIMUL::clone() const
{
  return new OpcodesIMUL(*this);
}



/********************   OpcodesIN    ********************/
OpcodesIN::OpcodesIN()
{

}

OpcodesIN::OpcodesIN(const OpcodesIN & other)
{

}

OpcodesIN &OpcodesIN::operator=(const OpcodesIN & other)
{
  OpcodesIN tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesIN::swap(OpcodesIN & other)
{

}

OpcodesIN::~OpcodesIN()
{

}

void OpcodesIN::accept(Visitor *v)
{
  v->visitOpcodesIN(this);
}

OpcodesIN *OpcodesIN::clone() const
{
  return new OpcodesIN(*this);
}



/********************   OpcodesINC    ********************/
OpcodesINC::OpcodesINC()
{

}

OpcodesINC::OpcodesINC(const OpcodesINC & other)
{

}

OpcodesINC &OpcodesINC::operator=(const OpcodesINC & other)
{
  OpcodesINC tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesINC::swap(OpcodesINC & other)
{

}

OpcodesINC::~OpcodesINC()
{

}

void OpcodesINC::accept(Visitor *v)
{
  v->visitOpcodesINC(this);
}

OpcodesINC *OpcodesINC::clone() const
{
  return new OpcodesINC(*this);
}



/********************   OpcodesINCO    ********************/
OpcodesINCO::OpcodesINCO()
{

}

OpcodesINCO::OpcodesINCO(const OpcodesINCO & other)
{

}

OpcodesINCO &OpcodesINCO::operator=(const OpcodesINCO & other)
{
  OpcodesINCO tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesINCO::swap(OpcodesINCO & other)
{

}

OpcodesINCO::~OpcodesINCO()
{

}

void OpcodesINCO::accept(Visitor *v)
{
  v->visitOpcodesINCO(this);
}

OpcodesINCO *OpcodesINCO::clone() const
{
  return new OpcodesINCO(*this);
}



/********************   OpcodesINSB    ********************/
OpcodesINSB::OpcodesINSB()
{

}

OpcodesINSB::OpcodesINSB(const OpcodesINSB & other)
{

}

OpcodesINSB &OpcodesINSB::operator=(const OpcodesINSB & other)
{
  OpcodesINSB tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesINSB::swap(OpcodesINSB & other)
{

}

OpcodesINSB::~OpcodesINSB()
{

}

void OpcodesINSB::accept(Visitor *v)
{
  v->visitOpcodesINSB(this);
}

OpcodesINSB *OpcodesINSB::clone() const
{
  return new OpcodesINSB(*this);
}



/********************   OpcodesINSD    ********************/
OpcodesINSD::OpcodesINSD()
{

}

OpcodesINSD::OpcodesINSD(const OpcodesINSD & other)
{

}

OpcodesINSD &OpcodesINSD::operator=(const OpcodesINSD & other)
{
  OpcodesINSD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesINSD::swap(OpcodesINSD & other)
{

}

OpcodesINSD::~OpcodesINSD()
{

}

void OpcodesINSD::accept(Visitor *v)
{
  v->visitOpcodesINSD(this);
}

OpcodesINSD *OpcodesINSD::clone() const
{
  return new OpcodesINSD(*this);
}



/********************   OpcodesINSW    ********************/
OpcodesINSW::OpcodesINSW()
{

}

OpcodesINSW::OpcodesINSW(const OpcodesINSW & other)
{

}

OpcodesINSW &OpcodesINSW::operator=(const OpcodesINSW & other)
{
  OpcodesINSW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesINSW::swap(OpcodesINSW & other)
{

}

OpcodesINSW::~OpcodesINSW()
{

}

void OpcodesINSW::accept(Visitor *v)
{
  v->visitOpcodesINSW(this);
}

OpcodesINSW *OpcodesINSW::clone() const
{
  return new OpcodesINSW(*this);
}



/********************   OpcodesINT    ********************/
OpcodesINT::OpcodesINT()
{

}

OpcodesINT::OpcodesINT(const OpcodesINT & other)
{

}

OpcodesINT &OpcodesINT::operator=(const OpcodesINT & other)
{
  OpcodesINT tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesINT::swap(OpcodesINT & other)
{

}

OpcodesINT::~OpcodesINT()
{

}

void OpcodesINT::accept(Visitor *v)
{
  v->visitOpcodesINT(this);
}

OpcodesINT *OpcodesINT::clone() const
{
  return new OpcodesINT(*this);
}



/********************   OpcodesINT3    ********************/
OpcodesINT3::OpcodesINT3()
{

}

OpcodesINT3::OpcodesINT3(const OpcodesINT3 & other)
{

}

OpcodesINT3 &OpcodesINT3::operator=(const OpcodesINT3 & other)
{
  OpcodesINT3 tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesINT3::swap(OpcodesINT3 & other)
{

}

OpcodesINT3::~OpcodesINT3()
{

}

void OpcodesINT3::accept(Visitor *v)
{
  v->visitOpcodesINT3(this);
}

OpcodesINT3 *OpcodesINT3::clone() const
{
  return new OpcodesINT3(*this);
}



/********************   OpcodesINTO    ********************/
OpcodesINTO::OpcodesINTO()
{

}

OpcodesINTO::OpcodesINTO(const OpcodesINTO & other)
{

}

OpcodesINTO &OpcodesINTO::operator=(const OpcodesINTO & other)
{
  OpcodesINTO tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesINTO::swap(OpcodesINTO & other)
{

}

OpcodesINTO::~OpcodesINTO()
{

}

void OpcodesINTO::accept(Visitor *v)
{
  v->visitOpcodesINTO(this);
}

OpcodesINTO *OpcodesINTO::clone() const
{
  return new OpcodesINTO(*this);
}



/********************   OpcodesINVD    ********************/
OpcodesINVD::OpcodesINVD()
{

}

OpcodesINVD::OpcodesINVD(const OpcodesINVD & other)
{

}

OpcodesINVD &OpcodesINVD::operator=(const OpcodesINVD & other)
{
  OpcodesINVD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesINVD::swap(OpcodesINVD & other)
{

}

OpcodesINVD::~OpcodesINVD()
{

}

void OpcodesINVD::accept(Visitor *v)
{
  v->visitOpcodesINVD(this);
}

OpcodesINVD *OpcodesINVD::clone() const
{
  return new OpcodesINVD(*this);
}



/********************   OpcodesINVLPG    ********************/
OpcodesINVLPG::OpcodesINVLPG()
{

}

OpcodesINVLPG::OpcodesINVLPG(const OpcodesINVLPG & other)
{

}

OpcodesINVLPG &OpcodesINVLPG::operator=(const OpcodesINVLPG & other)
{
  OpcodesINVLPG tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesINVLPG::swap(OpcodesINVLPG & other)
{

}

OpcodesINVLPG::~OpcodesINVLPG()
{

}

void OpcodesINVLPG::accept(Visitor *v)
{
  v->visitOpcodesINVLPG(this);
}

OpcodesINVLPG *OpcodesINVLPG::clone() const
{
  return new OpcodesINVLPG(*this);
}



/********************   OpcodesIRET    ********************/
OpcodesIRET::OpcodesIRET()
{

}

OpcodesIRET::OpcodesIRET(const OpcodesIRET & other)
{

}

OpcodesIRET &OpcodesIRET::operator=(const OpcodesIRET & other)
{
  OpcodesIRET tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesIRET::swap(OpcodesIRET & other)
{

}

OpcodesIRET::~OpcodesIRET()
{

}

void OpcodesIRET::accept(Visitor *v)
{
  v->visitOpcodesIRET(this);
}

OpcodesIRET *OpcodesIRET::clone() const
{
  return new OpcodesIRET(*this);
}



/********************   OpcodesIRETD    ********************/
OpcodesIRETD::OpcodesIRETD()
{

}

OpcodesIRETD::OpcodesIRETD(const OpcodesIRETD & other)
{

}

OpcodesIRETD &OpcodesIRETD::operator=(const OpcodesIRETD & other)
{
  OpcodesIRETD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesIRETD::swap(OpcodesIRETD & other)
{

}

OpcodesIRETD::~OpcodesIRETD()
{

}

void OpcodesIRETD::accept(Visitor *v)
{
  v->visitOpcodesIRETD(this);
}

OpcodesIRETD *OpcodesIRETD::clone() const
{
  return new OpcodesIRETD(*this);
}



/********************   OpcodesIRETW    ********************/
OpcodesIRETW::OpcodesIRETW()
{

}

OpcodesIRETW::OpcodesIRETW(const OpcodesIRETW & other)
{

}

OpcodesIRETW &OpcodesIRETW::operator=(const OpcodesIRETW & other)
{
  OpcodesIRETW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesIRETW::swap(OpcodesIRETW & other)
{

}

OpcodesIRETW::~OpcodesIRETW()
{

}

void OpcodesIRETW::accept(Visitor *v)
{
  v->visitOpcodesIRETW(this);
}

OpcodesIRETW *OpcodesIRETW::clone() const
{
  return new OpcodesIRETW(*this);
}



/********************   OpcodesJA    ********************/
OpcodesJA::OpcodesJA()
{

}

OpcodesJA::OpcodesJA(const OpcodesJA & other)
{

}

OpcodesJA &OpcodesJA::operator=(const OpcodesJA & other)
{
  OpcodesJA tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJA::swap(OpcodesJA & other)
{

}

OpcodesJA::~OpcodesJA()
{

}

void OpcodesJA::accept(Visitor *v)
{
  v->visitOpcodesJA(this);
}

OpcodesJA *OpcodesJA::clone() const
{
  return new OpcodesJA(*this);
}



/********************   OpcodesJAE    ********************/
OpcodesJAE::OpcodesJAE()
{

}

OpcodesJAE::OpcodesJAE(const OpcodesJAE & other)
{

}

OpcodesJAE &OpcodesJAE::operator=(const OpcodesJAE & other)
{
  OpcodesJAE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJAE::swap(OpcodesJAE & other)
{

}

OpcodesJAE::~OpcodesJAE()
{

}

void OpcodesJAE::accept(Visitor *v)
{
  v->visitOpcodesJAE(this);
}

OpcodesJAE *OpcodesJAE::clone() const
{
  return new OpcodesJAE(*this);
}



/********************   OpcodesJB    ********************/
OpcodesJB::OpcodesJB()
{

}

OpcodesJB::OpcodesJB(const OpcodesJB & other)
{

}

OpcodesJB &OpcodesJB::operator=(const OpcodesJB & other)
{
  OpcodesJB tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJB::swap(OpcodesJB & other)
{

}

OpcodesJB::~OpcodesJB()
{

}

void OpcodesJB::accept(Visitor *v)
{
  v->visitOpcodesJB(this);
}

OpcodesJB *OpcodesJB::clone() const
{
  return new OpcodesJB(*this);
}



/********************   OpcodesJBE    ********************/
OpcodesJBE::OpcodesJBE()
{

}

OpcodesJBE::OpcodesJBE(const OpcodesJBE & other)
{

}

OpcodesJBE &OpcodesJBE::operator=(const OpcodesJBE & other)
{
  OpcodesJBE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJBE::swap(OpcodesJBE & other)
{

}

OpcodesJBE::~OpcodesJBE()
{

}

void OpcodesJBE::accept(Visitor *v)
{
  v->visitOpcodesJBE(this);
}

OpcodesJBE *OpcodesJBE::clone() const
{
  return new OpcodesJBE(*this);
}



/********************   OpcodesJC    ********************/
OpcodesJC::OpcodesJC()
{

}

OpcodesJC::OpcodesJC(const OpcodesJC & other)
{

}

OpcodesJC &OpcodesJC::operator=(const OpcodesJC & other)
{
  OpcodesJC tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJC::swap(OpcodesJC & other)
{

}

OpcodesJC::~OpcodesJC()
{

}

void OpcodesJC::accept(Visitor *v)
{
  v->visitOpcodesJC(this);
}

OpcodesJC *OpcodesJC::clone() const
{
  return new OpcodesJC(*this);
}



/********************   OpcodesJCXZ    ********************/
OpcodesJCXZ::OpcodesJCXZ()
{

}

OpcodesJCXZ::OpcodesJCXZ(const OpcodesJCXZ & other)
{

}

OpcodesJCXZ &OpcodesJCXZ::operator=(const OpcodesJCXZ & other)
{
  OpcodesJCXZ tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJCXZ::swap(OpcodesJCXZ & other)
{

}

OpcodesJCXZ::~OpcodesJCXZ()
{

}

void OpcodesJCXZ::accept(Visitor *v)
{
  v->visitOpcodesJCXZ(this);
}

OpcodesJCXZ *OpcodesJCXZ::clone() const
{
  return new OpcodesJCXZ(*this);
}



/********************   OpcodesJE    ********************/
OpcodesJE::OpcodesJE()
{

}

OpcodesJE::OpcodesJE(const OpcodesJE & other)
{

}

OpcodesJE &OpcodesJE::operator=(const OpcodesJE & other)
{
  OpcodesJE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJE::swap(OpcodesJE & other)
{

}

OpcodesJE::~OpcodesJE()
{

}

void OpcodesJE::accept(Visitor *v)
{
  v->visitOpcodesJE(this);
}

OpcodesJE *OpcodesJE::clone() const
{
  return new OpcodesJE(*this);
}



/********************   OpcodesJECXZ    ********************/
OpcodesJECXZ::OpcodesJECXZ()
{

}

OpcodesJECXZ::OpcodesJECXZ(const OpcodesJECXZ & other)
{

}

OpcodesJECXZ &OpcodesJECXZ::operator=(const OpcodesJECXZ & other)
{
  OpcodesJECXZ tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJECXZ::swap(OpcodesJECXZ & other)
{

}

OpcodesJECXZ::~OpcodesJECXZ()
{

}

void OpcodesJECXZ::accept(Visitor *v)
{
  v->visitOpcodesJECXZ(this);
}

OpcodesJECXZ *OpcodesJECXZ::clone() const
{
  return new OpcodesJECXZ(*this);
}



/********************   OpcodesJG    ********************/
OpcodesJG::OpcodesJG()
{

}

OpcodesJG::OpcodesJG(const OpcodesJG & other)
{

}

OpcodesJG &OpcodesJG::operator=(const OpcodesJG & other)
{
  OpcodesJG tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJG::swap(OpcodesJG & other)
{

}

OpcodesJG::~OpcodesJG()
{

}

void OpcodesJG::accept(Visitor *v)
{
  v->visitOpcodesJG(this);
}

OpcodesJG *OpcodesJG::clone() const
{
  return new OpcodesJG(*this);
}



/********************   OpcodesJGE    ********************/
OpcodesJGE::OpcodesJGE()
{

}

OpcodesJGE::OpcodesJGE(const OpcodesJGE & other)
{

}

OpcodesJGE &OpcodesJGE::operator=(const OpcodesJGE & other)
{
  OpcodesJGE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJGE::swap(OpcodesJGE & other)
{

}

OpcodesJGE::~OpcodesJGE()
{

}

void OpcodesJGE::accept(Visitor *v)
{
  v->visitOpcodesJGE(this);
}

OpcodesJGE *OpcodesJGE::clone() const
{
  return new OpcodesJGE(*this);
}



/********************   OpcodesJL    ********************/
OpcodesJL::OpcodesJL()
{

}

OpcodesJL::OpcodesJL(const OpcodesJL & other)
{

}

OpcodesJL &OpcodesJL::operator=(const OpcodesJL & other)
{
  OpcodesJL tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJL::swap(OpcodesJL & other)
{

}

OpcodesJL::~OpcodesJL()
{

}

void OpcodesJL::accept(Visitor *v)
{
  v->visitOpcodesJL(this);
}

OpcodesJL *OpcodesJL::clone() const
{
  return new OpcodesJL(*this);
}



/********************   OpcodesJLE    ********************/
OpcodesJLE::OpcodesJLE()
{

}

OpcodesJLE::OpcodesJLE(const OpcodesJLE & other)
{

}

OpcodesJLE &OpcodesJLE::operator=(const OpcodesJLE & other)
{
  OpcodesJLE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJLE::swap(OpcodesJLE & other)
{

}

OpcodesJLE::~OpcodesJLE()
{

}

void OpcodesJLE::accept(Visitor *v)
{
  v->visitOpcodesJLE(this);
}

OpcodesJLE *OpcodesJLE::clone() const
{
  return new OpcodesJLE(*this);
}



/********************   OpcodesJMP    ********************/
OpcodesJMP::OpcodesJMP()
{

}

OpcodesJMP::OpcodesJMP(const OpcodesJMP & other)
{

}

OpcodesJMP &OpcodesJMP::operator=(const OpcodesJMP & other)
{
  OpcodesJMP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJMP::swap(OpcodesJMP & other)
{

}

OpcodesJMP::~OpcodesJMP()
{

}

void OpcodesJMP::accept(Visitor *v)
{
  v->visitOpcodesJMP(this);
}

OpcodesJMP *OpcodesJMP::clone() const
{
  return new OpcodesJMP(*this);
}



/********************   OpcodesJNA    ********************/
OpcodesJNA::OpcodesJNA()
{

}

OpcodesJNA::OpcodesJNA(const OpcodesJNA & other)
{

}

OpcodesJNA &OpcodesJNA::operator=(const OpcodesJNA & other)
{
  OpcodesJNA tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJNA::swap(OpcodesJNA & other)
{

}

OpcodesJNA::~OpcodesJNA()
{

}

void OpcodesJNA::accept(Visitor *v)
{
  v->visitOpcodesJNA(this);
}

OpcodesJNA *OpcodesJNA::clone() const
{
  return new OpcodesJNA(*this);
}



/********************   OpcodesJNAE    ********************/
OpcodesJNAE::OpcodesJNAE()
{

}

OpcodesJNAE::OpcodesJNAE(const OpcodesJNAE & other)
{

}

OpcodesJNAE &OpcodesJNAE::operator=(const OpcodesJNAE & other)
{
  OpcodesJNAE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJNAE::swap(OpcodesJNAE & other)
{

}

OpcodesJNAE::~OpcodesJNAE()
{

}

void OpcodesJNAE::accept(Visitor *v)
{
  v->visitOpcodesJNAE(this);
}

OpcodesJNAE *OpcodesJNAE::clone() const
{
  return new OpcodesJNAE(*this);
}



/********************   OpcodesJNB    ********************/
OpcodesJNB::OpcodesJNB()
{

}

OpcodesJNB::OpcodesJNB(const OpcodesJNB & other)
{

}

OpcodesJNB &OpcodesJNB::operator=(const OpcodesJNB & other)
{
  OpcodesJNB tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJNB::swap(OpcodesJNB & other)
{

}

OpcodesJNB::~OpcodesJNB()
{

}

void OpcodesJNB::accept(Visitor *v)
{
  v->visitOpcodesJNB(this);
}

OpcodesJNB *OpcodesJNB::clone() const
{
  return new OpcodesJNB(*this);
}



/********************   OpcodesJNBE    ********************/
OpcodesJNBE::OpcodesJNBE()
{

}

OpcodesJNBE::OpcodesJNBE(const OpcodesJNBE & other)
{

}

OpcodesJNBE &OpcodesJNBE::operator=(const OpcodesJNBE & other)
{
  OpcodesJNBE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJNBE::swap(OpcodesJNBE & other)
{

}

OpcodesJNBE::~OpcodesJNBE()
{

}

void OpcodesJNBE::accept(Visitor *v)
{
  v->visitOpcodesJNBE(this);
}

OpcodesJNBE *OpcodesJNBE::clone() const
{
  return new OpcodesJNBE(*this);
}



/********************   OpcodesJNC    ********************/
OpcodesJNC::OpcodesJNC()
{

}

OpcodesJNC::OpcodesJNC(const OpcodesJNC & other)
{

}

OpcodesJNC &OpcodesJNC::operator=(const OpcodesJNC & other)
{
  OpcodesJNC tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJNC::swap(OpcodesJNC & other)
{

}

OpcodesJNC::~OpcodesJNC()
{

}

void OpcodesJNC::accept(Visitor *v)
{
  v->visitOpcodesJNC(this);
}

OpcodesJNC *OpcodesJNC::clone() const
{
  return new OpcodesJNC(*this);
}



/********************   OpcodesJNE    ********************/
OpcodesJNE::OpcodesJNE()
{

}

OpcodesJNE::OpcodesJNE(const OpcodesJNE & other)
{

}

OpcodesJNE &OpcodesJNE::operator=(const OpcodesJNE & other)
{
  OpcodesJNE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJNE::swap(OpcodesJNE & other)
{

}

OpcodesJNE::~OpcodesJNE()
{

}

void OpcodesJNE::accept(Visitor *v)
{
  v->visitOpcodesJNE(this);
}

OpcodesJNE *OpcodesJNE::clone() const
{
  return new OpcodesJNE(*this);
}



/********************   OpcodesJNG    ********************/
OpcodesJNG::OpcodesJNG()
{

}

OpcodesJNG::OpcodesJNG(const OpcodesJNG & other)
{

}

OpcodesJNG &OpcodesJNG::operator=(const OpcodesJNG & other)
{
  OpcodesJNG tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJNG::swap(OpcodesJNG & other)
{

}

OpcodesJNG::~OpcodesJNG()
{

}

void OpcodesJNG::accept(Visitor *v)
{
  v->visitOpcodesJNG(this);
}

OpcodesJNG *OpcodesJNG::clone() const
{
  return new OpcodesJNG(*this);
}



/********************   OpcodesJNGE    ********************/
OpcodesJNGE::OpcodesJNGE()
{

}

OpcodesJNGE::OpcodesJNGE(const OpcodesJNGE & other)
{

}

OpcodesJNGE &OpcodesJNGE::operator=(const OpcodesJNGE & other)
{
  OpcodesJNGE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJNGE::swap(OpcodesJNGE & other)
{

}

OpcodesJNGE::~OpcodesJNGE()
{

}

void OpcodesJNGE::accept(Visitor *v)
{
  v->visitOpcodesJNGE(this);
}

OpcodesJNGE *OpcodesJNGE::clone() const
{
  return new OpcodesJNGE(*this);
}



/********************   OpcodesJNL    ********************/
OpcodesJNL::OpcodesJNL()
{

}

OpcodesJNL::OpcodesJNL(const OpcodesJNL & other)
{

}

OpcodesJNL &OpcodesJNL::operator=(const OpcodesJNL & other)
{
  OpcodesJNL tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJNL::swap(OpcodesJNL & other)
{

}

OpcodesJNL::~OpcodesJNL()
{

}

void OpcodesJNL::accept(Visitor *v)
{
  v->visitOpcodesJNL(this);
}

OpcodesJNL *OpcodesJNL::clone() const
{
  return new OpcodesJNL(*this);
}



/********************   OpcodesJNLE    ********************/
OpcodesJNLE::OpcodesJNLE()
{

}

OpcodesJNLE::OpcodesJNLE(const OpcodesJNLE & other)
{

}

OpcodesJNLE &OpcodesJNLE::operator=(const OpcodesJNLE & other)
{
  OpcodesJNLE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJNLE::swap(OpcodesJNLE & other)
{

}

OpcodesJNLE::~OpcodesJNLE()
{

}

void OpcodesJNLE::accept(Visitor *v)
{
  v->visitOpcodesJNLE(this);
}

OpcodesJNLE *OpcodesJNLE::clone() const
{
  return new OpcodesJNLE(*this);
}



/********************   OpcodesJNO    ********************/
OpcodesJNO::OpcodesJNO()
{

}

OpcodesJNO::OpcodesJNO(const OpcodesJNO & other)
{

}

OpcodesJNO &OpcodesJNO::operator=(const OpcodesJNO & other)
{
  OpcodesJNO tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJNO::swap(OpcodesJNO & other)
{

}

OpcodesJNO::~OpcodesJNO()
{

}

void OpcodesJNO::accept(Visitor *v)
{
  v->visitOpcodesJNO(this);
}

OpcodesJNO *OpcodesJNO::clone() const
{
  return new OpcodesJNO(*this);
}



/********************   OpcodesJNP    ********************/
OpcodesJNP::OpcodesJNP()
{

}

OpcodesJNP::OpcodesJNP(const OpcodesJNP & other)
{

}

OpcodesJNP &OpcodesJNP::operator=(const OpcodesJNP & other)
{
  OpcodesJNP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJNP::swap(OpcodesJNP & other)
{

}

OpcodesJNP::~OpcodesJNP()
{

}

void OpcodesJNP::accept(Visitor *v)
{
  v->visitOpcodesJNP(this);
}

OpcodesJNP *OpcodesJNP::clone() const
{
  return new OpcodesJNP(*this);
}



/********************   OpcodesJNS    ********************/
OpcodesJNS::OpcodesJNS()
{

}

OpcodesJNS::OpcodesJNS(const OpcodesJNS & other)
{

}

OpcodesJNS &OpcodesJNS::operator=(const OpcodesJNS & other)
{
  OpcodesJNS tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJNS::swap(OpcodesJNS & other)
{

}

OpcodesJNS::~OpcodesJNS()
{

}

void OpcodesJNS::accept(Visitor *v)
{
  v->visitOpcodesJNS(this);
}

OpcodesJNS *OpcodesJNS::clone() const
{
  return new OpcodesJNS(*this);
}



/********************   OpcodesJNZ    ********************/
OpcodesJNZ::OpcodesJNZ()
{

}

OpcodesJNZ::OpcodesJNZ(const OpcodesJNZ & other)
{

}

OpcodesJNZ &OpcodesJNZ::operator=(const OpcodesJNZ & other)
{
  OpcodesJNZ tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJNZ::swap(OpcodesJNZ & other)
{

}

OpcodesJNZ::~OpcodesJNZ()
{

}

void OpcodesJNZ::accept(Visitor *v)
{
  v->visitOpcodesJNZ(this);
}

OpcodesJNZ *OpcodesJNZ::clone() const
{
  return new OpcodesJNZ(*this);
}



/********************   OpcodesJO    ********************/
OpcodesJO::OpcodesJO()
{

}

OpcodesJO::OpcodesJO(const OpcodesJO & other)
{

}

OpcodesJO &OpcodesJO::operator=(const OpcodesJO & other)
{
  OpcodesJO tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJO::swap(OpcodesJO & other)
{

}

OpcodesJO::~OpcodesJO()
{

}

void OpcodesJO::accept(Visitor *v)
{
  v->visitOpcodesJO(this);
}

OpcodesJO *OpcodesJO::clone() const
{
  return new OpcodesJO(*this);
}



/********************   OpcodesJP    ********************/
OpcodesJP::OpcodesJP()
{

}

OpcodesJP::OpcodesJP(const OpcodesJP & other)
{

}

OpcodesJP &OpcodesJP::operator=(const OpcodesJP & other)
{
  OpcodesJP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJP::swap(OpcodesJP & other)
{

}

OpcodesJP::~OpcodesJP()
{

}

void OpcodesJP::accept(Visitor *v)
{
  v->visitOpcodesJP(this);
}

OpcodesJP *OpcodesJP::clone() const
{
  return new OpcodesJP(*this);
}



/********************   OpcodesJPE    ********************/
OpcodesJPE::OpcodesJPE()
{

}

OpcodesJPE::OpcodesJPE(const OpcodesJPE & other)
{

}

OpcodesJPE &OpcodesJPE::operator=(const OpcodesJPE & other)
{
  OpcodesJPE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJPE::swap(OpcodesJPE & other)
{

}

OpcodesJPE::~OpcodesJPE()
{

}

void OpcodesJPE::accept(Visitor *v)
{
  v->visitOpcodesJPE(this);
}

OpcodesJPE *OpcodesJPE::clone() const
{
  return new OpcodesJPE(*this);
}



/********************   OpcodesJPO    ********************/
OpcodesJPO::OpcodesJPO()
{

}

OpcodesJPO::OpcodesJPO(const OpcodesJPO & other)
{

}

OpcodesJPO &OpcodesJPO::operator=(const OpcodesJPO & other)
{
  OpcodesJPO tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJPO::swap(OpcodesJPO & other)
{

}

OpcodesJPO::~OpcodesJPO()
{

}

void OpcodesJPO::accept(Visitor *v)
{
  v->visitOpcodesJPO(this);
}

OpcodesJPO *OpcodesJPO::clone() const
{
  return new OpcodesJPO(*this);
}



/********************   OpcodesJS    ********************/
OpcodesJS::OpcodesJS()
{

}

OpcodesJS::OpcodesJS(const OpcodesJS & other)
{

}

OpcodesJS &OpcodesJS::operator=(const OpcodesJS & other)
{
  OpcodesJS tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJS::swap(OpcodesJS & other)
{

}

OpcodesJS::~OpcodesJS()
{

}

void OpcodesJS::accept(Visitor *v)
{
  v->visitOpcodesJS(this);
}

OpcodesJS *OpcodesJS::clone() const
{
  return new OpcodesJS(*this);
}



/********************   OpcodesJZ    ********************/
OpcodesJZ::OpcodesJZ()
{

}

OpcodesJZ::OpcodesJZ(const OpcodesJZ & other)
{

}

OpcodesJZ &OpcodesJZ::operator=(const OpcodesJZ & other)
{
  OpcodesJZ tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesJZ::swap(OpcodesJZ & other)
{

}

OpcodesJZ::~OpcodesJZ()
{

}

void OpcodesJZ::accept(Visitor *v)
{
  v->visitOpcodesJZ(this);
}

OpcodesJZ *OpcodesJZ::clone() const
{
  return new OpcodesJZ(*this);
}



/********************   OpcodesLAHF    ********************/
OpcodesLAHF::OpcodesLAHF()
{

}

OpcodesLAHF::OpcodesLAHF(const OpcodesLAHF & other)
{

}

OpcodesLAHF &OpcodesLAHF::operator=(const OpcodesLAHF & other)
{
  OpcodesLAHF tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLAHF::swap(OpcodesLAHF & other)
{

}

OpcodesLAHF::~OpcodesLAHF()
{

}

void OpcodesLAHF::accept(Visitor *v)
{
  v->visitOpcodesLAHF(this);
}

OpcodesLAHF *OpcodesLAHF::clone() const
{
  return new OpcodesLAHF(*this);
}



/********************   OpcodesLAR    ********************/
OpcodesLAR::OpcodesLAR()
{

}

OpcodesLAR::OpcodesLAR(const OpcodesLAR & other)
{

}

OpcodesLAR &OpcodesLAR::operator=(const OpcodesLAR & other)
{
  OpcodesLAR tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLAR::swap(OpcodesLAR & other)
{

}

OpcodesLAR::~OpcodesLAR()
{

}

void OpcodesLAR::accept(Visitor *v)
{
  v->visitOpcodesLAR(this);
}

OpcodesLAR *OpcodesLAR::clone() const
{
  return new OpcodesLAR(*this);
}



/********************   OpcodesLDS    ********************/
OpcodesLDS::OpcodesLDS()
{

}

OpcodesLDS::OpcodesLDS(const OpcodesLDS & other)
{

}

OpcodesLDS &OpcodesLDS::operator=(const OpcodesLDS & other)
{
  OpcodesLDS tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLDS::swap(OpcodesLDS & other)
{

}

OpcodesLDS::~OpcodesLDS()
{

}

void OpcodesLDS::accept(Visitor *v)
{
  v->visitOpcodesLDS(this);
}

OpcodesLDS *OpcodesLDS::clone() const
{
  return new OpcodesLDS(*this);
}



/********************   OpcodesLEA    ********************/
OpcodesLEA::OpcodesLEA()
{

}

OpcodesLEA::OpcodesLEA(const OpcodesLEA & other)
{

}

OpcodesLEA &OpcodesLEA::operator=(const OpcodesLEA & other)
{
  OpcodesLEA tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLEA::swap(OpcodesLEA & other)
{

}

OpcodesLEA::~OpcodesLEA()
{

}

void OpcodesLEA::accept(Visitor *v)
{
  v->visitOpcodesLEA(this);
}

OpcodesLEA *OpcodesLEA::clone() const
{
  return new OpcodesLEA(*this);
}



/********************   OpcodesLEAVE    ********************/
OpcodesLEAVE::OpcodesLEAVE()
{

}

OpcodesLEAVE::OpcodesLEAVE(const OpcodesLEAVE & other)
{

}

OpcodesLEAVE &OpcodesLEAVE::operator=(const OpcodesLEAVE & other)
{
  OpcodesLEAVE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLEAVE::swap(OpcodesLEAVE & other)
{

}

OpcodesLEAVE::~OpcodesLEAVE()
{

}

void OpcodesLEAVE::accept(Visitor *v)
{
  v->visitOpcodesLEAVE(this);
}

OpcodesLEAVE *OpcodesLEAVE::clone() const
{
  return new OpcodesLEAVE(*this);
}



/********************   OpcodesLES    ********************/
OpcodesLES::OpcodesLES()
{

}

OpcodesLES::OpcodesLES(const OpcodesLES & other)
{

}

OpcodesLES &OpcodesLES::operator=(const OpcodesLES & other)
{
  OpcodesLES tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLES::swap(OpcodesLES & other)
{

}

OpcodesLES::~OpcodesLES()
{

}

void OpcodesLES::accept(Visitor *v)
{
  v->visitOpcodesLES(this);
}

OpcodesLES *OpcodesLES::clone() const
{
  return new OpcodesLES(*this);
}



/********************   OpcodesLFS    ********************/
OpcodesLFS::OpcodesLFS()
{

}

OpcodesLFS::OpcodesLFS(const OpcodesLFS & other)
{

}

OpcodesLFS &OpcodesLFS::operator=(const OpcodesLFS & other)
{
  OpcodesLFS tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLFS::swap(OpcodesLFS & other)
{

}

OpcodesLFS::~OpcodesLFS()
{

}

void OpcodesLFS::accept(Visitor *v)
{
  v->visitOpcodesLFS(this);
}

OpcodesLFS *OpcodesLFS::clone() const
{
  return new OpcodesLFS(*this);
}



/********************   OpcodesLGDT    ********************/
OpcodesLGDT::OpcodesLGDT()
{

}

OpcodesLGDT::OpcodesLGDT(const OpcodesLGDT & other)
{

}

OpcodesLGDT &OpcodesLGDT::operator=(const OpcodesLGDT & other)
{
  OpcodesLGDT tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLGDT::swap(OpcodesLGDT & other)
{

}

OpcodesLGDT::~OpcodesLGDT()
{

}

void OpcodesLGDT::accept(Visitor *v)
{
  v->visitOpcodesLGDT(this);
}

OpcodesLGDT *OpcodesLGDT::clone() const
{
  return new OpcodesLGDT(*this);
}



/********************   OpcodesLGS    ********************/
OpcodesLGS::OpcodesLGS()
{

}

OpcodesLGS::OpcodesLGS(const OpcodesLGS & other)
{

}

OpcodesLGS &OpcodesLGS::operator=(const OpcodesLGS & other)
{
  OpcodesLGS tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLGS::swap(OpcodesLGS & other)
{

}

OpcodesLGS::~OpcodesLGS()
{

}

void OpcodesLGS::accept(Visitor *v)
{
  v->visitOpcodesLGS(this);
}

OpcodesLGS *OpcodesLGS::clone() const
{
  return new OpcodesLGS(*this);
}



/********************   OpcodesLIDT    ********************/
OpcodesLIDT::OpcodesLIDT()
{

}

OpcodesLIDT::OpcodesLIDT(const OpcodesLIDT & other)
{

}

OpcodesLIDT &OpcodesLIDT::operator=(const OpcodesLIDT & other)
{
  OpcodesLIDT tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLIDT::swap(OpcodesLIDT & other)
{

}

OpcodesLIDT::~OpcodesLIDT()
{

}

void OpcodesLIDT::accept(Visitor *v)
{
  v->visitOpcodesLIDT(this);
}

OpcodesLIDT *OpcodesLIDT::clone() const
{
  return new OpcodesLIDT(*this);
}



/********************   OpcodesLLDT    ********************/
OpcodesLLDT::OpcodesLLDT()
{

}

OpcodesLLDT::OpcodesLLDT(const OpcodesLLDT & other)
{

}

OpcodesLLDT &OpcodesLLDT::operator=(const OpcodesLLDT & other)
{
  OpcodesLLDT tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLLDT::swap(OpcodesLLDT & other)
{

}

OpcodesLLDT::~OpcodesLLDT()
{

}

void OpcodesLLDT::accept(Visitor *v)
{
  v->visitOpcodesLLDT(this);
}

OpcodesLLDT *OpcodesLLDT::clone() const
{
  return new OpcodesLLDT(*this);
}



/********************   OpcodesLMSW    ********************/
OpcodesLMSW::OpcodesLMSW()
{

}

OpcodesLMSW::OpcodesLMSW(const OpcodesLMSW & other)
{

}

OpcodesLMSW &OpcodesLMSW::operator=(const OpcodesLMSW & other)
{
  OpcodesLMSW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLMSW::swap(OpcodesLMSW & other)
{

}

OpcodesLMSW::~OpcodesLMSW()
{

}

void OpcodesLMSW::accept(Visitor *v)
{
  v->visitOpcodesLMSW(this);
}

OpcodesLMSW *OpcodesLMSW::clone() const
{
  return new OpcodesLMSW(*this);
}



/********************   OpcodesLOCK    ********************/
OpcodesLOCK::OpcodesLOCK()
{

}

OpcodesLOCK::OpcodesLOCK(const OpcodesLOCK & other)
{

}

OpcodesLOCK &OpcodesLOCK::operator=(const OpcodesLOCK & other)
{
  OpcodesLOCK tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLOCK::swap(OpcodesLOCK & other)
{

}

OpcodesLOCK::~OpcodesLOCK()
{

}

void OpcodesLOCK::accept(Visitor *v)
{
  v->visitOpcodesLOCK(this);
}

OpcodesLOCK *OpcodesLOCK::clone() const
{
  return new OpcodesLOCK(*this);
}



/********************   OpcodesLODSB    ********************/
OpcodesLODSB::OpcodesLODSB()
{

}

OpcodesLODSB::OpcodesLODSB(const OpcodesLODSB & other)
{

}

OpcodesLODSB &OpcodesLODSB::operator=(const OpcodesLODSB & other)
{
  OpcodesLODSB tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLODSB::swap(OpcodesLODSB & other)
{

}

OpcodesLODSB::~OpcodesLODSB()
{

}

void OpcodesLODSB::accept(Visitor *v)
{
  v->visitOpcodesLODSB(this);
}

OpcodesLODSB *OpcodesLODSB::clone() const
{
  return new OpcodesLODSB(*this);
}



/********************   OpcodesLODSD    ********************/
OpcodesLODSD::OpcodesLODSD()
{

}

OpcodesLODSD::OpcodesLODSD(const OpcodesLODSD & other)
{

}

OpcodesLODSD &OpcodesLODSD::operator=(const OpcodesLODSD & other)
{
  OpcodesLODSD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLODSD::swap(OpcodesLODSD & other)
{

}

OpcodesLODSD::~OpcodesLODSD()
{

}

void OpcodesLODSD::accept(Visitor *v)
{
  v->visitOpcodesLODSD(this);
}

OpcodesLODSD *OpcodesLODSD::clone() const
{
  return new OpcodesLODSD(*this);
}



/********************   OpcodesLODSW    ********************/
OpcodesLODSW::OpcodesLODSW()
{

}

OpcodesLODSW::OpcodesLODSW(const OpcodesLODSW & other)
{

}

OpcodesLODSW &OpcodesLODSW::operator=(const OpcodesLODSW & other)
{
  OpcodesLODSW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLODSW::swap(OpcodesLODSW & other)
{

}

OpcodesLODSW::~OpcodesLODSW()
{

}

void OpcodesLODSW::accept(Visitor *v)
{
  v->visitOpcodesLODSW(this);
}

OpcodesLODSW *OpcodesLODSW::clone() const
{
  return new OpcodesLODSW(*this);
}



/********************   OpcodesLOOP    ********************/
OpcodesLOOP::OpcodesLOOP()
{

}

OpcodesLOOP::OpcodesLOOP(const OpcodesLOOP & other)
{

}

OpcodesLOOP &OpcodesLOOP::operator=(const OpcodesLOOP & other)
{
  OpcodesLOOP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLOOP::swap(OpcodesLOOP & other)
{

}

OpcodesLOOP::~OpcodesLOOP()
{

}

void OpcodesLOOP::accept(Visitor *v)
{
  v->visitOpcodesLOOP(this);
}

OpcodesLOOP *OpcodesLOOP::clone() const
{
  return new OpcodesLOOP(*this);
}



/********************   OpcodesLOOPE    ********************/
OpcodesLOOPE::OpcodesLOOPE()
{

}

OpcodesLOOPE::OpcodesLOOPE(const OpcodesLOOPE & other)
{

}

OpcodesLOOPE &OpcodesLOOPE::operator=(const OpcodesLOOPE & other)
{
  OpcodesLOOPE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLOOPE::swap(OpcodesLOOPE & other)
{

}

OpcodesLOOPE::~OpcodesLOOPE()
{

}

void OpcodesLOOPE::accept(Visitor *v)
{
  v->visitOpcodesLOOPE(this);
}

OpcodesLOOPE *OpcodesLOOPE::clone() const
{
  return new OpcodesLOOPE(*this);
}



/********************   OpcodesLOOPNE    ********************/
OpcodesLOOPNE::OpcodesLOOPNE()
{

}

OpcodesLOOPNE::OpcodesLOOPNE(const OpcodesLOOPNE & other)
{

}

OpcodesLOOPNE &OpcodesLOOPNE::operator=(const OpcodesLOOPNE & other)
{
  OpcodesLOOPNE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLOOPNE::swap(OpcodesLOOPNE & other)
{

}

OpcodesLOOPNE::~OpcodesLOOPNE()
{

}

void OpcodesLOOPNE::accept(Visitor *v)
{
  v->visitOpcodesLOOPNE(this);
}

OpcodesLOOPNE *OpcodesLOOPNE::clone() const
{
  return new OpcodesLOOPNE(*this);
}



/********************   OpcodesLOOPNZ    ********************/
OpcodesLOOPNZ::OpcodesLOOPNZ()
{

}

OpcodesLOOPNZ::OpcodesLOOPNZ(const OpcodesLOOPNZ & other)
{

}

OpcodesLOOPNZ &OpcodesLOOPNZ::operator=(const OpcodesLOOPNZ & other)
{
  OpcodesLOOPNZ tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLOOPNZ::swap(OpcodesLOOPNZ & other)
{

}

OpcodesLOOPNZ::~OpcodesLOOPNZ()
{

}

void OpcodesLOOPNZ::accept(Visitor *v)
{
  v->visitOpcodesLOOPNZ(this);
}

OpcodesLOOPNZ *OpcodesLOOPNZ::clone() const
{
  return new OpcodesLOOPNZ(*this);
}



/********************   OpcodesLOOPZ    ********************/
OpcodesLOOPZ::OpcodesLOOPZ()
{

}

OpcodesLOOPZ::OpcodesLOOPZ(const OpcodesLOOPZ & other)
{

}

OpcodesLOOPZ &OpcodesLOOPZ::operator=(const OpcodesLOOPZ & other)
{
  OpcodesLOOPZ tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLOOPZ::swap(OpcodesLOOPZ & other)
{

}

OpcodesLOOPZ::~OpcodesLOOPZ()
{

}

void OpcodesLOOPZ::accept(Visitor *v)
{
  v->visitOpcodesLOOPZ(this);
}

OpcodesLOOPZ *OpcodesLOOPZ::clone() const
{
  return new OpcodesLOOPZ(*this);
}



/********************   OpcodesLSL    ********************/
OpcodesLSL::OpcodesLSL()
{

}

OpcodesLSL::OpcodesLSL(const OpcodesLSL & other)
{

}

OpcodesLSL &OpcodesLSL::operator=(const OpcodesLSL & other)
{
  OpcodesLSL tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLSL::swap(OpcodesLSL & other)
{

}

OpcodesLSL::~OpcodesLSL()
{

}

void OpcodesLSL::accept(Visitor *v)
{
  v->visitOpcodesLSL(this);
}

OpcodesLSL *OpcodesLSL::clone() const
{
  return new OpcodesLSL(*this);
}



/********************   OpcodesLSS    ********************/
OpcodesLSS::OpcodesLSS()
{

}

OpcodesLSS::OpcodesLSS(const OpcodesLSS & other)
{

}

OpcodesLSS &OpcodesLSS::operator=(const OpcodesLSS & other)
{
  OpcodesLSS tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLSS::swap(OpcodesLSS & other)
{

}

OpcodesLSS::~OpcodesLSS()
{

}

void OpcodesLSS::accept(Visitor *v)
{
  v->visitOpcodesLSS(this);
}

OpcodesLSS *OpcodesLSS::clone() const
{
  return new OpcodesLSS(*this);
}



/********************   OpcodesLTR    ********************/
OpcodesLTR::OpcodesLTR()
{

}

OpcodesLTR::OpcodesLTR(const OpcodesLTR & other)
{

}

OpcodesLTR &OpcodesLTR::operator=(const OpcodesLTR & other)
{
  OpcodesLTR tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesLTR::swap(OpcodesLTR & other)
{

}

OpcodesLTR::~OpcodesLTR()
{

}

void OpcodesLTR::accept(Visitor *v)
{
  v->visitOpcodesLTR(this);
}

OpcodesLTR *OpcodesLTR::clone() const
{
  return new OpcodesLTR(*this);
}



/********************   OpcodesMOV    ********************/
OpcodesMOV::OpcodesMOV()
{

}

OpcodesMOV::OpcodesMOV(const OpcodesMOV & other)
{

}

OpcodesMOV &OpcodesMOV::operator=(const OpcodesMOV & other)
{
  OpcodesMOV tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesMOV::swap(OpcodesMOV & other)
{

}

OpcodesMOV::~OpcodesMOV()
{

}

void OpcodesMOV::accept(Visitor *v)
{
  v->visitOpcodesMOV(this);
}

OpcodesMOV *OpcodesMOV::clone() const
{
  return new OpcodesMOV(*this);
}



/********************   OpcodesMOVSB    ********************/
OpcodesMOVSB::OpcodesMOVSB()
{

}

OpcodesMOVSB::OpcodesMOVSB(const OpcodesMOVSB & other)
{

}

OpcodesMOVSB &OpcodesMOVSB::operator=(const OpcodesMOVSB & other)
{
  OpcodesMOVSB tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesMOVSB::swap(OpcodesMOVSB & other)
{

}

OpcodesMOVSB::~OpcodesMOVSB()
{

}

void OpcodesMOVSB::accept(Visitor *v)
{
  v->visitOpcodesMOVSB(this);
}

OpcodesMOVSB *OpcodesMOVSB::clone() const
{
  return new OpcodesMOVSB(*this);
}



/********************   OpcodesMOVSD    ********************/
OpcodesMOVSD::OpcodesMOVSD()
{

}

OpcodesMOVSD::OpcodesMOVSD(const OpcodesMOVSD & other)
{

}

OpcodesMOVSD &OpcodesMOVSD::operator=(const OpcodesMOVSD & other)
{
  OpcodesMOVSD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesMOVSD::swap(OpcodesMOVSD & other)
{

}

OpcodesMOVSD::~OpcodesMOVSD()
{

}

void OpcodesMOVSD::accept(Visitor *v)
{
  v->visitOpcodesMOVSD(this);
}

OpcodesMOVSD *OpcodesMOVSD::clone() const
{
  return new OpcodesMOVSD(*this);
}



/********************   OpcodesMOVSW    ********************/
OpcodesMOVSW::OpcodesMOVSW()
{

}

OpcodesMOVSW::OpcodesMOVSW(const OpcodesMOVSW & other)
{

}

OpcodesMOVSW &OpcodesMOVSW::operator=(const OpcodesMOVSW & other)
{
  OpcodesMOVSW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesMOVSW::swap(OpcodesMOVSW & other)
{

}

OpcodesMOVSW::~OpcodesMOVSW()
{

}

void OpcodesMOVSW::accept(Visitor *v)
{
  v->visitOpcodesMOVSW(this);
}

OpcodesMOVSW *OpcodesMOVSW::clone() const
{
  return new OpcodesMOVSW(*this);
}



/********************   OpcodesMOVSX    ********************/
OpcodesMOVSX::OpcodesMOVSX()
{

}

OpcodesMOVSX::OpcodesMOVSX(const OpcodesMOVSX & other)
{

}

OpcodesMOVSX &OpcodesMOVSX::operator=(const OpcodesMOVSX & other)
{
  OpcodesMOVSX tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesMOVSX::swap(OpcodesMOVSX & other)
{

}

OpcodesMOVSX::~OpcodesMOVSX()
{

}

void OpcodesMOVSX::accept(Visitor *v)
{
  v->visitOpcodesMOVSX(this);
}

OpcodesMOVSX *OpcodesMOVSX::clone() const
{
  return new OpcodesMOVSX(*this);
}



/********************   OpcodesMOVZX    ********************/
OpcodesMOVZX::OpcodesMOVZX()
{

}

OpcodesMOVZX::OpcodesMOVZX(const OpcodesMOVZX & other)
{

}

OpcodesMOVZX &OpcodesMOVZX::operator=(const OpcodesMOVZX & other)
{
  OpcodesMOVZX tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesMOVZX::swap(OpcodesMOVZX & other)
{

}

OpcodesMOVZX::~OpcodesMOVZX()
{

}

void OpcodesMOVZX::accept(Visitor *v)
{
  v->visitOpcodesMOVZX(this);
}

OpcodesMOVZX *OpcodesMOVZX::clone() const
{
  return new OpcodesMOVZX(*this);
}



/********************   OpcodesMUL    ********************/
OpcodesMUL::OpcodesMUL()
{

}

OpcodesMUL::OpcodesMUL(const OpcodesMUL & other)
{

}

OpcodesMUL &OpcodesMUL::operator=(const OpcodesMUL & other)
{
  OpcodesMUL tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesMUL::swap(OpcodesMUL & other)
{

}

OpcodesMUL::~OpcodesMUL()
{

}

void OpcodesMUL::accept(Visitor *v)
{
  v->visitOpcodesMUL(this);
}

OpcodesMUL *OpcodesMUL::clone() const
{
  return new OpcodesMUL(*this);
}



/********************   OpcodesNEG    ********************/
OpcodesNEG::OpcodesNEG()
{

}

OpcodesNEG::OpcodesNEG(const OpcodesNEG & other)
{

}

OpcodesNEG &OpcodesNEG::operator=(const OpcodesNEG & other)
{
  OpcodesNEG tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesNEG::swap(OpcodesNEG & other)
{

}

OpcodesNEG::~OpcodesNEG()
{

}

void OpcodesNEG::accept(Visitor *v)
{
  v->visitOpcodesNEG(this);
}

OpcodesNEG *OpcodesNEG::clone() const
{
  return new OpcodesNEG(*this);
}



/********************   OpcodesNOP    ********************/
OpcodesNOP::OpcodesNOP()
{

}

OpcodesNOP::OpcodesNOP(const OpcodesNOP & other)
{

}

OpcodesNOP &OpcodesNOP::operator=(const OpcodesNOP & other)
{
  OpcodesNOP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesNOP::swap(OpcodesNOP & other)
{

}

OpcodesNOP::~OpcodesNOP()
{

}

void OpcodesNOP::accept(Visitor *v)
{
  v->visitOpcodesNOP(this);
}

OpcodesNOP *OpcodesNOP::clone() const
{
  return new OpcodesNOP(*this);
}



/********************   OpcodesNOT    ********************/
OpcodesNOT::OpcodesNOT()
{

}

OpcodesNOT::OpcodesNOT(const OpcodesNOT & other)
{

}

OpcodesNOT &OpcodesNOT::operator=(const OpcodesNOT & other)
{
  OpcodesNOT tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesNOT::swap(OpcodesNOT & other)
{

}

OpcodesNOT::~OpcodesNOT()
{

}

void OpcodesNOT::accept(Visitor *v)
{
  v->visitOpcodesNOT(this);
}

OpcodesNOT *OpcodesNOT::clone() const
{
  return new OpcodesNOT(*this);
}



/********************   OpcodesOR    ********************/
OpcodesOR::OpcodesOR()
{

}

OpcodesOR::OpcodesOR(const OpcodesOR & other)
{

}

OpcodesOR &OpcodesOR::operator=(const OpcodesOR & other)
{
  OpcodesOR tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesOR::swap(OpcodesOR & other)
{

}

OpcodesOR::~OpcodesOR()
{

}

void OpcodesOR::accept(Visitor *v)
{
  v->visitOpcodesOR(this);
}

OpcodesOR *OpcodesOR::clone() const
{
  return new OpcodesOR(*this);
}



/********************   OpcodesORG    ********************/
OpcodesORG::OpcodesORG()
{

}

OpcodesORG::OpcodesORG(const OpcodesORG & other)
{

}

OpcodesORG &OpcodesORG::operator=(const OpcodesORG & other)
{
  OpcodesORG tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesORG::swap(OpcodesORG & other)
{

}

OpcodesORG::~OpcodesORG()
{

}

void OpcodesORG::accept(Visitor *v)
{
  v->visitOpcodesORG(this);
}

OpcodesORG *OpcodesORG::clone() const
{
  return new OpcodesORG(*this);
}



/********************   OpcodesOUT    ********************/
OpcodesOUT::OpcodesOUT()
{

}

OpcodesOUT::OpcodesOUT(const OpcodesOUT & other)
{

}

OpcodesOUT &OpcodesOUT::operator=(const OpcodesOUT & other)
{
  OpcodesOUT tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesOUT::swap(OpcodesOUT & other)
{

}

OpcodesOUT::~OpcodesOUT()
{

}

void OpcodesOUT::accept(Visitor *v)
{
  v->visitOpcodesOUT(this);
}

OpcodesOUT *OpcodesOUT::clone() const
{
  return new OpcodesOUT(*this);
}



/********************   OpcodesOUTSB    ********************/
OpcodesOUTSB::OpcodesOUTSB()
{

}

OpcodesOUTSB::OpcodesOUTSB(const OpcodesOUTSB & other)
{

}

OpcodesOUTSB &OpcodesOUTSB::operator=(const OpcodesOUTSB & other)
{
  OpcodesOUTSB tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesOUTSB::swap(OpcodesOUTSB & other)
{

}

OpcodesOUTSB::~OpcodesOUTSB()
{

}

void OpcodesOUTSB::accept(Visitor *v)
{
  v->visitOpcodesOUTSB(this);
}

OpcodesOUTSB *OpcodesOUTSB::clone() const
{
  return new OpcodesOUTSB(*this);
}



/********************   OpcodesOUTSD    ********************/
OpcodesOUTSD::OpcodesOUTSD()
{

}

OpcodesOUTSD::OpcodesOUTSD(const OpcodesOUTSD & other)
{

}

OpcodesOUTSD &OpcodesOUTSD::operator=(const OpcodesOUTSD & other)
{
  OpcodesOUTSD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesOUTSD::swap(OpcodesOUTSD & other)
{

}

OpcodesOUTSD::~OpcodesOUTSD()
{

}

void OpcodesOUTSD::accept(Visitor *v)
{
  v->visitOpcodesOUTSD(this);
}

OpcodesOUTSD *OpcodesOUTSD::clone() const
{
  return new OpcodesOUTSD(*this);
}



/********************   OpcodesOUTSW    ********************/
OpcodesOUTSW::OpcodesOUTSW()
{

}

OpcodesOUTSW::OpcodesOUTSW(const OpcodesOUTSW & other)
{

}

OpcodesOUTSW &OpcodesOUTSW::operator=(const OpcodesOUTSW & other)
{
  OpcodesOUTSW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesOUTSW::swap(OpcodesOUTSW & other)
{

}

OpcodesOUTSW::~OpcodesOUTSW()
{

}

void OpcodesOUTSW::accept(Visitor *v)
{
  v->visitOpcodesOUTSW(this);
}

OpcodesOUTSW *OpcodesOUTSW::clone() const
{
  return new OpcodesOUTSW(*this);
}



/********************   OpcodesPOP    ********************/
OpcodesPOP::OpcodesPOP()
{

}

OpcodesPOP::OpcodesPOP(const OpcodesPOP & other)
{

}

OpcodesPOP &OpcodesPOP::operator=(const OpcodesPOP & other)
{
  OpcodesPOP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesPOP::swap(OpcodesPOP & other)
{

}

OpcodesPOP::~OpcodesPOP()
{

}

void OpcodesPOP::accept(Visitor *v)
{
  v->visitOpcodesPOP(this);
}

OpcodesPOP *OpcodesPOP::clone() const
{
  return new OpcodesPOP(*this);
}



/********************   OpcodesPOPA    ********************/
OpcodesPOPA::OpcodesPOPA()
{

}

OpcodesPOPA::OpcodesPOPA(const OpcodesPOPA & other)
{

}

OpcodesPOPA &OpcodesPOPA::operator=(const OpcodesPOPA & other)
{
  OpcodesPOPA tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesPOPA::swap(OpcodesPOPA & other)
{

}

OpcodesPOPA::~OpcodesPOPA()
{

}

void OpcodesPOPA::accept(Visitor *v)
{
  v->visitOpcodesPOPA(this);
}

OpcodesPOPA *OpcodesPOPA::clone() const
{
  return new OpcodesPOPA(*this);
}



/********************   OpcodesPOPAD    ********************/
OpcodesPOPAD::OpcodesPOPAD()
{

}

OpcodesPOPAD::OpcodesPOPAD(const OpcodesPOPAD & other)
{

}

OpcodesPOPAD &OpcodesPOPAD::operator=(const OpcodesPOPAD & other)
{
  OpcodesPOPAD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesPOPAD::swap(OpcodesPOPAD & other)
{

}

OpcodesPOPAD::~OpcodesPOPAD()
{

}

void OpcodesPOPAD::accept(Visitor *v)
{
  v->visitOpcodesPOPAD(this);
}

OpcodesPOPAD *OpcodesPOPAD::clone() const
{
  return new OpcodesPOPAD(*this);
}



/********************   OpcodesPOPAW    ********************/
OpcodesPOPAW::OpcodesPOPAW()
{

}

OpcodesPOPAW::OpcodesPOPAW(const OpcodesPOPAW & other)
{

}

OpcodesPOPAW &OpcodesPOPAW::operator=(const OpcodesPOPAW & other)
{
  OpcodesPOPAW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesPOPAW::swap(OpcodesPOPAW & other)
{

}

OpcodesPOPAW::~OpcodesPOPAW()
{

}

void OpcodesPOPAW::accept(Visitor *v)
{
  v->visitOpcodesPOPAW(this);
}

OpcodesPOPAW *OpcodesPOPAW::clone() const
{
  return new OpcodesPOPAW(*this);
}



/********************   OpcodesPOPF    ********************/
OpcodesPOPF::OpcodesPOPF()
{

}

OpcodesPOPF::OpcodesPOPF(const OpcodesPOPF & other)
{

}

OpcodesPOPF &OpcodesPOPF::operator=(const OpcodesPOPF & other)
{
  OpcodesPOPF tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesPOPF::swap(OpcodesPOPF & other)
{

}

OpcodesPOPF::~OpcodesPOPF()
{

}

void OpcodesPOPF::accept(Visitor *v)
{
  v->visitOpcodesPOPF(this);
}

OpcodesPOPF *OpcodesPOPF::clone() const
{
  return new OpcodesPOPF(*this);
}



/********************   OpcodesPOPFD    ********************/
OpcodesPOPFD::OpcodesPOPFD()
{

}

OpcodesPOPFD::OpcodesPOPFD(const OpcodesPOPFD & other)
{

}

OpcodesPOPFD &OpcodesPOPFD::operator=(const OpcodesPOPFD & other)
{
  OpcodesPOPFD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesPOPFD::swap(OpcodesPOPFD & other)
{

}

OpcodesPOPFD::~OpcodesPOPFD()
{

}

void OpcodesPOPFD::accept(Visitor *v)
{
  v->visitOpcodesPOPFD(this);
}

OpcodesPOPFD *OpcodesPOPFD::clone() const
{
  return new OpcodesPOPFD(*this);
}



/********************   OpcodesPOPFW    ********************/
OpcodesPOPFW::OpcodesPOPFW()
{

}

OpcodesPOPFW::OpcodesPOPFW(const OpcodesPOPFW & other)
{

}

OpcodesPOPFW &OpcodesPOPFW::operator=(const OpcodesPOPFW & other)
{
  OpcodesPOPFW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesPOPFW::swap(OpcodesPOPFW & other)
{

}

OpcodesPOPFW::~OpcodesPOPFW()
{

}

void OpcodesPOPFW::accept(Visitor *v)
{
  v->visitOpcodesPOPFW(this);
}

OpcodesPOPFW *OpcodesPOPFW::clone() const
{
  return new OpcodesPOPFW(*this);
}



/********************   OpcodesPUSH    ********************/
OpcodesPUSH::OpcodesPUSH()
{

}

OpcodesPUSH::OpcodesPUSH(const OpcodesPUSH & other)
{

}

OpcodesPUSH &OpcodesPUSH::operator=(const OpcodesPUSH & other)
{
  OpcodesPUSH tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesPUSH::swap(OpcodesPUSH & other)
{

}

OpcodesPUSH::~OpcodesPUSH()
{

}

void OpcodesPUSH::accept(Visitor *v)
{
  v->visitOpcodesPUSH(this);
}

OpcodesPUSH *OpcodesPUSH::clone() const
{
  return new OpcodesPUSH(*this);
}



/********************   OpcodesPUSHA    ********************/
OpcodesPUSHA::OpcodesPUSHA()
{

}

OpcodesPUSHA::OpcodesPUSHA(const OpcodesPUSHA & other)
{

}

OpcodesPUSHA &OpcodesPUSHA::operator=(const OpcodesPUSHA & other)
{
  OpcodesPUSHA tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesPUSHA::swap(OpcodesPUSHA & other)
{

}

OpcodesPUSHA::~OpcodesPUSHA()
{

}

void OpcodesPUSHA::accept(Visitor *v)
{
  v->visitOpcodesPUSHA(this);
}

OpcodesPUSHA *OpcodesPUSHA::clone() const
{
  return new OpcodesPUSHA(*this);
}



/********************   OpcodesPUSHD    ********************/
OpcodesPUSHD::OpcodesPUSHD()
{

}

OpcodesPUSHD::OpcodesPUSHD(const OpcodesPUSHD & other)
{

}

OpcodesPUSHD &OpcodesPUSHD::operator=(const OpcodesPUSHD & other)
{
  OpcodesPUSHD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesPUSHD::swap(OpcodesPUSHD & other)
{

}

OpcodesPUSHD::~OpcodesPUSHD()
{

}

void OpcodesPUSHD::accept(Visitor *v)
{
  v->visitOpcodesPUSHD(this);
}

OpcodesPUSHD *OpcodesPUSHD::clone() const
{
  return new OpcodesPUSHD(*this);
}



/********************   OpcodesPUSHAD    ********************/
OpcodesPUSHAD::OpcodesPUSHAD()
{

}

OpcodesPUSHAD::OpcodesPUSHAD(const OpcodesPUSHAD & other)
{

}

OpcodesPUSHAD &OpcodesPUSHAD::operator=(const OpcodesPUSHAD & other)
{
  OpcodesPUSHAD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesPUSHAD::swap(OpcodesPUSHAD & other)
{

}

OpcodesPUSHAD::~OpcodesPUSHAD()
{

}

void OpcodesPUSHAD::accept(Visitor *v)
{
  v->visitOpcodesPUSHAD(this);
}

OpcodesPUSHAD *OpcodesPUSHAD::clone() const
{
  return new OpcodesPUSHAD(*this);
}



/********************   OpcodesPUSHAW    ********************/
OpcodesPUSHAW::OpcodesPUSHAW()
{

}

OpcodesPUSHAW::OpcodesPUSHAW(const OpcodesPUSHAW & other)
{

}

OpcodesPUSHAW &OpcodesPUSHAW::operator=(const OpcodesPUSHAW & other)
{
  OpcodesPUSHAW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesPUSHAW::swap(OpcodesPUSHAW & other)
{

}

OpcodesPUSHAW::~OpcodesPUSHAW()
{

}

void OpcodesPUSHAW::accept(Visitor *v)
{
  v->visitOpcodesPUSHAW(this);
}

OpcodesPUSHAW *OpcodesPUSHAW::clone() const
{
  return new OpcodesPUSHAW(*this);
}



/********************   OpcodesPUSHF    ********************/
OpcodesPUSHF::OpcodesPUSHF()
{

}

OpcodesPUSHF::OpcodesPUSHF(const OpcodesPUSHF & other)
{

}

OpcodesPUSHF &OpcodesPUSHF::operator=(const OpcodesPUSHF & other)
{
  OpcodesPUSHF tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesPUSHF::swap(OpcodesPUSHF & other)
{

}

OpcodesPUSHF::~OpcodesPUSHF()
{

}

void OpcodesPUSHF::accept(Visitor *v)
{
  v->visitOpcodesPUSHF(this);
}

OpcodesPUSHF *OpcodesPUSHF::clone() const
{
  return new OpcodesPUSHF(*this);
}



/********************   OpcodesPUSHFD    ********************/
OpcodesPUSHFD::OpcodesPUSHFD()
{

}

OpcodesPUSHFD::OpcodesPUSHFD(const OpcodesPUSHFD & other)
{

}

OpcodesPUSHFD &OpcodesPUSHFD::operator=(const OpcodesPUSHFD & other)
{
  OpcodesPUSHFD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesPUSHFD::swap(OpcodesPUSHFD & other)
{

}

OpcodesPUSHFD::~OpcodesPUSHFD()
{

}

void OpcodesPUSHFD::accept(Visitor *v)
{
  v->visitOpcodesPUSHFD(this);
}

OpcodesPUSHFD *OpcodesPUSHFD::clone() const
{
  return new OpcodesPUSHFD(*this);
}



/********************   OpcodesPUSHFW    ********************/
OpcodesPUSHFW::OpcodesPUSHFW()
{

}

OpcodesPUSHFW::OpcodesPUSHFW(const OpcodesPUSHFW & other)
{

}

OpcodesPUSHFW &OpcodesPUSHFW::operator=(const OpcodesPUSHFW & other)
{
  OpcodesPUSHFW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesPUSHFW::swap(OpcodesPUSHFW & other)
{

}

OpcodesPUSHFW::~OpcodesPUSHFW()
{

}

void OpcodesPUSHFW::accept(Visitor *v)
{
  v->visitOpcodesPUSHFW(this);
}

OpcodesPUSHFW *OpcodesPUSHFW::clone() const
{
  return new OpcodesPUSHFW(*this);
}



/********************   OpcodesRCL    ********************/
OpcodesRCL::OpcodesRCL()
{

}

OpcodesRCL::OpcodesRCL(const OpcodesRCL & other)
{

}

OpcodesRCL &OpcodesRCL::operator=(const OpcodesRCL & other)
{
  OpcodesRCL tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesRCL::swap(OpcodesRCL & other)
{

}

OpcodesRCL::~OpcodesRCL()
{

}

void OpcodesRCL::accept(Visitor *v)
{
  v->visitOpcodesRCL(this);
}

OpcodesRCL *OpcodesRCL::clone() const
{
  return new OpcodesRCL(*this);
}



/********************   OpcodesRCR    ********************/
OpcodesRCR::OpcodesRCR()
{

}

OpcodesRCR::OpcodesRCR(const OpcodesRCR & other)
{

}

OpcodesRCR &OpcodesRCR::operator=(const OpcodesRCR & other)
{
  OpcodesRCR tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesRCR::swap(OpcodesRCR & other)
{

}

OpcodesRCR::~OpcodesRCR()
{

}

void OpcodesRCR::accept(Visitor *v)
{
  v->visitOpcodesRCR(this);
}

OpcodesRCR *OpcodesRCR::clone() const
{
  return new OpcodesRCR(*this);
}



/********************   OpcodesRDMSR    ********************/
OpcodesRDMSR::OpcodesRDMSR()
{

}

OpcodesRDMSR::OpcodesRDMSR(const OpcodesRDMSR & other)
{

}

OpcodesRDMSR &OpcodesRDMSR::operator=(const OpcodesRDMSR & other)
{
  OpcodesRDMSR tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesRDMSR::swap(OpcodesRDMSR & other)
{

}

OpcodesRDMSR::~OpcodesRDMSR()
{

}

void OpcodesRDMSR::accept(Visitor *v)
{
  v->visitOpcodesRDMSR(this);
}

OpcodesRDMSR *OpcodesRDMSR::clone() const
{
  return new OpcodesRDMSR(*this);
}



/********************   OpcodesRDPMC    ********************/
OpcodesRDPMC::OpcodesRDPMC()
{

}

OpcodesRDPMC::OpcodesRDPMC(const OpcodesRDPMC & other)
{

}

OpcodesRDPMC &OpcodesRDPMC::operator=(const OpcodesRDPMC & other)
{
  OpcodesRDPMC tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesRDPMC::swap(OpcodesRDPMC & other)
{

}

OpcodesRDPMC::~OpcodesRDPMC()
{

}

void OpcodesRDPMC::accept(Visitor *v)
{
  v->visitOpcodesRDPMC(this);
}

OpcodesRDPMC *OpcodesRDPMC::clone() const
{
  return new OpcodesRDPMC(*this);
}



/********************   OpcodesREP    ********************/
OpcodesREP::OpcodesREP()
{

}

OpcodesREP::OpcodesREP(const OpcodesREP & other)
{

}

OpcodesREP &OpcodesREP::operator=(const OpcodesREP & other)
{
  OpcodesREP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesREP::swap(OpcodesREP & other)
{

}

OpcodesREP::~OpcodesREP()
{

}

void OpcodesREP::accept(Visitor *v)
{
  v->visitOpcodesREP(this);
}

OpcodesREP *OpcodesREP::clone() const
{
  return new OpcodesREP(*this);
}



/********************   OpcodesREPE    ********************/
OpcodesREPE::OpcodesREPE()
{

}

OpcodesREPE::OpcodesREPE(const OpcodesREPE & other)
{

}

OpcodesREPE &OpcodesREPE::operator=(const OpcodesREPE & other)
{
  OpcodesREPE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesREPE::swap(OpcodesREPE & other)
{

}

OpcodesREPE::~OpcodesREPE()
{

}

void OpcodesREPE::accept(Visitor *v)
{
  v->visitOpcodesREPE(this);
}

OpcodesREPE *OpcodesREPE::clone() const
{
  return new OpcodesREPE(*this);
}



/********************   OpcodesREPNE    ********************/
OpcodesREPNE::OpcodesREPNE()
{

}

OpcodesREPNE::OpcodesREPNE(const OpcodesREPNE & other)
{

}

OpcodesREPNE &OpcodesREPNE::operator=(const OpcodesREPNE & other)
{
  OpcodesREPNE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesREPNE::swap(OpcodesREPNE & other)
{

}

OpcodesREPNE::~OpcodesREPNE()
{

}

void OpcodesREPNE::accept(Visitor *v)
{
  v->visitOpcodesREPNE(this);
}

OpcodesREPNE *OpcodesREPNE::clone() const
{
  return new OpcodesREPNE(*this);
}



/********************   OpcodesREPNZ    ********************/
OpcodesREPNZ::OpcodesREPNZ()
{

}

OpcodesREPNZ::OpcodesREPNZ(const OpcodesREPNZ & other)
{

}

OpcodesREPNZ &OpcodesREPNZ::operator=(const OpcodesREPNZ & other)
{
  OpcodesREPNZ tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesREPNZ::swap(OpcodesREPNZ & other)
{

}

OpcodesREPNZ::~OpcodesREPNZ()
{

}

void OpcodesREPNZ::accept(Visitor *v)
{
  v->visitOpcodesREPNZ(this);
}

OpcodesREPNZ *OpcodesREPNZ::clone() const
{
  return new OpcodesREPNZ(*this);
}



/********************   OpcodesREPZ    ********************/
OpcodesREPZ::OpcodesREPZ()
{

}

OpcodesREPZ::OpcodesREPZ(const OpcodesREPZ & other)
{

}

OpcodesREPZ &OpcodesREPZ::operator=(const OpcodesREPZ & other)
{
  OpcodesREPZ tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesREPZ::swap(OpcodesREPZ & other)
{

}

OpcodesREPZ::~OpcodesREPZ()
{

}

void OpcodesREPZ::accept(Visitor *v)
{
  v->visitOpcodesREPZ(this);
}

OpcodesREPZ *OpcodesREPZ::clone() const
{
  return new OpcodesREPZ(*this);
}



/********************   OpcodesRESB    ********************/
OpcodesRESB::OpcodesRESB()
{

}

OpcodesRESB::OpcodesRESB(const OpcodesRESB & other)
{

}

OpcodesRESB &OpcodesRESB::operator=(const OpcodesRESB & other)
{
  OpcodesRESB tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesRESB::swap(OpcodesRESB & other)
{

}

OpcodesRESB::~OpcodesRESB()
{

}

void OpcodesRESB::accept(Visitor *v)
{
  v->visitOpcodesRESB(this);
}

OpcodesRESB *OpcodesRESB::clone() const
{
  return new OpcodesRESB(*this);
}



/********************   OpcodesRESD    ********************/
OpcodesRESD::OpcodesRESD()
{

}

OpcodesRESD::OpcodesRESD(const OpcodesRESD & other)
{

}

OpcodesRESD &OpcodesRESD::operator=(const OpcodesRESD & other)
{
  OpcodesRESD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesRESD::swap(OpcodesRESD & other)
{

}

OpcodesRESD::~OpcodesRESD()
{

}

void OpcodesRESD::accept(Visitor *v)
{
  v->visitOpcodesRESD(this);
}

OpcodesRESD *OpcodesRESD::clone() const
{
  return new OpcodesRESD(*this);
}



/********************   OpcodesRESQ    ********************/
OpcodesRESQ::OpcodesRESQ()
{

}

OpcodesRESQ::OpcodesRESQ(const OpcodesRESQ & other)
{

}

OpcodesRESQ &OpcodesRESQ::operator=(const OpcodesRESQ & other)
{
  OpcodesRESQ tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesRESQ::swap(OpcodesRESQ & other)
{

}

OpcodesRESQ::~OpcodesRESQ()
{

}

void OpcodesRESQ::accept(Visitor *v)
{
  v->visitOpcodesRESQ(this);
}

OpcodesRESQ *OpcodesRESQ::clone() const
{
  return new OpcodesRESQ(*this);
}



/********************   OpcodesREST    ********************/
OpcodesREST::OpcodesREST()
{

}

OpcodesREST::OpcodesREST(const OpcodesREST & other)
{

}

OpcodesREST &OpcodesREST::operator=(const OpcodesREST & other)
{
  OpcodesREST tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesREST::swap(OpcodesREST & other)
{

}

OpcodesREST::~OpcodesREST()
{

}

void OpcodesREST::accept(Visitor *v)
{
  v->visitOpcodesREST(this);
}

OpcodesREST *OpcodesREST::clone() const
{
  return new OpcodesREST(*this);
}



/********************   OpcodesRESW    ********************/
OpcodesRESW::OpcodesRESW()
{

}

OpcodesRESW::OpcodesRESW(const OpcodesRESW & other)
{

}

OpcodesRESW &OpcodesRESW::operator=(const OpcodesRESW & other)
{
  OpcodesRESW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesRESW::swap(OpcodesRESW & other)
{

}

OpcodesRESW::~OpcodesRESW()
{

}

void OpcodesRESW::accept(Visitor *v)
{
  v->visitOpcodesRESW(this);
}

OpcodesRESW *OpcodesRESW::clone() const
{
  return new OpcodesRESW(*this);
}



/********************   OpcodesRET    ********************/
OpcodesRET::OpcodesRET()
{

}

OpcodesRET::OpcodesRET(const OpcodesRET & other)
{

}

OpcodesRET &OpcodesRET::operator=(const OpcodesRET & other)
{
  OpcodesRET tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesRET::swap(OpcodesRET & other)
{

}

OpcodesRET::~OpcodesRET()
{

}

void OpcodesRET::accept(Visitor *v)
{
  v->visitOpcodesRET(this);
}

OpcodesRET *OpcodesRET::clone() const
{
  return new OpcodesRET(*this);
}



/********************   OpcodesRETF    ********************/
OpcodesRETF::OpcodesRETF()
{

}

OpcodesRETF::OpcodesRETF(const OpcodesRETF & other)
{

}

OpcodesRETF &OpcodesRETF::operator=(const OpcodesRETF & other)
{
  OpcodesRETF tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesRETF::swap(OpcodesRETF & other)
{

}

OpcodesRETF::~OpcodesRETF()
{

}

void OpcodesRETF::accept(Visitor *v)
{
  v->visitOpcodesRETF(this);
}

OpcodesRETF *OpcodesRETF::clone() const
{
  return new OpcodesRETF(*this);
}



/********************   OpcodesRETN    ********************/
OpcodesRETN::OpcodesRETN()
{

}

OpcodesRETN::OpcodesRETN(const OpcodesRETN & other)
{

}

OpcodesRETN &OpcodesRETN::operator=(const OpcodesRETN & other)
{
  OpcodesRETN tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesRETN::swap(OpcodesRETN & other)
{

}

OpcodesRETN::~OpcodesRETN()
{

}

void OpcodesRETN::accept(Visitor *v)
{
  v->visitOpcodesRETN(this);
}

OpcodesRETN *OpcodesRETN::clone() const
{
  return new OpcodesRETN(*this);
}



/********************   OpcodesROL    ********************/
OpcodesROL::OpcodesROL()
{

}

OpcodesROL::OpcodesROL(const OpcodesROL & other)
{

}

OpcodesROL &OpcodesROL::operator=(const OpcodesROL & other)
{
  OpcodesROL tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesROL::swap(OpcodesROL & other)
{

}

OpcodesROL::~OpcodesROL()
{

}

void OpcodesROL::accept(Visitor *v)
{
  v->visitOpcodesROL(this);
}

OpcodesROL *OpcodesROL::clone() const
{
  return new OpcodesROL(*this);
}



/********************   OpcodesROR    ********************/
OpcodesROR::OpcodesROR()
{

}

OpcodesROR::OpcodesROR(const OpcodesROR & other)
{

}

OpcodesROR &OpcodesROR::operator=(const OpcodesROR & other)
{
  OpcodesROR tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesROR::swap(OpcodesROR & other)
{

}

OpcodesROR::~OpcodesROR()
{

}

void OpcodesROR::accept(Visitor *v)
{
  v->visitOpcodesROR(this);
}

OpcodesROR *OpcodesROR::clone() const
{
  return new OpcodesROR(*this);
}



/********************   OpcodesRSM    ********************/
OpcodesRSM::OpcodesRSM()
{

}

OpcodesRSM::OpcodesRSM(const OpcodesRSM & other)
{

}

OpcodesRSM &OpcodesRSM::operator=(const OpcodesRSM & other)
{
  OpcodesRSM tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesRSM::swap(OpcodesRSM & other)
{

}

OpcodesRSM::~OpcodesRSM()
{

}

void OpcodesRSM::accept(Visitor *v)
{
  v->visitOpcodesRSM(this);
}

OpcodesRSM *OpcodesRSM::clone() const
{
  return new OpcodesRSM(*this);
}



/********************   OpcodesSAHF    ********************/
OpcodesSAHF::OpcodesSAHF()
{

}

OpcodesSAHF::OpcodesSAHF(const OpcodesSAHF & other)
{

}

OpcodesSAHF &OpcodesSAHF::operator=(const OpcodesSAHF & other)
{
  OpcodesSAHF tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSAHF::swap(OpcodesSAHF & other)
{

}

OpcodesSAHF::~OpcodesSAHF()
{

}

void OpcodesSAHF::accept(Visitor *v)
{
  v->visitOpcodesSAHF(this);
}

OpcodesSAHF *OpcodesSAHF::clone() const
{
  return new OpcodesSAHF(*this);
}



/********************   OpcodesSAL    ********************/
OpcodesSAL::OpcodesSAL()
{

}

OpcodesSAL::OpcodesSAL(const OpcodesSAL & other)
{

}

OpcodesSAL &OpcodesSAL::operator=(const OpcodesSAL & other)
{
  OpcodesSAL tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSAL::swap(OpcodesSAL & other)
{

}

OpcodesSAL::~OpcodesSAL()
{

}

void OpcodesSAL::accept(Visitor *v)
{
  v->visitOpcodesSAL(this);
}

OpcodesSAL *OpcodesSAL::clone() const
{
  return new OpcodesSAL(*this);
}



/********************   OpcodesSAR    ********************/
OpcodesSAR::OpcodesSAR()
{

}

OpcodesSAR::OpcodesSAR(const OpcodesSAR & other)
{

}

OpcodesSAR &OpcodesSAR::operator=(const OpcodesSAR & other)
{
  OpcodesSAR tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSAR::swap(OpcodesSAR & other)
{

}

OpcodesSAR::~OpcodesSAR()
{

}

void OpcodesSAR::accept(Visitor *v)
{
  v->visitOpcodesSAR(this);
}

OpcodesSAR *OpcodesSAR::clone() const
{
  return new OpcodesSAR(*this);
}



/********************   OpcodesSBB    ********************/
OpcodesSBB::OpcodesSBB()
{

}

OpcodesSBB::OpcodesSBB(const OpcodesSBB & other)
{

}

OpcodesSBB &OpcodesSBB::operator=(const OpcodesSBB & other)
{
  OpcodesSBB tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSBB::swap(OpcodesSBB & other)
{

}

OpcodesSBB::~OpcodesSBB()
{

}

void OpcodesSBB::accept(Visitor *v)
{
  v->visitOpcodesSBB(this);
}

OpcodesSBB *OpcodesSBB::clone() const
{
  return new OpcodesSBB(*this);
}



/********************   OpcodesSCASB    ********************/
OpcodesSCASB::OpcodesSCASB()
{

}

OpcodesSCASB::OpcodesSCASB(const OpcodesSCASB & other)
{

}

OpcodesSCASB &OpcodesSCASB::operator=(const OpcodesSCASB & other)
{
  OpcodesSCASB tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSCASB::swap(OpcodesSCASB & other)
{

}

OpcodesSCASB::~OpcodesSCASB()
{

}

void OpcodesSCASB::accept(Visitor *v)
{
  v->visitOpcodesSCASB(this);
}

OpcodesSCASB *OpcodesSCASB::clone() const
{
  return new OpcodesSCASB(*this);
}



/********************   OpcodesSCASD    ********************/
OpcodesSCASD::OpcodesSCASD()
{

}

OpcodesSCASD::OpcodesSCASD(const OpcodesSCASD & other)
{

}

OpcodesSCASD &OpcodesSCASD::operator=(const OpcodesSCASD & other)
{
  OpcodesSCASD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSCASD::swap(OpcodesSCASD & other)
{

}

OpcodesSCASD::~OpcodesSCASD()
{

}

void OpcodesSCASD::accept(Visitor *v)
{
  v->visitOpcodesSCASD(this);
}

OpcodesSCASD *OpcodesSCASD::clone() const
{
  return new OpcodesSCASD(*this);
}



/********************   OpcodesSCASW    ********************/
OpcodesSCASW::OpcodesSCASW()
{

}

OpcodesSCASW::OpcodesSCASW(const OpcodesSCASW & other)
{

}

OpcodesSCASW &OpcodesSCASW::operator=(const OpcodesSCASW & other)
{
  OpcodesSCASW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSCASW::swap(OpcodesSCASW & other)
{

}

OpcodesSCASW::~OpcodesSCASW()
{

}

void OpcodesSCASW::accept(Visitor *v)
{
  v->visitOpcodesSCASW(this);
}

OpcodesSCASW *OpcodesSCASW::clone() const
{
  return new OpcodesSCASW(*this);
}



/********************   OpcodesSETA    ********************/
OpcodesSETA::OpcodesSETA()
{

}

OpcodesSETA::OpcodesSETA(const OpcodesSETA & other)
{

}

OpcodesSETA &OpcodesSETA::operator=(const OpcodesSETA & other)
{
  OpcodesSETA tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETA::swap(OpcodesSETA & other)
{

}

OpcodesSETA::~OpcodesSETA()
{

}

void OpcodesSETA::accept(Visitor *v)
{
  v->visitOpcodesSETA(this);
}

OpcodesSETA *OpcodesSETA::clone() const
{
  return new OpcodesSETA(*this);
}



/********************   OpcodesSETAE    ********************/
OpcodesSETAE::OpcodesSETAE()
{

}

OpcodesSETAE::OpcodesSETAE(const OpcodesSETAE & other)
{

}

OpcodesSETAE &OpcodesSETAE::operator=(const OpcodesSETAE & other)
{
  OpcodesSETAE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETAE::swap(OpcodesSETAE & other)
{

}

OpcodesSETAE::~OpcodesSETAE()
{

}

void OpcodesSETAE::accept(Visitor *v)
{
  v->visitOpcodesSETAE(this);
}

OpcodesSETAE *OpcodesSETAE::clone() const
{
  return new OpcodesSETAE(*this);
}



/********************   OpcodesSETB    ********************/
OpcodesSETB::OpcodesSETB()
{

}

OpcodesSETB::OpcodesSETB(const OpcodesSETB & other)
{

}

OpcodesSETB &OpcodesSETB::operator=(const OpcodesSETB & other)
{
  OpcodesSETB tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETB::swap(OpcodesSETB & other)
{

}

OpcodesSETB::~OpcodesSETB()
{

}

void OpcodesSETB::accept(Visitor *v)
{
  v->visitOpcodesSETB(this);
}

OpcodesSETB *OpcodesSETB::clone() const
{
  return new OpcodesSETB(*this);
}



/********************   OpcodesSETBE    ********************/
OpcodesSETBE::OpcodesSETBE()
{

}

OpcodesSETBE::OpcodesSETBE(const OpcodesSETBE & other)
{

}

OpcodesSETBE &OpcodesSETBE::operator=(const OpcodesSETBE & other)
{
  OpcodesSETBE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETBE::swap(OpcodesSETBE & other)
{

}

OpcodesSETBE::~OpcodesSETBE()
{

}

void OpcodesSETBE::accept(Visitor *v)
{
  v->visitOpcodesSETBE(this);
}

OpcodesSETBE *OpcodesSETBE::clone() const
{
  return new OpcodesSETBE(*this);
}



/********************   OpcodesSETC    ********************/
OpcodesSETC::OpcodesSETC()
{

}

OpcodesSETC::OpcodesSETC(const OpcodesSETC & other)
{

}

OpcodesSETC &OpcodesSETC::operator=(const OpcodesSETC & other)
{
  OpcodesSETC tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETC::swap(OpcodesSETC & other)
{

}

OpcodesSETC::~OpcodesSETC()
{

}

void OpcodesSETC::accept(Visitor *v)
{
  v->visitOpcodesSETC(this);
}

OpcodesSETC *OpcodesSETC::clone() const
{
  return new OpcodesSETC(*this);
}



/********************   OpcodesSETE    ********************/
OpcodesSETE::OpcodesSETE()
{

}

OpcodesSETE::OpcodesSETE(const OpcodesSETE & other)
{

}

OpcodesSETE &OpcodesSETE::operator=(const OpcodesSETE & other)
{
  OpcodesSETE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETE::swap(OpcodesSETE & other)
{

}

OpcodesSETE::~OpcodesSETE()
{

}

void OpcodesSETE::accept(Visitor *v)
{
  v->visitOpcodesSETE(this);
}

OpcodesSETE *OpcodesSETE::clone() const
{
  return new OpcodesSETE(*this);
}



/********************   OpcodesSETG    ********************/
OpcodesSETG::OpcodesSETG()
{

}

OpcodesSETG::OpcodesSETG(const OpcodesSETG & other)
{

}

OpcodesSETG &OpcodesSETG::operator=(const OpcodesSETG & other)
{
  OpcodesSETG tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETG::swap(OpcodesSETG & other)
{

}

OpcodesSETG::~OpcodesSETG()
{

}

void OpcodesSETG::accept(Visitor *v)
{
  v->visitOpcodesSETG(this);
}

OpcodesSETG *OpcodesSETG::clone() const
{
  return new OpcodesSETG(*this);
}



/********************   OpcodesSETGE    ********************/
OpcodesSETGE::OpcodesSETGE()
{

}

OpcodesSETGE::OpcodesSETGE(const OpcodesSETGE & other)
{

}

OpcodesSETGE &OpcodesSETGE::operator=(const OpcodesSETGE & other)
{
  OpcodesSETGE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETGE::swap(OpcodesSETGE & other)
{

}

OpcodesSETGE::~OpcodesSETGE()
{

}

void OpcodesSETGE::accept(Visitor *v)
{
  v->visitOpcodesSETGE(this);
}

OpcodesSETGE *OpcodesSETGE::clone() const
{
  return new OpcodesSETGE(*this);
}



/********************   OpcodesSETL    ********************/
OpcodesSETL::OpcodesSETL()
{

}

OpcodesSETL::OpcodesSETL(const OpcodesSETL & other)
{

}

OpcodesSETL &OpcodesSETL::operator=(const OpcodesSETL & other)
{
  OpcodesSETL tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETL::swap(OpcodesSETL & other)
{

}

OpcodesSETL::~OpcodesSETL()
{

}

void OpcodesSETL::accept(Visitor *v)
{
  v->visitOpcodesSETL(this);
}

OpcodesSETL *OpcodesSETL::clone() const
{
  return new OpcodesSETL(*this);
}



/********************   OpcodesSETLE    ********************/
OpcodesSETLE::OpcodesSETLE()
{

}

OpcodesSETLE::OpcodesSETLE(const OpcodesSETLE & other)
{

}

OpcodesSETLE &OpcodesSETLE::operator=(const OpcodesSETLE & other)
{
  OpcodesSETLE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETLE::swap(OpcodesSETLE & other)
{

}

OpcodesSETLE::~OpcodesSETLE()
{

}

void OpcodesSETLE::accept(Visitor *v)
{
  v->visitOpcodesSETLE(this);
}

OpcodesSETLE *OpcodesSETLE::clone() const
{
  return new OpcodesSETLE(*this);
}



/********************   OpcodesSETNA    ********************/
OpcodesSETNA::OpcodesSETNA()
{

}

OpcodesSETNA::OpcodesSETNA(const OpcodesSETNA & other)
{

}

OpcodesSETNA &OpcodesSETNA::operator=(const OpcodesSETNA & other)
{
  OpcodesSETNA tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETNA::swap(OpcodesSETNA & other)
{

}

OpcodesSETNA::~OpcodesSETNA()
{

}

void OpcodesSETNA::accept(Visitor *v)
{
  v->visitOpcodesSETNA(this);
}

OpcodesSETNA *OpcodesSETNA::clone() const
{
  return new OpcodesSETNA(*this);
}



/********************   OpcodesSETNAE    ********************/
OpcodesSETNAE::OpcodesSETNAE()
{

}

OpcodesSETNAE::OpcodesSETNAE(const OpcodesSETNAE & other)
{

}

OpcodesSETNAE &OpcodesSETNAE::operator=(const OpcodesSETNAE & other)
{
  OpcodesSETNAE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETNAE::swap(OpcodesSETNAE & other)
{

}

OpcodesSETNAE::~OpcodesSETNAE()
{

}

void OpcodesSETNAE::accept(Visitor *v)
{
  v->visitOpcodesSETNAE(this);
}

OpcodesSETNAE *OpcodesSETNAE::clone() const
{
  return new OpcodesSETNAE(*this);
}



/********************   OpcodesSETNB    ********************/
OpcodesSETNB::OpcodesSETNB()
{

}

OpcodesSETNB::OpcodesSETNB(const OpcodesSETNB & other)
{

}

OpcodesSETNB &OpcodesSETNB::operator=(const OpcodesSETNB & other)
{
  OpcodesSETNB tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETNB::swap(OpcodesSETNB & other)
{

}

OpcodesSETNB::~OpcodesSETNB()
{

}

void OpcodesSETNB::accept(Visitor *v)
{
  v->visitOpcodesSETNB(this);
}

OpcodesSETNB *OpcodesSETNB::clone() const
{
  return new OpcodesSETNB(*this);
}



/********************   OpcodesSETNBE    ********************/
OpcodesSETNBE::OpcodesSETNBE()
{

}

OpcodesSETNBE::OpcodesSETNBE(const OpcodesSETNBE & other)
{

}

OpcodesSETNBE &OpcodesSETNBE::operator=(const OpcodesSETNBE & other)
{
  OpcodesSETNBE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETNBE::swap(OpcodesSETNBE & other)
{

}

OpcodesSETNBE::~OpcodesSETNBE()
{

}

void OpcodesSETNBE::accept(Visitor *v)
{
  v->visitOpcodesSETNBE(this);
}

OpcodesSETNBE *OpcodesSETNBE::clone() const
{
  return new OpcodesSETNBE(*this);
}



/********************   OpcodesSETNC    ********************/
OpcodesSETNC::OpcodesSETNC()
{

}

OpcodesSETNC::OpcodesSETNC(const OpcodesSETNC & other)
{

}

OpcodesSETNC &OpcodesSETNC::operator=(const OpcodesSETNC & other)
{
  OpcodesSETNC tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETNC::swap(OpcodesSETNC & other)
{

}

OpcodesSETNC::~OpcodesSETNC()
{

}

void OpcodesSETNC::accept(Visitor *v)
{
  v->visitOpcodesSETNC(this);
}

OpcodesSETNC *OpcodesSETNC::clone() const
{
  return new OpcodesSETNC(*this);
}



/********************   OpcodesSETNE    ********************/
OpcodesSETNE::OpcodesSETNE()
{

}

OpcodesSETNE::OpcodesSETNE(const OpcodesSETNE & other)
{

}

OpcodesSETNE &OpcodesSETNE::operator=(const OpcodesSETNE & other)
{
  OpcodesSETNE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETNE::swap(OpcodesSETNE & other)
{

}

OpcodesSETNE::~OpcodesSETNE()
{

}

void OpcodesSETNE::accept(Visitor *v)
{
  v->visitOpcodesSETNE(this);
}

OpcodesSETNE *OpcodesSETNE::clone() const
{
  return new OpcodesSETNE(*this);
}



/********************   OpcodesSETNG    ********************/
OpcodesSETNG::OpcodesSETNG()
{

}

OpcodesSETNG::OpcodesSETNG(const OpcodesSETNG & other)
{

}

OpcodesSETNG &OpcodesSETNG::operator=(const OpcodesSETNG & other)
{
  OpcodesSETNG tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETNG::swap(OpcodesSETNG & other)
{

}

OpcodesSETNG::~OpcodesSETNG()
{

}

void OpcodesSETNG::accept(Visitor *v)
{
  v->visitOpcodesSETNG(this);
}

OpcodesSETNG *OpcodesSETNG::clone() const
{
  return new OpcodesSETNG(*this);
}



/********************   OpcodesSETNGE    ********************/
OpcodesSETNGE::OpcodesSETNGE()
{

}

OpcodesSETNGE::OpcodesSETNGE(const OpcodesSETNGE & other)
{

}

OpcodesSETNGE &OpcodesSETNGE::operator=(const OpcodesSETNGE & other)
{
  OpcodesSETNGE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETNGE::swap(OpcodesSETNGE & other)
{

}

OpcodesSETNGE::~OpcodesSETNGE()
{

}

void OpcodesSETNGE::accept(Visitor *v)
{
  v->visitOpcodesSETNGE(this);
}

OpcodesSETNGE *OpcodesSETNGE::clone() const
{
  return new OpcodesSETNGE(*this);
}



/********************   OpcodesSETNL    ********************/
OpcodesSETNL::OpcodesSETNL()
{

}

OpcodesSETNL::OpcodesSETNL(const OpcodesSETNL & other)
{

}

OpcodesSETNL &OpcodesSETNL::operator=(const OpcodesSETNL & other)
{
  OpcodesSETNL tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETNL::swap(OpcodesSETNL & other)
{

}

OpcodesSETNL::~OpcodesSETNL()
{

}

void OpcodesSETNL::accept(Visitor *v)
{
  v->visitOpcodesSETNL(this);
}

OpcodesSETNL *OpcodesSETNL::clone() const
{
  return new OpcodesSETNL(*this);
}



/********************   OpcodesSETNLE    ********************/
OpcodesSETNLE::OpcodesSETNLE()
{

}

OpcodesSETNLE::OpcodesSETNLE(const OpcodesSETNLE & other)
{

}

OpcodesSETNLE &OpcodesSETNLE::operator=(const OpcodesSETNLE & other)
{
  OpcodesSETNLE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETNLE::swap(OpcodesSETNLE & other)
{

}

OpcodesSETNLE::~OpcodesSETNLE()
{

}

void OpcodesSETNLE::accept(Visitor *v)
{
  v->visitOpcodesSETNLE(this);
}

OpcodesSETNLE *OpcodesSETNLE::clone() const
{
  return new OpcodesSETNLE(*this);
}



/********************   OpcodesSETNO    ********************/
OpcodesSETNO::OpcodesSETNO()
{

}

OpcodesSETNO::OpcodesSETNO(const OpcodesSETNO & other)
{

}

OpcodesSETNO &OpcodesSETNO::operator=(const OpcodesSETNO & other)
{
  OpcodesSETNO tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETNO::swap(OpcodesSETNO & other)
{

}

OpcodesSETNO::~OpcodesSETNO()
{

}

void OpcodesSETNO::accept(Visitor *v)
{
  v->visitOpcodesSETNO(this);
}

OpcodesSETNO *OpcodesSETNO::clone() const
{
  return new OpcodesSETNO(*this);
}



/********************   OpcodesSETNP    ********************/
OpcodesSETNP::OpcodesSETNP()
{

}

OpcodesSETNP::OpcodesSETNP(const OpcodesSETNP & other)
{

}

OpcodesSETNP &OpcodesSETNP::operator=(const OpcodesSETNP & other)
{
  OpcodesSETNP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETNP::swap(OpcodesSETNP & other)
{

}

OpcodesSETNP::~OpcodesSETNP()
{

}

void OpcodesSETNP::accept(Visitor *v)
{
  v->visitOpcodesSETNP(this);
}

OpcodesSETNP *OpcodesSETNP::clone() const
{
  return new OpcodesSETNP(*this);
}



/********************   OpcodesSETNS    ********************/
OpcodesSETNS::OpcodesSETNS()
{

}

OpcodesSETNS::OpcodesSETNS(const OpcodesSETNS & other)
{

}

OpcodesSETNS &OpcodesSETNS::operator=(const OpcodesSETNS & other)
{
  OpcodesSETNS tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETNS::swap(OpcodesSETNS & other)
{

}

OpcodesSETNS::~OpcodesSETNS()
{

}

void OpcodesSETNS::accept(Visitor *v)
{
  v->visitOpcodesSETNS(this);
}

OpcodesSETNS *OpcodesSETNS::clone() const
{
  return new OpcodesSETNS(*this);
}



/********************   OpcodesSETNZ    ********************/
OpcodesSETNZ::OpcodesSETNZ()
{

}

OpcodesSETNZ::OpcodesSETNZ(const OpcodesSETNZ & other)
{

}

OpcodesSETNZ &OpcodesSETNZ::operator=(const OpcodesSETNZ & other)
{
  OpcodesSETNZ tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETNZ::swap(OpcodesSETNZ & other)
{

}

OpcodesSETNZ::~OpcodesSETNZ()
{

}

void OpcodesSETNZ::accept(Visitor *v)
{
  v->visitOpcodesSETNZ(this);
}

OpcodesSETNZ *OpcodesSETNZ::clone() const
{
  return new OpcodesSETNZ(*this);
}



/********************   OpcodesSETO    ********************/
OpcodesSETO::OpcodesSETO()
{

}

OpcodesSETO::OpcodesSETO(const OpcodesSETO & other)
{

}

OpcodesSETO &OpcodesSETO::operator=(const OpcodesSETO & other)
{
  OpcodesSETO tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETO::swap(OpcodesSETO & other)
{

}

OpcodesSETO::~OpcodesSETO()
{

}

void OpcodesSETO::accept(Visitor *v)
{
  v->visitOpcodesSETO(this);
}

OpcodesSETO *OpcodesSETO::clone() const
{
  return new OpcodesSETO(*this);
}



/********************   OpcodesSETP    ********************/
OpcodesSETP::OpcodesSETP()
{

}

OpcodesSETP::OpcodesSETP(const OpcodesSETP & other)
{

}

OpcodesSETP &OpcodesSETP::operator=(const OpcodesSETP & other)
{
  OpcodesSETP tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETP::swap(OpcodesSETP & other)
{

}

OpcodesSETP::~OpcodesSETP()
{

}

void OpcodesSETP::accept(Visitor *v)
{
  v->visitOpcodesSETP(this);
}

OpcodesSETP *OpcodesSETP::clone() const
{
  return new OpcodesSETP(*this);
}



/********************   OpcodesSETPE    ********************/
OpcodesSETPE::OpcodesSETPE()
{

}

OpcodesSETPE::OpcodesSETPE(const OpcodesSETPE & other)
{

}

OpcodesSETPE &OpcodesSETPE::operator=(const OpcodesSETPE & other)
{
  OpcodesSETPE tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETPE::swap(OpcodesSETPE & other)
{

}

OpcodesSETPE::~OpcodesSETPE()
{

}

void OpcodesSETPE::accept(Visitor *v)
{
  v->visitOpcodesSETPE(this);
}

OpcodesSETPE *OpcodesSETPE::clone() const
{
  return new OpcodesSETPE(*this);
}



/********************   OpcodesSETPO    ********************/
OpcodesSETPO::OpcodesSETPO()
{

}

OpcodesSETPO::OpcodesSETPO(const OpcodesSETPO & other)
{

}

OpcodesSETPO &OpcodesSETPO::operator=(const OpcodesSETPO & other)
{
  OpcodesSETPO tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETPO::swap(OpcodesSETPO & other)
{

}

OpcodesSETPO::~OpcodesSETPO()
{

}

void OpcodesSETPO::accept(Visitor *v)
{
  v->visitOpcodesSETPO(this);
}

OpcodesSETPO *OpcodesSETPO::clone() const
{
  return new OpcodesSETPO(*this);
}



/********************   OpcodesSETS    ********************/
OpcodesSETS::OpcodesSETS()
{

}

OpcodesSETS::OpcodesSETS(const OpcodesSETS & other)
{

}

OpcodesSETS &OpcodesSETS::operator=(const OpcodesSETS & other)
{
  OpcodesSETS tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETS::swap(OpcodesSETS & other)
{

}

OpcodesSETS::~OpcodesSETS()
{

}

void OpcodesSETS::accept(Visitor *v)
{
  v->visitOpcodesSETS(this);
}

OpcodesSETS *OpcodesSETS::clone() const
{
  return new OpcodesSETS(*this);
}



/********************   OpcodesSETZ    ********************/
OpcodesSETZ::OpcodesSETZ()
{

}

OpcodesSETZ::OpcodesSETZ(const OpcodesSETZ & other)
{

}

OpcodesSETZ &OpcodesSETZ::operator=(const OpcodesSETZ & other)
{
  OpcodesSETZ tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSETZ::swap(OpcodesSETZ & other)
{

}

OpcodesSETZ::~OpcodesSETZ()
{

}

void OpcodesSETZ::accept(Visitor *v)
{
  v->visitOpcodesSETZ(this);
}

OpcodesSETZ *OpcodesSETZ::clone() const
{
  return new OpcodesSETZ(*this);
}



/********************   OpcodesSGDT    ********************/
OpcodesSGDT::OpcodesSGDT()
{

}

OpcodesSGDT::OpcodesSGDT(const OpcodesSGDT & other)
{

}

OpcodesSGDT &OpcodesSGDT::operator=(const OpcodesSGDT & other)
{
  OpcodesSGDT tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSGDT::swap(OpcodesSGDT & other)
{

}

OpcodesSGDT::~OpcodesSGDT()
{

}

void OpcodesSGDT::accept(Visitor *v)
{
  v->visitOpcodesSGDT(this);
}

OpcodesSGDT *OpcodesSGDT::clone() const
{
  return new OpcodesSGDT(*this);
}



/********************   OpcodesSHL    ********************/
OpcodesSHL::OpcodesSHL()
{

}

OpcodesSHL::OpcodesSHL(const OpcodesSHL & other)
{

}

OpcodesSHL &OpcodesSHL::operator=(const OpcodesSHL & other)
{
  OpcodesSHL tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSHL::swap(OpcodesSHL & other)
{

}

OpcodesSHL::~OpcodesSHL()
{

}

void OpcodesSHL::accept(Visitor *v)
{
  v->visitOpcodesSHL(this);
}

OpcodesSHL *OpcodesSHL::clone() const
{
  return new OpcodesSHL(*this);
}



/********************   OpcodesSHLD    ********************/
OpcodesSHLD::OpcodesSHLD()
{

}

OpcodesSHLD::OpcodesSHLD(const OpcodesSHLD & other)
{

}

OpcodesSHLD &OpcodesSHLD::operator=(const OpcodesSHLD & other)
{
  OpcodesSHLD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSHLD::swap(OpcodesSHLD & other)
{

}

OpcodesSHLD::~OpcodesSHLD()
{

}

void OpcodesSHLD::accept(Visitor *v)
{
  v->visitOpcodesSHLD(this);
}

OpcodesSHLD *OpcodesSHLD::clone() const
{
  return new OpcodesSHLD(*this);
}



/********************   OpcodesSHR    ********************/
OpcodesSHR::OpcodesSHR()
{

}

OpcodesSHR::OpcodesSHR(const OpcodesSHR & other)
{

}

OpcodesSHR &OpcodesSHR::operator=(const OpcodesSHR & other)
{
  OpcodesSHR tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSHR::swap(OpcodesSHR & other)
{

}

OpcodesSHR::~OpcodesSHR()
{

}

void OpcodesSHR::accept(Visitor *v)
{
  v->visitOpcodesSHR(this);
}

OpcodesSHR *OpcodesSHR::clone() const
{
  return new OpcodesSHR(*this);
}



/********************   OpcodesSHRD    ********************/
OpcodesSHRD::OpcodesSHRD()
{

}

OpcodesSHRD::OpcodesSHRD(const OpcodesSHRD & other)
{

}

OpcodesSHRD &OpcodesSHRD::operator=(const OpcodesSHRD & other)
{
  OpcodesSHRD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSHRD::swap(OpcodesSHRD & other)
{

}

OpcodesSHRD::~OpcodesSHRD()
{

}

void OpcodesSHRD::accept(Visitor *v)
{
  v->visitOpcodesSHRD(this);
}

OpcodesSHRD *OpcodesSHRD::clone() const
{
  return new OpcodesSHRD(*this);
}



/********************   OpcodesSIDT    ********************/
OpcodesSIDT::OpcodesSIDT()
{

}

OpcodesSIDT::OpcodesSIDT(const OpcodesSIDT & other)
{

}

OpcodesSIDT &OpcodesSIDT::operator=(const OpcodesSIDT & other)
{
  OpcodesSIDT tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSIDT::swap(OpcodesSIDT & other)
{

}

OpcodesSIDT::~OpcodesSIDT()
{

}

void OpcodesSIDT::accept(Visitor *v)
{
  v->visitOpcodesSIDT(this);
}

OpcodesSIDT *OpcodesSIDT::clone() const
{
  return new OpcodesSIDT(*this);
}



/********************   OpcodesSLDT    ********************/
OpcodesSLDT::OpcodesSLDT()
{

}

OpcodesSLDT::OpcodesSLDT(const OpcodesSLDT & other)
{

}

OpcodesSLDT &OpcodesSLDT::operator=(const OpcodesSLDT & other)
{
  OpcodesSLDT tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSLDT::swap(OpcodesSLDT & other)
{

}

OpcodesSLDT::~OpcodesSLDT()
{

}

void OpcodesSLDT::accept(Visitor *v)
{
  v->visitOpcodesSLDT(this);
}

OpcodesSLDT *OpcodesSLDT::clone() const
{
  return new OpcodesSLDT(*this);
}



/********************   OpcodesSMSW    ********************/
OpcodesSMSW::OpcodesSMSW()
{

}

OpcodesSMSW::OpcodesSMSW(const OpcodesSMSW & other)
{

}

OpcodesSMSW &OpcodesSMSW::operator=(const OpcodesSMSW & other)
{
  OpcodesSMSW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSMSW::swap(OpcodesSMSW & other)
{

}

OpcodesSMSW::~OpcodesSMSW()
{

}

void OpcodesSMSW::accept(Visitor *v)
{
  v->visitOpcodesSMSW(this);
}

OpcodesSMSW *OpcodesSMSW::clone() const
{
  return new OpcodesSMSW(*this);
}



/********************   OpcodesSTC    ********************/
OpcodesSTC::OpcodesSTC()
{

}

OpcodesSTC::OpcodesSTC(const OpcodesSTC & other)
{

}

OpcodesSTC &OpcodesSTC::operator=(const OpcodesSTC & other)
{
  OpcodesSTC tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSTC::swap(OpcodesSTC & other)
{

}

OpcodesSTC::~OpcodesSTC()
{

}

void OpcodesSTC::accept(Visitor *v)
{
  v->visitOpcodesSTC(this);
}

OpcodesSTC *OpcodesSTC::clone() const
{
  return new OpcodesSTC(*this);
}



/********************   OpcodesSTD    ********************/
OpcodesSTD::OpcodesSTD()
{

}

OpcodesSTD::OpcodesSTD(const OpcodesSTD & other)
{

}

OpcodesSTD &OpcodesSTD::operator=(const OpcodesSTD & other)
{
  OpcodesSTD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSTD::swap(OpcodesSTD & other)
{

}

OpcodesSTD::~OpcodesSTD()
{

}

void OpcodesSTD::accept(Visitor *v)
{
  v->visitOpcodesSTD(this);
}

OpcodesSTD *OpcodesSTD::clone() const
{
  return new OpcodesSTD(*this);
}



/********************   OpcodesSTI    ********************/
OpcodesSTI::OpcodesSTI()
{

}

OpcodesSTI::OpcodesSTI(const OpcodesSTI & other)
{

}

OpcodesSTI &OpcodesSTI::operator=(const OpcodesSTI & other)
{
  OpcodesSTI tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSTI::swap(OpcodesSTI & other)
{

}

OpcodesSTI::~OpcodesSTI()
{

}

void OpcodesSTI::accept(Visitor *v)
{
  v->visitOpcodesSTI(this);
}

OpcodesSTI *OpcodesSTI::clone() const
{
  return new OpcodesSTI(*this);
}



/********************   OpcodesSTOSB    ********************/
OpcodesSTOSB::OpcodesSTOSB()
{

}

OpcodesSTOSB::OpcodesSTOSB(const OpcodesSTOSB & other)
{

}

OpcodesSTOSB &OpcodesSTOSB::operator=(const OpcodesSTOSB & other)
{
  OpcodesSTOSB tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSTOSB::swap(OpcodesSTOSB & other)
{

}

OpcodesSTOSB::~OpcodesSTOSB()
{

}

void OpcodesSTOSB::accept(Visitor *v)
{
  v->visitOpcodesSTOSB(this);
}

OpcodesSTOSB *OpcodesSTOSB::clone() const
{
  return new OpcodesSTOSB(*this);
}



/********************   OpcodesSTOSD    ********************/
OpcodesSTOSD::OpcodesSTOSD()
{

}

OpcodesSTOSD::OpcodesSTOSD(const OpcodesSTOSD & other)
{

}

OpcodesSTOSD &OpcodesSTOSD::operator=(const OpcodesSTOSD & other)
{
  OpcodesSTOSD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSTOSD::swap(OpcodesSTOSD & other)
{

}

OpcodesSTOSD::~OpcodesSTOSD()
{

}

void OpcodesSTOSD::accept(Visitor *v)
{
  v->visitOpcodesSTOSD(this);
}

OpcodesSTOSD *OpcodesSTOSD::clone() const
{
  return new OpcodesSTOSD(*this);
}



/********************   OpcodesSTOSW    ********************/
OpcodesSTOSW::OpcodesSTOSW()
{

}

OpcodesSTOSW::OpcodesSTOSW(const OpcodesSTOSW & other)
{

}

OpcodesSTOSW &OpcodesSTOSW::operator=(const OpcodesSTOSW & other)
{
  OpcodesSTOSW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSTOSW::swap(OpcodesSTOSW & other)
{

}

OpcodesSTOSW::~OpcodesSTOSW()
{

}

void OpcodesSTOSW::accept(Visitor *v)
{
  v->visitOpcodesSTOSW(this);
}

OpcodesSTOSW *OpcodesSTOSW::clone() const
{
  return new OpcodesSTOSW(*this);
}



/********************   OpcodesSTR    ********************/
OpcodesSTR::OpcodesSTR()
{

}

OpcodesSTR::OpcodesSTR(const OpcodesSTR & other)
{

}

OpcodesSTR &OpcodesSTR::operator=(const OpcodesSTR & other)
{
  OpcodesSTR tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSTR::swap(OpcodesSTR & other)
{

}

OpcodesSTR::~OpcodesSTR()
{

}

void OpcodesSTR::accept(Visitor *v)
{
  v->visitOpcodesSTR(this);
}

OpcodesSTR *OpcodesSTR::clone() const
{
  return new OpcodesSTR(*this);
}



/********************   OpcodesSUB    ********************/
OpcodesSUB::OpcodesSUB()
{

}

OpcodesSUB::OpcodesSUB(const OpcodesSUB & other)
{

}

OpcodesSUB &OpcodesSUB::operator=(const OpcodesSUB & other)
{
  OpcodesSUB tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesSUB::swap(OpcodesSUB & other)
{

}

OpcodesSUB::~OpcodesSUB()
{

}

void OpcodesSUB::accept(Visitor *v)
{
  v->visitOpcodesSUB(this);
}

OpcodesSUB *OpcodesSUB::clone() const
{
  return new OpcodesSUB(*this);
}



/********************   OpcodesTEST    ********************/
OpcodesTEST::OpcodesTEST()
{

}

OpcodesTEST::OpcodesTEST(const OpcodesTEST & other)
{

}

OpcodesTEST &OpcodesTEST::operator=(const OpcodesTEST & other)
{
  OpcodesTEST tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesTEST::swap(OpcodesTEST & other)
{

}

OpcodesTEST::~OpcodesTEST()
{

}

void OpcodesTEST::accept(Visitor *v)
{
  v->visitOpcodesTEST(this);
}

OpcodesTEST *OpcodesTEST::clone() const
{
  return new OpcodesTEST(*this);
}



/********************   OpcodesTIMES    ********************/
OpcodesTIMES::OpcodesTIMES()
{

}

OpcodesTIMES::OpcodesTIMES(const OpcodesTIMES & other)
{

}

OpcodesTIMES &OpcodesTIMES::operator=(const OpcodesTIMES & other)
{
  OpcodesTIMES tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesTIMES::swap(OpcodesTIMES & other)
{

}

OpcodesTIMES::~OpcodesTIMES()
{

}

void OpcodesTIMES::accept(Visitor *v)
{
  v->visitOpcodesTIMES(this);
}

OpcodesTIMES *OpcodesTIMES::clone() const
{
  return new OpcodesTIMES(*this);
}



/********************   OpcodesUD2    ********************/
OpcodesUD2::OpcodesUD2()
{

}

OpcodesUD2::OpcodesUD2(const OpcodesUD2 & other)
{

}

OpcodesUD2 &OpcodesUD2::operator=(const OpcodesUD2 & other)
{
  OpcodesUD2 tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesUD2::swap(OpcodesUD2 & other)
{

}

OpcodesUD2::~OpcodesUD2()
{

}

void OpcodesUD2::accept(Visitor *v)
{
  v->visitOpcodesUD2(this);
}

OpcodesUD2 *OpcodesUD2::clone() const
{
  return new OpcodesUD2(*this);
}



/********************   OpcodesVERR    ********************/
OpcodesVERR::OpcodesVERR()
{

}

OpcodesVERR::OpcodesVERR(const OpcodesVERR & other)
{

}

OpcodesVERR &OpcodesVERR::operator=(const OpcodesVERR & other)
{
  OpcodesVERR tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesVERR::swap(OpcodesVERR & other)
{

}

OpcodesVERR::~OpcodesVERR()
{

}

void OpcodesVERR::accept(Visitor *v)
{
  v->visitOpcodesVERR(this);
}

OpcodesVERR *OpcodesVERR::clone() const
{
  return new OpcodesVERR(*this);
}



/********************   OpcodesVERW    ********************/
OpcodesVERW::OpcodesVERW()
{

}

OpcodesVERW::OpcodesVERW(const OpcodesVERW & other)
{

}

OpcodesVERW &OpcodesVERW::operator=(const OpcodesVERW & other)
{
  OpcodesVERW tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesVERW::swap(OpcodesVERW & other)
{

}

OpcodesVERW::~OpcodesVERW()
{

}

void OpcodesVERW::accept(Visitor *v)
{
  v->visitOpcodesVERW(this);
}

OpcodesVERW *OpcodesVERW::clone() const
{
  return new OpcodesVERW(*this);
}



/********************   OpcodesWAIT    ********************/
OpcodesWAIT::OpcodesWAIT()
{

}

OpcodesWAIT::OpcodesWAIT(const OpcodesWAIT & other)
{

}

OpcodesWAIT &OpcodesWAIT::operator=(const OpcodesWAIT & other)
{
  OpcodesWAIT tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesWAIT::swap(OpcodesWAIT & other)
{

}

OpcodesWAIT::~OpcodesWAIT()
{

}

void OpcodesWAIT::accept(Visitor *v)
{
  v->visitOpcodesWAIT(this);
}

OpcodesWAIT *OpcodesWAIT::clone() const
{
  return new OpcodesWAIT(*this);
}



/********************   OpcodesWBINVD    ********************/
OpcodesWBINVD::OpcodesWBINVD()
{

}

OpcodesWBINVD::OpcodesWBINVD(const OpcodesWBINVD & other)
{

}

OpcodesWBINVD &OpcodesWBINVD::operator=(const OpcodesWBINVD & other)
{
  OpcodesWBINVD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesWBINVD::swap(OpcodesWBINVD & other)
{

}

OpcodesWBINVD::~OpcodesWBINVD()
{

}

void OpcodesWBINVD::accept(Visitor *v)
{
  v->visitOpcodesWBINVD(this);
}

OpcodesWBINVD *OpcodesWBINVD::clone() const
{
  return new OpcodesWBINVD(*this);
}



/********************   OpcodesWRMSR    ********************/
OpcodesWRMSR::OpcodesWRMSR()
{

}

OpcodesWRMSR::OpcodesWRMSR(const OpcodesWRMSR & other)
{

}

OpcodesWRMSR &OpcodesWRMSR::operator=(const OpcodesWRMSR & other)
{
  OpcodesWRMSR tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesWRMSR::swap(OpcodesWRMSR & other)
{

}

OpcodesWRMSR::~OpcodesWRMSR()
{

}

void OpcodesWRMSR::accept(Visitor *v)
{
  v->visitOpcodesWRMSR(this);
}

OpcodesWRMSR *OpcodesWRMSR::clone() const
{
  return new OpcodesWRMSR(*this);
}



/********************   OpcodesXADD    ********************/
OpcodesXADD::OpcodesXADD()
{

}

OpcodesXADD::OpcodesXADD(const OpcodesXADD & other)
{

}

OpcodesXADD &OpcodesXADD::operator=(const OpcodesXADD & other)
{
  OpcodesXADD tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesXADD::swap(OpcodesXADD & other)
{

}

OpcodesXADD::~OpcodesXADD()
{

}

void OpcodesXADD::accept(Visitor *v)
{
  v->visitOpcodesXADD(this);
}

OpcodesXADD *OpcodesXADD::clone() const
{
  return new OpcodesXADD(*this);
}



/********************   OpcodesXCHG    ********************/
OpcodesXCHG::OpcodesXCHG()
{

}

OpcodesXCHG::OpcodesXCHG(const OpcodesXCHG & other)
{

}

OpcodesXCHG &OpcodesXCHG::operator=(const OpcodesXCHG & other)
{
  OpcodesXCHG tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesXCHG::swap(OpcodesXCHG & other)
{

}

OpcodesXCHG::~OpcodesXCHG()
{

}

void OpcodesXCHG::accept(Visitor *v)
{
  v->visitOpcodesXCHG(this);
}

OpcodesXCHG *OpcodesXCHG::clone() const
{
  return new OpcodesXCHG(*this);
}



/********************   OpcodesXLATB    ********************/
OpcodesXLATB::OpcodesXLATB()
{

}

OpcodesXLATB::OpcodesXLATB(const OpcodesXLATB & other)
{

}

OpcodesXLATB &OpcodesXLATB::operator=(const OpcodesXLATB & other)
{
  OpcodesXLATB tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesXLATB::swap(OpcodesXLATB & other)
{

}

OpcodesXLATB::~OpcodesXLATB()
{

}

void OpcodesXLATB::accept(Visitor *v)
{
  v->visitOpcodesXLATB(this);
}

OpcodesXLATB *OpcodesXLATB::clone() const
{
  return new OpcodesXLATB(*this);
}



/********************   OpcodesXOR    ********************/
OpcodesXOR::OpcodesXOR()
{

}

OpcodesXOR::OpcodesXOR(const OpcodesXOR & other)
{

}

OpcodesXOR &OpcodesXOR::operator=(const OpcodesXOR & other)
{
  OpcodesXOR tmp(other);
  swap(tmp);
  return *this;
}

void OpcodesXOR::swap(OpcodesXOR & other)
{

}

OpcodesXOR::~OpcodesXOR()
{

}

void OpcodesXOR::accept(Visitor *v)
{
  v->visitOpcodesXOR(this);
}

OpcodesXOR *OpcodesXOR::clone() const
{
  return new OpcodesXOR(*this);
}




/********************   ListStatement    ********************/

void ListStatement::accept(Visitor *v)
{
  v->visitListStatement(this);
}

ListStatement *ListStatement::clone() const
{
  return new ListStatement(*this);
}

ListStatement* consListStatement(Statement* x, ListStatement* xs) {
  xs->insert(xs->begin(), x);
  return xs;
}


/********************   ListMnemonicArgs    ********************/

void ListMnemonicArgs::accept(Visitor *v)
{
  v->visitListMnemonicArgs(this);
}

ListMnemonicArgs *ListMnemonicArgs::clone() const
{
  return new ListMnemonicArgs(*this);
}

ListMnemonicArgs* consListMnemonicArgs(MnemonicArgs* x, ListMnemonicArgs* xs) {
  xs->insert(xs->begin(), x);
  return xs;
}





