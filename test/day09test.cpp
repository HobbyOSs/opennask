#include <gtest/gtest.h>
#include "spdlog/spdlog.h"
#include "spdlog/sinks/stdout_color_sinks.h"
#include "front_end.hh"
#include "demangle.hpp"
#include "diff.hh"

class Day09Suite : public ::testing::Test {
protected:
    // 試験開始時に一回だけ実行
    Day09Suite() {
        spdlog::set_level(spdlog::level::debug);
    }

    // 試験終了時に一回だけ実行
    ~Day09Suite() override {
    }

    // 各テストケース実行前に実行
    void SetUp() override {
    }

    // 各テストケース実行後に実行
    void TearDown() override {
    }
};


TEST_F(Day09Suite, Harib06c) {

    std::stringstream ss;
    const char nask_statements[] = R"(
; naskfunc
; TAB=4

[FORMAT "WCOFF"]				; オブジェクトファイルを作るモード
[INSTRSET "i486p"]				; 486の命令まで使いたいという記述
[BITS 32]						; 32ビットモード用の機械語を作らせる
[FILE "naskfunc.nas"]			; ソースファイル名情報

		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
		GLOBAL	_io_in8,  _io_in16,  _io_in32
		GLOBAL	_io_out8, _io_out16, _io_out32
		GLOBAL	_io_load_eflags, _io_store_eflags
		GLOBAL	_load_gdtr, _load_idtr
		GLOBAL	_load_cr0, _store_cr0
		GLOBAL	_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
		GLOBAL	_memtest_sub
		EXTERN	_inthandler21, _inthandler27, _inthandler2c

[SECTION .text]

_io_hlt:	; void io_hlt(void);
		HLT
		RET

_io_cli:	; void io_cli(void);
		CLI
		RET

_io_sti:	; void io_sti(void);
		STI
		RET

_io_stihlt:	; void io_stihlt(void);
		STI
		HLT
		RET

_io_in8:	; int io_in8(int port);
		MOV		EDX,[ESP+4]		; port
		MOV		EAX,0
		IN		AL,DX
		RET

_io_in16:	; int io_in16(int port);
		MOV		EDX,[ESP+4]		; port
		MOV		EAX,0
		IN		AX,DX
		RET

_io_in32:	; int io_in32(int port);
		MOV		EDX,[ESP+4]		; port
		IN		EAX,DX
		RET

_io_out8:	; void io_out8(int port, int data);
		MOV		EDX,[ESP+4]		; port
		MOV		AL,[ESP+8]		; data
		OUT		DX,AL
		RET

_io_out16:	; void io_out16(int port, int data);
		MOV		EDX,[ESP+4]		; port
		MOV		EAX,[ESP+8]		; data
		OUT		DX,AX
		RET

_io_out32:	; void io_out32(int port, int data);
		MOV		EDX,[ESP+4]		; port
		MOV		EAX,[ESP+8]		; data
		OUT		DX,EAX
		RET

_io_load_eflags:	; int io_load_eflags(void);
		PUSHFD		; PUSH EFLAGS という意味
		POP		EAX
		RET

_io_store_eflags:	; void io_store_eflags(int eflags);
		MOV		EAX,[ESP+4]
		PUSH	EAX
		POPFD		; POP EFLAGS という意味
		RET

_load_gdtr:		; void load_gdtr(int limit, int addr);
		MOV		AX,[ESP+4]		; limit
		MOV		[ESP+6],AX
		LGDT	[ESP+6]
		RET

_load_idtr:		; void load_idtr(int limit, int addr);
		MOV		AX,[ESP+4]		; limit
		MOV		[ESP+6],AX
		LIDT	[ESP+6]
		RET

_load_cr0:		; int load_cr0(void);
		MOV		EAX,CR0
		RET

_store_cr0:		; void store_cr0(int cr0);
		MOV		EAX,[ESP+4]
		MOV		CR0,EAX
		RET

_asm_inthandler21:
		PUSH	ES
		PUSH	DS
		PUSHAD
		MOV		EAX,ESP
		PUSH	EAX
		MOV		AX,SS
		MOV		DS,AX
		MOV		ES,AX
		CALL	_inthandler21
		POP		EAX
		POPAD
		POP		DS
		POP		ES
		IRETD

_asm_inthandler27:
		PUSH	ES
		PUSH	DS
		PUSHAD
		MOV		EAX,ESP
		PUSH	EAX
		MOV		AX,SS
		MOV		DS,AX
		MOV		ES,AX
		CALL	_inthandler27
		POP		EAX
		POPAD
		POP		DS
		POP		ES
		IRETD

_asm_inthandler2c:
		PUSH	ES
		PUSH	DS
		PUSHAD
		MOV		EAX,ESP
		PUSH	EAX
		MOV		AX,SS
		MOV		DS,AX
		MOV		ES,AX
		CALL	_inthandler2c
		POP		EAX
		POPAD
		POP		DS
		POP		ES
		IRETD

_memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
		PUSH	EDI						; （EBX, ESI, EDI も使いたいので）
		PUSH	ESI
		PUSH	EBX
		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
		MOV		EAX,[ESP+12+4]			; i = start;
mts_loop:
		MOV		EBX,EAX
		ADD		EBX,0xffc				; p = i + 0xffc;
		MOV		EDX,[EBX]				; old = *p;
		MOV		[EBX],ESI				; *p = pat0;
		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
		JNE		mts_fin
		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
		JNE		mts_fin
		MOV		[EBX],EDX				; *p = old;
		ADD		EAX,0x1000				; i += 0x1000;
		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
		JBE		mts_loop
		POP		EBX
		POP		ESI
		POP		EDI
		RET
mts_fin:
		MOV		[EBX],EDX				; *p = old;
		POP		EBX
		POP		ESI
		POP		EDI
		RET
)";

    // od形式で出力する際は `od -t x1 test/test.img > test_img.txt`
    ss << nask_statements;
    auto d = std::make_unique<FrontEnd>(true, true);
    auto pt = d->Parse<Program>(ss);
    d->Eval<Program>(pt.get(), "test.img");

    std::vector<uint8_t> expected = {};

    // COFFのヘッダー部分
    expected.insert(expected.end(), {
            0x4C, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAC, 0x01, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00
        });
    // COFFの各種section
    expected.insert(expected.end(), {
            0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x01, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x00, 0x8E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x10, 0x60
        }); // .text
    expected.insert(expected.end(), {
            0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x10, 0xC0
        }); // .data
    expected.insert(expected.end(), {
            0x2E, 0x62, 0x73, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x10, 0xC0
        }); // .bss
    expected.insert(expected.end(), {
            0xF4, 0xC3, 0xFA, 0xC3, 0xFB, 0xC3, 0xFB, 0xF4, 0xC3, 0x8B, 0x54, 0x24, 0x04, 0xB8, 0x00, 0x00,
            0x00, 0x00, 0xEC, 0xC3, 0x8B, 0x54, 0x24, 0x04, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x66, 0xED, 0xC3,
            0x8B, 0x54, 0x24, 0x04, 0xED, 0xC3, 0x8B, 0x54, 0x24, 0x04, 0x8A, 0x44, 0x24, 0x08, 0xEE, 0xC3,
            0x8B, 0x54, 0x24, 0x04, 0x8B, 0x44, 0x24, 0x08, 0x66, 0xEF, 0xC3, 0x8B, 0x54, 0x24, 0x04, 0x8B,
            0x44, 0x24, 0x08, 0xEF, 0xC3, 0x9C, 0x58, 0xC3, 0x8B, 0x44, 0x24, 0x04, 0x50, 0x9D, 0xC3, 0x66,
            0x8B, 0x44, 0x24, 0x04, 0x66, 0x89, 0x44, 0x24, 0x06, 0x0F, 0x01, 0x54, 0x24, 0x06, 0xC3, 0x66,
            0x8B, 0x44, 0x24, 0x04, 0x66, 0x89, 0x44, 0x24, 0x06, 0x0F, 0x01, 0x5C, 0x24, 0x06, 0xC3, 0x0F,
            0x20, 0xC0, 0xC3, 0x8B, 0x44, 0x24, 0x04, 0x0F, 0x22, 0xC0, 0xC3, 0x06, 0x1E, 0x60, 0x89, 0xE0,
            0x50, 0x66, 0x8C, 0xD0, 0x8E, 0xD8, 0x8E, 0xC0, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x58, 0x61, 0x1F,
            0x07, 0xCF, 0x06, 0x1E, 0x60, 0x89, 0xE0, 0x50, 0x66, 0x8C, 0xD0, 0x8E, 0xD8, 0x8E, 0xC0, 0xE8,
            0x00, 0x00, 0x00, 0x00, 0x58, 0x61, 0x1F, 0x07, 0xCF, 0x06, 0x1E, 0x60, 0x89, 0xE0, 0x50, 0x66,
            0x8C, 0xD0, 0x8E, 0xD8, 0x8E, 0xC0, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x58, 0x61, 0x1F, 0x07, 0xCF,
            0x57, 0x56, 0x53, 0xBE, 0x55, 0xAA, 0x55, 0xAA, 0xBF, 0xAA, 0x55, 0xAA, 0x55, 0x8B, 0x44, 0x24,
            0x10, 0x89, 0xC3, 0x81, 0xC3, 0xFC, 0x0F, 0x00, 0x00, 0x8B, 0x13, 0x89, 0x33, 0x83, 0x33, 0xFF,
            0x3B, 0x3B, 0x75, 0x18, 0x83, 0x33, 0xFF, 0x3B, 0x33, 0x75, 0x11, 0x89, 0x13, 0x05, 0x00, 0x10,
            0x00, 0x00, 0x3B, 0x44, 0x24, 0x14, 0x76, 0xD9, 0x5B, 0x5E, 0x5F, 0xC3, 0x89, 0x13, 0x5B, 0x5E,
            0x5F, 0xC3
        }); // rawdata

    // coff relocations
    expected.insert(expected.end(), {
            0x89, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x14, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x09, 0x00,
            0x00, 0x00, 0x14, 0x00, 0xB7, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x14, 0x00
        }); // coff relocations

    expected.insert(expected.end(), {
            0x2E, 0x66, 0x69, 0x6C, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x00, 0x00,
            0x67, 0x01, 0x6E, 0x61, 0x73, 0x6B, 0x66, 0x75, 0x6E, 0x63, 0x2E, 0x6E, 0x61, 0x73, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00
        }); // .file
    expected.insert(expected.end(), {
            0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x03, 0x01, 0x02, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00
        }); // .text
    expected.insert(expected.end(), {
            0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00
        }); // .data
    expected.insert(expected.end(), {
            0x2E, 0x62, 0x73, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
            0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00
        }); // .bss
    expected.insert(expected.end(), {
            0x00, 0x00, 0x00, 0x00, 0xB2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x5F, 0x69, 0x6F, 0x5F, 0x68, 0x6C, 0x74, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x5F, 0x69, 0x6F, 0x5F, 0x63, 0x6C, 0x69, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x5F, 0x69, 0x6F, 0x5F, 0x73, 0x74,
            0x69, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x5F, 0x69,
            0x6F, 0x5F, 0x69, 0x6E, 0x38, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00,
            0x5F, 0x69, 0x6F, 0x5F, 0x69, 0x6E, 0x31, 0x36, 0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x5F, 0x69, 0x6F, 0x5F, 0x69, 0x6E, 0x33, 0x32, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x00, 0x00, 0x02, 0x00, 0x5F, 0x69, 0x6F, 0x5F, 0x6F, 0x75, 0x74, 0x38, 0x26, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x30, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
            0x3B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00,
            0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x33, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x4F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x4F, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x6F, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x00, 0x00, 0x00, 0x7B, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00,
            0x92, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0x00,
            0x00, 0x00, 0xA9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xA5, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0xDC, 0x00,
            0x00, 0x00, 0x5F, 0x69, 0x6F, 0x5F, 0x73, 0x74, 0x69, 0x68, 0x6C, 0x74, 0x00, 0x5F, 0x69, 0x6F,
            0x5F, 0x6F, 0x75, 0x74, 0x31, 0x36, 0x00, 0x5F, 0x69, 0x6F, 0x5F, 0x6F, 0x75, 0x74, 0x33, 0x32,
            0x00, 0x5F, 0x69, 0x6F, 0x5F, 0x6C, 0x6F, 0x61, 0x64, 0x5F, 0x65, 0x66, 0x6C, 0x61, 0x67, 0x73,
            0x00, 0x5F, 0x69, 0x6F, 0x5F, 0x73, 0x74, 0x6F, 0x72, 0x65, 0x5F, 0x65, 0x66, 0x6C, 0x61, 0x67,
            0x73, 0x00, 0x5F, 0x6C, 0x6F, 0x61, 0x64, 0x5F, 0x67, 0x64, 0x74, 0x72, 0x00, 0x5F, 0x6C, 0x6F,
            0x61, 0x64, 0x5F, 0x69, 0x64, 0x74, 0x72, 0x00, 0x5F, 0x6C, 0x6F, 0x61, 0x64, 0x5F, 0x63, 0x72,
            0x30, 0x00, 0x5F, 0x73, 0x74, 0x6F, 0x72, 0x65, 0x5F, 0x63, 0x72, 0x30, 0x00, 0x5F, 0x61, 0x73,
            0x6D, 0x5F, 0x69, 0x6E, 0x74, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x32, 0x31, 0x00, 0x5F,
            0x61, 0x73, 0x6D, 0x5F, 0x69, 0x6E, 0x74, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x32, 0x37,
            0x00, 0x5F, 0x61, 0x73, 0x6D, 0x5F, 0x69, 0x6E, 0x74, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72,
            0x32, 0x63, 0x00, 0x5F, 0x6D, 0x65, 0x6D, 0x74, 0x65, 0x73, 0x74, 0x5F, 0x73, 0x75, 0x62, 0x00,
            0x5F, 0x69, 0x6E, 0x74, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x32, 0x31, 0x00, 0x5F, 0x69,
            0x6E, 0x74, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x32, 0x37, 0x00, 0x5F, 0x69, 0x6E, 0x74,
            0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x32, 0x63, 0x00
        }); // シンボル情報

    // 作成したバイナリの差分assert & diff表示
    ASSERT_PRED_FORMAT2(checkTextF, expected, d->binout_container);
}
