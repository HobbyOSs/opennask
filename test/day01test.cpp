#include "driver.hh"
#include "demangle.hpp"
#include "tinyexpr.h"
#include "spdlog/spdlog.h"

#include <CppUTest/TestHarness.h>
#include <CppUTest/CommandLineTestRunner.h>

auto logger = spdlog::stdout_logger_mt("opennask", "console");

TEST_GROUP(day01_suite)
{

};

TEST(day01_suite, helloos) {

    const char nask_statements[] = R"(
	DB	0xeb, 0x4e, 0x90, 0x48, 0x45, 0x4c, 0x4c, 0x4f
	DB	0x49, 0x50, 0x4c, 0x00, 0x02, 0x01, 0x01, 0x00
	DB	0x02, 0xe0, 0x00, 0x40, 0x0b, 0xf0, 0x09, 0x00
	DB	0x12, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
	DB	0x40, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x29, 0xff
	DB	0xff, 0xff, 0xff, 0x48, 0x45, 0x4c, 0x4c, 0x4f
	DB	0x2d, 0x4f, 0x53, 0x20, 0x20, 0x20, 0x46, 0x41
	DB	0x54, 0x31, 0x32, 0x20, 0x20, 0x20, 0x00, 0x00
	RESB	16
	DB	0xb8, 0x00, 0x00, 0x8e, 0xd0, 0xbc, 0x00, 0x7c
	DB	0x8e, 0xd8, 0x8e, 0xc0, 0xbe, 0x74, 0x7c, 0x8a
	DB	0x04, 0x83, 0xc6, 0x01, 0x3c, 0x00, 0x74, 0x09
	DB	0xb4, 0x0e, 0xbb, 0x0f, 0x00, 0xcd, 0x10, 0xeb
	DB	0xee, 0xf4, 0xeb, 0xfd, 0x0a, 0x0a, 0x68, 0x65
	DB	0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x77, 0x6f, 0x72
	DB	0x6c, 0x64, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00
	RESB	368
	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa
	DB	0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00
	RESB	4600
	DB	0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00
	RESB	1469432
)";

    std::unique_ptr<Driver> d(new Driver(true, true));
    d->Parse<Program>(nask_statements, "test.img");

    std::vector<uint8_t> expected = {};
    std::vector<uint8_t> resb16(16, 0);
	std::vector<uint8_t> resb368(368, 0);
	std::vector<uint8_t> resb4600(4600, 0);
    std::vector<uint8_t> resb1469432(1469432, 0);

    expected.insert(expected.end(), {
            0xeb, 0x4e, 0x90, 0x48, 0x45, 0x4c, 0x4c, 0x4f
            , 0x49, 0x50, 0x4c, 0x00, 0x02, 0x01, 0x01, 0x00
            , 0x02, 0xe0, 0x00, 0x40, 0x0b, 0xf0, 0x09, 0x00
            , 0x12, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
            , 0x40, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x29, 0xff
            , 0xff, 0xff, 0xff, 0x48, 0x45, 0x4c, 0x4c, 0x4f
            , 0x2d, 0x4f, 0x53, 0x20, 0x20, 0x20, 0x46, 0x41
            , 0x54, 0x31, 0x32, 0x20, 0x20, 0x20, 0x00, 0x00});
    expected.insert(expected.end(), std::begin(resb16), std::end(resb16));
    expected.insert(expected.end(), {
            0xb8, 0x00, 0x00, 0x8e, 0xd0, 0xbc, 0x00, 0x7c
            , 0x8e, 0xd8, 0x8e, 0xc0, 0xbe, 0x74, 0x7c, 0x8a
            , 0x04, 0x83, 0xc6, 0x01, 0x3c, 0x00, 0x74, 0x09
            , 0xb4, 0x0e, 0xbb, 0x0f, 0x00, 0xcd, 0x10, 0xeb
            , 0xee, 0xf4, 0xeb, 0xfd, 0x0a, 0x0a, 0x68, 0x65
            , 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x77, 0x6f, 0x72
            , 0x6c, 0x64, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00});
    expected.insert(expected.end(), std::begin(resb368), std::end(resb368));
    expected.insert(expected.end(), {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa
            , 0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00});
    expected.insert(expected.end(), std::begin(resb4600), std::end(resb4600));
    expected.insert(expected.end(), {
            0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00});
    expected.insert(expected.end(), std::begin(resb1469432), std::end(resb1469432));

    CHECK_EQUAL(expected.size(), d->binout_container.size());
    CHECK_TRUE(std::equal(expected.begin(), expected.end(), d->binout_container.begin()));
}

int main(int argc, char** argv) {
    spdlog::set_level(spdlog::level::debug);
    std::vector<const char*> args(argv, argv + argc); // Insert all arguments
    args.push_back("-v"); // Set verbose mode
    args.push_back("-c"); // Set color output (OPTIONAL)

    // Run all tests
    int i = RUN_ALL_TESTS(args.size(), &args[0]);
    return i;
}
